<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SSM整合Redis(二级缓存)错误</title>
      <link href="/2020/11/21/51856.html"/>
      <url>/2020/11/21/51856.html</url>
      
        <content type="html"><![CDATA[<h4><span id="cuo-wu-shuo-ming"><strong>错误说明：</strong></span><a href="#cuo-wu-shuo-ming" class="header-anchor">.</a></h4><blockquote><p>使用Spring、MyBatis、mybatis-redis(含Cache实现) 整合Redis做二级缓存时，启动测试类，所报的错</p></blockquote><h4><span id="cuo-wu-ru-xia-zhi-liu-xia-guan-jian-bu-fen"><strong>错误如下（只留下关键部分）：</strong></span><a href="#cuo-wu-ru-xia-zhi-liu-xia-guan-jian-bu-fen" class="header-anchor">.</a></h4><blockquote><p>从以下错误日志信息，简单可以知道，①Redis连接超时，②连接不上本地主机:6379（关键，我使用的是远程的Redis，不是本地），③不能获取连接池…</p></blockquote><pre><code>=======================start===========================查询所有的书籍: Creating a new SqlSessionSqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@73ff4fae] was not registered for synchronization because synchronization is not activeClosing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@73ff4fae]org.mybatis.spring.MyBatisSystemException: nested exception is org.apache.ibatis.exceptions.PersistenceException: ### Error querying database.  Cause: redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool### Cause: redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the poolCaused by: org.apache.ibatis.exceptions.PersistenceException: ### Error querying database.  Cause: redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the pool### Cause: redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the poolCaused by: redis.clients.jedis.exceptions.JedisConnectionException: Could not get a resource from the poolCaused by: redis.clients.jedis.exceptions.JedisConnectionException: Failed connecting to host localhost:6379Caused by: java.net.SocketTimeoutException: connect timed outProcess finished with exit code -1</code></pre><h4><span id="jie-jue-liu-cheng"><strong>解决流程：</strong></span><a href="#jie-jue-liu-cheng" class="header-anchor">.</a></h4><p>①首先，对Redis连接超时问题（全程网络连接正常），进行分析</p><blockquote><p>连接超时，多半是我配置文件时间，超时设置少了；但是我的配置文件中，超时时间设置为10s，所以不可能是时间设置问题</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201121022642.png" alt></p><blockquote><p>写一个测试类，去测试是否能够连接Redis；测试结果是可以连接到Redis，连接上没问题</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201121022714.png" alt></p><blockquote><p>前两个都不是，暂时也就只能看 ② 连接不上本地主机:6379；因为我的Redis是在服务器上搭建的，问题应该就是在RedisCache使用的配置信息上，废话不多说，直接断点调试；最后发现问题出在，redis.properties中key的命名上，必须<strong>保证其命名与 RedisConfig类属性命名一致</strong>，否则返回一个默认的Redis配置信息用于连接Redis服务</p></blockquote><p>下面是调试过程，最后断点位置发现 <code>metaCache.hasSetter(name)</code>始终返回的是false，导致无法将redis.properties文件内容，写入到jedisConfig这个对象</p><p><strong>RedisCache类构造器（解析配置信息parseConfiguration）</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201121022720.png" alt></p><p><strong>设置配置属性</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201121022727.png" alt></p><hr><p><strong>断点调试（最终问题出处）</strong></p><blockquote><p>redis.properties文件内容中key，与RedisConfig属性不符合，导致直接跳过下面第5行代码块</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201121022733.png" alt></p><p><strong>RedisConfig属性截图：</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201121022739.png" alt></p><h4><span id="jie-jue-fang-an">解决方案：</span><a href="#jie-jue-fang-an" class="header-anchor">.</a></h4><blockquote><p>需保证redis.properties文件中的key与RedisConfig类的属性名对应，即配置文件修改如下</p></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#redis的服务器地址</span><span class="token attr-name">host</span><span class="token punctuation">=</span><span class="token attr-value">...</span><span class="token comment" spellcheck="true">#redis的服务端口</span><span class="token attr-name">port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token comment" spellcheck="true">#链接数据库</span><span class="token attr-name">database</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true">#redis连接密码</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token attr-value">...</span><span class="token comment" spellcheck="true">#客户端超时时间单位是毫秒</span><span class="token attr-name">connectionTimeout</span><span class="token punctuation">=</span><span class="token attr-value">10000</span><span class="token comment" spellcheck="true">#最大连接数</span><span class="token attr-name">maxTotal</span><span class="token punctuation">=</span><span class="token attr-value">100</span><span class="token comment" spellcheck="true">#最大空闲数</span><span class="token attr-name">maxIdle</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token comment" spellcheck="true">#最小空闲数</span><span class="token attr-name">minIdle</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true">#最大建立连接等待时间</span><span class="token attr-name">maxWaitMills</span><span class="token punctuation">=</span><span class="token attr-value">2000</span><span class="token comment" spellcheck="true">#指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个</span><span class="token attr-name">testOnBorrow</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#当调用return Object方法时，进行有效性检查</span><span class="token attr-name">testOnReturn</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM使用Redis做二级缓存(mybatis-redis)</title>
      <link href="/2020/11/20/1321.html"/>
      <url>/2020/11/20/1321.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>目的：使用Redis做MyBatis的二级缓存提高查询速度</p></blockquote><p>参考文献：</p><p><a href="https://blog.csdn.net/xushiyu1996818/article/details/89215428" target="_blank" rel="noopener">https://blog.csdn.net/xushiyu1996818/article/details/89215428</a></p><p><a href="https://blog.51cto.com/zhengqidaxia/1960256" target="_blank" rel="noopener">https://blog.51cto.com/zhengqidaxia/1960256</a></p><p><strong>步骤小结</strong></p><ol><li>导入依赖</li><li>mybatis-config.xml中开启缓存</li><li>在Mapper.xml中设置二级缓存</li><li>其他（其他文件的编写）</li><li>测试</li></ol><h4><span id="1-chuang-jian-yi-ge-kong-de-maven-xiang-mu">1、创建一个空的Maven项目</span><a href="#1-chuang-jian-yi-ge-kong-de-maven-xiang-mu" class="header-anchor">.</a></h4><p>略</p><p><strong>目录结构如下</strong></p><p><img src="/2020/11/20/1321/image-20201121102238565.png" alt></p><h4><span id="2-dao-ru-yi-lai">2、导入依赖</span><a href="#2-dao-ru-yi-lai" class="header-anchor">.</a></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- mybatis-redis cache实现 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.caches<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0.0-beta2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- redis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- mybatis --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- mybatis整合spring --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 连接池 druid --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.23<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- mysql-connector --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- springmvc --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- spring-jdbc --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- lombok 需要安装插件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- test --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jackson --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="3-ji-ge-pei-zhi-wen-jian-nei-rong">3、几个配置文件内容</span><a href="#3-ji-ge-pei-zhi-wen-jian-nei-rong" class="header-anchor">.</a></h4><p><code>mybatis-config.xml</code></p><blockquote><p>在该文件中开启缓存</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 全局配置 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 开启日志 --></span><span class="token comment" spellcheck="true">&lt;!--        &lt;setting name="logImpl" value="LOG4J"/>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 开启驼峰和下滑线的命名转换 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 开启缓存 必须 同时 在 mapper.xml 使用缓存 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>spring-mybatis.xml</code></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.关联数据库配置文件 配置文件名为 db.properties --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;context:property-placeholder location="classpath:db.properties"/>--></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.配置数据源 --></span>    <span class="token comment" spellcheck="true">&lt;!-- druid --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.alibaba.druid.pool.DruidDataSource<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>close<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 基本属性 url、user、password--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClassName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置初始化大小、最小、最大--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxActive<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>initialSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置获取连接等待超时的时间--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWait<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeBetweenEvictionRunsMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置一个连接在池中最小生存的时间，单位是毫秒--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minEvictableIdleTimeMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>300000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testWhileIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnReturn<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 打开PSCache，并且指定每个连接上、PSCache的大小--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolPreparedStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxOpenPreparedStatements<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>filters<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stat<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.sqlSessionFactory --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    &lt;bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 绑定mybatis-config.xml 文件 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis/mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 绑定 com.liuyou.blog.***Mapper.xml 取代mybatis-config.xml中的&lt;mapper>标签作用 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapperLocations<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mapper/*.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 指定别名 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>typeAliasesPackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.配置dao(mapper)接口扫描,即Mapper扫描器，动态的实现了Dao接口可以注入到spring容器中 == 代替了实现类 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注入 sqlSessionFactory--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 要扫描的dao包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>applicationContext.xml</code></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>aop</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/aop<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 加载配置文件 --></span><span class="token comment" spellcheck="true">&lt;!--    &lt;context:property-placeholder location="classpath:*.properties"/>--></span>    <span class="token comment" spellcheck="true">&lt;!-- 加载配置文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:db.properties,redis.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 导入spring配置文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring/spring-mybatis.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>db.properties</code></p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 驱动</span><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token comment" spellcheck="true"># url 数据库 为 liuyou_blog 可自行修改</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/ssmbuild?useSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=GMT%2B8</span><span class="token comment" spellcheck="true"># 用户名</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token comment" spellcheck="true"># 密码</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>redis.properties</code></p><blockquote><p>必须保证 配置文件名是 <code>redis.properties</code>，以及其内容中key满足 <code>org.mybatis.caches.redis.RedisConfig</code>属性名对应（包含其父类的属性名）</p></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#redis的服务器地址 ip地址</span><span class="token attr-name">host</span><span class="token punctuation">=</span><span class="token attr-value">...</span><span class="token comment" spellcheck="true">#redis的服务端口</span><span class="token attr-name">port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token comment" spellcheck="true">#链接数据库</span><span class="token attr-name">database</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment" spellcheck="true">#redis验证密码 没有就不用配置</span><span class="token attr-name">password</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true">#客户端超时时间单位是毫秒</span><span class="token attr-name">connectionTimeout</span><span class="token punctuation">=</span><span class="token attr-value">10000</span><span class="token comment" spellcheck="true">#最大连接数</span><span class="token attr-name">maxTotal</span><span class="token punctuation">=</span><span class="token attr-value">100</span><span class="token comment" spellcheck="true">#最大空闲数</span><span class="token attr-name">maxIdle</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token comment" spellcheck="true">#最小空闲数</span><span class="token attr-name">minIdle</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment" spellcheck="true">#最大建立连接等待时间</span><span class="token attr-name">maxWaitMills</span><span class="token punctuation">=</span><span class="token attr-value">2000</span><span class="token comment" spellcheck="true">#指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个</span><span class="token attr-name">testOnBorrow</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true">#当调用return Object方法时，进行有效性检查</span><span class="token attr-name">testOnReturn</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-shi-ti-lei-mapper-jie-kou-ji-mapper-xml">4、实体类、Mapper接口及Mapper.xml</span><a href="#4-shi-ti-lei-mapper-jie-kou-ji-mapper-xml" class="header-anchor">.</a></h4><p><code>Books</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Books</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>4420834025097707421L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer bookID<span class="token punctuation">;</span>    <span class="token keyword">private</span> String bookName<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer bookCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> String detail<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>BooksMapper</code></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BooksMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//add a book</span>    <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//delete a book</span>    <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//update a book</span>    <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//queryAll</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>BooksMapper.xml</code></p><blockquote><p>在该文件中设置缓存</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapper.BooksMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--在当前Mapper.xml中使用二级缓存--></span>    <span class="token comment" spellcheck="true">&lt;!--        eviction LRU(默认) 缓存淘汰策略            LRU – 最近最少使用的:移除最长时间不被使用的对象。            FIFO – 先进先出:按对象进入缓存的顺序来移除它们。            SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。            WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。        flushInterval 缓存时间，以毫秒为单位，默认情况是不设置,也就是没有刷新间隔,缓存仅仅调用语句时刷新。        size 缓存大小，每个缓存可以存储 1024(默认) 个列表或对象的引用        readOnly 是否是只读的，只读的缓存会给所有调用者返回缓存对象的相同实例。因此这些对象不能被修改。这提供了很重要的性能优势。可读写的缓存会返回缓存对象的拷贝(通过序列化) 。这会慢一些,但是安全,因此默认是false。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span>           <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.caches.redis.RedisCache<span class="token punctuation">"</span></span>           <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>120000<span class="token punctuation">"</span></span>           <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1024<span class="token punctuation">"</span></span>           <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--         useCache表示是否需要使用缓存        flushCache表示插入后是否需要刷新缓存        以下是默认情况：            &lt;select ... flushCache="false" useCache="true"/>            &lt;insert ... flushCache="true"/>            &lt;update ... flushCache="true"/>            &lt;delete ... flushCache="true"/>    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        insert into ssmbuild.books(bookName, bookCounts, detail)            value(#{bookName},#{bookCounts},#{detail});    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteBookById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        delete from ssmbuild.books where bookID = #{bookID};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        update ssmbuild.books        set bookName = #{bookName},            bookCounts = #{bookCounts},            detail = #{detail}        where bookID=#{bookID};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryAll<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select *        from books;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="5-ce-shi-ji-jie-guo">5、测试及结果</span><a href="#5-ce-shi-ji-jie-guo" class="header-anchor">.</a></h4><p><strong>测试</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestMyBatis</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    BooksMapper booksMapper<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"=======================start==========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"查询所有的书籍: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token operator">+</span>booksMapper<span class="token punctuation">.</span><span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"再次查询所有的书籍: Redis做二级缓存"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token operator">+</span>booksMapper<span class="token punctuation">.</span><span class="token function">queryAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"========================end=========================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><blockquote><p>第一次查询，缓存命中率：0，没命中缓存，从数据库中拿数据</p><p>第二次查询，缓存命中率：0.5，命中缓存，从缓存中拿数据</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>start<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>查询所有的书籍<span class="token operator">:</span> Creating a <span class="token keyword">new</span> <span class="token class-name">SqlSession</span>SqlSession <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>DefaultSqlSession<span class="token annotation punctuation">@1722011b</span><span class="token punctuation">]</span> was not registered <span class="token keyword">for</span> synchronization because synchronization is not activeCache Hit Ratio <span class="token punctuation">[</span>mapper<span class="token punctuation">.</span>BooksMapper<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">0.0</span>  <span class="token comment" spellcheck="true">// 第一次，缓存命中率 0</span>JDBC Connection <span class="token punctuation">[</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>proxy<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>ConnectionProxyImpl<span class="token annotation punctuation">@352c1b98</span><span class="token punctuation">]</span> will not be managed by Spring<span class="token operator">==</span><span class="token operator">></span>  Preparing<span class="token operator">:</span> select <span class="token operator">*</span> from books<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行sql语句</span><span class="token operator">==</span><span class="token operator">></span> Parameters<span class="token operator">:</span> <span class="token operator">&lt;=</span><span class="token operator">=</span>    Columns<span class="token operator">:</span> bookID<span class="token punctuation">,</span> bookName<span class="token punctuation">,</span> bookCounts<span class="token punctuation">,</span> detail<span class="token operator">&lt;=</span><span class="token operator">=</span>        Row<span class="token operator">:</span> <span class="token number">74</span><span class="token punctuation">,</span> test<span class="token operator">-</span>spring<span class="token operator">-</span>mybatis<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> spring整合mybatis<span class="token operator">&lt;=</span><span class="token operator">=</span>      Total<span class="token operator">:</span> <span class="token number">1</span>Closing non transactional SqlSession <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>DefaultSqlSession<span class="token annotation punctuation">@1722011b</span><span class="token punctuation">]</span>first<span class="token punctuation">[</span><span class="token function">Books</span><span class="token punctuation">(</span>bookID<span class="token operator">=</span><span class="token number">74</span><span class="token punctuation">,</span> bookName<span class="token operator">=</span>test<span class="token operator">-</span>spring<span class="token operator">-</span>mybatis<span class="token punctuation">,</span> bookCounts<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> detail<span class="token operator">=</span>spring整合mybatis<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 查询结果(从数据库中获取)</span>再次查询所有的书籍<span class="token operator">:</span> Redis做二级缓存Creating a <span class="token keyword">new</span> <span class="token class-name">SqlSession</span>SqlSession <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>DefaultSqlSession<span class="token annotation punctuation">@ae3540e</span><span class="token punctuation">]</span> was not registered <span class="token keyword">for</span> synchronization because synchronization is not activeCache Hit Ratio <span class="token punctuation">[</span>mapper<span class="token punctuation">.</span>BooksMapper<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">0.5</span> <span class="token comment" spellcheck="true">// 第二次，缓存命中率 0.5(以命中)</span>Closing non transactional SqlSession <span class="token punctuation">[</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>session<span class="token punctuation">.</span>defaults<span class="token punctuation">.</span>DefaultSqlSession<span class="token annotation punctuation">@ae3540e</span><span class="token punctuation">]</span>second<span class="token punctuation">[</span><span class="token function">Books</span><span class="token punctuation">(</span>bookID<span class="token operator">=</span><span class="token number">74</span><span class="token punctuation">,</span> bookName<span class="token operator">=</span>test<span class="token operator">-</span>spring<span class="token operator">-</span>mybatis<span class="token punctuation">,</span> bookCounts<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span> detail<span class="token operator">=</span>spring整合mybatis<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">// 查询结果(从缓存中获取)</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>end<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="kuo-zhan">扩展</span><a href="#kuo-zhan" class="header-anchor">.</a></h4><h5><span id="redisconfig-suo-you-shu-xing-han-fu-lei">RedisConfig所有属性（含父类）</span><a href="#redisconfig-suo-you-shu-xing-han-fu-lei" class="header-anchor">.</a></h5><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">host</span> <span class="token punctuation">=</span> <span class="token attr-value">""</span><span class="token attr-name">port</span> <span class="token punctuation">=</span> <span class="token attr-value">6379</span><span class="token attr-name">connectionTimeout</span> <span class="token punctuation">=</span> <span class="token attr-value">10000</span><span class="token attr-name">soTimeout</span> <span class="token punctuation">=</span> <span class="token attr-value">2000</span><span class="token attr-name">password</span> <span class="token punctuation">=</span> <span class="token attr-value">""</span><span class="token attr-name">database</span> <span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token attr-name">clientName</span> <span class="token punctuation">=</span> <span class="token attr-value">null</span><span class="token attr-name">maxTotal</span> <span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token attr-name">maxIdle</span> <span class="token punctuation">=</span> <span class="token attr-value">20</span><span class="token attr-name">minIdle</span> <span class="token punctuation">=</span> <span class="token attr-value">1</span><span class="token attr-name">lifo</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">fairness</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token attr-name">maxWaitMillis</span> <span class="token punctuation">=</span> <span class="token attr-value">-1</span><span class="token attr-name">minEvictableIdleTimeMillis</span> <span class="token punctuation">=</span> <span class="token attr-value">60000</span><span class="token attr-name">evictorShutdownTimeoutMillis</span> <span class="token punctuation">=</span> <span class="token attr-value">10000</span><span class="token attr-name">softMinEvictableIdleTimeMillis</span> <span class="token punctuation">=</span> <span class="token attr-value">-1</span><span class="token attr-name">numTestsPerEvictionRun</span> <span class="token punctuation">=</span> <span class="token attr-value">-1</span><span class="token attr-name">evictionPolicy</span> <span class="token punctuation">=</span> <span class="token attr-value">null</span><span class="token attr-name">evictionPolicyClassName</span> <span class="token punctuation">=</span> <span class="token attr-value">"org.apache.commons.pool2.impl.DefaultEvictionPolicy"</span><span class="token attr-name">testOnCreate</span> <span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token attr-name">testOnBorrow</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">testOnReturn</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">testWhileIdle</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">timeBetweenEvictionRunsMillis</span> <span class="token punctuation">=</span> <span class="token attr-value">30000</span><span class="token attr-name">blockWhenExhausted</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">jmxEnabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token attr-name">jmxNamePrefix</span> <span class="token punctuation">=</span> <span class="token attr-value">"pool"</span><span class="token attr-name">jmxNameBase</span> <span class="token punctuation">=</span> <span class="token attr-value">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SSM </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合Redis报错</title>
      <link href="/2020/11/20/36152.html"/>
      <url>/2020/11/20/36152.html</url>
      
        <content type="html"><![CDATA[<p><strong>报错内容</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">[</span>WARN<span class="token punctuation">]</span><span class="token punctuation">[</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>support<span class="token punctuation">.</span>XmlWebApplicationContext<span class="token punctuation">]</span><span class="token operator">-</span>Exception encountered during context initialization <span class="token operator">-</span> cancelling refresh attempt<span class="token operator">:</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>BeanCreationException<span class="token operator">:</span> Error creating bean with name <span class="token string">'sqlSessionFactory'</span> defined in <span class="token keyword">class</span> <span class="token class-name">path</span> resource <span class="token punctuation">[</span>spring<span class="token operator">/</span>spring<span class="token operator">-</span>mybatis<span class="token punctuation">.</span>xml<span class="token punctuation">]</span><span class="token operator">:</span> Initialization of bean failed<span class="token punctuation">;</span> nested exception is java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NoSuchMethodError<span class="token operator">:</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>AopProxyUtils<span class="token punctuation">.</span><span class="token function">getSingletonTarget</span><span class="token punctuation">(</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span><span class="token punctuation">)</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span><span class="token punctuation">[</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">{</span>dataSource<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span> closing <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">[</span>INFO<span class="token punctuation">]</span><span class="token punctuation">[</span>com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>druid<span class="token punctuation">.</span>pool<span class="token punctuation">.</span>DruidDataSource<span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">{</span>dataSource<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">}</span> closed<span class="token punctuation">[</span>ERROR<span class="token punctuation">]</span><span class="token punctuation">[</span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ContextLoader<span class="token punctuation">]</span><span class="token operator">-</span>Context initialization failedorg<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>BeanCreationException<span class="token operator">:</span> Error creating bean with name <span class="token string">'sqlSessionFactory'</span> defined in <span class="token keyword">class</span> <span class="token class-name">path</span> resource <span class="token punctuation">[</span>spring<span class="token operator">/</span>spring<span class="token operator">-</span>mybatis<span class="token punctuation">.</span>xml<span class="token punctuation">]</span><span class="token operator">:</span> Initialization of bean failed<span class="token punctuation">;</span> nested exception is java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NoSuchMethodError<span class="token operator">:</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span>AopProxyUtils<span class="token punctuation">.</span><span class="token function">getSingletonTarget</span><span class="token punctuation">(</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span><span class="token punctuation">)</span>Ljava<span class="token operator">/</span>lang<span class="token operator">/</span>Object<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>具体情况</strong></p><p>昨天使用SSM整合Redis，发现突然一直报该错</p><p><code>BeanCreationException: Error creating bean with name &#39;sqlSessionFactory&#39; defined in class path resource</code> </p><p><code>java.lang.NoSuchMethodError: org.springframework.aop.framework.AopProxyUtils.getSingletonTarget(Ljava/lang/Object;)Ljava/lang/Object;</code></p><p><strong>解决方案</strong></p><p>NoSuchMethodError：<a href="https://blog.csdn.net/wypblog/article/details/102951861" target="_blank" rel="noopener">https://blog.csdn.net/wypblog/article/details/102951861</a></p><p>错误原因：应用程序直接或间接依赖了同一个类的多个版本，并且在运行时执行了缺少方法的版本。</p><p>1.首先：我们先通过该路径查看是否存在该方法</p><blockquote><p>从下图看到它是存在的</p></blockquote><p><img src="/2020/11/20/36152/image-20201120200452760.png" alt></p><p>2.再看输出目录详情</p><blockquote><p>果然问题出在应用程序直接或间接依赖了同一个类的多个版本</p></blockquote><p><img src="/2020/11/20/36152/wps1.jpg" alt="img"></p><p>3.将spring版版本改为5.2.9.RELEASE（spring-data-redis对应依赖版本），删除输出目录Target，重启项目，恢复正常</p><p><img src="/2020/11/20/36152/image-20201120203314563.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SSM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring5简单整合Redis(单机)</title>
      <link href="/2020/11/20/64049.html"/>
      <url>/2020/11/20/64049.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>以下使用的是配置文件整合（单机Redis）</p></blockquote><p>整合的版本，spring5.2.7 + Redis客户端Jedis3.1.0 + Redis6.0.6</p><h4><span id="1-chuang-jian-xin-de-maven-kong-xiang-mu">1、创建新的maven空项目</span><a href="#1-chuang-jian-xin-de-maven-kong-xiang-mu" class="header-anchor">.</a></h4><p>略</p><p><strong>目录结构</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201120194835.png" alt="目录结构"></p><h3><span id="2-dao-ru-yi-lai">2、导入依赖</span><a href="#2-dao-ru-yi-lai" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spring.version</span><span class="token punctuation">></span></span>5.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spring.version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- springmvc --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- lombok 需要导入插件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.16<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- test --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.13<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>${spring.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- jackson --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-annotations<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.11.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- redis --></span>    <span class="token comment" spellcheck="true">&lt;!-- spring-data-redis --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.3.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- redis客户端 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-chuang-jian-redis-properties">3、创建<code>redis.properties</code></span><a href="#3-chuang-jian-redis-properties" class="header-anchor">.</a></h3><blockquote><p>文件内容如下</p></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">redis.host</span><span class="token punctuation">=</span><span class="token attr-value">ip地址</span><span class="token attr-name">redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379 # 默认端口</span><span class="token attr-name">redis.password</span><span class="token punctuation">=</span><span class="token attr-value">你的Redis设置的密码 如果没有就不必设置</span><span class="token attr-name">redis.timeout</span><span class="token punctuation">=</span><span class="token attr-value">2000</span><span class="token attr-name">redis.pool.maxTotal</span><span class="token punctuation">=</span><span class="token attr-value">100</span><span class="token attr-name">redis.pool.maxIdle</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token attr-name">redis.pool.maxWaitMills</span><span class="token punctuation">=</span><span class="token attr-value">2000</span><span class="token attr-name">redis.pool.testOnBorrow</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-bian-xie-applicationcontext-xml">4、编写 <code>applicationContext.xml</code></span><a href="#4-bian-xie-applicationcontext-xml" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redis.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPoolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redis.clients.jedis.JedisPoolConfig<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 最小维持连接数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxIdle<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.pool.maxIdle}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 最大可用连接数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxTotal<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.pool.maxTotal}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 最大等待连接数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxWaitMillis<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.pool.maxWaitMills}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 可用连接 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testOnBorrow<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.pool.testOnBorrow}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.connection.jedis.JedisConnectionFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>poolConfig<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jedisPoolConfig<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hostName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.host}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>timeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${redis.timeout}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>redisTemplate<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.core.RedisTemplate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>connectionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>valueSerializer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--            &lt;bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stringSerializer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token comment" spellcheck="true">&lt;!--            &lt;bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keySerializer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.serializer.StringRedisSerializer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hashKeySerializer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.data.redis.serializer.StringRedisSerializer<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="5-bian-xie-shi-ti-lei-user">5、编写实体类 <code>User</code></span><a href="#5-bian-xie-shi-ti-lei-user" class="header-anchor">.</a></h3><blockquote><p>需要序列化</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>6954400516630825467L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="6-bian-xie-ce-shi-lei">6、编写测试类</span><a href="#6-bian-xie-ce-shi-lei" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span>SpringJUnit4ClassRunner<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@ContextConfiguration</span><span class="token punctuation">(</span><span class="token string">"classpath:applicationContext.xml"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestRedis</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ValueOperations<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> str <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"spring5"</span><span class="token punctuation">,</span><span class="token string">"redis6"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"spring5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>测试结果</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201120194734.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201120194717.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 使用教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> SSM </tag>
            
            <tag> 整合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis启动苦逼错误</title>
      <link href="/2020/11/16/50242.html"/>
      <url>/2020/11/16/50242.html</url>
      
        <content type="html"><![CDATA[<h3><span id="cuo-wu-xiang-qing">错误详情</span><a href="#cuo-wu-xiang-qing" class="header-anchor">.</a></h3><blockquote><p>由于使用kill -9 杀死redis服务进程，导致服务无法启动（active (exited)），头疼</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@liuyou log<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl start redis_6379</span><span class="token punctuation">[</span>root@liuyou log<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># systemctl status redis_6379</span>● redis_6379.service - LSB: start and stop redis_6379   Loaded: loaded <span class="token punctuation">(</span>/etc/rc.d/init.d/redis_6379<span class="token punctuation">;</span> bad<span class="token punctuation">;</span> vendor preset: disabled<span class="token punctuation">)</span>   Active: active <span class="token punctuation">(</span>exited<span class="token punctuation">)</span> since Mon 2020-11-16 16:36:55 CST<span class="token punctuation">;</span> 3min 20s ago     Docs: man:systemd-sysv-generator<span class="token punctuation">(</span>8<span class="token punctuation">)</span>  Process: 1243 ExecStop<span class="token operator">=</span>/etc/rc.d/init.d/redis_6379 stop <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, status<span class="token operator">=</span>0/SUCCESS<span class="token punctuation">)</span>  Process: 1246 ExecStart<span class="token operator">=</span>/etc/rc.d/init.d/redis_6379 start <span class="token punctuation">(</span>code<span class="token operator">=</span>exited, status<span class="token operator">=</span>0/SUCCESS<span class="token punctuation">)</span>Nov 16 16:36:55 liuyou systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Stopped LSB: start and stop redis_6379.Nov 16 16:36:55 liuyou systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Starting LSB: start and stop redis_6379<span class="token punctuation">..</span>.Nov 16 16:36:55 liuyou redis_6379<span class="token punctuation">[</span>1246<span class="token punctuation">]</span>: Starting Redis server<span class="token punctuation">..</span>.Nov 16 16:36:55 liuyou systemd<span class="token punctuation">[</span>1<span class="token punctuation">]</span>: Started LSB: start and stop redis_6379.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">可以使用redis-server /etc/redis/6379.conf启动or<span class="token function">shutdown</span> -r now 软重启让系统自动恢复<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在linux系统中，配置tomcat快捷方式过程中报错-Neither the JAVA_HOME nor the JRE_HOME environment variable is defined At least one of these environment variable is needed to run this program</title>
      <link href="/2020/11/11/43911.html"/>
      <url>/2020/11/11/43911.html</url>
      
        <content type="html"><![CDATA[<h3><span id="zai-linux-xi-tong-zhong-pei-zhi-tomcat-kuai-jie-fang-shi-guo-cheng-zhong-bao-cuo">在linux系统中，配置tomcat快捷方式过程中报错</span><a href="#zai-linux-xi-tong-zhong-pei-zhi-tomcat-kuai-jie-fang-shi-guo-cheng-zhong-bao-cuo" class="header-anchor">.</a></h3><h4><span id="bao-cuo-nei-rong-ru-xia"><strong>报错内容如下：</strong></span><a href="#bao-cuo-nei-rong-ru-xia" class="header-anchor">.</a></h4><blockquote><p>Neither the JAVA_HOME nor the JRE_HOME environment variable is defined，At least one of these environment variable is needed to run this program</p></blockquote><p>大致说，需要配置JAVA_HOME 和 JRE_HOME两个环境，在tomcat中（由于tomcat是新安装的）</p><p><strong>这个是在配置快捷启动tomcat是产生的错误（后面有快捷启动的配置步骤）</strong></p><p><img src="/2020/11/11/43911/image-20201111221858090.png" alt></p><h4><span id="jie-jue-fang-an"><strong>解决方案：</strong></span><a href="#jie-jue-fang-an" class="header-anchor">.</a></h4><blockquote><p>cd 到tomcat安装目录下bin，vim setclasspath.sh，添加如下两行（保证JAVA_HOME和JRE_HOME是自己正确的java路径）</p></blockquote><p><img src="/2020/11/11/43911/image-20201111220813677.png" alt></p><h3><span id="tuo-zhan">拓展：</span><a href="#tuo-zhan" class="header-anchor">.</a></h3><h4><span id="tomcat-pei-zhi-kuai-jie-qi-dong-he-guan-bi">tomcat配置快捷启动和关闭</span><a href="#tomcat-pei-zhi-kuai-jie-qi-dong-he-guan-bi" class="header-anchor">.</a></h4><h5><span id="1-cd-dao-etc-rc-d-init-d-mu-lu-xia-cao-zuo-ru-xia-tu">1.cd 到 /etc/rc.d/init.d/目录下，操作如下图</span><a href="#1-cd-dao-etc-rc-d-init-d-mu-lu-xia-cao-zuo-ru-xia-tu" class="header-anchor">.</a></h5><p><img src="/2020/11/11/43911/image-20201111221249573.png" alt></p><h5><span id="2-vim-tomcat-fu-zhi-ru-xia-nei-rong-dao-gai-wen-jian-zhong">2.vim tomcat，复制如下内容到该文件中</span><a href="#2-vim-tomcat-fu-zhi-ru-xia-nei-rong-dao-gai-wen-jian-zhong" class="header-anchor">.</a></h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment" spellcheck="true">#chkconfig:- 20 90</span><span class="token comment" spellcheck="true">#description:tomcat</span><span class="token comment" spellcheck="true">#processname:tomcat</span>TOMCAT_HOME<span class="token operator">=</span>/usr/local/tomcat/apache-tomcat-8.5.55<span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span> start<span class="token punctuation">)</span> <span class="token variable">$TOMCAT_HOME</span>/bin/startup.sh<span class="token punctuation">;</span><span class="token punctuation">;</span> stop<span class="token punctuation">)</span> <span class="token variable">$TOMCAT_HOME</span>/bin/shutdown.sh<span class="token punctuation">;</span><span class="token punctuation">;</span> *<span class="token punctuation">)</span> <span class="token keyword">echo</span> <span class="token string">"require start|stop"</span> <span class="token punctuation">;</span><span class="token punctuation">;</span>esac<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="3-ce-shi">3.测试</span><a href="#3-ce-shi" class="header-anchor">.</a></h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">service</span> tomcat start <span class="token comment" spellcheck="true"># 开启tomcat</span><span class="token function">service</span> tomcat stop <span class="token comment" spellcheck="true"># 关闭tomcat</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/11/11/43911/image-20201111221827244.png" alt></p><h5><span id="4-tomcat-jia-ru-kai-ji-zi-qi">4.tomcat加入开机自启</span><a href="#4-tomcat-jia-ru-kai-ji-zi-qi" class="header-anchor">.</a></h5><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">chkconfig</span> --add tomcat<span class="token function">chkconfig</span> tomcat on<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tomcat </tag>
            
            <tag> 报错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学习GitHub看这一篇就够了</title>
      <link href="/2020/11/07/44409.html"/>
      <url>/2020/11/07/44409.html</url>
      
        <content type="html"><![CDATA[<h3><span id="github-xue-xi-bi-ji">GitHub学习笔记</span><a href="#github-xue-xi-bi-ji" class="header-anchor">.</a></h3><blockquote><p>之前对git学习只是简单的了解了下命令，但是很容易就忘记，因此写下这篇文章记录下git学习过程以及实践</p></blockquote><h2><span id="yi-shi-me-shi-github">一、什么是GitHub</span><a href="#yi-shi-me-shi-github" class="header-anchor">.</a></h2><p>GitHub 是<strong>为开发者提供 Git 仓库的托管服务</strong>。这是一个让开发者与</p><p>朋友、同事、同学及陌生人共享代码的完美场所。</p><blockquote><p>Git：<strong>一个开源的分布式<mark>版本控制系统</mark>，用于敏捷高效地处理任何或小或大的项目。</strong> GitHub 是 在网络上提供Git仓库的一项服务。</p></blockquote><p><img src="/2020/11/07/44409/1352126739_7909.jpg" alt></p><h3><span id="1-zhu-yao-gong-neng">1、主要功能</span><a href="#1-zhu-yao-gong-neng" class="header-anchor">.</a></h3><h4><span id="git-cang-ku">Git 仓库</span><a href="#git-cang-ku" class="header-anchor">.</a></h4><p>我们可以免费建立任意个 GitHub 提供的 Git 仓库，但如果是私有仓库，需要花钱。</p><h4><span id="issue">Issue</span><a href="#issue" class="header-anchor">.</a></h4><p>将一个任务或问题分配给一个 Issue 进行追踪和管理的功能</p><h4><span id="wiki">Wiki</span><a href="#wiki" class="header-anchor">.</a></h4><p>通过 Wiki 功能，任何人都能随时对一篇文章进行更改并保存，因此可以多人共同完成一篇文章。该功能常用在开发文档或手册的编写中。</p><h4><span id="pull-request">Pull Request</span><a href="#pull-request" class="header-anchor">.</a></h4><p>开发者向 GitHub 的仓库推送更改或功能添加后，可以通过 Pull Request 功能向别人的仓库提出申请，请求对方合并。</p><h4><span id="follow">Follow</span><a href="#follow" class="header-anchor">.</a></h4><p>关注其他开发者，你所 Follow 的用户的活动就会显示在您的控制面板页面中。</p><h4><span id="watch">Watch</span><a href="#watch" class="header-anchor">.</a></h4><p>也可以获取别人项目最新的信息</p><h2><span id="er-git">二、Git</span><a href="#er-git" class="header-anchor">.</a></h2><blockquote><p>Git 属于<strong><mark>分散型</mark>版本管理系统</strong>，是为版本管理而设计的软件。</p></blockquote><h3><span id="1-dan-sheng-bei-jing">1、诞生背景</span><a href="#1-dan-sheng-bei-jing" class="header-anchor">.</a></h3><ul><li>Linux 的创始人 Linus Torvalds 在 2005 年开发了 Git 的原型程序。由于在 Linux 内核开发中使用的既有版本管理系统的开发方许可证发生了变更，为了更换新的版本管理系统，Torvalds 开发了 Git。</li></ul><h3><span id="2-shi-me-shi-ban-ben-kong-zhi">2、什么是版本控制</span><a href="#2-shi-me-shi-ban-ben-kong-zhi" class="header-anchor">.</a></h3><blockquote><p>版本管理就是管理更新的历史记录。(记录一款软件添加或更改源代码的过</p><p>程，回滚到特定阶段，恢复误删除的文件等)</p></blockquote><h4><span id="ban-ben-kong-zhi-xi-tong-de-fen-lei">版本控制系统的分类：</span><a href="#ban-ben-kong-zhi-xi-tong-de-fen-lei" class="header-anchor">.</a></h4><ol><li><p><strong>集中型（Subversion）</strong></p><blockquote><p>将仓库集中存放在服务器之中，所以只存在一个仓库。</p></blockquote><p><img src="/2020/11/07/44409/image-20201107141910632.png" alt="集中型"></p><ul><li>优点：<ul><li>在同一服务器上，便于管理</li></ul></li><li>缺点<ul><li>服务器宕机，数据丢失</li><li>所处环境无法连接服务器，无法获取最新源代码</li></ul></li></ul></li><li><p><strong>分散型（git）</strong></p><blockquote><p>GitHub 将仓库 Fork 给了每一个用户。Fork 就是将 GitHub 的某个特定仓库复制到自己的账户下。Fork 出的仓库与原仓库是两个不同的仓库，开发者可以随意编辑。</p></blockquote><p><img src="/2020/11/07/44409/image-20201107142103858.png" alt="分散型"></p><ul><li>优点<ul><li>服务器宕机影响小（多个仓库）</li></ul></li><li>缺点<ul><li>因为有多个仓库，相对复杂一些（操作，对新手不太友好）</li></ul></li></ul></li></ol><p><strong>Git 与 SVN 区别点：</strong></p><ul><li><strong>1、Git 是分布式的，SVN 不是</strong>：这是 Git 和其它非分布式的版本控制系统，例如 SVN，CVS 等，最核心的区别。</li><li><strong>2、Git 把内容按元数据方式存储，而 SVN 是按文件：</strong>所有的资源控制系统都是把文件的元信息隐藏在一个类似 .svn、.cvs 等的文件夹里。</li><li><strong>3、Git 分支和 SVN 的分支不同：</strong>分支在 SVN 中一点都不特别，其实它就是版本库中的另外一个目录。</li><li><strong>4、Git 没有一个全局的版本号，而 SVN 有：</strong>目前为止这是跟 SVN 相比 Git 缺少的最大的一个特征。</li><li><strong>5、Git 的内容完整性要优于 SVN：</strong>Git 的内容存储使用的是 SHA-1 哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li></ul><h3><span id="3-chu-shi-she-zhi-git-an-zhuang-hou">3、初始设置（git安装后）</span><a href="#3-chu-shi-she-zhi-git-an-zhuang-hou" class="header-anchor">.</a></h3><h4><span id="she-zhi-xing-ming-he-you-xiang-di-zhi">设置姓名和邮箱地址：</span><a href="#she-zhi-xing-ming-he-you-xiang-di-zhi" class="header-anchor">.</a></h4><pre class="line-numbers language-sh"><code class="language-sh">git config --global user.name "你的用户名(git)" # 用户名使用英文git config --global user.email "你的邮箱" <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/11/07/44409/image-20201107144452126.png" alt></p><blockquote><p>这个命令执行后，用户目录生成 .gitconfig文件中，存在刚才的配置</p></blockquote><p><img src="/2020/11/07/44409/image-20201107144317958.png" alt></p><p><img src="/2020/11/07/44409/image-20201107144414004.png" alt="文件内容"></p><h4><span id="ti-gao-ming-ling-ke-du-xing">提高命令可读性：</span><a href="#ti-gao-ming-ling-ke-du-xing" class="header-anchor">.</a></h4><blockquote><p>使各种命令输出更容易分辨</p></blockquote><pre class="line-numbers language-sh"><code class="language-sh">git config --global color.ui auto<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/11/07/44409/image-20201107144753006.png" alt></p><h3><span id="4-shi-yong-github-xu-zhu-ce-zhang-hao">4、使用GitHub（需注册账号）</span><a href="#4-shi-yong-github-xu-zhu-ce-zhang-hao" class="header-anchor">.</a></h3><h4><span id="she-zhi-ssh-key-ben-di-dian-nao-sheng-cheng-mi-yao">设置SSH Key （本地电脑生成密钥）</span><a href="#she-zhi-ssh-key-ben-di-dian-nao-sheng-cheng-mi-yao" class="header-anchor">.</a></h4><pre class="line-numbers language-sh"><code class="language-sh"># 密钥生成ssh-keygen -t rsa -C "你的邮箱"# 生成文件(用户目录下.ssh文件夹生成) id_rsa:私钥 id_rsa.pub:公钥<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/11/07/44409/image-20201107151423155.png" alt="生成密钥"></p><p><img src="/2020/11/07/44409/image-20201107151546439.png" alt></p><h4><span id="tian-jia-gong-yao-dao-github">添加公钥到GitHub</span><a href="#tian-jia-gong-yao-dao-github" class="header-anchor">.</a></h4><p><img src="/2020/11/07/44409/image-20201107151830879.png" alt="添加公钥到GitHub "></p><h4><span id="ce-shi-lian-jie">测试连接</span><a href="#ce-shi-lian-jie" class="header-anchor">.</a></h4><pre class="line-numbers language-sh"><code class="language-sh">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/11/07/44409/image-20201107152218380.png" alt></p><blockquote><p>出现以上表示连接成功</p></blockquote><h4><span id="chuang-jian-cang-ku">创建仓库</span><a href="#chuang-jian-cang-ku" class="header-anchor">.</a></h4><p><img src="/2020/11/07/44409/image-20201107152348730.png" alt></p><p><img src="/2020/11/07/44409/image-20201107152921466.png" alt></p><p><img src="/2020/11/07/44409/image-20201107153214841.png" alt></p><h5><span id="zhe-xie-ming-ling-de-ji-ben-shi-yong">这些命令的基本使用</span><a href="#zhe-xie-ming-ling-de-ji-ben-shi-yong" class="header-anchor">.</a></h5><blockquote><p>首先创建一个目录（liuyou_blog）,目录内，打开git命令行</p></blockquote><pre class="line-numbers language-sh"><code class="language-sh">echo "# liuyou_blog" >> README.mdgit initgit add README.mdgit commit -m "first commit"git branch -M maingit remote add origin https://github.com/kaiminliu/liuyou_blog.gitgit push -u origin main         <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="5-git-ji-ben-cao-zuo">5、git基本操作</span><a href="#5-git-ji-ben-cao-zuo" class="header-anchor">.</a></h3><h4><span id="1-git-init-chu-shi-hua-cang-ku">1. git init——初始化仓库</span><a href="#1-git-init-chu-shi-hua-cang-ku" class="header-anchor">.</a></h4><blockquote><p>初始化成功后，会在当前目录生成 .git 目录（<strong>存储着管理当前目录内容所需的仓库数据</strong>）</p></blockquote><p><strong>这个目录的内容：<mark>附属于该仓库的工作树</mark></strong></p><h4><span id="2-git-status-cha-kan-cang-ku-de-zhuang-tai">2.git status——查看仓库的状态</span><a href="#2-git-status-cha-kan-cang-ku-de-zhuang-tai" class="header-anchor">.</a></h4><blockquote><p>git status命令用于显示 Git 仓库的状态。</p></blockquote><p><img src="/2020/11/07/44409/image-20201107154654989.png" alt></p><h4><span id="3-git-add-xiang-zan-cun-qu-stage-huo-index-zhong-tian-jia-wen-jian">3.git add——向暂存区(Stage或Index)中添加文件</span><a href="#3-git-add-xiang-zan-cun-qu-stage-huo-index-zhong-tian-jia-wen-jian" class="header-anchor">.</a></h4><p><img src="/2020/11/07/44409/image-20201107154840021.png" alt></p><h4><span id="4-git-commit-bao-cun-cang-ku-de-li-shi-ji-lu-history">4.git commit——保存仓库的历史记录(history)</span><a href="#4-git-commit-bao-cun-cang-ku-de-li-shi-ji-lu-history" class="header-anchor">.</a></h4><blockquote><p>将当前缓存区中的文件实际保存到仓库的历史记录中（可以使用记录恢复文件）</p></blockquote><p><img src="/2020/11/07/44409/image-20201107155200698.png" alt></p><h4><span id="5-git-log-cha-kan-ti-jiao-ri-zhi">5.git log——查看提交日志</span><a href="#5-git-log-cha-kan-ti-jiao-ri-zhi" class="header-anchor">.</a></h4><p><img src="/2020/11/07/44409/image-20201107155617439.png" alt></p><ul><li><p><strong>只显示提交信息第一行(简述)</strong></p><pre class="line-numbers language-sh"><code class="language-sh">git log --pretty=short<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>只显示指定目录、文件的日志</strong></p><pre class="line-numbers language-sh"><code class="language-sh">git log 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>显示文件的改动</strong></p><blockquote><p>查看文件commit后的改动</p></blockquote><pre class="line-numbers language-sh"><code class="language-sh">git log -p # 文件改动前后差别显示在提交信息之后orgit log -p 文件名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><code>git log命令只能查看以当前状态为终点的历史日志</code></p><p><code>使用 git reflog命令，查看当前仓库的操作日志</code></p><h4><span id="6-git-diff-cha-kan-geng-gai-qian-hou-de-chai-bie">6.git diff——查看更改前后的差别</span><a href="#6-git-diff-cha-kan-geng-gai-qian-hou-de-chai-bie" class="header-anchor">.</a></h4><blockquote><p>git diff命令可以查看工作树、暂存区、最新提交之间的差别。</p></blockquote><ul><li><p><strong>查看工作树和暂存区的差别</strong></p><pre class="line-numbers language-sh"><code class="language-sh">git diff<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>查看工作树和最新提交的差别</strong></p><pre class="line-numbers language-sh"><code class="language-sh">git diff HEAD # HEAD 是指向当前分支中最新一次提交的指针。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>好习惯：在执行 git commit命令之前先执行git diff HEAD命令，查看本次提交与上次提交之间有什么差别，等确认完毕后再进行提交。</p></blockquote></li></ul><h4><span id="7-fen-zhi-cao-zuo">7.分支操作</span><a href="#7-fen-zhi-cao-zuo" class="header-anchor">.</a></h4><h5><span id="1-git-branch-xian-shi-fen-zhi-yi-lan-biao">1.git branch——显示分支一览表</span><a href="#1-git-branch-xian-shi-fen-zhi-yi-lan-biao" class="header-anchor">.</a></h5><p><img src="/2020/11/07/44409/image-20201107161907663.png" alt></p><blockquote><p>main 左边的 <code>*</code>表示当前分支，就上图，只有一个分支</p></blockquote><ul><li><p>创建新分支</p><pre class="line-numbers language-sh"><code class="language-sh">git branch 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5><span id="2-git-checkout-b-chuang-jian-qie-huan-fen-zhi">2.git checkout -b——创建、切换分支</span><a href="#2-git-checkout-b-chuang-jian-qie-huan-fen-zhi" class="header-anchor">.</a></h5><ul><li><p><strong>以当前分支创建新的分支，并切换分支</strong></p><pre class="line-numbers language-sh"><code class="language-sh">git checkout -b 分支名 # 实际上就是 git branch 分支名 + git checkout 分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/11/07/44409/image-20201107162451051.png" alt></p><blockquote><p><strong>在当前分支内更新内容不会影响到，其他分支</strong></p></blockquote></li><li><p><strong>切换回上一个分支</strong></p><pre class="line-numbers language-sh"><code class="language-sh">git checkout -<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5><span id="3-te-xing-fen-zhi-topic-fen-zhi">3.特性分支（topic分支）</span><a href="#3-te-xing-fen-zhi-topic-fen-zhi" class="header-anchor">.</a></h5><blockquote><p>集中实现单一特性（主题），除此之外不进行任何作业的分支。在日常开发中，往往会创建数个特性分支，同时在此之外再保留一个随时可以发布软件的稳定分支。稳定分支的角色通常由 master 分支担当</p></blockquote><p><img src="/2020/11/07/44409/image-20201107163119747.png" alt></p><blockquote><p><strong>开发中出现bug，需要再创建新的分支，在新分支中修正</strong></p></blockquote><h5><span id="4-zhu-gan-fen-zhi">4.主干分支</span><a href="#4-zhu-gan-fen-zhi" class="header-anchor">.</a></h5><blockquote><p>主干分支：合并的终点（版本：不存在开发一半的代码）；如果有多个版本，存在多个主干分支</p></blockquote><h5><span id="5-git-merge-he-bing-fen-zhi">5.git merge——合并分支</span><a href="#5-git-merge-he-bing-fen-zhi" class="header-anchor">.</a></h5><pre class="line-numbers language-sh"><code class="language-sh"># 先切换到主干分支 git checkout 主干分支名git merge --no-ff 特性分支名 # 为了在历史记录中明确记录下本次分支合并，我们需要创建合并提交。因此，在合并时加上 --no-ff参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>后面编辑器内容可以不做任何更改，保存关闭即可</p></blockquote><h5><span id="6-git-log-graph-yi-tu-biao-xing-shi-cha-kan-fen-zhi">6.git log –graph——以图表形式查看分支</span><a href="#6-git-log-graph-yi-tu-biao-xing-shi-cha-kan-fen-zhi" class="header-anchor">.</a></h5><p><img src="/2020/11/07/44409/image-20201107172714638.png" alt></p><h4><span id="8-geng-gai-ti-jiao-cao-zuo">8.更改提交操作</span><a href="#8-geng-gai-ti-jiao-cao-zuo" class="header-anchor">.</a></h4><h5><span id="1-git-reset-hui-su-li-shi-ban-ben">1.git reset——回溯历史版本</span><a href="#1-git-reset-hui-su-li-shi-ban-ben" class="header-anchor">.</a></h5><blockquote><p>要让仓库的 </p><p>[^HEAD]: HEAD 是指向当前分支中最新一次提交的指针。</p><p>、暂存区、当前工作树回溯到指定状态，需要用到 git rest –hard命令</p></blockquote><pre class="line-numbers language-sh"><code class="language-sh">git reset --hard 目标时间点的hash值 # <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>使用 git reflog命令，查看当前仓库的操作日志</code></p><p><img src="/2020/11/07/44409/image-20201107165457372.png" alt></p><h5><span id="2-xiao-chu-chong-tu">2.消除冲突</span><a href="#2-xiao-chu-chong-tu" class="header-anchor">.</a></h5><ul><li><strong>特性分支new修改readme.md内容</strong></li></ul><p><img src="/2020/11/07/44409/image-20201107170303044.png" alt></p><p><img src="/2020/11/07/44409/image-20201107170141786.png" alt></p><p><img src="/2020/11/07/44409/image-20201107171514206.png" alt="提交"></p><p><strong>同理</strong>：<strong>另一特性分支newbranch也做修改readme.md内容</strong>（但是改后内容不一样）</p><ul><li><strong>切换到主干分支，合并分支</strong></li></ul><p><img src="/2020/11/07/44409/image-20201107171651398.png" alt></p><ul><li><p><strong>打开readme.md文件（vim readme.md）</strong></p><blockquote><p>删除一个，重新add ，commit即可</p></blockquote></li></ul><p><img src="/2020/11/07/44409/image-20201107171835000.png" alt></p><h5><span id="3-git-commit-amend-xiu-gai-ti-jiao-xin-xi">3.git commit –amend——修改提交信息</span><a href="#3-git-commit-amend-xiu-gai-ti-jiao-xin-xi" class="header-anchor">.</a></h5><ul><li><p><strong>修改上一条提交信息</strong></p><pre class="line-numbers language-sh"><code class="language-sh">git commit --amend<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5><span id="4-git-rebase-i-ya-suo-li-shi">4.git rebase -i——压缩历史</span><a href="#4-git-rebase-i-ya-suo-li-shi" class="header-anchor">.</a></h5><blockquote><p>在合并特性分支之前，如果发现已提交的内容中有些许拼写错误等，不妨提交一个修改，然后将这个修改包含到前一个提交之中，压缩成一个历史记录。</p></blockquote><p><strong>new分支中的helloworld.java 中添加错误信息，并提交</strong></p><p><img src="/2020/11/07/44409/image-20201107174350368.png" alt="添加错误信息"></p><p><img src="/2020/11/07/44409/image-20201107174739897.png" alt="提交"></p><p><strong>new分支中的helloworld.java 中添加正确信息，并提交</strong></p><p><img src="/2020/11/07/44409/image-20201107174848266.png" alt="修改为正确信息"></p><p><img src="/2020/11/07/44409/image-20201107175000665.png" alt="提交"></p><p><strong>使用git rebase 把两条提交记录变为一条，良性修改</strong></p><p><img src="/2020/11/07/44409/image-20201107175118846.png" alt="有两条新提交记录"></p><pre class="line-numbers language-sh"><code class="language-sh">git rebase -i HEAD~2 # 合并最近两次的提交<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/11/07/44409/image-20201107175928456.png" alt></p><p><img src="/2020/11/07/44409/image-20201107180358034.png" alt></p><p><img src="/2020/11/07/44409/image-20201107180432191.png" alt="内容修改成功"></p><blockquote><p>良性修改：历史信息中不存在错误的数据</p></blockquote><h4><span id="9-tui-song-dao-yuan-cheng-cang-ku">9.推送到远程仓库</span><a href="#9-tui-song-dao-yuan-cheng-cang-ku" class="header-anchor">.</a></h4><blockquote><p><strong>之前的操作都是针对于单一本地仓库的操作。</strong></p></blockquote><h5><span id="1-git-remote-add-tian-jia-yuan-cheng-cang-ku"><strong>1.git remote add——添加远程仓库</strong></span><a href="#1-git-remote-add-tian-jia-yuan-cheng-cang-ku" class="header-anchor">.</a></h5><pre class="line-numbers language-sh"><code class="language-sh">git remote add origin git@github.com:用户名/仓库名.git # origin: 远程仓库标识符<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5><span id="2-git-push-tui-song-zhi-yuan-cheng-cang-ku"><strong>2.git push——推送至远程仓库</strong></span><a href="#2-git-push-tui-song-zhi-yuan-cheng-cang-ku" class="header-anchor">.</a></h5><blockquote><p>想将当前分支下本地仓库中的内容推送给远程仓库，需要用到git push命令。</p></blockquote><pre class="line-numbers language-sh"><code class="language-sh">git push -u origin master # 表示当前分支内容，将推送到远程仓库的master分支  -u 表示推送的同时，将 origin 仓库的 master 分支设置为本地仓库当前分支的 upstream（上游）。添加了这个参数，将来运行 git pull命令从远程仓库获取内容时，本地仓库的这个分支就可以直接从 origin 的 master 分支获取内容，省去了另外添加参数的麻烦。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4><span id="10-cong-yuan-cheng-cang-ku-huo-qu">10.从远程仓库获取</span><a href="#10-cong-yuan-cheng-cang-ku-huo-qu" class="header-anchor">.</a></h4><h5><span id="1-git-clone-huo-qu-yuan-cheng-cang-ku"><strong>1.git clone——获取远程仓库</strong></span><a href="#1-git-clone-huo-qu-yuan-cheng-cang-ku" class="header-anchor">.</a></h5><blockquote><p>clone下来的仓库，不能与之前操作的仓库在同一个目录下，即最好新目录</p></blockquote><pre class="line-numbers language-sh"><code class="language-sh">git clone git@github.com:用户名/仓库名.git # 默认克隆 master分支<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p><strong>获取远程的其他分支（在以上操作之后）</strong></p><pre class="line-numbers language-sh"><code class="language-sh">git checkout -b 对应分支名 origin/对应分支名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h5><span id="2-git-pull-huo-qu-zui-xin-de-yuan-cheng-cang-ku-fen-zhi"><strong>2.git pull——获取最新的远程仓库分支</strong></span><a href="#2-git-pull-huo-qu-zui-xin-de-yuan-cheng-cang-ku-fen-zhi" class="header-anchor">.</a></h5><pre class="line-numbers language-sh"><code class="language-sh">git pull origin 本地分支名(远程也必须存在) # 将本地的该分支更新到最新状态 <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2><span id="tuo-zhan">拓展</span><a href="#tuo-zhan" class="header-anchor">.</a></h2><h3><span id="xue-xi-git-tui-jian-de-wang-zhan">学习git推荐的网站</span><a href="#xue-xi-git-tui-jian-de-wang-zhan" class="header-anchor">.</a></h3><p><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">https://learngitbranching.js.org/</a></p><h3><span id="qi-ta">其他</span><a href="#qi-ta" class="header-anchor">.</a></h3><h4><span id="git-commit-am">git commit -am “”</span><a href="#git-commit-am" class="header-anchor">.</a></h4><blockquote><p>git add + git commit -m</p></blockquote><h4><span id="head-shi-zhi-xiang-dang-qian-fen-zhi-zhong-zui-xin-yi-ci-ti-jiao-de-zhi-zhen">HEAD 是指向当前分支中最新一次提交的指针。</span><a href="#head-shi-zhi-xiang-dang-qian-fen-zhi-zhong-zui-xin-yi-ci-ti-jiao-de-zhi-zhen" class="header-anchor">.</a></h4><h4><span id="git-branch-a-ming-ling-cha-kan-dang-qian-fen-zhi-de-xiang-guan-xin-xi">git branch -a命令查看当前分支的相关信息。</span><a href="#git-branch-a-ming-ling-cha-kan-dang-qian-fen-zhi-de-xiang-guan-xin-xi" class="header-anchor">.</a></h4><blockquote><p>添加 -a参数可以同时显示本地仓库和远程仓库的分支信息。</p></blockquote><p><img src="/2020/11/07/44409/image-20201107183053419.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis详细笔记-学习Redis看这一篇就够了</title>
      <link href="/2020/11/02/9349.html"/>
      <url>/2020/11/02/9349.html</url>
      
        <content type="html"><![CDATA[<h1><span id="redis-xiang-xi-bi-ji">Redis详细笔记</span><a href="#redis-xiang-xi-bi-ji" class="header-anchor">.</a></h1><blockquote><p>笔记记录 B站狂神说Java的Redis课程：<a href="https://www.bilibili.com/video/BV1S54y1R7SB" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1S54y1R7SB</a></p></blockquote><h2><span id="yi-nosql-gai-shu">一、NoSQL概述</span><a href="#yi-nosql-gai-shu" class="header-anchor">.</a></h2><h3><span id="1-wei-shi-me-yao-shi-yong-nosql">1、为什么要使用NoSQL</span><a href="#1-wei-shi-me-yao-shi-yong-nosql" class="header-anchor">.</a></h3><ul><li><p>现在是大数据时代（一般的数据库已经解决不了的数据：大数据（海量存储和并行计算））</p><p><strong>SQL =&gt; NoSQL</strong></p><blockquote><p>1、单机时代（如MySQL）的<strong>瓶颈</strong></p></blockquote><ul><li>数据量太大，一个机器存不下</li><li>数据的索引&lt;B+Tree&gt;（MySQL单表300万条数据，一定要建立索引）,一个机器内存放不下</li><li>访问量大（MySQL读写混合 – 性能降低），一个服务器承受不了</li></ul><blockquote><p>2、Memcached缓存（减轻服务器的压力） + MySQL + 垂直拆分（读写分离，多个MySQL服务器，有的值负责读，有的值负责写）</p></blockquote><p>发展过程：①优化数据结构和索引 =&gt; ②文件缓存（涉及IO操作）=&gt; ③Memcached</p><blockquote><p>3、分库分表 + 水平拆分 + MySQL集群</p></blockquote></li></ul><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130110.png" alt></p><ul><li>用户的个人信息（社交网络、地理位置、用户日志等）爆发是增长，无法使用关系型数据库去存储，那么需要NoSQL数据库</li></ul><h3><span id="2-shi-me-shi-nosql">2、什么是NoSQL</span><a href="#2-shi-me-shi-nosql" class="header-anchor">.</a></h3><blockquote><h4><span id="not-only-sql-gt-fei-guan-xi-xing-shu-ju-ku">Not Only SQL –&gt; 非关系型数据库</span><a href="#not-only-sql-gt-fei-guan-xi-xing-shu-ju-ku" class="header-anchor">.</a></h4></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130153.png" alt></p><blockquote><h4><span id="nosql-te-dian">NoSQL特点</span><a href="#nosql-te-dian" class="header-anchor">.</a></h4></blockquote><ol><li><p>方便扩展（数据之间没有关系）</p></li><li><p>大数据高性能（Redis一秒写8万次，读取11万次，NoSQL的缓存记录级，是一种细粒度的缓存，性能比较高）</p></li><li><p>数据类型是多样性的（不需要事先设计数据库（因为数据量大），随取随用）</p></li><li><p>传统RDBMS和NoSQL</p><ul><li><p>传统RDBMS</p><ul><li>结构化组织</li><li>SQL</li><li>数据和关系都存在单独的表中</li><li>操作，数据定义语言</li><li>严格的一致性</li><li>基础的事务</li><li>…</li></ul></li><li><p>NoSQL</p><ul><li>不仅仅是SQL</li><li>没有固定的查询语句</li><li>键值对存储，列存储，文档存储，图形数据库（社交关系）</li><li>最终一致性</li><li>CAP定理和BASE</li><li>高性能，高可用，高可扩</li><li>…</li></ul></li></ul></li></ol><h4><span id="liao-jie-3v-3-gao">了解：3V + 3高</span><a href="#liao-jie-3v-3-gao" class="header-anchor">.</a></h4><p>大数据时代的3V：主要是描述问题的</p><ol><li>海量Volume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高：主要是对程序的要求</p><ol><li>高并发</li><li>高可拓（集群）</li><li>高性能</li></ol><pre class="line-numbers language-Python"><code class="language-Python">电商网站：# 1、商品的基本信息    名称、价格、商家信息：        关系型数据库： MySQL / Oracle (王坚：阿里去IOE（IBM小型机，Oracle数据库、EMC存储器）)# 2、商品的描述、评论（文字多）    文档型数据库：MongoDB# 3、图片    分布式文件系统：FastDFS、TFS（淘宝）、GFS（Google）、HDFS（Hadoop）、OSS云存储（阿里云）# 4、商品的关键字（搜索）    搜索引擎：solr、ElasticSearch、ISearch（阿里：多隆）# 5、商品热门的波段信息    内存数据库：Redis、Tair、Memcached、...# 6、商品的交易、外部的接口    三方应用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-nosql-de-si-da-fen-lei">3、NoSQL的四大分类</span><a href="#3-nosql-de-si-da-fen-lei" class="header-anchor">.</a></h3><h4><span id="1-kv-jian-zhi-dui">1.KV键值对</span><a href="#1-kv-jian-zhi-dui" class="header-anchor">.</a></h4><ul><li>新浪：Redis</li><li>美团：Redis + Tair</li><li>阿里、百度：Redis + Memcached</li></ul><h4><span id="2-wen-dang-xing-shu-ju-ku-bson-ge-shi">2.文档型数据库（bson格式）</span><a href="#2-wen-dang-xing-shu-ju-ku-bson-ge-shi" class="header-anchor">.</a></h4><ul><li>MongoDB（必须掌握）<ul><li>基于分布式文件存储的数据库（C++编写）</li><li>主要用于处理大量的文档</li><li>介于关系型数据库和非关系型数据库中的中间产品</li></ul></li><li>ConthDB</li></ul><h4><span id="3-lie-shi-cun-chu">3.列式存储</span><a href="#3-lie-shi-cun-chu" class="header-anchor">.</a></h4><ul><li>HBase</li><li>分布式文件系统</li></ul><h4><span id="4-tu-guan-xi-shu-ju-ku">4.图关系数据库</span><a href="#4-tu-guan-xi-shu-ju-ku" class="header-anchor">.</a></h4><ul><li>存关系的，不是存图片的（比如，朋友圈社交网络，广告推荐）</li><li>Neo4j、InfoGrid</li></ul><h4><span id="dui-bi">对比</span><a href="#dui-bi" class="header-anchor">.</a></h4><table><thead><tr><th><strong>分类</strong></th><th><strong>Examples举例</strong></th><th><strong>典型应用场景</strong></th><th><strong>数据模型</strong></th><th><strong>优点</strong></th><th><strong>缺点</strong></th></tr></thead><tbody><tr><td><strong>键值（key-value）</strong></td><td>Tokyo<br>Cabine/Tyrant<br>Redis<br>Voldemort<br>Oracle BDB</td><td><strong>内容缓存</strong>，主要用于处理大量数据的高访问负载，也用于一些<strong>日志系统</strong>等等</td><td>Key指向Value的键值对，通常用hashtable来实现</td><td>查找速度快</td><td>数据无结构化，通常只被当作字符串或者二进制数据</td></tr><tr><td><strong>列存储数据库</strong></td><td>Cassandra<br>HBase<br>Riak</td><td>分布式的文件系统</td><td>以列簇式存储，将同一列数据存在一起</td><td>查找速度快，可扩展性强，更容易进行分布式扩展</td><td>功能相对局限</td></tr><tr><td><strong>文档型数据库</strong></td><td>CouchDB<br>MongoDB</td><td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td><td>Key-Value对应的键值对，Value为结构化数据</td><td>数据结构要求不严谨，表结构可变，不需要像关系型数据库一样需要预先定义表结构</td><td>查询性能不高，而且缺乏统一的查询语法</td></tr><tr><td><strong>图形数据库</strong></td><td>Neo4J<br>InfoGrid<br>Infinite Graph</td><td>社交网络，推荐系统等。专注于构建关系图谱</td><td>图结构</td><td>利用图结构相关算法。比如最短路径寻址，N度关系查找等</td><td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案</td></tr></tbody></table><h2><span id="er-redis-ru-men">二、Redis入门</span><a href="#er-redis-ru-men" class="header-anchor">.</a></h2><h3><span id="1-redis-shi-shi-me">1.Redis是什么</span><a href="#1-redis-shi-shi-me" class="header-anchor">.</a></h3><blockquote><p>官网：<a href="redis.io">redis.io</a></p><p>中文网：<a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作<mark>数据库</mark>、<mark>缓存</mark>和<mark>消息中间件</mark>。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="noopener">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes" target="_blank" rel="noopener">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists" target="_blank" rel="noopener">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets" target="_blank" rel="noopener">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets" target="_blank" rel="noopener">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps" target="_blank" rel="noopener">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs" target="_blank" rel="noopener">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html" target="_blank" rel="noopener">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html" target="_blank" rel="noopener">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html" target="_blank" rel="noopener">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html" target="_blank" rel="noopener">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html" target="_blank" rel="noopener">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html" target="_blank" rel="noopener">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html" target="_blank" rel="noopener">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html" target="_blank" rel="noopener">分区（Cluster）</a>提供高可用性（high availability）。</p></blockquote><h4><span id="redis-yu-qi-ta-key-value-huan-cun-chan-pin-you-yi-xia-san-ge-te-dian">Redis 与其他 key - value 缓存产品有以下三个特点：</span><a href="#redis-yu-qi-ta-key-value-huan-cun-chan-pin-you-yi-xia-san-ge-te-dian" class="header-anchor">.</a></h4><ol><li>Redis<strong>支持数据的持久化</strong>，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储（<strong>多样的数据结构</strong>）。</li><li>Redis支持数据的备份，即<strong>master-slave模式的数据备份</strong>。</li></ol><h4><span id="redis-you-shi">Redis优势</span><a href="#redis-you-shi" class="header-anchor">.</a></h4><ol><li><strong>性能极高</strong> – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li><strong>丰富的数据类型</strong> – Redis支持二进制案例的 Strings, Lists, Hashes, Sets 及 Ordered Sets 数据类型操作。</li><li><strong>原子</strong> – Redis的所有操作都是原子性的，意思就是要么成功执行要么失败完全不执行。单个操作是原子性的。多个操作也支持事务，即原子性，通过MULTI和EXEC指令包起来。（<strong>但是Redis事务多操作不支持原子性–当我们执行后有语句有错，其他语句仍然可以正常执行</strong>，<mark>详情看事务</mark>）</li><li><strong>丰富的特性</strong> – Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li><li>Redis运行在内存中但是可以<strong>持久化</strong>到磁盘，所以在对不同数据集进行高速读写时需要权衡内存，因为数据量不能大于硬件内存。在内存数据库方面的另一个优点是，相<strong>比在磁盘上相同的复杂的数据结构，在内存中操作起来非常简单</strong>，这样Redis可以做很多内部复杂性很强的事情。同时，<strong>在磁盘格式方面他们是紧凑的以追加的方式产生的，因为他们并不需要进行随机访问</strong>。</li></ol><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130236.png" alt></p><h3><span id="2-neng-gan-shi-me">2.能干什么？</span><a href="#2-neng-gan-shi-me" class="header-anchor">.</a></h3><ul><li>内存存储、<strong>持久化（rdb，aof）</strong></li><li>效率高、可以用于高速缓存</li><li>发布订阅系统</li><li>地图信息分析</li><li>计时器、计数器（浏览量）</li><li>…</li></ul><h3><span id="3-te-xing">3.特性</span><a href="#3-te-xing" class="header-anchor">.</a></h3><ul><li>多样的数据结构</li><li>持久化</li><li>集群</li><li>事务</li><li>…</li></ul><h3><span id="4-an-zhuang-yin-wei-redis-geng-gua-he-zai-linux-xia-shi-yong-suo-yi-zhi-you-linux-de-an-zhuang-ban-ben">4.安装（因为Redis更适合在linux下使用，所以只有linux的安装版本）</span><a href="#4-an-zhuang-yin-wei-redis-geng-gua-he-zai-linux-xia-shi-yong-suo-yi-zhi-you-linux-de-an-zhuang-ban-ben" class="header-anchor">.</a></h3><blockquote><p>linux 使用的系统是 Centos 7.3</p><p>你可使用 虚拟机，也可已使用云服务器（学生机不贵），因为我有服务器，这里就在服务器上安装和学习Redis</p></blockquote><p>①下载安装包</p><p><a href="http://www.redis.cn/" target="_blank" rel="noopener">http://www.redis.cn/</a></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130247.png" alt></p><p>②加压安装包（提前使用xshell和xftp上传压缩包到服务器上）</p><blockquote><p>压缩包在 /app/目录下</p></blockquote><p>在/usr/local/ 下创建redis文件夹，并进入到文件夹中</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130258.png" alt></p><p>解压压缩包到该文件夹下</p><pre class="line-numbers language-bash"><code class="language-bash"> <span class="token function">tar</span> -zxvf /app/redis-6.0.6.tar.gz -C ./<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130303.png" alt></p><p>③编译并安装（保证安装了编译环境）</p><blockquote><p>没有安装编译环境，需要 yum install gcc-c++</p></blockquote><blockquote><p>如果下面操作报错：需要提升GCC的版本（redis6需要5.3+）</p><pre class="line-numbers language-bash"><code class="language-bash">//升级gcc到9以上yum -y <span class="token function">install</span> centos-release-sclyum -y <span class="token function">install</span> devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutils//临时将此时的gcc版本改为9scl <span class="token function">enable</span> devtoolset-9 <span class="token function">bash</span>//或永久改变<span class="token keyword">echo</span> <span class="token string">"source /opt/rh/devtoolset-9/enable"</span> <span class="token operator">>></span>/etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> redis-6.0.6<span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130308.png" alt></p><p>编译后，默认安装路径在 <code>/usr/local/bin</code></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130313.png" alt></p><p>④安装系统服务并后台启动</p><blockquote><p>可能会报错：</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130318.png" alt></p><p>解决方法：vim install_server.sh，注释如下图内容</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130327.png" alt></p></blockquote><p><strong>安装系统服务</strong>（可以指定选项，下面默认）</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> utils./install_server.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130336.png" alt></p><blockquote><p>默认的配置文件：/etc/redis/6379.conf（安装成功后，默认后台自启）</p></blockquote><p>⑤开启redis服务</p><blockquote><p>可以使用自定义的配置文件开启，这里使用systemctl</p><pre class="line-numbers language-bash"><code class="language-bash">/redis安装目录/redis-server    /配置文件目录/redis.conf<span class="token comment" spellcheck="true"># 关闭服务</span>/redis安装目录/redis-cli <span class="token function">shutdown</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-bash"><code class="language-bash">systemctl start redis_6379.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130344.png" alt></p><p>⑥客户端连接测试</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130348.png" alt></p><p>⑦设置远程连接</p><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/redis/6379.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130353.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130357.png" alt="关闭保护模式"></p><blockquote><p>然后重启服务即可：</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart redis_6379.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><p>⑧配置访问密码</p><pre class="line-numbers language-bash"><code class="language-bash">vim /etc/redis/6379.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130401.png" alt></p><p>重启服务</p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart redis_6379.service<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>客户端连接测试</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130407.png" alt></p><p>关闭连接</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130411.png" alt></p><h3><span id="5-xing-neng-ce-shi">5.性能测试</span><a href="#5-xing-neng-ce-shi" class="header-anchor">.</a></h3><blockquote><p>使用自带的<code>redis-benchmark</code>工具测试即可</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash">redis-benchmark <span class="token punctuation">[</span>option<span class="token punctuation">]</span> <span class="token punctuation">[</span>option value<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>性能测试工具可选参数：</strong></p><table><thead><tr><th align="left">序号</th><th align="left">选项</th><th align="left">描述</th><th align="left">默认值</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>-h</strong></td><td align="left">指定服务器主机名</td><td align="left">127.0.0.1</td></tr><tr><td align="left">2</td><td align="left"><strong>-p</strong></td><td align="left">指定服务器端口</td><td align="left">6379</td></tr><tr><td align="left">3</td><td align="left"><strong>-s</strong></td><td align="left">指定服务器 socket</td><td align="left"></td></tr><tr><td align="left">4</td><td align="left"><strong>-c</strong></td><td align="left">指定并发连接数</td><td align="left">50</td></tr><tr><td align="left">5</td><td align="left"><strong>-n</strong></td><td align="left">指定请求数</td><td align="left">10000</td></tr><tr><td align="left">6</td><td align="left"><strong>-d</strong></td><td align="left">以字节的形式指定 SET/GET 值的数据大小</td><td align="left">3</td></tr><tr><td align="left">7</td><td align="left"><strong>-k</strong></td><td align="left">1=keep alive 0=reconnect</td><td align="left">1</td></tr><tr><td align="left">8</td><td align="left"><strong>-r</strong></td><td align="left">SET/GET/INCR 使用随机 key, SADD 使用随机值</td><td align="left"></td></tr><tr><td align="left">9</td><td align="left"><strong>-P</strong></td><td align="left">通过管道传输 &lt;numreq&gt; 请求</td><td align="left">1</td></tr><tr><td align="left">10</td><td align="left"><strong>-q</strong></td><td align="left">强制退出 redis。仅显示 query/sec 值</td><td align="left"></td></tr><tr><td align="left">11</td><td align="left"><strong>–csv</strong></td><td align="left">以 CSV 格式输出</td><td align="left"></td></tr><tr><td align="left">12</td><td align="left"><strong>-l</strong></td><td align="left">生成循环，永久执行测试</td><td align="left"></td></tr><tr><td align="left">13</td><td align="left"><strong>-t</strong></td><td align="left">仅运行以逗号分隔的测试命令列表。</td><td align="left"></td></tr><tr><td align="left">14</td><td align="left"><strong>-I</strong></td><td align="left">Idle 模式。仅打开 N 个 idle 连接并等待。</td><td align="left"></td></tr></tbody></table><h4><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 测试：100个并发连接  100000请求</span>redis-benchmark -c 100 -n 100000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130417.png" alt></p><h3><span id="6-ji-ben-zhi-shi-shuo-ming-ji-ben-ming-ling">6.基本知识说明（基本命令）</span><a href="#6-ji-ben-zhi-shi-shuo-ming-ji-ben-ming-ling" class="header-anchor">.</a></h3><blockquote><p>如果觉得这里命令不太好看，去这个博客<a href="https://www.cnblogs.com/wlandwl/p/redis.html，或者" target="_blank" rel="noopener">https://www.cnblogs.com/wlandwl/p/redis.html，或者</a> 官网：<a href="http://www.redis.cn/commands.html" target="_blank" rel="noopener">http://www.redis.cn/commands.html</a></p></blockquote><p><strong>注意：以下的所有key都表示对应数据类型的 <code>键的名称</code> ； value表示<code>存储的值</code>(除非注释中有特殊说明)</strong></p><h4><span id="1-redis-you-16-ge-shu-ju-ku-0-15-mo-ren-shi-yong-di-0-ge">1.Redis 有16个数据库（0~15），默认使用第0个</span><a href="#1-redis-you-16-ge-shu-ju-ku-0-15-mo-ren-shi-yong-di-0-ge" class="header-anchor">.</a></h4><blockquote><p>可以使用 <code>select</code>进行切换</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130423.png" alt></p><h4><span id="2-cha-kan-shu-ju-ku-da-xiao">2.查看数据库大小</span><a href="#2-cha-kan-shu-ju-ku-da-xiao" class="header-anchor">.</a></h4><blockquote><p>使用 <code>dbsize</code>查看数据库大小</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130427.png" alt></p><h4><span id="3-cha-kan-suo-you-de-key-dang-qian-ku">3.查看所有的key（当前库）</span><a href="#3-cha-kan-suo-you-de-key-dang-qian-ku" class="header-anchor">.</a></h4><blockquote><p>使用 <code>keys *</code></p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130431.png" alt></p><h4><span id="4-qing-chu-dang-qian-shu-ju-ku">4.清除当前数据库</span><a href="#4-qing-chu-dang-qian-shu-ju-ku" class="header-anchor">.</a></h4><blockquote><p><code>flushdb</code></p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130435.png" alt></p><h4><span id="5-qing-kong-suo-you-shu-ju-ku">5.清空所有数据库</span><a href="#5-qing-kong-suo-you-shu-ju-ku" class="header-anchor">.</a></h4><blockquote><p><code>flushall</code></p></blockquote><p>略</p><h4><span id="6-redis-shi-dan-xian-cheng-de">6.Redis是单线程的？</span><a href="#6-redis-shi-dan-xian-cheng-de" class="header-anchor">.</a></h4><ul><li>Redis是很快的，官方表示，Redis是基于内存操作，CPU不是Redis的性能瓶颈，<strong>Redis的性能瓶颈是根据机器的<mark>内存</mark>和<mark>网络的带宽</mark></strong>，既然可以使用单线程，就不用使用多线程。(<mark>6.0后支持多线程</mark>)</li></ul><p><img src="/2020/11/02/9349/image-20201112020411584.png" alt="6.0另当别论"></p><h4><span id="7-pan-duan-key-shi-fou-cun-zai">7.判断key是否存在</span><a href="#7-pan-duan-key-shi-fou-cun-zai" class="header-anchor">.</a></h4><blockquote><p><code>exists</code> key</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130441.png" alt></p><h4><span id="8-yi-chu-key">8.移除key</span><a href="#8-yi-chu-key" class="header-anchor">.</a></h4><blockquote><p><code>move</code> key 1 // 1表示当前数据库  </p><p><code>del</code>  key  // 删除当前数据库的key（可以多个）</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130447.png" alt></p><h4><span id="9-she-zhi-key-de-guo-qi-shi-jian">9.设置key的过期时间</span><a href="#9-she-zhi-key-de-guo-qi-shi-jian" class="header-anchor">.</a></h4><blockquote><p><code>expire</code> key 时间  // 单位时间为s</p><p><code>ttl</code> key  // 查看剩余存活时间</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130453.png" alt></p><h4><span id="10-cha-kan-dang-qian-key-de-lei-xing">10.查看当前key的类型</span><a href="#10-cha-kan-dang-qian-key-de-lei-xing" class="header-anchor">.</a></h4><blockquote><p><code>type</code> key</p></blockquote><h4><span id="11-zi-fu-chuan-zhui-jia-string">11.字符串追加（String）</span><a href="#11-zi-fu-chuan-zhui-jia-string" class="header-anchor">.</a></h4><blockquote><p><code>append</code> key appendValue</p></blockquote><ul><li><mark>如果当前 key 不存在，作用相当于 set key</mark></li></ul><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130458.png" alt></p><h4><span id="12-huo-qu-zi-fu-chuan-chang-du-string">12.获取字符串长度（String）</span><a href="#12-huo-qu-zi-fu-chuan-chang-du-string" class="header-anchor">.</a></h4><blockquote><p><code>strlen</code>  key</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130502.png" alt></p><h4><span id="13-zi-fu-chuan-i-cao-zuo-ke-yong-yu-yue-du-liang-shi-xian-string">13.字符串i++操作（可用于阅读量实现）（String）</span><a href="#13-zi-fu-chuan-i-cao-zuo-ke-yong-yu-yue-du-liang-shi-xian-string" class="header-anchor">.</a></h4><blockquote><p><code>incr</code> key</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130506.png" alt></p><h5><span id="tong-li-i">同理，i–</span><a href="#tong-li-i" class="header-anchor">.</a></h5><blockquote><p><code>decr</code> key</p></blockquote><h5><span id="bu-chang-she-zhi">步长设置</span><a href="#bu-chang-she-zhi" class="header-anchor">.</a></h5><blockquote><p><code>incrby</code> key 步长</p><p><code>decrby</code> key 步长</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130509.png" alt></p><h4><span id="14-zi-fu-chuan-pian-duan-range-string">14.字符串片段 Range （String）</span><a href="#14-zi-fu-chuan-pian-duan-range-string" class="header-anchor">.</a></h4><blockquote><p><code>getrange</code> key startIndex endIndex  </p></blockquote><ul><li><strong>对应java里的substring</strong>（<mark>但是这里会endIndex是一个闭区间</mark>）</li><li>特例，endIndex = -1 时，表示从startIndex 到最后</li></ul><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130513.png" alt></p><h4><span id="15-zi-fu-chuan-ti-huan-string">15.字符串替换 （String）</span><a href="#15-zi-fu-chuan-ti-huan-string" class="header-anchor">.</a></h4><blockquote><p><code>setrange</code> key  index  replaceString </p></blockquote><ul><li><strong>对应java里的replace</strong></li><li>注意，如果replaceString是一个字符串，那么会替换源字符串中index后replaceString长度的片段，结果如下</li></ul><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130517.png" alt></p><h4><span id="16-te-shu-set-she-zhi-string">16.特殊set设置 （String）</span><a href="#16-te-shu-set-she-zhi-string" class="header-anchor">.</a></h4><h5><span id="setex-set-with-expire">setex（set with expire）</span><a href="#setex-set-with-expire" class="header-anchor">.</a></h5><blockquote><p><code>setex</code>   key  时间  value  // 设置值，带过期时间</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130520.png" alt></p><h5><span id="setnx-set-if-not-exist">setnx（set if not exist）</span><a href="#setnx-set-if-not-exist" class="header-anchor">.</a></h5><blockquote><p><code>setnx</code>   key  value // 如果不存在，则设置</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130524.png" alt></p><h4><span id="17-pi-liang-she-zhi-pi-liang-huo-qu-yuan-zi-xing-cao-zuo-string">17.批量设置、批量获取（原子性操作） （String）</span><a href="#17-pi-liang-she-zhi-pi-liang-huo-qu-yuan-zi-xing-cao-zuo-string" class="header-anchor">.</a></h4><blockquote><p><code>mset</code>  k1  v1  k2  v2  …</p></blockquote><blockquote><p><code>mget</code>  k1  k2 …</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130527.png" alt></p><ul><li><strong>特殊</strong><ul><li><code>msetnx</code> 批量设置</li></ul></li></ul><h4><span id="18-she-zhi-gao-jie-string">18.设置高阶 （String）</span><a href="#18-she-zhi-gao-jie-string" class="header-anchor">.</a></h4><h5><span id="1-getset">1）getset</span><a href="#1-getset" class="header-anchor">.</a></h5><blockquote><p><code>getset</code>  key  value  // 先get再set（如果不存在，先返回nil，在设置值；如果存在，就先返回原值，再设置新值）</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130531.png" alt></p><h4><span id="19-chong-ming-ming-key">19.重命名key</span><a href="#19-chong-ming-ming-key" class="header-anchor">.</a></h4><blockquote><p><code>rename</code>   key   newName</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130541.png" alt></p><h4><span id="20-fan-hui-yi-ge-sui-ji-key">20.返回一个随机key</span><a href="#20-fan-hui-yi-ge-sui-ji-key" class="header-anchor">.</a></h4><blockquote><p><code>randomKey</code></p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130548.png" alt></p><h4><span id="21-shou-dong-chi-jiu-hua-cao-zuo">21.手动持久化操作</span><a href="#21-shou-dong-chi-jiu-hua-cao-zuo" class="header-anchor">.</a></h4><blockquote><p><code>save</code>  阻塞</p></blockquote><ul><li>SAVE 直接调用 rdbSave ，阻塞 Redis 主进程，直到保存完成为止。在主进程阻塞期间，服务器不能处理客户端的任何请求。</li></ul><blockquote><p><code>bgsave</code> 非阻塞</p></blockquote><ul><li>BGSAVE 则 fork 出一个子进程，子进程负责调用 rdbSave ，并在保存完成之后向主进程发送信号，通知保存已完成。 Redis 服务器在BGSAVE 执行期间仍然可以继续处理客户端的请求。</li></ul><table><thead><tr><th>命令</th><th>save</th><th>bgsave</th></tr></thead><tbody><tr><td>IO类型</td><td>同步</td><td>异步</td></tr><tr><td>阻塞？</td><td>是</td><td>是（阻塞发生在fock()，通常非常快）</td></tr><tr><td>复杂度</td><td>O(n)</td><td>O(n)</td></tr><tr><td>优点</td><td>不会消耗额外的内存</td><td>不阻塞客户端命令</td></tr><tr><td>缺点</td><td>阻塞客户端命令</td><td>需要fock子进程，消耗内存</td></tr></tbody></table><h4><span id="22-huo-qu-pei-zhi-wen-jian-zhong-yong-hu-mi-ma">22.获取配置文件中用户密码</span><a href="#22-huo-qu-pei-zhi-wen-jian-zhong-yong-hu-mi-ma" class="header-anchor">.</a></h4><blockquote><p><code>config get requirepass</code></p></blockquote><h4><span id="23-she-zhi-pei-zhi-wen-jian-zhong-yong-hu-mi-ma-lin-shi-chong-qi-fu-wu-shi-xiao">23.设置配置文件中用户密码（临时，重启服务失效）</span><a href="#23-she-zhi-pei-zhi-wen-jian-zhong-yong-hu-mi-ma-lin-shi-chong-qi-fu-wu-shi-xiao" class="header-anchor">.</a></h4><blockquote><p><code>config set requirepass  password</code></p></blockquote><h4><span id="24-mi-ma-ren-zheng">24.密码认证</span><a href="#24-mi-ma-ren-zheng" class="header-anchor">.</a></h4><blockquote><p><code>auth password</code> 设置密码后必须认证才能使用客户端功能</p></blockquote><h4><span id="25-guan-bi-redis-fu-wu">25.关闭redis服务</span><a href="#25-guan-bi-redis-fu-wu" class="header-anchor">.</a></h4><blockquote><p><code>shutdown</code></p></blockquote><h4><span id="26-cha-kan-rdb-wen-jian-cun-fang-de-mu-lu">26.<strong>查看rdb文件存放的目录</strong></span><a href="#26-cha-kan-rdb-wen-jian-cun-fang-de-mu-lu" class="header-anchor">.</a></h4><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130556.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130600.png" alt></p><h4><span id="27-cha-kan-fu-wu-qi-de-xin-xi">27.查看服务器的信息</span><a href="#27-cha-kan-fu-wu-qi-de-xin-xi" class="header-anchor">.</a></h4><blockquote><p><code>info</code>  参数</p></blockquote><p>参数列表：</p><ul><li><code>server</code>: Redis服务器的一般信息</li><li><code>clients</code>: 客户端的连接部分</li><li><code>memory</code>: 内存消耗相关信息</li><li><code>persistence</code>: RDB和AOF相关信息</li><li><code>stats</code>: 一般统计</li><li><code>replication</code>: 主/从复制信息</li><li><code>cpu</code>: 统计CPU的消耗</li><li><code>commandstats</code>: Redis命令统计</li><li><code>cluster</code>: Redis集群信息</li><li><code>keyspace</code>: 数据库的相关统计</li></ul><p>它也可以采取以下值:</p><ul><li><code>all</code>: 返回所有信息</li><li><code>default</code>: 值返回默认设置的信息</li></ul><p>如果没有使用任何参数时，默认为<code>default</code>。</p><h2><span id="san-wu-da-shu-ju-lei-xing">三、五大数据类型</span><a href="#san-wu-da-shu-ju-lei-xing" class="header-anchor">.</a></h2><p>Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作<mark>数据库</mark>、<mark>缓存</mark>和<mark>消息中间件</mark>。 它支持多种类型的数据结构，如 <a href="http://www.redis.cn/topics/data-types-intro.html#strings" target="_blank" rel="noopener">字符串（strings）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hashes" target="_blank" rel="noopener">散列（hashes）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#lists" target="_blank" rel="noopener">列表（lists）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sets" target="_blank" rel="noopener">集合（sets）</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#sorted-sets" target="_blank" rel="noopener">有序集合（sorted sets）</a> 与范围查询， <a href="http://www.redis.cn/topics/data-types-intro.html#bitmaps" target="_blank" rel="noopener">bitmaps</a>， <a href="http://www.redis.cn/topics/data-types-intro.html#hyperloglogs" target="_blank" rel="noopener">hyperloglogs</a> 和 <a href="http://www.redis.cn/commands/geoadd.html" target="_blank" rel="noopener">地理空间（geospatial）</a> 索引半径查询。 Redis 内置了 <a href="http://www.redis.cn/topics/replication.html" target="_blank" rel="noopener">复制（replication）</a>，<a href="http://www.redis.cn/commands/eval.html" target="_blank" rel="noopener">LUA脚本（Lua scripting）</a>， <a href="http://www.redis.cn/topics/lru-cache.html" target="_blank" rel="noopener">LRU驱动事件（LRU eviction）</a>，<a href="http://www.redis.cn/topics/transactions.html" target="_blank" rel="noopener">事务（transactions）</a> 和不同级别的 <a href="http://www.redis.cn/topics/persistence.html" target="_blank" rel="noopener">磁盘持久化（persistence）</a>， 并通过 <a href="http://www.redis.cn/topics/sentinel.html" target="_blank" rel="noopener">Redis哨兵（Sentinel）</a>和自动 <a href="http://www.redis.cn/topics/cluster-tutorial.html" target="_blank" rel="noopener">分区（Cluster）</a>提供高可用性（high availability）。</p><p><mark>单点登录、</mark></p><h3><span id="string-zi-fu-chuan">String（字符串）</span><a href="#string-zi-fu-chuan" class="header-anchor">.</a></h3><p>略，具体看前面</p><h4><span id="shi-yong-chang-jing">使用场景：</span><a href="#shi-yong-chang-jing" class="header-anchor">.</a></h4><ol><li>计数器</li><li>统计多单位的数量（uid:122:follow 10）</li><li>粉丝数</li><li>对象缓存存储</li></ol><hr><h3><span id="list-lie-biao">List（列表）</span><a href="#list-lie-biao" class="header-anchor">.</a></h3><h4><span id="1-cong-tou-bu-wei-bu-cha-ru-shu-ju-yi-ji-shu-ju-xian-shi">1.从头部/尾部<mark>插入</mark>数据，以及数据<mark>显示</mark></span><a href="#1-cong-tou-bu-wei-bu-cha-ru-shu-ju-yi-ji-shu-ju-xian-shi" class="header-anchor">.</a></h4><blockquote><p><code>lpush</code>  key  value</p><p><code>rpush</code>  key  value</p><p><code>lrange</code>  key  0  -1</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130607.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130610.png" alt></p><h4><span id="2-cong-tou-bu-wei-bu-yi-chu-shu-ju">2.从头部/尾部<mark>移除</mark>数据</span><a href="#2-cong-tou-bu-wei-bu-yi-chu-shu-ju" class="header-anchor">.</a></h4><blockquote><p><code>lpop</code>  key  </p><p><code>rpop</code>  key  </p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130614.png" alt></p><h4><span id="3-huo-qu-zhi-ding-suo-yin-de-zhi">3.<mark>获取</mark>指定索引的值</span><a href="#3-huo-qu-zhi-ding-suo-yin-de-zhi" class="header-anchor">.</a></h4><blockquote><p><code>lindex</code>   key  index</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130617.png" alt></p><h4><span id="4-huo-qu-lie-biao-chang-du">4.获取列表长度</span><a href="#4-huo-qu-lie-biao-chang-du" class="header-anchor">.</a></h4><blockquote><p><code>llen</code>  key  </p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130623.png" alt="image-20201112171308314"></p><h4><span id="5-yi-chu-zhi-ding-de-zhi">5.移除指定的值</span><a href="#5-yi-chu-zhi-ding-de-zhi" class="header-anchor">.</a></h4><blockquote><p><code>lrem</code>   key  count(移除的个数)  element  </p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130627.png" alt></p><h4><span id="6-lie-biao-xiu-jian-trim">6.列表修剪 trim</span><a href="#6-lie-biao-xiu-jian-trim" class="header-anchor">.</a></h4><blockquote><p><code>ltrim</code>  key  startIndex  endIndex  </p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130632.png" alt></p><h4><span id="7-ye-ke-yi-shi-yong-set">7.也可以使用set</span><a href="#7-ye-ke-yi-shi-yong-set" class="header-anchor">.</a></h4><blockquote><p><code>lset</code>   key   index   value  // 将列表中 指定index的值替换为对应的value</p></blockquote><ul><li>需要保证key和index都存在，否则报错</li></ul><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130638.png" alt></p><h4><span id="8-cha-ru-zhi-ding-de-zhi">8.插入指定的值</span><a href="#8-cha-ru-zhi-ding-de-zhi" class="header-anchor">.</a></h4><blockquote><p><code>linsert</code>   key   before|after   pivot(那个单词后)   value </p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130644.png" alt></p><h4><span id="9-fu-za-cao-zuo">9.复杂操作</span><a href="#9-fu-za-cao-zuo" class="header-anchor">.</a></h4><h5><span id="1-rpoplpush">1）rpoplpush</span><a href="#1-rpoplpush" class="header-anchor">.</a></h5><blockquote><p><code>rpoplpush</code>    source   destination(newList)  // 先移除source最后的元素，再将该元素添加到newList中</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130703.png" alt></p><h4><span id="shi-yong-chang-jing">使用场景：</span><a href="#shi-yong-chang-jing" class="header-anchor">.</a></h4><ol><li>栈（lpush、lpop）</li><li>队列（lpush、rpop）<ol><li>消息队列</li></ol></li><li>阻塞队列</li></ol><h3><span id="set-ji-he">Set（集合）</span><a href="#set-ji-he" class="header-anchor">.</a></h3><blockquote><p>集合中的值不能重复（无序）</p></blockquote><h4><span id="1-tian-jia-cheng-yuan-dao-ji-he-zhong-bing-cha-kan-suo-you-cheng-yuan">1.添加成员到集合中，并查看所有成员</span><a href="#1-tian-jia-cheng-yuan-dao-ji-he-zhong-bing-cha-kan-suo-you-cheng-yuan" class="header-anchor">.</a></h4><blockquote><p><code>sadd</code>    key     member</p></blockquote><blockquote><p><code>smembers</code>   key</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130707.png" alt></p><h4><span id="2-pan-ding-cheng-yuan-shi-fou-cun-zai">2.判定成员是否存在</span><a href="#2-pan-ding-cheng-yuan-shi-fou-cun-zai" class="header-anchor">.</a></h4><blockquote><p><code>sismember</code>   key    member</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130711.png" alt></p><h4><span id="3-cha-kan-ji-he-chang-du-te-bie">3.查看集合长度（特别）</span><a href="#3-cha-kan-ji-he-chang-du-te-bie" class="header-anchor">.</a></h4><blockquote><p><code>scard</code>   key</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130716.png" alt></p><h4><span id="4-yi-chu-zhi-ding-de-cheng-yuan">4.移除指定的成员</span><a href="#4-yi-chu-zhi-ding-de-cheng-yuan" class="header-anchor">.</a></h4><blockquote><p><code>srem</code>   key    member</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130719.png" alt></p><h4><span id="5-huo-qu-ji-he-zhong-de-sui-ji-cheng-yuan">5.获取集合中的随机成员</span><a href="#5-huo-qu-ji-he-zhong-de-sui-ji-cheng-yuan" class="header-anchor">.</a></h4><blockquote><p><code>srandmember</code>    key   [count]</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130722.png" alt></p><h4><span id="6-sui-ji-yi-chu-cheng-yuan">6.随机移除成员</span><a href="#6-sui-ji-yi-chu-cheng-yuan" class="header-anchor">.</a></h4><blockquote><p><code>spop</code>    key   [count]</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130726.png" alt></p><h4><span id="7-yi-dong-ji-he-cheng-yuan-dao-qi-ta-ji-he">7.移动集合成员到其他集合</span><a href="#7-yi-dong-ji-he-cheng-yuan-dao-qi-ta-ji-he" class="header-anchor">.</a></h4><blockquote><p><code>smove</code>   source    destination   member(需要移动的成员)</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130730.png" alt></p><h4><span id="8-shu-zi-ji-he-lei">8.数字集合类：</span><a href="#8-shu-zi-ji-he-lei" class="header-anchor">.</a></h4><ul><li>差集 <code>sdiff</code>   key1 ，key2 …</li><li>交集（共同好友）<code>sinter</code>   key1，key2 …</li><li>并集 <code>sunion</code>   key1 ，key2 …</li></ul><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130734.png" alt></p><h3><span id="hash-ha-xi">Hash（哈希）</span><a href="#hash-ha-xi" class="header-anchor">.</a></h3><blockquote><p>key-Map  or  key-&lt;k,v&gt;，value是一个Map</p></blockquote><blockquote><p>Hash本质和hash没有区别，只是value变成了Map</p></blockquote><blockquote><p>用户信息保存，经常变动的信息，适合对象的存储</p></blockquote><h4><span id="1-jian-dan-cun-chu-map-he-huo-qu-map">1.简单存储Map和获取Map</span><a href="#1-jian-dan-cun-chu-map-he-huo-qu-map" class="header-anchor">.</a></h4><blockquote><p><code>hset</code>   key    field   value  [k1  v1  [k2  v2  …]]</p></blockquote><blockquote><p><code>hget</code>    key   field</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130741.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130745.png" alt></p><h4><span id="2-huo-qu-suo-you-map-zi-duan-ji-zhi">2.获取所有Map字段及值</span><a href="#2-huo-qu-suo-you-map-zi-duan-ji-zhi" class="header-anchor">.</a></h4><blockquote><p><code>hgetall</code>   key</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130748.png" alt></p><h4><span id="3-shan-chu-map-zhong-de-zi-duan">3.删除Map中的字段</span><a href="#3-shan-chu-map-zhong-de-zi-duan" class="header-anchor">.</a></h4><blockquote><p><code>hdel</code>    key    field</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130753.png" alt></p><h4><span id="4-cha-kan-map-zhong-mou-zi-duan-shi-fou-cun-zai">4.查看Map中某字段是否存在</span><a href="#4-cha-kan-map-zhong-mou-zi-duan-shi-fou-cun-zai" class="header-anchor">.</a></h4><blockquote><p><code>hexists</code>    key    field</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130758.png" alt></p><h4><span id="5-huo-qu-suo-you-zi-duan-huo-zhe-suo-you-zi-duan-dui-ying-de-zhi">5.获取所有字段或者所有字段对应的值</span><a href="#5-huo-qu-suo-you-zi-duan-huo-zhe-suo-you-zi-duan-dui-ying-de-zhi" class="header-anchor">.</a></h4><blockquote><p><code>hkeys</code>    key    // 此处的key是Map名</p></blockquote><blockquote><p><code>hvals</code>    key    </p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130801.png" alt></p><h4><span id="6-zeng-liang-i">6.增量i++</span><a href="#6-zeng-liang-i" class="header-anchor">.</a></h4><blockquote><p><code>hincrby</code>   key   field    value</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130805.png" alt></p><h4><span id="7-bu-cun-zai-jiu-tian-jia-cheng-gong">7.不存在，就添加成功</span><a href="#7-bu-cun-zai-jiu-tian-jia-cheng-gong" class="header-anchor">.</a></h4><blockquote><p><code>hsetnx</code>    key    field    value  // field 在map中不存在就添加这个值，否则不做改变</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130808.png" alt></p><h4><span id="8-gua-he-cun-chu-dui-xiang">8.适合存储对象</span><a href="#8-gua-he-cun-chu-dui-xiang" class="header-anchor">.</a></h4><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130813.png" alt></p><h3><span id="zset-you-xu-ji-he">Zset（有序集合）</span><a href="#zset-you-xu-ji-he" class="header-anchor">.</a></h3><blockquote><p>在Set基础上增加了一个值（用于排序的值）</p></blockquote><blockquote><p>存储班级成绩表，工资表排序，</p><p>普通消息 = 1，重要消息 = 2，带权重进行判断</p><p>排行榜应用实现</p></blockquote><h4><span id="1-tian-jia-he-huo-qu">1.添加 和 获取</span><a href="#1-tian-jia-he-huo-qu" class="header-anchor">.</a></h4><blockquote><p><code>zadd</code>    key     n    value</p></blockquote><blockquote><p><code>zrange</code>   key    startIndex    endIndex</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130816.png" alt></p><h4><span id="2-pai-xu-shi-xian-sheng-xu-he-jiang-xu">2.排序实现（升序和降序）</span><a href="#2-pai-xu-shi-xian-sheng-xu-he-jiang-xu" class="header-anchor">.</a></h4><blockquote><p><code>zrangebyscore</code>     key      -inf      +inf      [withscores]  // 升序</p><p><code>zrange</code>     key    0      -1</p></blockquote><blockquote><p><code>zrevrangebyscore</code>    key     +inf     -inf       [withscores]  // 降序</p><p><code>zrevrange</code>    key   0    -1</p></blockquote><blockquote><p><code>zrangebyscore</code>    key    -inf    任意值n  // 升序 + 显示区间  [-inf，n]</p></blockquote><h4><span id="3-yi-chu-zhi-ding-de-zhi">3.移除指定的值</span><a href="#3-yi-chu-zhi-ding-de-zhi" class="header-anchor">.</a></h4><blockquote><p><code>zrem</code>    key    value</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130821.png" alt></p><h4><span id="4-ji-he-de-chang-du">4.集合的长度</span><a href="#4-ji-he-de-chang-du" class="header-anchor">.</a></h4><blockquote><p><code>zcard</code>    key </p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130826.png" alt></p><h4><span id="5-zhi-ding-qu-jian-de-ji-he-chang-du">5.指定区间的集合长度</span><a href="#5-zhi-ding-qu-jian-de-ji-he-chang-du" class="header-anchor">.</a></h4><blockquote><p><code>zcount</code>    key     startIndex    endIndex</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130829.png" alt></p><h2><span id="si-san-chong-te-shu-shu-ju-lei-xing">四、三种特殊数据类型</span><a href="#si-san-chong-te-shu-shu-ju-lei-xing" class="header-anchor">.</a></h2><h3><span id="geospatial">Geospatial</span><a href="#geospatial" class="header-anchor">.</a></h3><blockquote><p>朋友的定位，附近的人，打车距离计算</p><p>底层是 <code>Zset</code>，<strong>即可以使用Zset的命令操作Geospatial</strong></p></blockquote><p><code>Redis3.2就支持了</code></p><h4><span id="1-tian-jia-di-li-wei-zhi">1.添加地理位置</span><a href="#1-tian-jia-di-li-wei-zhi" class="header-anchor">.</a></h4><ul><li>两极无法添加</li><li>经度：-180 ~ 180（度）</li><li>纬度：-85.05112878 ~ 85.05112878（度）</li></ul><blockquote><p><code>geoadd</code>     key    经度    纬度     名称</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130835.png" alt></p><h4><span id="2-huo-qu-zhi-ding-wei-zhi-de-di-li-wei-zhi">2.获取指定位置的地理位置</span><a href="#2-huo-qu-zhi-ding-wei-zhi-de-di-li-wei-zhi" class="header-anchor">.</a></h4><blockquote><p><code>geopos</code>     key     名称</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130839.png" alt></p><h4><span id="3-fan-hui-liang-ge-gei-ding-wei-zhi-zhi-jian-de-ju-chi-zhi-xian-ju-chi">3.返回两个给定位置之间的距离（直线距离）</span><a href="#3-fan-hui-liang-ge-gei-ding-wei-zhi-zhi-jian-de-ju-chi-zhi-xian-ju-chi" class="header-anchor">.</a></h4><ul><li>单位：<ul><li>m ：米</li><li>km ：千米</li><li>mi ： 英里</li><li>ft ：英尺</li></ul></li></ul><blockquote><p><code>geodist</code>    key     </p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130844.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130848.png" alt></p><h4><span id="4-yi-gei-ding-zhi-wei-ban-jing-yi-jing-du-he-wei-du-wei-zhong-xin-cha-zhao">4.以给定值为半径，以经度和维度为中心，查找</span><a href="#4-yi-gei-ding-zhi-wei-ban-jing-yi-jing-du-he-wei-du-wei-zhong-xin-cha-zhao" class="header-anchor">.</a></h4><ul><li>附近的人（获得所有附近的人的地址（开启定位））通过半径查询</li></ul><blockquote><p><code>georadius</code>     key     经度       纬度         半径         单位</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130852.png" alt></p><h4><span id="5-yi-gei-ding-zhi-wei-ban-jing-yi-cheng-yuan-cheng-shi-ming-wei-zhong-xin-cha-zhao">5.以给定值为半径，以成员(城市名)为中心，查找</span><a href="#5-yi-gei-ding-zhi-wei-ban-jing-yi-cheng-yuan-cheng-shi-ming-wei-zhong-xin-cha-zhao" class="header-anchor">.</a></h4><blockquote><p><code>georadiusbymember</code>     key     成员名       半径         单位</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130856.png" alt></p><h4><span id="6-fan-hui-yi-ge-huo-duo-ge-wei-zhi-yuan-su-de-geohash-biao-shi">6.返回一个或多个位置元素的geohash表示</span><a href="#6-fan-hui-yi-ge-huo-duo-ge-wei-zhi-yuan-su-de-geohash-biao-shi" class="header-anchor">.</a></h4><ul><li>如果两个字符串越相似，表示两个地方越近</li></ul><blockquote><p><code>geohash</code>      key       成员1       成员2</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130900.png" alt></p><h3><span id="hyperloglog">Hyperloglog</span><a href="#hyperloglog" class="header-anchor">.</a></h3><blockquote><p>基数统计的算法</p></blockquote><ul><li>优点<ul><li>占用内存是<strong>固定的</strong>，2<sup>64</sup>不同的元素的基数，只需要12KB的内存。（大数据情况下，有0.81%错误率）</li></ul></li></ul><blockquote><p>基数：集合中元素的个数（先去重），如{1,2,2,3}  其基数为3（集合去重后为1,2,3 有3个元素）</p></blockquote><blockquote><p>网页的UV（一个人访问访问一个网站多次，但是还是算作一个人）</p></blockquote><p>传统实现UV：Set保存用户的Id，然后统计set中的元素的数量作为标准判断（这种需要保存大量用户的ID）</p><p><code>Redis2.8.9</code></p><h5><span id="1-ce-shi">1.测试</span><a href="#1-ce-shi" class="header-anchor">.</a></h5><blockquote><p>创建一组元素  ： <code>pfadd</code>    key     ele1  ele2  ele3   …</p></blockquote><blockquote><p>统计对应key的基数：<code>pfcount</code>     key1    [key2  …]    // 多个key 就是统计这些key并集的基数</p></blockquote><blockquote><p>合并：<code>pfmerge</code>      destkey      sourceKey1      sourceKey2     [sourceKey3 …] </p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130905.png" alt="image-20201115213230322"></p><h3><span id="bitmaps">Bitmaps</span><a href="#bitmaps" class="header-anchor">.</a></h3><blockquote><p>位存储，位图（操作二进制）</p></blockquote><p>统计用户信息，活跃，不活跃！登录、未登录！打卡，365打卡！(两个状态都可以使用)</p><h4><span id="1-an-li-yi-zhou-da-qia-ji-lu">1.案例：一周打卡记录</span><a href="#1-an-li-yi-zhou-da-qia-ji-lu" class="header-anchor">.</a></h4><p><strong>一周过去</strong></p><blockquote><p><code>setbit</code>    key    offset     bit</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130909.png" alt></p><p><strong>查看单天打卡情况</strong></p><blockquote><p><code>getbit</code>    key    offset </p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130914.png" alt></p><p><strong>统计所有打卡的天数</strong></p><blockquote><p><code>bitcount</code>    key</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130919.png" alt></p><h2><span id="wu-shi-wu">五、事务</span><a href="#wu-shi-wu" class="header-anchor">.</a></h2><blockquote><p>注意：Redis单条命令是保证原子性的；<mark><strong>但是事务不保证原子性！</strong></mark></p><p><mark><strong>Redis事务没有隔离级别的概念</strong>，所有的命令在事务中，并没有直接被执行，只有发起执行命令时才执行</mark></p></blockquote><p><strong>Redis事务本质：</strong>一组命令的集合，一个事务中的所有命令都会别序列化，在事务执行过程中，会按照顺序执行！</p><pre class="line-numbers language-bahs"><code class="language-bahs">--- 队列 set set set 执行 ---<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>一次性、顺序性、排他性！执行一些列的命令</p><p><strong>Redis的事务：</strong></p><ul><li>开启事务（<code>multi</code>）</li><li>命令入队（<code>其他命令</code>）</li><li>执行事务（<code>exec</code>）</li></ul><blockquote><h3><span id="zheng-chang-shi-wu-de-zhi-xing">正常事务的执行</span><a href="#zheng-chang-shi-wu-de-zhi-xing" class="header-anchor">.</a></h3></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130924.png" alt></p><blockquote><h3><span id="qu-xiao-shi-wu">取消事务</span><a href="#qu-xiao-shi-wu" class="header-anchor">.</a></h3></blockquote><p><code>discard</code></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130927.png" alt="、"></p><blockquote><h3><span id="yi-chang-zhi-xing">异常执行</span><a href="#yi-chang-zhi-xing" class="header-anchor">.</a></h3></blockquote><h4><span id="1-bian-yi-shi-ming-ling-xie-cuo">1.编译时（命令写错）</span><a href="#1-bian-yi-shi-ming-ling-xie-cuo" class="header-anchor">.</a></h4><blockquote><p><strong>整个命令队列都不会执行</strong></p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130931.png" alt></p><h4><span id="2-yun-xing-shi">2.运行时</span><a href="#2-yun-xing-shi" class="header-anchor">.</a></h4><blockquote><p><strong>报错语句，会抛出异常；其他语句照样运行</strong></p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130935.png" alt></p><h3><span id="jian-kong-watch-mian-shi-chang-wen">监控 Watch（面试常问）</span><a href="#jian-kong-watch-mian-shi-chang-wen" class="header-anchor">.</a></h3><h4><span id="le-guan-suo-shi-xian-miao-sha">乐观锁：实现秒杀</span><a href="#le-guan-suo-shi-xian-miao-sha" class="header-anchor">.</a></h4><ul><li>顾名思义，很乐观，认为什么时候都不会出现问题，所以不会加锁！（更新数据的时候去判断一下，在此期间是否有人修改过这个数据）<ul><li>获取version</li><li>更新的时候比较version</li></ul></li></ul><h4><span id="bei-guan-suo">悲观锁</span><a href="#bei-guan-suo" class="header-anchor">.</a></h4><ul><li>顾名思义，很悲观，认为什么时候都会出现问题，无论做什么都会加锁！</li></ul><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130942.png" alt></p><h4><span id="redis-shi-xian-le-guan-suo">Redis实现乐观锁</span><a href="#redis-shi-xian-le-guan-suo" class="header-anchor">.</a></h4><h5><span id="zhi-xing-cheng-gong-dan-xian-cheng-mei-you-gan-rao-qing-kuang">执行成功（单线程没有干扰情况）</span><a href="#zhi-xing-cheng-gong-dan-xian-cheng-mei-you-gan-rao-qing-kuang" class="header-anchor">.</a></h5><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130946.png" alt></p><h5><span id="ce-shi-duo-xian-cheng-xiu-gai-zhi-shi-yong-watch-ke-yi-dang-zuo-redis-de-le-guan-suo-cao-zuo">测试多线程修改值，使用watch可以当作redis的<mark>乐观锁操作</mark></span><a href="#ce-shi-duo-xian-cheng-xiu-gai-zhi-shi-yong-watch-ke-yi-dang-zuo-redis-de-le-guan-suo-cao-zuo" class="header-anchor">.</a></h5><p><strong>演示</strong>‘</p><p>①开启俩个，客户端，模拟多线程情况</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119130959.png" alt="image-20201116083639168"></p><p>②左边支出20元（但是不执行事务），然后右边修改money的数值</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131006.png" alt></p><p>③左边执行事务，发现执行操作返回nil，查看money和out，发现事务并没有被执行（确实有乐观锁的效果）</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131010.png" alt></p><p><strong>如果修改失败获取最新的值就好（<mark><code>exec</code>、<code>unwatch</code>、``discard`都可以清除连接时所有的监视）</mark></strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131014.png" alt></p><h5><span id="xiao-jie">小结</span><a href="#xiao-jie" class="header-anchor">.</a></h5><ul><li>使用Redis实现乐观锁（watch监听某一个key，获取其最新的value）<ul><li>在提交事务时，如果key的value没有发生变化，则成功执行</li><li>在提交事务时，如果key的value发生了变化，则无法成功执行</li></ul></li></ul><h2><span id="liu-jedis">六、Jedis</span><a href="#liu-jedis" class="header-anchor">.</a></h2><h3><span id="1-shi-me-shi-jedis">1、什么是Jedis</span><a href="#1-shi-me-shi-jedis" class="header-anchor">.</a></h3><blockquote><p>Jedis是一个用java写的Redis数据库操作的客户端，通过Jedis，可以很方便的对redis数据库进行操作</p></blockquote><h3><span id="2-shi-yong">2、使用</span><a href="#2-shi-yong" class="header-anchor">.</a></h3><p>①新建空maven项目</p><p>②导入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--导入jedis包 Redis客户端--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.3.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--导入fastjson--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.70<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>③编码</p><blockquote><p>下面使用远程连接需要的操作：<a href="https://blog.csdn.net/weixin_43423864/article/details/109087670" target="_blank" rel="noopener">https://blog.csdn.net/weixin_43423864/article/details/109087670</a></p></blockquote><ol><li><strong>连接数据库</strong></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PingTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 1. new Jedis 对象</span>        Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"ip地址"</span><span class="token punctuation">,</span><span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 如果设置密码 需要认证，没有设置忽略下面这条语句</span>        jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/// jedis 所有的命令(方法)都是之前学的命令</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 测试连接</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131021.png" alt></p><ol start="2"><li><p><strong>操作</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 连通</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"ip地址"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//基本操作</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"清空数据："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">flushAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"判断key（name）是否存在："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设置name的value："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"liuyou"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"设置pwd的value："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">setnx</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span> <span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印所有的key："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"获取该name的value："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"删除pwd："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">del</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重命名name为username："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打印所有的key："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"返回当前数据库中key的数目："</span> <span class="token operator">+</span> jedis<span class="token punctuation">.</span><span class="token function">dbSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">清空数据：OK判断key（name）是否存在：<span class="token boolean">false</span>设置name的value：<span class="token number">1</span>设置pwd的value：<span class="token number">1</span>打印所有的key：<span class="token punctuation">[</span>pwd<span class="token punctuation">,</span> name<span class="token punctuation">]</span>获取该name的value：liuyou删除pwd：<span class="token number">1</span>重命名name为username：OK打印所有的key：<span class="token punctuation">[</span>username<span class="token punctuation">]</span>返回当前数据库中key的数目：<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>关闭连接</strong></p></li></ol><pre class="line-numbers language-java"><code class="language-java">jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="4"><li><strong>事务</strong></li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 连通</span>Jedis jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"IP地址"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">auth</span><span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>JSONObject jsonObject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JSONObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"liuyou"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jsonObject<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pwd"</span><span class="token punctuation">,</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String s <span class="token operator">=</span> jsonObject<span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>jedis<span class="token punctuation">.</span><span class="token function">flushAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/// 加监听 watch</span><span class="token comment" spellcheck="true">// jedis.watch("user");</span><span class="token comment" spellcheck="true">// 开启事务</span>Transaction multi <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">multi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">{</span>    multi<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 其他语句</span>    <span class="token comment" spellcheck="true">// 执行事务</span>    multi<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 取消事务</span>    multi<span class="token punctuation">.</span><span class="token function">discard</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>jedis<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 关闭连接</span>    jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="qi-springboot-zheng-he">七、SpringBoot整合</span><a href="#qi-springboot-zheng-he" class="header-anchor">.</a></h2><blockquote><p>在SpringBoot2.x之后，原来的jedis被替换为lettuce</p></blockquote><ul><li>jedis<ul><li>采用的直连，多个线程操作的话，是不安全的，如果想要避免不安全，使用jedis pool连接池！BIO</li></ul></li><li>lettuce<ul><li>采用netty，实例可以在多个线程中共享，不存在线程不安全问题，可以减少线程数据了，性能高，NIO</li></ul></li></ul><h4><span id="xin-jian-springboot-xiang-mu">①新建springboot项目</span><a href="#xin-jian-springboot-xiang-mu" class="header-anchor">.</a></h4><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131030.png" alt></p><h4><span id="redisautoconfiguration-yuan-ma-fen-xi">② <code>RedisAutoConfiguration</code>源码分析</span><a href="#redisautoconfiguration-yuan-ma-fen-xi" class="header-anchor">.</a></h4><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119205923.png" alt></p><h4><span id="zheng-he-ce-shi">③整合测试</span><a href="#zheng-he-ce-shi" class="header-anchor">.</a></h4><p>1、导入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-data-redis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、配置Redis（application.xml）</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># SpringBoot 整合Redis</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span><span class="token attr-value">47.110.130.35</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span><span class="token attr-value">6379</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value">liuyou</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、编写测试类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Redis02SpringbootApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    RedisTemplate redisTemplate<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//redisTemplate</span>        <span class="token comment" spellcheck="true">// 1.使用redisTemplate.opsForxxx 操作对应的数据结构</span>        <span class="token comment" spellcheck="true">// 2.可使用redisTemplate 进行简单的key操作，如multi、move、watch、keys 等操作</span>        <span class="token comment" spellcheck="true">/// 3.可使用获取连接，通过连接进行更多操作</span>           <span class="token comment" spellcheck="true">// RedisConnection connection = redisTemplate.getConnectionFactory().getConnection();</span>           <span class="token comment" spellcheck="true">// RedisZSetCommands redisZSetCommands = connection.zSetCommands();</span>        <span class="token comment" spellcheck="true">// 这里只使用1.演示</span>        ValueOperations str <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        str<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span><span class="token string">"liuminkai刘民锴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131040.png" alt="结果展示"></p><blockquote><p>但是存在问题，没有序列化，存储在Redis中的中文会被转义，如下图</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131044.png" alt></p><blockquote><p>为啥会出现这个情况？ RedisTemplate默认序列化使用JDK的，我们需要使用JSON格式</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131048.png" alt></p><blockquote><p>如何解决？我们需要编写自定义Redis配置类，自定义RedisTemplate</p></blockquote><h4><span id="zi-ding-yi-redistemplate">④自定义RedisTemplate</span><a href="#zi-ding-yi-redistemplate" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRedisConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 更改Key ：Object ==> String 符合日常使用</span>    <span class="token comment" spellcheck="true">// 自己定义了一个 RedisTemplate</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"all"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span>RedisConnectionFactory factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 我们为了自己开发方便，一般直接使用 &lt;String, Object></span>        RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> template <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Json序列化配置</span>        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jackson2JsonRedisSerializer</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectMapper om <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">setVisibility</span><span class="token punctuation">(</span>PropertyAccessor<span class="token punctuation">.</span>ALL<span class="token punctuation">,</span> JsonAutoDetect<span class="token punctuation">.</span>Visibility<span class="token punctuation">.</span>ANY<span class="token punctuation">)</span><span class="token punctuation">;</span>        om<span class="token punctuation">.</span><span class="token function">enableDefaultTyping</span><span class="token punctuation">(</span>ObjectMapper<span class="token punctuation">.</span>DefaultTyping<span class="token punctuation">.</span>NON_FINAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        jackson2JsonRedisSerializer<span class="token punctuation">.</span><span class="token function">setObjectMapper</span><span class="token punctuation">(</span>om<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// String 的序列化</span>        StringRedisSerializer stringRedisSerializer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// key采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的key也采用String的序列化方式</span>        template<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span>stringRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// hash的value序列化方式采用jackson</span>        template<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span>jackson2JsonRedisSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span>        template<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> template<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>自定义RedisTemplate后，再启动③的测试类，结果Redis中正常显示</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131054.png" alt></p><h4><span id="redisutils-gong-ju-lei">⑤<mark>RedisUtils工具类</mark></span><a href="#redisutils-gong-ju-lei" class="header-anchor">.</a></h4><blockquote><p>日常开发我们都不会使用原始的<code>RedisTemplate</code>，都会封装一个RedisUtils工具类便于使用</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuyou<span class="token punctuation">.</span>utils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>data<span class="token punctuation">.</span>redis<span class="token punctuation">.</span>core<span class="token punctuation">.</span>RedisTemplate<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>util<span class="token punctuation">.</span>CollectionUtils<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>concurrent<span class="token punctuation">.</span>TimeUnit<span class="token punctuation">;</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">RedisUtils</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> RedisTemplate<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> redisTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// =============================common============================</span>    <span class="token comment" spellcheck="true">/**     * 指定缓存失效时间     * @param key  键     * @param time 时间(秒)     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">expire</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据key 获取过期时间     * @param key 键 不能为null     * @return 时间(秒) 返回0代表为永久有效     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getExpire</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">getExpire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断key是否存在     * @param key 键     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除缓存     * @param key 可以传一个值 或多个     */</span>    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">del</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>CollectionUtils<span class="token punctuation">.</span><span class="token function">arrayToList</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================String=============================</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存获取     * @param key 键     * @return 值     */</span>    <span class="token keyword">public</span> Object <span class="token function">get</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> key <span class="token operator">==</span> null <span class="token operator">?</span> null <span class="token operator">:</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入     * @param key   键     * @param value 值     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 普通缓存放入并设置时间     * @param key   键     * @param value 值     * @param time  时间(秒) time要大于0 如果time小于等于0 将设置无限期     * @return true成功 false 失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">set</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> time<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递增     * @param key   键     * @param delta 要增加几(大于0)     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">incr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递增因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 递减     * @param key   键     * @param delta 要减少几(小于0)     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">decr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> delta<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>delta <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"递减因子必须大于0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token operator">-</span>delta<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ================================Map=================================</span>    <span class="token comment" spellcheck="true">/**     * HashGet     * @param key  键 不能为null     * @param item 项 不能为null     */</span>    <span class="token keyword">public</span> Object <span class="token function">hget</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取hashKey对应的所有键值     * @param key 键     * @return 对应的多个键值     */</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">hmget</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet     * @param key 键     * @param map 对应多个键值     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * HashSet 并设置时间     * @param key  键     * @param map  对应多个键值     * @param time 时间(秒)     * @return true成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hmset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 向一张hash表中放入数据,如果不存在将创建     *     * @param key   键     * @param item  项     * @param value 值     * @param time  时间(秒) 注意:如果已存在的hash表有时间,这里将会替换原有的时间     * @return true 成功 false失败     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hset</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 删除hash表中的值     *     * @param key  键 不能为null     * @param item 项 可以使多个 不能为null     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hdel</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 判断hash表中是否有该项的值     *     * @param key  键 不能为null     * @param item 项 不能为null     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasKey</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递增 如果不存在,就会创建一个 并把新增后的值返回     *     * @param key  键     * @param item 项     * @param by   要增加几(大于0)     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hincr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * hash递减     *     * @param key  键     * @param item 项     * @param by   要减少记(小于0)     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">hdecr</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> String item<span class="token punctuation">,</span> <span class="token keyword">double</span> by<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForHash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> item<span class="token punctuation">,</span> <span class="token operator">-</span>by<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ============================set=============================</span>    <span class="token comment" spellcheck="true">/**     * 根据key获取Set中的所有值     * @param key 键     */</span>    <span class="token keyword">public</span> Set<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">sGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">members</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据value从一个set中查询,是否存在     *     * @param key   键     * @param value 值     * @return true 存在 false不存在     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">sHasKey</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMember</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将数据放入set缓存     *     * @param key    键     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将set数据放入缓存     *     * @param key    键     * @param time   时间(秒)     * @param values 值 可以是多个     * @return 成功个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sSetAndTime</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取set缓存的长度     *     * @param key 键     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">sGetSetSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除值为value的     *     * @param key    键     * @param values 值 可以是多个     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">setRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> values<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long count <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> values<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> count<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ===============================list=================================</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的内容     *     * @param key   键     * @param start 开始     * @param end   结束 0 到 -1代表所有值     */</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> <span class="token function">lGet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> start<span class="token punctuation">,</span> <span class="token keyword">long</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">range</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取list缓存的长度     *     * @param key 键     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lGetListSize</span><span class="token punctuation">(</span>String key<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 通过索引 获取list中的值     *     * @param key   键     * @param index 索引 index>=0时， 0 表头，1 第二个元素，依次类推；index&lt;0时，-1，表尾，-2倒数第二个元素，依次类推     */</span>    <span class="token keyword">public</span> Object <span class="token function">lGetIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">index</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     * @param key   键     * @param value 值     * @param time  时间(秒)     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> Object value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPush</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 将list放入缓存     *     * @param key   键     * @param value 值     * @param time  时间(秒)     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lSet</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Object<span class="token operator">></span> value<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rightPushAll</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>time <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">expire</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 根据索引修改list中的某条数据     *     * @param key   键     * @param index 索引     * @param value 值     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">lUpdateIndex</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> index<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> index<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除N个值为value     *     * @param key   键     * @param count 移除多少个     * @param value 值     * @return 移除的个数     */</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">lRemove</span><span class="token punctuation">(</span>String key<span class="token punctuation">,</span> <span class="token keyword">long</span> count<span class="token punctuation">,</span> Object value<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Long remove <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> count<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> remove<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用该工具类直接<code>@Autowired</code>注入即可</p></blockquote><h2><span id="jin-jie">进阶</span><a href="#jin-jie" class="header-anchor">.</a></h2><blockquote><p>学会前面的所有内容 ==&gt; Redis基础</p></blockquote><blockquote><p>高级操作都在后面</p></blockquote><h2><span id="ba-redis-conf-xiang-jie">八、Redis.conf详解</span><a href="#ba-redis-conf-xiang-jie" class="header-anchor">.</a></h2><blockquote><p>我们启动Redis，一般都是通过Redis.conf启动（我前面是使用安装服务的6379.conf启动）</p><p>因此，我们必须了解Redis.conf的配置，才能更好理解和使用Redis</p></blockquote><blockquote><h3><span id="dan-wei">单位</span><a href="#dan-wei" class="header-anchor">.</a></h3></blockquote><ul><li><strong>大小写不敏感</strong></li></ul><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131119.png" alt></p><blockquote><h3><span id="bao-han">包含</span><a href="#bao-han" class="header-anchor">.</a></h3></blockquote><ul><li><p>可以包含多个配置文件（即，这些文件导入到主配置文件 <code>Redis.conf</code> 中）</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131123.png" alt></p></li></ul><blockquote><h3><span id="wang-luo">网络</span><a href="#wang-luo" class="header-anchor">.</a></h3></blockquote><pre class="line-numbers language-bash"><code class="language-bash">bind 0.0.0.0 <span class="token comment" spellcheck="true"># IP（默认127.0.0.1）</span>protected-mode no <span class="token comment" spellcheck="true"># 保护模式（默认yes）</span>port 6379 <span class="token comment" spellcheck="true"># 端口设置（默认6379）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><h3><span id="tong-yong">通用</span><a href="#tong-yong" class="header-anchor">.</a></h3></blockquote><pre class="line-numbers language-bash"><code class="language-bash">daemonize <span class="token function">yes</span> <span class="token comment" spellcheck="true"># 以守护进程方式运行，即后台运行（默认no）</span>pidfile /var/run/redis_6379.pid <span class="token comment" spellcheck="true"># 如果以后台运行，必须指定一个pid文件</span><span class="token comment" spellcheck="true"># 日志</span><span class="token comment" spellcheck="true"># Specify the server verbosity level.</span><span class="token comment" spellcheck="true"># This can be one of:</span><span class="token comment" spellcheck="true"># debug (大量信息, 使用于测试或开发阶段)</span><span class="token comment" spellcheck="true"># verbose (许多很少有用的信息，但不像调试级别那样混乱)</span><span class="token comment" spellcheck="true"># notice (比较冗长，你可能想在生产环境中使用)</span><span class="token comment" spellcheck="true"># warning (只有非常重要/关键的消息被记录下来)</span>loglevel notice  <span class="token comment" spellcheck="true"># 默认notice</span>logfile <span class="token string">""</span> <span class="token comment" spellcheck="true"># 日志的文件位置名</span>databases 16 <span class="token comment" spellcheck="true"># 数据库的数量（默认16）</span>always-show-logo <span class="token function">yes</span> <span class="token comment" spellcheck="true"># 是否开启 logo （默认yes）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3><span id="kuai-zhao">快照</span><a href="#kuai-zhao" class="header-anchor">.</a></h3></blockquote><p>持久化，在规定时间内，执行了多少次操作，会被持久化到文件(.rdb，.aof)</p><pre class="line-numbers language-bash"><code class="language-bash">save 900 1 <span class="token comment" spellcheck="true"># 900秒内（15分钟），如果至少有1个Key进行修改，我们就进行持久化操作</span>save 300 10 <span class="token comment" spellcheck="true"># 300秒内（5分钟），如果至少有10个Key进行修改，我们就进行持久化操作</span>save 60 10000 <span class="token comment" spellcheck="true"># 60秒内（1分钟），如果至少有10000个Key进行修改，我们就进行持久化操作</span>stop-writes-on-bgsave-error <span class="token function">yes</span> <span class="token comment" spellcheck="true"># 持久化如果出错，是否还需要继续工作（默认yes）</span>rdbcompression <span class="token function">yes</span> <span class="token comment" spellcheck="true"># 是否压缩rdb文件（默认yes），会消耗一些CPU资源</span>rdbchecksum <span class="token function">yes</span> <span class="token comment" spellcheck="true"># 保存rdb文件时，进行错误检查检验</span><span class="token function">dir</span> ./ <span class="token comment" spellcheck="true"># rdb文件保存的目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h4><span id="zhu-cong-fu-zhi-replication">主从复制 REPLICATION</span><a href="#zhu-cong-fu-zhi-replication" class="header-anchor">.</a></h4></blockquote><blockquote><h4><span id="an-quan-security">安全 SECURITY</span><a href="#an-quan-security" class="header-anchor">.</a></h4></blockquote><pre class="line-numbers language-bash"><code class="language-bash">requirepass 你的密码 <span class="token comment" spellcheck="true"># 设置密码（默认被注释着需要自己解开注释） </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131144.png" alt></p><p><strong>当然可以通过命令行配置(临时，服务重启失效)</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131149.png" alt></p><blockquote><h4><span id="ke-hu-duan-xian-zhi">客户端限制</span><a href="#ke-hu-duan-xian-zhi" class="header-anchor">.</a></h4></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># maxclients 10000 # 限制最多10000个客户端访问（默认注释）</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><h4><span id="nei-cun-guan-li">内存管理</span><a href="#nei-cun-guan-li" class="header-anchor">.</a></h4></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># maxmemory &lt;bytes> # 最大内存设置（默认注释）</span><span class="token comment" spellcheck="true"># maxmemory-policy noeviction # 内存达到上限之后的处理策略（默认noeviction）</span>    <span class="token comment" spellcheck="true"># 1、volatile-lru：只对设置了过期时间的key进行LRU（默认值） </span>    <span class="token comment" spellcheck="true"># 2、allkeys-lru ： 删除lru算法的key   </span>    <span class="token comment" spellcheck="true"># 3、volatile-random：随机删除即将过期key   </span>    <span class="token comment" spellcheck="true"># 4、allkeys-random：随机删除   </span>    <span class="token comment" spellcheck="true"># 5、volatile-ttl ： 删除即将过期的   </span>    <span class="token comment" spellcheck="true"># 6、noeviction ： 永不过期，返回错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><h3><span id="append-only-mode-aof-pei-zhi">APPEND ONLY MODE (AOF配置)</span><a href="#append-only-mode-aof-pei-zhi" class="header-anchor">.</a></h3></blockquote><pre class="line-numbers language-bash"><code class="language-bash">appendonly no <span class="token comment" spellcheck="true"># 默认是不开启aof的，默认使用rdb方式持久化</span>appendfilename <span class="token string">"appendonly.aof"</span> <span class="token comment" spellcheck="true"># 持久化的文件名</span><span class="token comment" spellcheck="true"># appendfsync always # 每次修改都会同步，销耗性能</span>appendfsync everysec <span class="token comment" spellcheck="true"># 每秒执行一次同步，可能会丢失这1秒的数据</span><span class="token comment" spellcheck="true"># appendfsync no # 不同步，操作系统自己同步数据，速度最快</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="jiu-redis-chi-jiu-hua-chong-dian">九、Redis持久化（重点）</span><a href="#jiu-redis-chi-jiu-hua-chong-dian" class="header-anchor">.</a></h2><blockquote><p>Redis是内存数据库，数据库状态断电及失，因此Redis提供了持久化功能（内存数据写入磁盘）</p></blockquote><h3><span id="1-rdb-redis-database">1、RDB（Redis DataBase）</span><a href="#1-rdb-redis-database" class="header-anchor">.</a></h3><blockquote><p>RDB持久化是指在指定的时间间隔内将内存中的数据集快照写入磁盘，实际操作过程是fork一个子进程，先将数据集写入临时文件，写入成功后，再替换之前的文件，用二进制压缩存储。 保存文件格式 <code>dump.rdb</code></p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131158.png" alt></p><p><img src="/2020/11/02/9349/image-20201117102650803.png" alt></p><h4><span id="she-zhi-rdb-wen-jian-bao-cun-tiao-jian">设置RDB文件保存条件</span><a href="#she-zhi-rdb-wen-jian-bao-cun-tiao-jian" class="header-anchor">.</a></h4><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131204.png" alt></p><p><strong>重启服务</strong></p><pre class="line-numbers language-bash"><code class="language-bash">systemctl restart redis_6379<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5><span id="jie-guo-ce-shi">结果测试</span><a href="#jie-guo-ce-shi" class="header-anchor">.</a></h5><p><strong>1.查看rdb文件存放的目录</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131209.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131213.png" alt></p><p><strong>2.删除已有的dump.rdb文件</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131218.png" alt></p><p><strong>3.添加5个key</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131223.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131228.png" alt="发现重新生成rdb文件"></p><h4><span id="rdb-wen-jian-sheng-cheng-hong-fa-ji-zhi"><strong>RDB文件生成触发机制</strong></span><a href="#rdb-wen-jian-sheng-cheng-hong-fa-ji-zhi" class="header-anchor">.</a></h4><p>1.满足redis.conf中，快照save生成条件</p><p>2.使用flushall命令，自动生成一个RDB文件</p><p>3.退出redis</p><h4><span id="rdb-wen-jian-hui-fu">RDB文件恢复</span><a href="#rdb-wen-jian-hui-fu" class="header-anchor">.</a></h4><blockquote><p>只需要将RDB文件放入Redis启动目录就可以了，Redis自动加载</p></blockquote><h4><span id="you-que-dian">优缺点</span><a href="#you-que-dian" class="header-anchor">.</a></h4><ul><li>优点：<ul><li>适合大规模的数据恢复！</li><li>对数据完整性要求不高</li></ul></li><li>缺点：<ul><li>需要一定的时间间隔进程操作；如果redis意外宕机，最后一次修改数据就没有了</li><li>fork进程的时候，会占用一定的空间</li></ul></li></ul><h3><span id="2-aof-append-only-file">2、AOF（Append Only File）</span><a href="#2-aof-append-only-file" class="header-anchor">.</a></h3><blockquote><p>AOF持久化以<strong>日志</strong>的形式<strong>记录服务器所处理的每一个写、删除操作</strong>，<strong>查询操作不会记录</strong>，<mark>只许追加文件，不许改写文件</mark>。以文本的方式记录，可以打开文件看到详细的操作记录。</p><p> 保存文件格式 <code>appendonly.aof</code></p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131235.png" alt></p><p><strong>aof默认不开启，需要到配置文件中开启</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131240.png" alt></p><h5><span id="chong-qi-redis-hou-appendonly-aof-wen-jian-zi-dong-sheng-cheng">重启redis后，appendonly.aof文件自动生成</span><a href="#chong-qi-redis-hou-appendonly-aof-wen-jian-zi-dong-sheng-cheng" class="header-anchor">.</a></h5><p><strong>客户端进行一些操作</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131247.png" alt></p><p><strong>appendonly.aof文件内容，日志形式记录</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131252.png" alt></p><h5><span id="chong-xie-gui-zhi">重写规制</span><a href="#chong-xie-gui-zhi" class="header-anchor">.</a></h5><blockquote><p>如果aof文件大于64mb，就会fork一个新进程来将我们的文件进行重写（清除之前的64mb）</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131257.png" alt></p><h5><span id="cuo-wu-xiu-fu">错误修复</span><a href="#cuo-wu-xiu-fu" class="header-anchor">.</a></h5><p>如果aof文件有错误，redis是启动不了的，可以使用官方自带 <code>redis-check-aof --fix aof文件</code>进行修复</p><h5><span id="you-que-dian">优缺点</span><a href="#you-que-dian" class="header-anchor">.</a></h5><ul><li>优点<ul><li>每一次修改都同步，文件完整性会更好</li><li>每秒同步一次，可能会丢失一秒数据</li></ul></li><li>缺点<ul><li>相对于数据文件来说，aof远远大于rdb，修复速度比rdb慢</li><li>aof运行速率比rdb慢（追加，频繁IO操作）</li></ul></li></ul><h3><span id="kuo-zhan">扩展</span><a href="#kuo-zhan" class="header-anchor">.</a></h3><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131303.png" alt></p><h2><span id="shi-redis-fa-bu-ding-yue">十、Redis发布订阅</span><a href="#shi-redis-fa-bu-ding-yue" class="header-anchor">.</a></h2><p>Redis 发布订阅(pub/sub)是一种<strong>消息通信模式</strong>：发送者(pub)发送消息，订阅者(sub)接收消息。微信、微博、关注系统！</p><p>Redis客户端可以订阅任意数量的频道</p><p><strong>订阅/发布消息图：</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131309.png" alt="订阅/发布消息图"></p><p>下图展示了频道 channel1 ， 以及订阅这个频道的三个客户端 —— client2 、 client5 和 client1 之间的关系：</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131317.png" alt></p><p>当有新消息通过 PUBLISH 命令发送给频道 channel1 时， 这个消息就会被发送给订阅它的三个客户端：</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131322.png" alt></p><h3><span id="ming-ling">命令</span><a href="#ming-ling" class="header-anchor">.</a></h3><p>这些命令被广泛用于构建即时通信应用，比如网络聊天室（chatroom）和实时广播、实时提醒等。</p><table><thead><tr><th>命令</th><th>描述</th></tr></thead><tbody><tr><td><code>PSUBSCRIBE pattern [pattern..]</code></td><td>订阅一个或多个符合给定模式的频道。</td></tr><tr><td><code>PUNSUBSCRIBE pattern [pattern..]</code></td><td>退订一个或多个符合给定模式的频道。</td></tr><tr><td><code>PUBSUB subcommand [argument[argument]]</code></td><td>查看订阅与发布系统状态。</td></tr><tr><td><code>PUBLISH channel message</code></td><td>向指定频道发布消息</td></tr><tr><td><code>SUBSCRIBE channel [channel..]</code></td><td>订阅给定的一个或多个频道。</td></tr><tr><td><code>SUBSCRIBE channel [channel..]</code></td><td>退订一个或多个频道</td></tr></tbody></table><h3><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">.</a></h3><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131328.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131335.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131340.png" alt></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> subscribe blog <span class="token comment" spellcheck="true"># 订阅频道</span>Reading messages<span class="token punctuation">..</span>. <span class="token punctuation">(</span>press Ctrl-C to quit<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 等待推送信息</span>1<span class="token punctuation">)</span> <span class="token string">"subscribe"</span>2<span class="token punctuation">)</span> <span class="token string">"blog"</span>3<span class="token punctuation">)</span> <span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 11<span class="token punctuation">)</span> <span class="token string">"message"</span> <span class="token comment" spellcheck="true"># 消息</span>2<span class="token punctuation">)</span> <span class="token string">"blog"</span> <span class="token comment" spellcheck="true"># 消息来自频道</span>3<span class="token punctuation">)</span> <span class="token string">"hello world!"</span> <span class="token comment" spellcheck="true"># 消息内容</span>127.0.0.1:6379<span class="token operator">></span> publish blog <span class="token string">"hello world!"</span> <span class="token comment" spellcheck="true"># 发送消息到频道</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span> 1127.0.0.1:6379<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="yuan-li">原理</span><a href="#yuan-li" class="header-anchor">.</a></h3><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131347.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131412.png" alt></p><p>每个 Redis 服务器进程都维持着一个表示服务器状态的 redis.h/redisServer 结构， 结构的 pubsub_channels 属性是一个字典， 这个字典就用于保存订阅频道的信息，其中，<strong>字典的键为正在被订阅的频道</strong>， 而<strong>字典的值则是一个链表， 链表中保存了所有订阅这个频道的客户端</strong>。</p><p>客户端订阅，就被链接到对应频道的链表的尾部，退订则就是将客户端节点从链表中移除。</p><h3><span id="shi-yong-chang-jing">使用场景：</span><a href="#shi-yong-chang-jing" class="header-anchor">.</a></h3><ul><li>实时消息系统！</li><li>实时聊天！(频道当作聊天室，将信息回显给所有人)</li><li>订阅，关注系统都是可以</li></ul><blockquote><p>复杂的情况，使用专业的消息中间件</p></blockquote><h3><span id="zuo-ding-yue-de-que-dian">做订阅的缺点</span><a href="#zuo-ding-yue-de-que-dian" class="header-anchor">.</a></h3><ol><li>如果一个客户端订阅了频道，但自己读取消息的速度却不够快的话，那么不断积压的消息会使redis输出缓冲区的体积变得越来越大，这可能使得redis本身的速度变慢，甚至直接崩溃。</li><li>这和数据传输可靠性有关，如果在订阅方断线，那么他将会丢失所有在短线期间发布者发布的消息。</li></ol><h2><span id="shi-yi-zhu-cong-fu-zhi">十一、主从复制</span><a href="#shi-yi-zhu-cong-fu-zhi" class="header-anchor">.</a></h2><h3><span id="gai-nian">概念</span><a href="#gai-nian" class="header-anchor">.</a></h3><p>主从复制，是指将一台Redis服务器的数据，复制到其他的Redis服务器。前者称为主节点（Master/Leader）,后者称为从节点（Slave/Follower）， 数据的复制是单向的！<strong>只能由主节点复制到从节点</strong>（主节点以写为主、从节点以读为主）。</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131424.png" alt></p><h3><span id="zhu-cong-fu-zhi-de-zhu-yao-zuo-yong">主从复制的主要作用</span><a href="#zhu-cong-fu-zhi-de-zhu-yao-zuo-yong" class="header-anchor">.</a></h3><ol><li><strong>数据冗余</strong>：主从复制实现了数据的热备份，是持久化之外的一种数据冗余的方式。</li><li><strong>故障恢复</strong>：当主节点故障时，从节点可以暂时替代主节点提供服务，是一种服务冗余的方式</li><li><strong>负载均衡</strong>：在主从复制的基础上，配合读写分离，由主节点进行写操作，从节点进行读操作，分担服务器的负载；尤其是在多读少写的场景下，通过多个从节点分担负载，提高并发量。</li><li><strong>高可用基石</strong>：主从复制还是哨兵和集群能够实施的基础。</li></ol><p>一般来说，要将Redis运用与工程项目中，只使用一台Redis是万万不能的（避免宕机，一主二从），原因如下：</p><ol><li>从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大</li><li>从容量上，单个Redis服务器内存容量有限，就算一台Redis服务器内存容量为256G，也不能将所有内存用作Redis存储内存，一般来说，<strong>单台服务器最大使用内存不超过20G。</strong></li></ol><blockquote><p>只要在公司中，不可能使用单机（有瓶颈），必须配置集群、使用主从复制</p></blockquote><h3><span id="huan-jing-pei-zhi">环境配置</span><a href="#huan-jing-pei-zhi" class="header-anchor">.</a></h3><p><mark>只需配置从库，无需配置主库</mark></p><p><strong>查看主从复制信息：</strong></p><blockquote><p>默认情况下，每一个Redis服务器都是主节点</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131432.png" alt></p><pre class="line-numbers language-bash"><code class="language-bash">127.0.0.1:6379<span class="token operator">></span> info replication<span class="token comment" spellcheck="true"># Replication</span>role:master  <span class="token comment" spellcheck="true"># 主节点</span>connected_slaves:0  <span class="token comment" spellcheck="true"># 没有从节点</span>master_replid:7776dea8df483b02d12cd482d2034ba55ec7dab0master_replid2:0000000000000000000000000000000000000000master_repl_offset:0second_repl_offset:-1repl_backlog_active:0repl_backlog_size:1048576repl_backlog_first_byte_offset:0repl_backlog_histlen:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="1-fu-zhi-pei-zhi-wen-jian-redis-conf-dao-redis-an-zhuang-mu-lu-xia">1、复制配置文件redis.conf到Redis安装目录下</span><a href="#1-fu-zhi-pei-zhi-wen-jian-redis-conf-dao-redis-an-zhuang-mu-lu-xia" class="header-anchor">.</a></h4><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131438.png" alt></p><h4><span id="2-zai-cong-gai-wen-jian-kao-bei-chu-3-ge-wen-jian">2、再从该文件拷贝出3个文件</span><a href="#2-zai-cong-gai-wen-jian-kao-bei-chu-3-ge-wen-jian" class="header-anchor">.</a></h4><p><strong>主：</strong><code>redis_6379.conf</code></p><p><strong>从：</strong><code>redis_6380.conf、redis_6381.conf</code></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131447.png" alt></p><h4><span id="3-xiu-gai-zhu-pei-zhi-wen-jian">3、修改主配置文件</span><a href="#3-xiu-gai-zhu-pei-zhi-wen-jian" class="header-anchor">.</a></h4><blockquote><p>由于端口和后台默认运行pid都是6379的，就不改了</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131452.png" alt="image-20201117125611885"></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131455.png" alt></p><h4><span id="4-xiu-gai-cong-pei-zhi-wen-jian">4、修改从配置文件</span><a href="#4-xiu-gai-cong-pei-zhi-wen-jian" class="header-anchor">.</a></h4><blockquote><p>下面以  <code>redis_6380.conf</code> 为例， <code>redis_6381.conf</code> 同理</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131500.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131504.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131508.png" alt></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131512.png" alt></p><h4><span id="pei-zhi-wen-jian-xiu-gai-de-xin-xi">配置文件修改的信息</span><a href="#pei-zhi-wen-jian-xiu-gai-de-xin-xi" class="header-anchor">.</a></h4><ol><li>端口（92行）</li><li>pid进程名（244行）</li><li>日志文件名（257行）</li><li>rdb文件名（339行）</li></ol><h4><span id="5-qi-dong-fu-wu-dan-ji-duo-fu-wu">5、启动服务（单机多服务）</span><a href="#5-qi-dong-fu-wu-dan-ji-duo-fu-wu" class="header-anchor">.</a></h4><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/bin <span class="token comment" spellcheck="true"># 进入配置文件所在目录</span><span class="token punctuation">[</span>root@liuyou bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># redis-server redis_6379.conf</span><span class="token punctuation">[</span>root@liuyou bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># redis-server redis_6380.conf</span><span class="token punctuation">[</span>root@liuyou bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># redis-server redis_6381.conf</span><span class="token punctuation">[</span>root@liuyou bin<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ps -ef | grep redis  # 查看启动状态</span>root      2862     1  0 13:13 ?        00:00:00 redis-server 0.0.0.0:6379root      2868     1  0 13:13 ?        00:00:00 redis-server 0.0.0.0:6380root      2874     1  0 13:13 ?        00:00:00 redis-server 0.0.0.0:6381root      2880  2393  0 13:13 pts/0    00:00:00 <span class="token function">grep</span> --color<span class="token operator">=</span>auto redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="6-deng-lu-ke-hu-duan">6、登录客户端</span><a href="#6-deng-lu-ke-hu-duan" class="header-anchor">.</a></h4><p>①开启4个窗口，前三用于主从复制，最后一个用于测试</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131520.png" alt></p><p>②登录（注意端口）</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131528.png" alt="窗口1"></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131535.png" alt="窗口2"></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131542.png" alt="窗口3"></p><h4><span id="7-yi-zhu-er-cong">7、一主二从</span><a href="#7-yi-zhu-er-cong" class="header-anchor">.</a></h4><p><mark>默认情况下，每一个Redis服务器都是主节点</mark></p><p><strong>一般情况下，只配置从机</strong></p><blockquote><p>如果有密码，需要在从配置文件中，进行配置，后面会解释</p></blockquote><blockquote><p>下面以 窗口3（端口为6381） 为例，窗口2同理 </p></blockquote><h5><span id="shi-yong-slaveof-zhi-ding-zhu-jie-dian-ip-he-duan-kou-lin-shi-pei-zhi"><strong>使用slaveof 指定 主节点 ip 和 端口（临时配置）</strong></span><a href="#shi-yong-slaveof-zhi-ding-zhu-jie-dian-ip-he-duan-kou-lin-shi-pei-zhi" class="header-anchor">.</a></h5><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131549.png" alt></p><p><strong>查看主节点，主从复制信息</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131554.png" alt></p><h5><span id="you-mi-ma-pei-zhi-yong-jiu-pei-zhi">有密码配置（+永久配置）</span><a href="#you-mi-ma-pei-zhi-yong-jiu-pei-zhi" class="header-anchor">.</a></h5><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131609.png" alt></p><blockquote><p>配置完重启服务</p></blockquote><h5><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">.</a></h5><blockquote><p>Redis只允许，主机写，从机读</p></blockquote><p><strong>主机写</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131615.png" alt></p><p><strong>从机读</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131621.png" alt></p><p><strong>从机不能写</strong></p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131626.png" alt></p><blockquote><p><strong>主机断开连接</strong>，从机依旧连接主机，但是没有写操作，如果从机中途恢复正常，从机依旧可以获取主机写的内容 </p></blockquote><blockquote><p>如果使用命令行配置，从机重启，就会变为主机（只有变为从机，才能获取之前主机内容）</p></blockquote><blockquote><p><strong>从机断开连接</strong>，期间，主机继续写新内容，只要从机恢复，就可获得主机写的新内容</p></blockquote><h5><span id="fu-zhi-yuan-li">复制原理</span><a href="#fu-zhi-yuan-li" class="header-anchor">.</a></h5><p>Slave 启动成功连接到Master后会发送一个sync命令</p><p>Master接收到命令，启动后台的存盘进程，同时收集所有接收到的用于修改数据集命令，在后台进程执行完毕之后，Master将传送整个数据文件到Slave，并完成一次完全同步</p><p><strong>全量复制</strong>：而Slave服务在接收到数据库文件数据后，将其存盘并加载到内存中</p><p><strong>增量复制</strong>：Master继续将新的所有收集到修改命令依次传给Slave，完成同步</p><blockquote><p>但是只要重新连接Master，一次完全同步（全量复制）将被自动执行。</p></blockquote><h4><span id="8-mao-mao-chong-pei-zhi-zhu-cong">8、毛毛虫配置（主从）</span><a href="#8-mao-mao-chong-pei-zhi-zhu-cong" class="header-anchor">.</a></h4><blockquote><p>上一个M连接下一个S，（可以看做主从复制的一种实现）</p><p>配置只需：将上面配好的，窗口3的主机改为窗口2即可</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131637.png" alt></p><h4><span id="9-dang-ji-shou-dong-pei-zhi-zhu-ji">9、宕机手动配置主机</span><a href="#9-dang-ji-shou-dong-pei-zhi-zhu-ji" class="header-anchor">.</a></h4><pre class="line-numbers language-bash"><code class="language-bash">slaveof no one <span class="token comment" spellcheck="true"># 如果主机断开连接，从机可以使用该命令，让自己变为主机，其他节点连到该节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>如果主机如果会来了，也没有从机连接上它。</p></blockquote><h2><span id="shi-er-shao-bing-mo-shi">十二、哨兵模式</span><a href="#shi-er-shao-bing-mo-shi" class="header-anchor">.</a></h2><blockquote><p>自动选举Redis主服务器（如果主服务器宕机）</p></blockquote><p>在 <code>Redis2.8</code>之前，采用手动配置主机的形式（会导致一段时间服务不可用）</p><p><code>Redis2.8</code>之后，Redis正是提供了Sentinel（哨兵）来解决这个问题（<strong>主机宕机，根据投票自动在从机中选出新主机</strong>）</p><p><strong>哨兵模式</strong>是一种特殊的模式，首先Redis提供了哨兵的命令，哨兵是一个独立的进程，他会独立运行<strong>。其原理是哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis实例</strong></p><h3><span id="dan-shao-bing-mo-shi">单哨兵模式</span><a href="#dan-shao-bing-mo-shi" class="header-anchor">.</a></h3><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131646.png" alt="单机哨兵"></p><h3><span id="shao-bing-de-zuo-yong">哨兵的作用：</span><a href="#shao-bing-de-zuo-yong" class="header-anchor">.</a></h3><ol><li>通过发送命令，让Redis服务器返回监控其运行状态，包括主服务器和从服务器</li><li>当哨兵监测到master宕机，会自动将slave切换到master，然后通过 <strong>发布订阅模式</strong> 通知其他的从服务器，修改配置文件，让他们切换主机</li></ol><h3><span id="duo-shao-bing-mo-shi">多哨兵模式</span><a href="#duo-shao-bing-mo-shi" class="header-anchor">.</a></h3><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131654.png" alt="多机哨兵"></p><p>假设主服务器宕机，哨兵1先检测到这个结果，系统并不会马上进行failover过程，仅仅是哨兵1主观的认为主服务器不可用，这个现象称为<strong>主观下线</strong>。</p><p>当其他哨兵也检测到主服务器不可用，并且达到一定数量时，那么哨兵之间就会进行一次投票，投票的结果有一个哨兵发起，进行failover故障转移操作。</p><p>切换成功后，就会通过<strong>发布订阅模式</strong>，让各个哨兵把自己监控的从服务器实现切换主机，这个时候称为<strong>客观下线</strong></p><h3><span id="ce-shi-yi-zhu-er-cong-dan-shao-bing">测试（一主二从，单哨兵）</span><a href="#ce-shi-yi-zhu-er-cong-dan-shao-bing" class="header-anchor">.</a></h3><h4><span id="1-pei-zhi-shao-bing-pei-zhi-wen-jian-wen-jian-ming-sentinel-conf">1、配置哨兵配置文件（文件名 <code>sentinel.conf</code>）</span><a href="#1-pei-zhi-shao-bing-pei-zhi-wen-jian-wen-jian-ming-sentinel-conf" class="header-anchor">.</a></h4><blockquote><p><strong>文件名不能写错</strong>，下面是文件内容（当然这个文件需要自己创建）</p></blockquote><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># sentinel monitor 被监控的名称 host port 1       </span><span class="token comment" spellcheck="true"># 1 表示 主机宕机，从机投票选举</span>sentinel monitor myredis  127.0.0.1 6379 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131701.png" alt></p><h4><span id="2-qi-dong-shao-bing-mo-shi">2、启动哨兵模式</span><a href="#2-qi-dong-shao-bing-mo-shi" class="header-anchor">.</a></h4><blockquote><p>如果被监控有密码 需在 <code>sentinel.conf</code> 配置文件中，追加</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># sentinel auth-pass 被监控主机名称  &lt;password> </span>sentinel auth-pass myredis  <span class="token operator">&lt;</span>password<span class="token operator">></span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></blockquote><pre class="line-numbers language-bash"><code class="language-bash">redis-sentinel sentinel.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131708.png" alt></p><h4><span id="3-guan-bi-zhu-ji-ce-shi-xuan-ju-qing-kuang">3、关闭主机，测试选举情况</span><a href="#3-guan-bi-zhu-ji-ce-shi-xuan-ju-qing-kuang" class="header-anchor">.</a></h4><p>①主机关闭</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131716.png" alt></p><p>②哨兵详情</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131721.png" alt></p><p>③检查窗口3（端口为6381）</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131732.png" alt></p><p>④我们恢复窗口1（即之前的主机），看看情况</p><blockquote><p>变成从机</p></blockquote><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131738.png" alt></p><h3><span id="you-que-dian">优缺点</span><a href="#you-que-dian" class="header-anchor">.</a></h3><ul><li>优点：<ul><li>哨兵集群，基于主从复制模式，所有的主从配置优点，它全有</li><li>主从可以切换，故障可以转移，系统的可用性就会更好</li><li>哨兵模式就是主从模式的升级，手动到自动，更加健壮</li></ul></li><li>缺点<ul><li>Redis不好在线扩容的，集群容量一旦达到上线，在线扩容十分麻烦</li><li>实现哨兵模式的配置其实是很麻烦的，里面有很多选择</li></ul></li></ul><h3><span id="shao-bing-mo-shi-de-quan-bu-pei-zhi">哨兵模式的全部配置</span><a href="#shao-bing-mo-shi-de-quan-bu-pei-zhi" class="header-anchor">.</a></h3><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Example sentinel.conf</span><span class="token comment" spellcheck="true"># 哨兵sentinel实例运行的端口 默认26379  </span><span class="token comment" spellcheck="true"># 如果有哨兵集群 需要配置多个端口</span>port 26379  <span class="token comment" spellcheck="true"># 哨兵sentinel的工作目录</span><span class="token function">dir</span> /tmp<span class="token comment" spellcheck="true"># 哨兵sentinel监控的redis主节点的 ip port </span><span class="token comment" spellcheck="true"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符".-_"组成。</span><span class="token comment" spellcheck="true"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span><span class="token comment" spellcheck="true"># sentinel monitor &lt;master-name> &lt;ip> &lt;redis-port> &lt;quorum></span>sentinel monitor mymaster 127.0.0.1 6379 1<span class="token comment" spellcheck="true"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><span class="token comment" spellcheck="true"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><span class="token comment" spellcheck="true"># sentinel auth-pass &lt;master-name> &lt;password></span>sentinel auth-pass mymaster MySUPER--secret-0123passw0rd<span class="token comment" spellcheck="true"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><span class="token comment" spellcheck="true"># sentinel down-after-milliseconds &lt;master-name> &lt;milliseconds></span>sentinel down-after-milliseconds mymaster 30000<span class="token comment" spellcheck="true"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span><span class="token comment" spellcheck="true"># 这个数字越小，完成failover所需的时间就越长，</span><span class="token comment" spellcheck="true"># 但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span><span class="token comment" spellcheck="true"># 可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><span class="token comment" spellcheck="true"># sentinel parallel-syncs &lt;master-name> &lt;numslaves></span>sentinel parallel-syncs mymaster 1<span class="token comment" spellcheck="true"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span><span class="token comment" spellcheck="true">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><span class="token comment" spellcheck="true">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><span class="token comment" spellcheck="true">#3.当想要取消一个正在进行的failover所需要的时间。  </span><span class="token comment" spellcheck="true">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><span class="token comment" spellcheck="true"># 默认三分钟</span><span class="token comment" spellcheck="true"># sentinel failover-timeout &lt;master-name> &lt;milliseconds></span>sentinel failover-timeout mymaster 180000<span class="token comment" spellcheck="true"># SCRIPTS EXECUTION</span><span class="token comment" spellcheck="true">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><span class="token comment" spellcheck="true">#对于脚本的运行结果有以下规则：</span><span class="token comment" spellcheck="true">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><span class="token comment" spellcheck="true">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><span class="token comment" spellcheck="true">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><span class="token comment" spellcheck="true">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><span class="token comment" spellcheck="true">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span><span class="token comment" spellcheck="true">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span><span class="token comment" spellcheck="true">#一个是事件的类型，</span><span class="token comment" spellcheck="true">#一个是事件的描述。</span><span class="token comment" spellcheck="true">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><span class="token comment" spellcheck="true">#通知脚本</span><span class="token comment" spellcheck="true"># sentinel notification-script &lt;master-name> &lt;script-path></span>  sentinel notification-script mymaster /var/redis/notify.sh<span class="token comment" spellcheck="true"># 客户端重新配置主节点参数脚本</span><span class="token comment" spellcheck="true"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><span class="token comment" spellcheck="true"># 以下参数将会在调用脚本时传给脚本:</span><span class="token comment" spellcheck="true"># &lt;master-name> &lt;role> &lt;state> &lt;from-ip> &lt;from-port> &lt;to-ip> &lt;to-port></span><span class="token comment" spellcheck="true"># 目前&lt;state>总是“failover”,</span><span class="token comment" spellcheck="true"># &lt;role>是“leader”或者“observer”中的一个。 </span><span class="token comment" spellcheck="true"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><span class="token comment" spellcheck="true"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span><span class="token comment" spellcheck="true"># sentinel client-reconfig-script &lt;master-name> &lt;script-path></span>sentinel client-reconfig-script mymaster /var/redis/reconfig.sh <span class="token comment" spellcheck="true"># 运维配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="shi-san-huan-cun-chuan-tou-he-xue-beng-mian-shi-gao-pin-gong-zuo-chang-yong">十三、缓存穿透和雪崩（面试高频，工作常用）</span><a href="#shi-san-huan-cun-chuan-tou-he-xue-beng-mian-shi-gao-pin-gong-zuo-chang-yong" class="header-anchor">.</a></h2><blockquote><p>这里仅仅是了解，不涉及解决方案底层</p></blockquote><p>Redis缓存的使用，极大的提升了应用程序的性能和效率，特别是数据查询方面。但同时，它带来了一些问题。其中最要害的问题，就是数据一致性问题，从严格意义上讲，这个问题无解。如果对数据的一致性要求很高，那么就不能使用缓存。另外的一些典型问题就是，<strong>缓存穿透</strong>、<strong>缓存雪崩</strong>和<strong>缓存击穿</strong>。目前，业界也都有比较流行的解决方案。</p><h3><span id="1-huan-cun-chuan-tou-cha-bu-dao">1、缓存穿透（查不到）</span><a href="#1-huan-cun-chuan-tou-cha-bu-dao" class="header-anchor">.</a></h3><p>缓存穿透：用户想要查一个数据，发现Redis内存数据库中没有，也就是<strong>缓存没命中，于是向持久层数据库查询。发现也没有，于是本次查询失败</strong>。当用户很多时，缓存都没有命中（秒杀！），于是都去请求持久层数据库。这会导致持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p><h4><span id="jie-jue-fang-an">解决方案</span><a href="#jie-jue-fang-an" class="header-anchor">.</a></h4><h5><span id="bu-long-guo-lu-qi">布隆过滤器</span><a href="#bu-long-guo-lu-qi" class="header-anchor">.</a></h5><p>布隆过滤器是一种数据结构，对所有可能查询的参数以Hash形式存储，在控制层先进行校验，不符合则丢弃，从而避免存储系统的查询压力。</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131751.png" alt></p><h5><span id="huan-cun-kong-dui-xiang">缓存空对象</span><a href="#huan-cun-kong-dui-xiang" class="header-anchor">.</a></h5><p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131755.png" alt="image-20201118094132029"></p><p><strong>但是这个方法会存在两个问题</strong></p><ul><li>如果空值能够被缓存起来，这就意味着缓存需要更多的空间存储更多的键，因为这当中可能会有很多的空值的键</li><li>即使空值设置了过期时间，还会存在缓存层和存储层的数据会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响</li></ul><h3><span id="2-huan-cun-xue-beng-ji-zhong-shi-xiao">2、缓存雪崩（集中失效）</span><a href="#2-huan-cun-xue-beng-ji-zhong-shi-xiao" class="header-anchor">.</a></h3><p>缓存雪崩，是指在某一时间段，缓存集中过期失效。Redis宕机！</p><p><strong>产生原因之一：</strong></p><p>比如，双十一零点抢购，会把同一批商品信息比较集中的放入缓存中，假设缓存设置一个小时的过期时间，那么到凌晨一点钟的时候，这批商品的缓存就都过期了。而对这批商品的访问查询，都落到了数据库上，对于数据库而言，就会产生周期性的压抑波峰。于是所有的请求就会向存储层，存储层的调用量会暴增，<strong>可能</strong>造成存储层奔溃，服务器宕机。</p><p><img src="https://liuyou-images.oss-cn-hangzhou.aliyuncs.com/markdown/20201119131802.png" alt="image-20201118094811319"></p><p>其实集中过期，倒不是非常致命，<strong>比较致命的缓存雪崩，是缓存服务器某个结点宕机或断网</strong>。因为自然形成的缓存雪崩，一定是在某个时间段集中创建缓存，这个时候，数据库也是可以顶住压力的。无非就是对数据库产生周期性的压力而已。而<strong>缓存服务节点的宕机，对数据库服务器造成的压力是不可预知的，很可能瞬间就把数据库压垮。</strong></p><h4><span id="jie-jue-fang-an">解决方案</span><a href="#jie-jue-fang-an" class="header-anchor">.</a></h4><h5><span id="redis-gao-ke-yong">Redis高可用</span><a href="#redis-gao-ke-yong" class="header-anchor">.</a></h5><p>这个思想含义是，既然Redis有可能挂到，那我们多增设几台Redis，这样挂掉之后其他的还可以继续工作，其实就是<strong>搭建集群</strong></p><h5><span id="xian-liu-jiang-ji">限流降级</span><a href="#xian-liu-jiang-ji" class="header-anchor">.</a></h5><p>这个解决方案的思想是，在缓存失效后，通过加锁或队列来控制读数据库写缓存的线程数量。比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p><h5><span id="shu-ju-yu-re">数据预热</span><a href="#shu-ju-yu-re" class="header-anchor">.</a></h5><p>数据加热的含义就是在正式部署之前，我们先把数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中，在即将发生大并发访问<strong>手动触发加载缓存不同的key</strong>，设置不同的过期时间，让缓存失效的时间点尽量均匀。</p><h3><span id="3-huan-cun-ji-chuan-cha-xun-liang-tai-da-huan-cun-guo-qi-shun-jian">3、缓存击穿（查询量太大，缓存过期瞬间）</span><a href="#3-huan-cun-ji-chuan-cha-xun-liang-tai-da-huan-cun-guo-qi-shun-jian" class="header-anchor">.</a></h3><p>这里需要注意和缓存穿透的区别，缓存击穿：是指一个key非常热点，在不停的扛着大并发，大并发集中对一个点进行访问，当这个key在失效的瞬间，执行的大并发就穿破缓存，直接请求持久层数据库，就像在一个屏幕上凿开一个洞。</p><p>当某个key在过期瞬间，有大量的请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导致数据库瞬间压力过大。</p><h4><span id="jie-jue-fang-an">解决方案</span><a href="#jie-jue-fang-an" class="header-anchor">.</a></h4><h5><span id="she-zhi-re-dian-shu-ju-yong-bu-guo-qi">设置热点数据永不过期</span><a href="#she-zhi-re-dian-shu-ju-yong-bu-guo-qi" class="header-anchor">.</a></h5><p>从缓存层面，没有设置过期时间，所以不会出现热点key过期后产生的问题。</p><h5><span id="jia-hu-chi-suo">加互斥锁</span><a href="#jia-hu-chi-suo" class="header-anchor">.</a></h5><p>分布式锁：使用分布式锁，保证对于每个key同时只能有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。这种方式将高并发的压力转移到了分布式锁，因此分布式锁的考验很大。</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
            <tag> NoSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2020/10/25/30335.html"/>
      <url>/2020/10/25/30335.html</url>
      
        <content type="html"><![CDATA[<h2><span id="linux-chang-yong-ming-ling">Linux 常用命令</span><a href="#linux-chang-yong-ming-ling" class="header-anchor">.</a></h2><h3><span id="wen-jian-cao-zuo-ming-ling">文件操作命令</span><a href="#wen-jian-cao-zuo-ming-ling" class="header-anchor">.</a></h3><h4><span id="1-wen-jian-chu-li-ming-ling">1、文件处理命令</span><a href="#1-wen-jian-chu-li-ming-ling" class="header-anchor">.</a></h4><h5><span id="ls-xuan-xiang-can-shu">ls [选项] [参数]</span><a href="#ls-xuan-xiang-can-shu" class="header-anchor">.</a></h5><blockquote><p><code>list</code> <strong>列出参数的属性信息</strong></p></blockquote><p><strong>参数为路径名</strong></p><p><strong>常用选项</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>- l</td><td>显示目录下<strong>详细</strong>的<strong>文件信息</strong>，可简化为 <code>ll</code></td></tr><tr><td>- a</td><td>显示目录下全部文件（含隐藏文件）</td></tr><tr><td>- d</td><td>查看目录属性</td></tr><tr><td>- t</td><td>按创建时间顺序列出文件</td></tr><tr><td>- i</td><td>输出文件inode编号</td></tr><tr><td>-R</td><td>递归打印目录下所有文件信息</td></tr></tbody></table><p><code>ll</code>查看到的字段信息依次是：</p><p>①文件类型和权限 ②文件硬连接 ③文件所有者 ④文件所有者所属组 ⑤文件占用空间 ⑥文件最近访问时间 ⑦文件名</p><hr><h5><span id="cd-can-shu">cd 参数</span><a href="#cd-can-shu" class="header-anchor">.</a></h5><blockquote><p><code>change directory</code> 更改目录</p></blockquote><p><strong>参数为路径名</strong></p><hr><h5><span id="pwd">pwd</span><a href="#pwd" class="header-anchor">.</a></h5><blockquote><p><code>print working directory</code>打印工作目录的绝对路径</p></blockquote><hr><h5><span id="touch-can-shu">touch 参数</span><a href="#touch-can-shu" class="header-anchor">.</a></h5><blockquote><p>更新文件时间为当前时间，如果文件或目录不存在，就会自动创建一个</p></blockquote><p><strong>参数为文件或目录</strong></p><hr><h5><span id="mkdir-xuan-xiang-can-shu">mkdir [选项] 参数</span><a href="#mkdir-xuan-xiang-can-shu" class="header-anchor">.</a></h5><blockquote><p><code>make directory</code> 创建目录</p></blockquote><p><strong>参数为目录或路径名</strong></p><p><strong>选项</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>- p</td><td>若路径中的目录不存在，则先创建目录</td></tr><tr><td>- v</td><td>查看文件创建过程</td></tr></tbody></table><hr><h5><span id="cp-xuan-xiang-yuan-wen-jian-huo-mu-lu-mu-de-mu-lu">cp [选项]  源文件或目录  目的目录</span><a href="#cp-xuan-xiang-yuan-wen-jian-huo-mu-lu-mu-de-mu-lu" class="header-anchor">.</a></h5><blockquote><p><code>copy</code> 复制，复制文件到指定目录，如果需要复制目录需要加 -R</p></blockquote><p><strong>选项</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>- R</td><td>递归复制</td></tr><tr><td>- p</td><td>复制的同时不修改文件属性：所有者、所属组、权限、时间。。。</td></tr><tr><td>- f</td><td>强行复制文件或目录，无论目的文件或目录是否已经存在</td></tr></tbody></table><hr><h5><span id="mv-yuan-wen-jian-huo-mu-lu-mu-de-mu-lu">mv 源文件或目录  目的目录</span><a href="#mv-yuan-wen-jian-huo-mu-lu-mu-de-mu-lu" class="header-anchor">.</a></h5><blockquote><p><code>move</code> 移动文件或目录，如果移动的文件在同一目录，但是不同名，相当于重命名</p></blockquote><hr><h5><span id="rm-xuan-xiang-wen-jian-huo-mu-lu">rm [选项] 文件或目录</span><a href="#rm-xuan-xiang-wen-jian-huo-mu-lu" class="header-anchor">.</a></h5><blockquote><p><code>remove</code> 移除文件或目录</p></blockquote><p><strong>选项</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>- f</td><td>强制删除目录或文件</td></tr><tr><td>- r</td><td>递归删除</td></tr><tr><td>- i</td><td>删除时，需要进行确认</td></tr></tbody></table><hr><h5><span id="rmdir-p-mu-lu">rmdir [-p] 目录</span><a href="#rmdir-p-mu-lu" class="header-anchor">.</a></h5><blockquote><p><code>remove directory</code> 删除目录，只能删除目录</p></blockquote><blockquote><p><code>-p</code> 表示 会在删除指定目录后检查其上层，若该目录已变成空目录，则将其一并删除。</p></blockquote><h4><span id="2-wen-jian-cha-kan-ming-ling">2、文件查看命令</span><a href="#2-wen-jian-cha-kan-ming-ling" class="header-anchor">.</a></h4><h5><span id="cat-wen-jian-ming">cat 文件名</span><a href="#cat-wen-jian-ming" class="header-anchor">.</a></h5><blockquote><p><code>concatenate and display file</code> 连接和显示文件，将文件中的内容打印到输出设备</p></blockquote><hr><h5><span id="more-wen-jian-ming">more [文件名]</span><a href="#more-wen-jian-ming" class="header-anchor">.</a></h5><blockquote><p>分页显示文件内容</p></blockquote><p><strong>快捷键</strong></p><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>f / Space</td><td>显示下一页</td></tr><tr><td>Enter</td><td>显示下一行</td></tr><tr><td>q / Q</td><td>退出</td></tr></tbody></table><hr><h5><span id="head-n-filename">head -n filename</span><a href="#head-n-filename" class="header-anchor">.</a></h5><blockquote><p>n 表示要查看的开头行数</p></blockquote><hr><h5><span id="tail-n-filename">tail -n filename</span><a href="#tail-n-filename" class="header-anchor">.</a></h5><blockquote><p>n表示要查看的尾行数</p></blockquote><hr><h4><span id="3-quan-xian-guan-li-ming-ling">3、权限管理命令</span><a href="#3-quan-xian-guan-li-ming-ling" class="header-anchor">.</a></h4><p>使用权限管理命令前,需提升用户权限：<code>sudo</code></p><h5><span id="chmod-a-u-g-o-rwx-wen-jian-huo-mu-lu">chmod      [a | u | g | o]       {+ | - | =}      rwx      文件或目录</span><a href="#chmod-a-u-g-o-rwx-wen-jian-huo-mu-lu" class="header-anchor">.</a></h5><blockquote><p><code>change the permissions mode of file</code> : 变更文件或目录的权限</p></blockquote><blockquote><p>a : 所用用户， u ：当前用户， g ：当前用户组， o ：其他用户</p></blockquote><blockquote><p><code>+</code> 添加权限 ，<code>-</code> 取消权限，<code>=</code> 设定权限</p></blockquote><blockquote><p>r : 读，w ：写，x ：执行</p></blockquote><pre class="line-numbers language-sh"><code class="language-sh">chmod a+rw xxx # 对文件xxx 所有用户都添加读写权限<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>可以使用<code>chmod 440 xxx</code>代替上述</p><hr><h5><span id="chown-yong-hu-wen-jian-huo-mu-lu">chown 用户 文件或目录</span><a href="#chown-yong-hu-wen-jian-huo-mu-lu" class="header-anchor">.</a></h5><blockquote><p><code>change the owner of file</code> 更改文件所有者</p></blockquote><hr><h5><span id="chgrp-zu-ming-wen-jian-huo-mu-lu">chgrp [组名] [文件或目录]</span><a href="#chgrp-zu-ming-wen-jian-huo-mu-lu" class="header-anchor">.</a></h5><blockquote><p><code>change file group</code></p></blockquote><h4><span id="4-wen-jian-sou-suo-ming-ling">4、文件搜索命令</span><a href="#4-wen-jian-sou-suo-ming-ling" class="header-anchor">.</a></h4><h5><span id="which-ming-ling">which 命令</span><a href="#which-ming-ling" class="header-anchor">.</a></h5><blockquote><p>查找命令所在的路径，能找到命令的别名记录</p></blockquote><hr><h5><span id="whereis-ming-ling">whereis 命令</span><a href="#whereis-ming-ling" class="header-anchor">.</a></h5><blockquote><p>查找命令所在的路径，可以展示命令帮助文档的所在路径</p></blockquote><hr><h5><span id="find-sou-suo-lu-jing-xuan-xiang-sou-suo-guan-jian-zi">find  搜索路径  [选项]  搜索关键字</span><a href="#find-sou-suo-lu-jing-xuan-xiang-sou-suo-guan-jian-zi" class="header-anchor">.</a></h5><blockquote><p>关键字可以是 文件名，文件大小，文件所有者。。</p></blockquote><p><strong>选项</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>- name</td><td>根据文件名查找</td></tr><tr><td>- size</td><td>根据文件大小查找</td></tr><tr><td>- user</td><td>根据文件所有者查找</td></tr></tbody></table><hr><h5><span id="locate-xuan-xiang-sou-suo-guan-jian-zi">locate [选项] 搜索关键字</span><a href="#locate-xuan-xiang-sou-suo-guan-jian-zi" class="header-anchor">.</a></h5><blockquote><p>查找文件或目录</p><p>功能与 find -name相同，但更快（因为他遍历的是<code>/var/lib/locatedb</code>数据库，不是整个路径），可能出现文件不存在的情况，因此我们需要使用该命令之前，使用<code>updatedb</code>命令手动更新数据库</p></blockquote><hr><h5><span id="grep-zhi-ding-zi-fu-yuan-wen-jian">grep  指定字符  源文件</span><a href="#grep-zhi-ding-zi-fu-yuan-wen-jian" class="header-anchor">.</a></h5><blockquote><p>用于在文件中搜索与字符串匹配的行并输出</p></blockquote><p>通常与 管道连用</p><pre><code>ls | grep xxx # 查询当前路径中 文件名为xxx的文件</code></pre><h3><span id="wang-luo-guan-li-yu-tong-xin-ming-ling">网络管理与通信命令</span><a href="#wang-luo-guan-li-yu-tong-xin-ming-ling" class="header-anchor">.</a></h3><h4><span id="ifconfig-can-shu">ifconfig  [参数]</span><a href="#ifconfig-can-shu" class="header-anchor">.</a></h4><blockquote><p><code>interfaces config</code> 配置和显示Linux内核中网络接口的参数</p></blockquote><hr><h4><span id="netstat-xuan-xiang">netstat [选项]</span><a href="#netstat-xuan-xiang" class="header-anchor">.</a></h4><blockquote><p>打印Linux系统中网络系统的状态信息</p></blockquote><p><strong>选项</strong></p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>- a</td><td>显示所有端口</td></tr><tr><td>- at</td><td>显示tcp所有端口</td></tr><tr><td>- au</td><td>显示udp所有端口</td></tr></tbody></table><pre><code>-r, --route              display routing table-I, --interfaces=&lt;Iface&gt; display interface table for &lt;Iface&gt;-i, --interfaces         display interface table-g, --groups             display multicast group memberships-s, --statistics         display networking statistics (like SNMP)-M, --masquerade         display masqueraded connections-v, --verbose            be verbose-W, --wide               don&#39;t truncate IP addresses-n, --numeric            don&#39;t resolve names--numeric-hosts          don&#39;t resolve host names--numeric-ports          don&#39;t resolve port names--numeric-users          don&#39;t resolve user names-N, --symbolic           resolve hardware names-e, --extend             display other/more information-p, --programs           display PID/Program name for sockets-o, --timers             display timers-c, --continuous         continuous listing-l, --listening          display listening server sockets-a, --all                display all sockets (default: connected)-F, --fib                display Forwarding Information Base (default)-C, --cache              display routing cache instead of FIB-Z, --context            display SELinux security context for sockets</code></pre><h4><span id="ping-xuan-xiang-can-shu">ping [选项] [参数]</span><a href="#ping-xuan-xiang-can-shu" class="header-anchor">.</a></h4><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>- c</td><td>设置回应次数</td></tr><tr><td>- s</td><td>设置数据包大小</td></tr><tr><td>- v</td><td>详细显示指令的执行过程</td></tr></tbody></table><h4><span id="3-ya-suo-jie-ya-ming-ling">3、压缩解压命令</span><a href="#3-ya-suo-jie-ya-ming-ling" class="header-anchor">.</a></h4><h4><span id="4-bang-zhu-ming-ling">4、帮助命令</span><a href="#4-bang-zhu-ming-ling" class="header-anchor">.</a></h4><h4><span id="5-yong-hu-yong-hu-zu-guan-li-ming-ling">5、用户、用户组管理命令</span><a href="#5-yong-hu-yong-hu-zu-guan-li-ming-ling" class="header-anchor">.</a></h4><h4><span id="6-wen-jian-xi-tong-guan-li">6、文件系统管理</span><a href="#6-wen-jian-xi-tong-guan-li" class="header-anchor">.</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 方法重载</title>
      <link href="/2020/10/21/328.html"/>
      <url>/2020/10/21/328.html</url>
      
        <content type="html"><![CDATA[<h2><span id="chong-zai">重载</span><a href="#chong-zai" class="header-anchor">.</a></h2><p><strong>判断是否是重载</strong></p><ul><li><p>是否是重载和方法的<strong>权限修饰符、返回值类型、形参变量名、方法体</strong>都没有关系</p></li><li><p>两同一不同</p><ul><li>同一类，相同方法名</li><li>参数列表不同（参数类型、个数、顺序至少有一个不同）<ul><li>参数个数不同</li><li>参数类型不同</li></ul></li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 抽象类与接口的异同</title>
      <link href="/2020/10/21/36912.html"/>
      <url>/2020/10/21/36912.html</url>
      
        <content type="html"><![CDATA[<h2><span id="chou-xiang-lei-yu-jie-kou-de-yi-tong">抽象类与接口的异同</span><a href="#chou-xiang-lei-yu-jie-kou-de-yi-tong" class="header-anchor">.</a></h2><h3><span id="xiang-tong-dian">相同点</span><a href="#xiang-tong-dian" class="header-anchor">.</a></h3><ul><li>都不能实例化</li><li>都需要类去实现</li></ul><h3><span id="bu-tong-dian">不同点</span><a href="#bu-tong-dian" class="header-anchor">.</a></h3><ul><li>接口不能有构造方法，抽象类可以有。</li><li><strong>一个类可以实现多个接口，一个抽象类只能别一个类继承</strong></li><li>接口不能有方法体，抽象类可以有。（JDK1.7及以前）</li><li>接口不能有静态方法，抽象类可以有。（JDK1.7及以前）</li><li>在接口中凡是变量必须是<code>public static final</code>，方法必须是<code>public</code>，而在抽象类中没有要求。</li></ul><blockquote><p>从 Java 8 开始，接口也可以拥有默认的方法实现，这是因为不支持默认方法的接口的维护成本太高了。在 Java 8 之前，如果一个接口想要添加新的方法，那么要修改所有实现了该接口的类，让它们都实现新增的方法</p></blockquote><h3><span id="shi-yong-jie-kou">使用接口：</span><a href="#shi-yong-jie-kou" class="header-anchor">.</a></h3><ul><li>需要让不相关的类都实现一个方法，例如不相关的类都可以实现 Comparable 接口中的 compareTo() 方法；</li><li>需要使用多重继承。</li></ul><h3><span id="shi-yong-chou-xiang-lei">使用抽象类：</span><a href="#shi-yong-chou-xiang-lei" class="header-anchor">.</a></h3><ul><li>需要在几个相关的类中共享代码。</li><li>需要能控制继承来的成员的访问权限，而不是都为 public。</li><li>需要继承非静态和非常量字段。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 多线程</title>
      <link href="/2020/10/21/58642.html"/>
      <url>/2020/10/21/58642.html</url>
      
        <content type="html"><![CDATA[<h2><span id="duo-xian-cheng">多线程</span><a href="#duo-xian-cheng" class="header-anchor">.</a></h2><h3><span id="yi-cheng-xu-jin-cheng-xian-cheng">一、程序、进程、线程</span><a href="#yi-cheng-xu-jin-cheng-xian-cheng" class="header-anchor">.</a></h3><p><strong><mark>程序（program）</mark></strong>是<strong>为完成特定任务、用某种语言编写的一组指令的集合</strong>。即指一段静态的代码，<strong>静态对象</strong></p><p><strong><mark>进程（process）</mark></strong>是程序的<strong>一次执行过程</strong>，或是<strong>正在运行的一个程序</strong>。是一个动态的过程：有它自身的产生、存在和消亡的过程。 —— 生命周期</p><blockquote><p>程序 是静态的； 进程 是动态的</p></blockquote><blockquote><p><strong>进程</strong>作为<strong>资源分配的单位</strong>，系统在运行时会为每个进程分配不同的内存区域</p></blockquote><p><strong><mark>线程（thread）</mark></strong>，进程可进一步细化为线程，是一个程序内部的一条执行路径</p><blockquote><p>若一个进程同一时间<strong>并行</strong>执行多个线程，就是支持多线程的</p></blockquote><blockquote><p><strong>线程</strong>作为<strong>调度和执行的单位</strong>，每个线程都拥有独立的运行栈和程序计数器（pc），线程切换的开销小</p></blockquote><blockquote><p>一个进程中的多个线程共享相同单元/内存地址空间  –&gt; 它们从同一堆中分配对象，可以方访问相同的变量和对象。 </p><p>这就使得线程间通信更简便、高效。但多个线程操作共享的系统资源可能带来<strong>安全隐患</strong></p></blockquote><h3><span id="er-xian-cheng-de-chuang-jian-2-he-shi-yong">二、线程的创建（2）和使用</span><a href="#er-xian-cheng-de-chuang-jian-2-he-shi-yong" class="header-anchor">.</a></h3><h4><span id="chuang-jian">创建</span><a href="#chuang-jian" class="header-anchor">.</a></h4><h5><span id="chuang-jian-duo-xian-cheng-de-fang-shi-yi-ji-cheng-thread-lei">创建多线程的方式一：继承Thread类</span><a href="#chuang-jian-duo-xian-cheng-de-fang-shi-yi-ji-cheng-thread-lei" class="header-anchor">.</a></h5><h6><span id="1-ji-cheng-java-lang-thread">1.继承<code>java.lang.Thread</code></span><a href="#1-ji-cheng-java-lang-thread" class="header-anchor">.</a></h6><blockquote><p><code>start()</code>作用：①启动当前线程；②调用当前线程的<code>run()</code></p><p>这个方法只能执行一次</p></blockquote><blockquote><p>要想创建多个线程，必须创建多个子类对象，然后调用各自的<code>start()</code></p></blockquote><blockquote><p>面对不同进程内容，需要创建多个子类，重写出不同的<code>run()</code></p><p>使用匿名子类，则无需创建多个子类</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 方式一: 继承Thread类，重写run方法 *  1. 创建子类 *  2. 重写run方法 *  3. 创建子类对象 *  4. 调用start方法 **/</span><span class="token comment" spellcheck="true">//1.</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest01</span> <span class="token keyword">extends</span>  <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"-thread"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.</span>        ThreadTest01 t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">"-main"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/58642/image-20200801135352541.png" alt></p><h6><span id="2-chuang-jian-java-lang-thread-de-ni-ming-zi-lei">2.创建<code>java.lang.Thread</code>的匿名子类</span><a href="#2-chuang-jian-java-lang-thread-de-ni-ming-zi-lei" class="header-anchor">.</a></h6><blockquote><p>相比于上一种创建的好处：无需创建子类的实体</p><p>缺点：无法复用代码</p><p><strong>当要执行的线程，无需复用，可用这种创建方法</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @decription 线程的创建 * 第一种方法延伸：匿名子类 *  1.创建匿名子类的非匿名对象 *  2.重写run()方法 *  3.start()即可 * **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest02</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.</span>        Thread thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//2.</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//打印 0 - 9</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        Thread thread2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//打印 0 2 4 6 8</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//3</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/58642/image-20200801141746522.png" alt></p><h5><span id="chuang-jian-duo-xian-cheng-de-fang-shi-er-shi-xian-runnable-jie-kou">创建多线程的方式二：实现Runnable接口</span><a href="#chuang-jian-duo-xian-cheng-de-fang-shi-er-shi-xian-runnable-jie-kou" class="header-anchor">.</a></h5><blockquote><p><code>Thread implements Runnable</code> </p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** 方式二：实现Runnable接口 * 1. 创建实现类 * 2. 重写抽象方法(run()) * 3. 创建实现类的对象 * 4. 将此对象作为参数，传到Thread的构造其中，创建Thread对象 * 5. 通过Thread对象，调用start()启动线程 **/</span><span class="token comment" spellcheck="true">//1.</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest05</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.</span>        ThreadTest05 runnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest05</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runnable<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//5.</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//main线程</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="bi-jiao-zhe-liang-chong-chuang-jian-fang-shi"><mark>比较这两种创建方式</mark></span><a href="#bi-jiao-zhe-liang-chong-chuang-jian-fang-shi" class="header-anchor">.</a></h4><ul><li>开发中优先使用：实现Runnable接口的方式<ul><li>实现没有，类的单继承性的局限性</li><li>实现更适合处理多个线程有共享数据的情况。（可以看<strong>补充</strong>中<strong>窗口卖票</strong>）</li></ul></li><li>两种方式都需要重写<code>run()</code>方法</li></ul><h4><span id="shi-yong">使用</span><a href="#shi-yong" class="header-anchor">.</a></h4><h4><span id="chang-yong-fang-fa">(常用方法）</span><a href="#chang-yong-fang-fa" class="header-anchor">.</a></h4><h5><span id="1-start">1、<code>start()</code></span><a href="#1-start" class="header-anchor">.</a></h5><ul><li>启动当前线程，调用当前线程的run()方法</li></ul><h5><span id="2-run">2、<code>run()</code></span><a href="#2-run" class="header-anchor">.</a></h5><ul><li>通常需要重写<code>Thread</code>类中的<code>run()</code>方法，将创建的线程需要执行的操作声明在此方法中</li></ul><h5><span id="3-currentthread">3、<code>currentThread()</code></span><a href="#3-currentthread" class="header-anchor">.</a></h5><ul><li><strong>静态方法</strong>，返回执行当前代码的线程</li></ul><h5><span id="4-getname">4、<code>getName()</code></span><a href="#4-getname" class="header-anchor">.</a></h5><ul><li>获取当前线程名</li></ul><h5><span id="5-setname">5、<code>setName()</code></span><a href="#5-setname" class="header-anchor">.</a></h5><ul><li>设置当前线程名</li><li>也可以使用父类的有参构造器，对线程命名</li></ul><h5><span id="6-yield">6、<code>yield()</code></span><a href="#6-yield" class="header-anchor">.</a></h5><ul><li><p><strong>静态方法</strong>，释放当前线程对CPU的执行权</p><ul><li>释放了执行权，不一定代表会被其他线程获取执行权，有可能还是当前线程又一次获取执行权</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest03</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//this 表示 thread 这个对象</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//启动线程</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//main线程执行</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果是4的被数就释放 CPU执行权</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/58642/image-20200801150326722.png" alt></p></li></ul><h5><span id="7-join">7、<code>join()</code></span><a href="#7-join" class="header-anchor">.</a></h5><ul><li><p>在线程a中调用线程b的<code>join()</code>，此时线程a<strong>进行阻塞状态</strong>，直到线程b执行完，线程a<strong>才结束阻塞状态</strong></p></li><li><p>当然，a也不一定获取执行权（如果还有其他线程）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest04</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启线程</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//main线程执行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//如果 i = 10 让 主线程阻塞 ，加入 thread-0 线程 直到其执行完</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    t<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//Interrupted 中断</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2020/10/21/58642/image-20200801152307251.png" alt></p><h5><span id="8-stop-deprecated-since-1-2">8、<code>stop()</code> @Deprecated(since=”1.2”)</span><a href="#8-stop-deprecated-since-1-2" class="header-anchor">.</a></h5><ul><li>强制结束当前线程，已过时，不推荐使用</li></ul><h5><span id="9-sleep-ms">9、<code>sleep(ms)</code></span><a href="#9-sleep-ms" class="header-anchor">.</a></h5><ul><li><strong>静态方法</strong>，休眠（阻塞）当前线程且指定休眠时间，单位ms</li><li>当然休眠结束，当前也不一定立即获取执行权</li></ul><h5><span id="10-isalive">10、<code>isAlive()</code></span><a href="#10-isalive" class="header-anchor">.</a></h5><ul><li>判断当前线程是否仍然存活</li><li>一般放在主线程里，<code>线程对象.isAlive()</code></li></ul><h4><span id="xian-cheng-you-xian-ji">(线程优先级)</span><a href="#xian-cheng-you-xian-ji" class="header-anchor">.</a></h4><blockquote><p>线程调度请看<strong>补充</strong></p></blockquote><h5><span id="1-you-xian-ji-deng-ji-chang-liang-zheng-xing">1、优先级等级（常量，整型）</span><a href="#1-you-xian-ji-deng-ji-chang-liang-zheng-xing" class="header-anchor">.</a></h5><ul><li><code>MAX_PRIORITY: 10</code> 最大优先级</li><li><code>MIN_PRIORITY: 1</code> 最小优先级</li><li><code>NORM_PRIORITY: 5</code> 正常（默认）优先级</li></ul><h5><span id="2-fang-fa">2、方法</span><a href="#2-fang-fa" class="header-anchor">.</a></h5><h6><span id="getpriority"><code>getPriority()</code></span><a href="#getpriority" class="header-anchor">.</a></h6><ul><li>获取当前线程的优先级</li></ul><h6><span id="setpriority-1-10"><code>setPriority(1~10)</code></span><a href="#setpriority-1-10" class="header-anchor">.</a></h6><ul><li>设置当前线程的优先级</li></ul><blockquote><p><strong><mark>优先级高会抢占优先级低的，是代表获取CPU的执行权概率高，并不是意味着，优先级高的线程执行完成后才执行优先级低</mark></strong></p></blockquote><h3><span id="san-xian-cheng-de-sheng-ming-zhou-qi">三、线程的生命周期</span><a href="#san-xian-cheng-de-sheng-ming-zhou-qi" class="header-anchor">.</a></h3><p>JDK中用<code>Thread.State</code>内部类定义了6种状态</p><img src="/2020/10/21/58642/image-20200801190726404.png" style="zoom:50%;"><h4><span id="cao-zuo-xi-tong-wu-chong-zhuang-tai">操作系统五种状态</span><a href="#cao-zuo-xi-tong-wu-chong-zhuang-tai" class="header-anchor">.</a></h4><p><strong>新建：</strong> 当一个<code>Thread</code>类或其子类的对象被声明并创建时，新生的线程对象处于新建</p><p>状态</p><p><strong>就绪：</strong>处于新建状态的线程被<code>start()</code>后，将进入线程队列等待CPU时间片，此时它已</p><p>具备了运行的条件，只是没分配到CPU资源</p><p><strong>运行：</strong>当就绪的线程被调度并获得CPU资源时,便进入运行状态， <code>run()</code>方法定义了线</p><p>程的操作和功能</p><p><strong>阻塞：</strong>在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中</p><p>止自己的执行，进入阻塞状态</p><p><strong>死亡：</strong>线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</p><p><img src="/2020/10/21/58642/image-20200801192739752.png" alt></p><h4><span id="java-xian-cheng-de-liu-chong-zhuang-tai">Java线程的六种状态</span><a href="#java-xian-cheng-de-liu-chong-zhuang-tai" class="header-anchor">.</a></h4><table><thead><tr><th>状态名称</th><th>说明</th></tr></thead><tbody><tr><td>NEW</td><td><strong>初始状态</strong>，线程刚被构建，但是还没有调用start()方法</td></tr><tr><td>RUNNABLE</td><td><strong>运行状态</strong>，Java系统系统中将操作系统中的就绪和运行两种状态笼统地称为“运行中”</td></tr><tr><td>BLOCKED</td><td><strong>阻塞状态</strong>，表示线程阻塞于锁</td></tr><tr><td>WAITTING</td><td><strong>等待状态</strong>，表示线程进入等待状态，进入该状态表示当前线程做出一些特定动作（通知或者中断）</td></tr><tr><td>TIME_WAITTING</td><td><strong>超时等待状态</strong>，该状态不同于等待状态，它可以在指定的时间后自行返回</td></tr><tr><td>TERMINATED</td><td><strong>中止状态</strong>，表示当前线程已经执行完毕</td></tr></tbody></table><p><img src="/2020/10/21/58642/20190429132534625.jpg" alt></p><h3><span id="si-xian-cheng-de-tong-bu-3">四、线程的同步（3）</span><a href="#si-xian-cheng-de-tong-bu-3" class="header-anchor">.</a></h3><h4><span id="1-tong-bu-dai-ma-kuai-synchronized">1、同步代码块 <code>synchronized</code></span><a href="#1-tong-bu-dai-ma-kuai-synchronized" class="header-anchor">.</a></h4><blockquote><p> <strong>需要被同步的代码</strong> : 操作<strong>共享数据</strong>的代码 </p><p><strong>共享数据</strong> ： 多个线程共同操作的变量</p><p><mark><strong>同步监视器</strong></mark>，俗称<mark><strong>锁</strong> </mark>– 任何一个对象都可以充当锁 要求多个线程必须共用同一把锁（这个锁对应每个线程是唯一的 且 是同一个）</p><p>锁的三种形式</p><p>①在声明一个域对象（成员变量）充当锁（如果是继承Thread – static成员变量）</p><p>②当前对象this（只适用于实现Runnable）</p><p> ③直接以该类充当锁 – 类名.class（<strong>推荐</strong>）</p></blockquote><blockquote><p>有共享数据（多线程同时操作） 才会有线程安全问题</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span>同步监视器<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要被同步的代码</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//好处 -- 解决了线程安全问题</span><span class="token comment" spellcheck="true">//但是 -- 操作同步代码时，只能有一个线程参与，其他线程等待。相当于是一个单线程的过程，效率低</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-tong-bu-fang-fa">2、同步方法</span><a href="#2-tong-bu-fang-fa" class="header-anchor">.</a></h4><blockquote><p>如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。</p><p>如果是实现<code>Runnable</code>接口需要使用<strong>非静态的</strong>同步方法（当然静态也可以，只不过同步数据也要是静态的），它的默认同步监视器：<code>this</code> ；不适用与继承<strong>Thread</strong>的</p><p>如果是继承<code>Thread</code>需要使用<code>static</code>修饰同步方法，它的默认同步监视器：<code>当前类</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//适用于 实现Runnable 接口产生的线程安全问题</span><span class="token keyword">private</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> method<span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 默认的锁是：this -- 当前对象</span>    <span class="token comment" spellcheck="true">//需要被同步的代码</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//适用于 继承Thread类 产生的线程安全问题</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> method<span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 默认的锁是：当前类</span>    <span class="token comment" spellcheck="true">//需要被同步的代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="3-lock-suo-tong-bu-suo">3、Lock(锁) – 同步锁</span><a href="#3-lock-suo-tong-bu-suo" class="header-anchor">.</a></h4><p><code>JDK5.0</code>:通过显示定义同步锁对象来实现同步。</p><p><code>java.util.concurrent.locks.Lock</code>接口 是控制多个线程对共享资源进行访问的工具</p><blockquote><p>锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应获得Lock对象</p></blockquote><p><strong><code>ReentrantLock</code>类</strong>实现了<code>Lock</code>，它拥有与<code>synchronized</code>相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是<code>ReentrantLock</code>，<strong>可以显示加锁，释放锁</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token punctuation">[</span><span class="token keyword">static</span><span class="token punctuation">]</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//上锁</span>lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//需要同步的代码</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//释放锁</span>    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="wu-xian-cheng-de-tong-xin">五、线程的通信</span><a href="#wu-xian-cheng-de-tong-xin" class="header-anchor">.</a></h3><p><code>wait()、notify()、notifyAll()</code>的使用</p><ul><li><code>wait()</code>：一旦执行此方法，当前线程就进入阻塞状态，并且释放锁</li><li><code>notify()</code>：一旦执行此方法，就会唤醒被wait的一个线程。如果有多个线程被wait，就唤醒优先级高的那个</li><li><code>notifyAll()</code>：一旦执行此方法，就会唤醒所有被wait的线程</li></ul><blockquote><p><code>wait() , notify(), notifyAll()</code> <strong>三个方法必须使用在同步代码块或同步方法中</strong></p><p><strong>这三个方法的调用者，必须是同步代码块或同步方法中的<mark>锁</mark></strong></p></blockquote><blockquote><p>wait和sleep都会阻塞进程，但是wait阻塞时会释放锁</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 两线程交替打印 0 - 99</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadCommunication</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ThreadCommunication tc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadCommunication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>tc<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread t2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>tc<span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"进程1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"进程2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        t2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//唤醒wait</span>                <span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//等待，阻塞，并释放锁</span>                    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/58642/image-20200802033242841.png" alt></p><h3><span id="liu-jdk5-0-xin-zeng-xian-cheng-chuang-jian-fang-shi-2">六、JDK5.0新增线程创建方式（2）</span><a href="#liu-jdk5-0-xin-zeng-xian-cheng-chuang-jian-fang-shi-2" class="header-anchor">.</a></h3><h4><span id="chuang-jian-duo-xian-cheng-de-fang-shi-san-shi-xian-callable-jie-kou">创建多线程的方式三：实现Callable接口</span><a href="#chuang-jian-duo-xian-cheng-de-fang-shi-san-shi-xian-callable-jie-kou" class="header-anchor">.</a></h4><blockquote><p>与<code>Runnable</code>接口相比</p><p>相比于<code>run()</code>方法，<code>call()</code>可以有<strong>返回值</strong></p><p><strong>方法可以抛出异常</strong></p><p>支持<strong>泛型的返回值</strong></p><p>需要借助<code>Future</code>类，比如获取放回结果</p><p>​    </p><p><code>Future</code>接口</p><p>可以对具体<code>Runnable</code>、<code>Callable</code>任务的执行结果进行取消、查询是否完成等</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  方式三：实现Callable接口 *  1.编写实现Callable接口的实现类 *  2.重写call()方法 *  3.创建实现类对象 *  4.创建FutureTask对象，并将Callable实现类对象传入FutureTask *  5.创建线程对象，并将FutureTask对象传入Thread *  6.调用Thread对象的start方法开启线程 *  7.通过FutureTask对象的get()方法可以获取call()方法的返回值 **/</span><span class="token comment" spellcheck="true">//1.</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest06</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//2.</span>    <span class="token comment" spellcheck="true">//计算 1 - 100 的总和</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"  "</span> <span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// int --> Integer --> Object</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//3.</span>        ThreadTest06 c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadTest06</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//4.</span>        FutureTask<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ft  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FutureTask</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以使用泛型，泛型的类型就是get方法返回的类型</span>        <span class="token comment" spellcheck="true">//5.</span>        Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>ft<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//6.</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//7.</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Integer sum <span class="token operator">=</span> ft<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"1 - 100的总和为 "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ExecutionException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/58642/image-20200802120620100.png" alt></p><h4><span id="chuang-jian-duo-xian-cheng-de-fang-shi-si-shi-yong-xian-cheng-chi">创建多线程的方式四：使用线程池</span><a href="#chuang-jian-duo-xian-cheng-de-fang-shi-si-shi-yong-xian-cheng-chi" class="header-anchor">.</a></h4><blockquote><p>好处</p><p>提高响应速度（减少了创建新线程的时间）</p><p>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</p><p>便于线程管理</p><ul><li>corePoolSize: 核心池的大小</li><li>maximumPoolSize: 最大连接数</li><li>keepAliveTime: 线程没有任务时最多保持多长时间后会终止</li></ul></blockquote><h5><span id="xian-cheng-chi-xiang-guan-api">线程池相关API</span><a href="#xian-cheng-chi-xiang-guan-api" class="header-anchor">.</a></h5><p><strong>JDK 5.0起提供了线程池相关API</strong>：<code>ExecutorService</code> 和 <code>Executors</code><br><code>ExecutorService</code>：真正的线程池接口。常见子类<code>ThreadPoolExecutor</code></p><ul><li><p><code>void execute(Runnable command)</code> ：执行任务/命令，没有返回值，一般用来执行<br><strong><code>Runnable</code></strong></p></li><li><p><code>&lt;T&gt; Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code>：执行任务，有返回值，一般又来执行<br><strong><code>Callable</code></strong></p></li><li><p><code>void shutdown()</code> ：关闭连接池</p></li></ul><p><strong>Executors：工具类、线程池的工厂类，用于创建并返回不同类型的线程池</strong></p><ul><li><p><code>Executors.newCachedThreadPool()</code>：创建一个可根据需要创建新线程的线程池</p></li><li><p><code>Executors.newFixedThreadPool(n)</code>; 创建一个可重用固定线程数的线程池</p></li><li><p><code>Executors.newSingleThreadExecutor()</code> ：创建一个只有一个线程的线程池</p></li><li><p><code>Executors.newScheduledThreadPool(n)</code>：创建一个线程池，它可安排在给定延迟后运<br>行命令或者定期地执行。</p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 方式四：使用线程池 * 1. 创建 Runnable 或 Callable的实现类（也可是匿名实现类） * 2. 使用Executors.newFixedThreadPool(n);创建固定的线程池 * 3. 可选：线程池的一些设置操作 * 4. 使用线程池对象，执行不同的线程对象 *   excute 或 submit * 5. 使用shutdown关闭线程池 **/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadTest07</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//1.</span>        <span class="token comment" spellcheck="true">//runnable</span>       Runnable r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token annotation punctuation">@Override</span>           <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"runnable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//callable</span>        Callable c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Callable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"callable"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> null<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//2.</span>        ThreadPoolExecutor es <span class="token operator">=</span> <span class="token punctuation">(</span>ThreadPoolExecutor<span class="token punctuation">)</span> Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//必须使用实现类,不然无法设置线程池</span>        <span class="token comment" spellcheck="true">// ExecutorService -->  ThreadPoolExecutor</span><span class="token comment" spellcheck="true">//        System.out.println(es.getClass()); 通过getClass 可以获取对象的创建类</span>        <span class="token comment" spellcheck="true">//3.</span><span class="token comment" spellcheck="true">//        es.setCorePoolSize(1024);</span>        <span class="token comment" spellcheck="true">//4.</span>        es<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//runnable</span>        es<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//runnable or callable</span>        <span class="token comment" spellcheck="true">//5.</span>        es<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/58642/image-20200802125317372.png" alt></p><h2><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h2><h3><span id="dan-he-he-duo-he-cpu">单核和多核CPU</span><a href="#dan-he-he-duo-he-cpu" class="header-anchor">.</a></h3><ul><li>单核CPU：是一种假的多线程，因为在一个时间单元内，也只能执行一个线程的任务，由于CPU主频很高，几乎感觉不出来，它是单线程的</li><li>多核CPU：能更好的发挥多线程的效率</li></ul><blockquote><p>一个Java程序java.exe，至少启动三个线程</p><ul><li>main() 主线程</li><li>gc() 垃圾回收线程</li><li>异常处理线程 –&gt; 影响主线程</li></ul></blockquote><h3><span id="bing-xing-he-bing-fa">并行和并发</span><a href="#bing-xing-he-bing-fa" class="header-anchor">.</a></h3><ul><li><p><strong>并行</strong></p><ul><li>多个cpu同时执行多个任务   —— 多个人做不同的事</li></ul></li><li><p><strong>并发</strong></p><ul><li>一个cpu（采用时间片）同时执行多个任务 —— 多个人做一件事</li></ul></li></ul><h3><span id="xian-cheng-de-diao-du">线程的调度</span><a href="#xian-cheng-de-diao-du" class="header-anchor">.</a></h3><ul><li><p><strong>调度策略</strong></p><ul><li><p><mark>时间片</mark></p><p>时间片是CPU分配给各个线程的时间，因为时间片非常短，所以CPU通过不停的切换线程执行，让我们感觉多个线程是同时执行的，时间片一般是十几毫秒（ms）。</p></li><li><p><mark>抢占式</mark></p><p>高优先级的线程抢占CPU</p></li></ul></li><li><p><strong>Java中的调度方法</strong></p><ul><li><strong>同优先级</strong>线程组成先进先出（队列），使用时间片策略</li><li>对<strong>高优先级</strong>，使用优先调度的抢占式策略</li></ul></li></ul><h3><span id="chuang-kou-mai-piao">窗口卖票</span><a href="#chuang-kou-mai-piao" class="header-anchor">.</a></h3><h4><span id="1-shi-yong-ji-cheng-thread-shi-xian-cun-zai-xian-cheng-an-quan-wen-ti">1、使用继承Thread实现（存在线程安全问题）</span><a href="#1-shi-yong-ji-cheng-thread-shi-xian-cun-zai-xian-cheng-an-quan-wen-ti" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        解释一下 为什么要用 static        开了三个窗口（三个Window对象，每个对象一个线程），每个Window对象都有自己的ticket属性        所以 我们需要这三个对象 共用一套 ticket属性 --> 使用 static     */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//卖票</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出"</span> <span class="token operator">+</span> ticket <span class="token operator">+</span> <span class="token string">"号票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建三个窗口 （三个线程对象）</span>        Thread window1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread window2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread window3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置名字</span>        window1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启线程</span>        window1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        window3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/58642/image-20200801174235528.png" alt="重复卖票"></p><h4><span id="2-shi-yong-shi-xian-runnable-jie-kou-shi-xian-cun-zai-xian-cheng-an-quan-wen-ti">2、使用实现Runnable接口实现（存在线程安全问题）</span><a href="#2-shi-yong-shi-xian-runnable-jie-kou-shi-xian-cun-zai-xian-cheng-an-quan-wen-ti" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Window</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        解释一下 为啥没使用 static        （创建了一个Window对象，这个对象开了三个线程（窗口）） ticket只有一份     */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> ticket <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//卖票</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>ticket <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"卖出"</span> <span class="token operator">+</span> ticket <span class="token operator">+</span> <span class="token string">"号票"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ticket<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//创建一个窗口对象, 它不卖票，让给线程卖</span>        Window w <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建3个窗口(3个线程对象)  w 作为三个线程的共享数据</span>        Thread w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread w2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread w3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置名字</span>        w1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"窗口3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//开启线程</span>        w1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        w3<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/58642/image-20200801180535251.png" alt="重复卖票"></p><h4><span id="xian-cheng-an-quan-wen-ti-zhan-shi">线程安全问题展示</span><a href="#xian-cheng-an-quan-wen-ti-zhan-shi" class="header-anchor">.</a></h4><blockquote><p><strong>原因：</strong>当某个线程操作车票的过程中，尚未完成操作时，其他线程参与进来，也操作了车票</p></blockquote><ul><li><strong>重票</strong> 如上</li><li><strong>错票</strong></li></ul><p><img src="/2020/10/21/58642/image-20200801205815895.png" alt></p><p><img src="/2020/10/21/58642/image-20200801205848481.png" alt="多卖了两张"></p><h4><span id="jie-jue-fang-fa">解决方法</span><a href="#jie-jue-fang-fa" class="header-anchor">.</a></h4><h5><span id="tong-guo-tong-bu-ji-zhi-jie-jue">通过同步机制解决</span><a href="#tong-guo-tong-bu-ji-zhi-jie-jue" class="header-anchor">.</a></h5><p><strong>方式一：同步代码块</strong> <code>synchronized</code></p><p><img src="/2020/10/21/58642/image-20200801212905373.png" alt></p><p><img src="/2020/10/21/58642/image-20200801212930526.png" alt></p><p><strong>方式二：同步方法</strong></p><blockquote><p>如果操作共享数据的代码完整的声明在一个方法中，我们不妨将此方法声明同步的。</p><p>如果是实现<code>Runnable</code>接口需要使用<strong>非静态的</strong>同步方法（当然静态也可以，只不过同步数据也要是静态的），它的默认同步监视器：<code>this</code> ；不适用与继承<strong>Thread</strong>的</p><p>如果是继承<code>Thread</code>需要使用<code>static</code>修饰同步方法，它的默认同步监视器：<code>当前类</code></p></blockquote><p><img src="/2020/10/21/58642/image-20200801215401267.png" alt></p><p><strong>方式三：同步锁</strong></p><p><img src="/2020/10/21/58642/image-20200802020636102.png" alt></p><h3><span id="xian-cheng-fen-lei">线程分类</span><a href="#xian-cheng-fen-lei" class="header-anchor">.</a></h3><p>Java中的线程分为两类：一种是<strong>守护线程</strong>，一种是<strong>用户线程</strong>。 </p><ul><li><p>它们在几乎每个方面都是相同的，<strong>唯一的区别是判断JVM何时离开</strong>。</p></li><li><p>守护线程是用来服务用户线程的，通过在start()方法前调用<strong>thread.setDaemon(true</strong>)可以把一个用户线程变成一个守护线程。</p></li><li><p>Java垃圾回收就是一个典型的守护线程。</p></li><li><p>若JVM中都是守护线程，当前JVM将退出。 </p></li></ul><h3><span id="xian-cheng-si-suo-wen-ti">线程死锁问题</span><a href="#xian-cheng-si-suo-wen-ti" class="header-anchor">.</a></h3><ul><li>死锁<ul><li>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</li><li>出现死锁后，不会出现异常，不会出现提示，只是所有的线程都处于阻塞状态，无法继续</li></ul></li><li>解决方法<ul><li>专门的算法，原则</li><li>尽量<strong>减少同步资源（锁）的定义</strong></li><li>尽量<strong>避免嵌套同步</strong></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLock</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//两把锁</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StringBuffer a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> StringBuffer b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*            有两个锁 ，a ，b            两个线程 A ， B            正常情况下, 假如 A先获取执行权  A -> sync(a),a没上锁 --> a上锁 --> 代码操作 --> a锁释放            --> sync(b),b没上锁 -->  b上锁 --> 代码操作 --> b锁释放 --> 打印操作 --> A释放执行权            --> B获取执行权 B -> sync(b) --> b上锁 --> 代码操作 --> b锁释放            --> sync(a),a没上锁 -->  a上锁 --> 代码操作 --> a锁释放 --> 打印操作 --> 程序结束            死锁：A --> sync(a),a没上锁 --> a上锁 --> A阻塞， B --> sync(b),b没上锁 --> b上锁 --> B阻塞             --> A继续运行 --> sync(b),b已上锁 --> 等待b释放(阻塞) --> B继续运行 -->  sync(a),a已上锁 --> 等待a释放(阻塞)             --> ........................................双方一直等待对方释放资源         */</span>        <span class="token comment" spellcheck="true">//线程1 ： 采用实现Runnable接口的匿名实现类</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Runnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@SneakyThrows</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>                    a<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻塞  注释这段代码就能正常运行</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>                        b<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//线程2 ： 采用继承Thread类的匿名子类</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token annotation punctuation">@SneakyThrows</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">{</span>                    b<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//阻塞</span>                    <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>                        a<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="synchronized-yu-lock-de-yi-tong">synchronized与lock的异同</span><a href="#synchronized-yu-lock-de-yi-tong" class="header-anchor">.</a></h3><ul><li>相同点<ul><li>都可以解决线程安全问题</li></ul></li><li>不同<ul><li>lock是显示锁，手动启动，释放锁 ； synchronized是隐式锁，执行完相应的代码后，自动释放锁</li><li>Lock只有代码块锁； synchronized有代码块锁和方法锁</li><li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li></ul></li></ul><blockquote><p>使用的先后顺序 ： Lock –&gt; 同步代码块 –&gt; 同步方法</p></blockquote><h3><span id="sleep-he-wait-yi-tong">sleep() 和 wait() 异同</span><a href="#sleep-he-wait-yi-tong" class="header-anchor">.</a></h3><ul><li>相同点<ul><li>一旦执行方法，都可以使得当前的线程进入阻塞状态</li></ul></li><li>不同点<ul><li>两个方法声明的位置不同<ul><li>Thread类中声明sleep()</li><li>Object类中声明wait()</li></ul></li><li>调用的要求不同<ul><li>sleep()可以在任何需要的场景下调用</li><li>wait()必须使用在同步代码块或同步方法中</li></ul></li><li>关于释放锁<ul><li>sleep() 不会</li><li>wait()会</li></ul></li></ul></li></ul><h3><span id="shi-fang-suo-de-cao-zuo">释放锁的操作</span><a href="#shi-fang-suo-de-cao-zuo" class="header-anchor">.</a></h3><ul><li><p>当前线程的同步方法、同步代码块执行结束。</p></li><li><p>当前线程在同步代码块、同步方法中遇到break、return终止了该代码块、</p></li></ul><p>该方法的继续执行。</p><ul><li>当前线程在同步代码块、同步方法中出现了未处理的Error或Exception，导</li></ul><p>致异常结束。</p><ul><li>当前线程在同步代码块、同步方法中执行了线程对象的<strong><code>wait()</code></strong>方法，当前线</li></ul><p>程暂停，并释放锁。</p><h3><span id="bu-hui-shi-fang-suo-de-cao-zuo">不会释放锁的操作</span><a href="#bu-hui-shi-fang-suo-de-cao-zuo" class="header-anchor">.</a></h3><ul><li>线程执行同步代码块或同步方法时，程序调用<code>Thread.sleep()</code>、</li></ul><p><code>Thread.yield()</code>方法暂停当前线程的执行</p><ul><li>线程执行同步代码块时，其他线程调用了该线程的<code>suspend()</code>方法将该线程</li></ul><p>挂起，该线程不会释放锁（同步监视器）。</p><ul><li>应尽量避免使用<code>suspend()</code>和<code>resume()</code>来控制线程</li></ul><h3><span id="sheng-chan-zhe-he-xiao-fei-zhe">生产者和消费者</span><a href="#sheng-chan-zhe-he-xiao-fei-zhe" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"> <span class="token operator">*</span> <span class="token annotation punctuation">@decription</span> 生产者 消费者问题 <span class="token operator">*</span> 生产的产品最多<span class="token number">20</span>个 <span class="token operator">*</span> <span class="token operator">*</span>  包含线程同步（同步方法 ） <span class="token operator">--</span><span class="token operator">></span> 解决了线程安全问题 <span class="token operator">*</span>     线程通信 <span class="token operator">*</span> <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">pc</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SalesClerk clerk <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SalesClerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread consumer1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Thread consumer2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Consumer</span><span class="token punctuation">(</span>clerk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"厂家1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"顾客1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"顾客2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        consumer2<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//生产者</span><span class="token keyword">class</span> <span class="token class-name">Producer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> SalesClerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Producer</span><span class="token punctuation">(</span>SalesClerk clerk<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始生产"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                clerk<span class="token punctuation">.</span><span class="token function">produceProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//消费者</span><span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> SalesClerk clerk<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Consumer</span><span class="token punctuation">(</span>SalesClerk clerk<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>clerk <span class="token operator">=</span> clerk<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"开始消费"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                clerk<span class="token punctuation">.</span><span class="token function">consumeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//售货员</span><span class="token keyword">class</span> <span class="token class-name">SalesClerk</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> product <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//生产产品 : &lt; 20 进货</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">produceProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//厂家 每[1,10]ms生产一个产品 最多生产20个</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"生产了一个产品，产品库存: "</span> <span class="token operator">+</span> <span class="token operator">++</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//生产了就 让消费者购买</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>product <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//产品达到20个就停止生产</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//消费产品 ： > 0 售卖</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">consumeProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>product <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//厂家 没[1,100]ms售出一个产品</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"购买了一个产品，产品库存: "</span> <span class="token operator">+</span> <span class="token operator">--</span>product<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            if(product %2 == 0) //库存不足 厂家生产</span>            <span class="token function">notifyAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 买了一个 厂家块生产</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//库存没了，只能等</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getProduct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>product<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/58642/image-20200802142923656.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- java常用类-日期时间API</title>
      <link href="/2020/10/21/30519.html"/>
      <url>/2020/10/21/30519.html</url>
      
        <content type="html"><![CDATA[<h2><span id="ri-qi-shi-jian-api">日期时间API</span><a href="#ri-qi-shi-jian-api" class="header-anchor">.</a></h2><h3><span id="jdk8-zhi-qian"><code>JDK8之前</code></span><a href="#jdk8-zhi-qian" class="header-anchor">.</a></h3><h4><span id="1-java-lang-system-zhong-currenttimemillis">1、<code>java.lang.System</code>中<code>currentTimeMillis()</code>;</span><a href="#1-java-lang-system-zhong-currenttimemillis" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java">System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 时间戳</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4><span id="2-java-util-date-lei">2、<code>java.util.Date</code>类</span><a href="#2-java-util-date-lei" class="header-anchor">.</a></h4><p><strong>两个构造器的使用</strong></p><ul><li><code>new Date()</code>：获取当前时间的Date对象</li><li><code>new Date(时间戳)</code>：获取指定时间的Date对象</li></ul><p><strong>两个方法的使用</strong></p><ul><li><code>toString()</code>: 显示当前的年、月、日、时、分、秒</li><li><code>getTime()</code>: 获取当前的对象对应的时间戳</li></ul><blockquote><p>实际演示可以看，补充1、2</p></blockquote><h3><span id="jdk8-ji-zhi-hou"><code>JDK8及之后</code></span><a href="#jdk8-ji-zhi-hou" class="header-anchor">.</a></h3><h2><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h2><h3><span id="1-java-sql-date-lei">1.<code>java.sql.Date</code>类</span><a href="#1-java-sql-date-lei" class="header-anchor">.</a></h3><p><code>java.util.Date</code>类</p><p>​        |—– <code>java.sql.Date</code>类</p><blockquote><p>对应着数据库中的日期类型的变量</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date udate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"util.date = "</span> <span class="token operator">+</span> udate<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timezone = "</span> <span class="token operator">+</span> udate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date sdate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>1596880993464L<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sql.date = "</span> <span class="token operator">+</span> sdate<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timezone = "</span> <span class="token operator">+</span> sdate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1596880993464</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/30519/image-20200808180844791.png" alt></p><h3><span id="2-util-date-gt-sql-date">2、util.Date ==&gt; sql.Date</span><a href="#2-util-date-gt-sql-date" class="header-anchor">.</a></h3><blockquote><p>先排除 先向上转型，再向下转型，这个实质上真正的对象只有一个，即sql.Date对象</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date udate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>1596880993464L<span class="token punctuation">)</span><span class="token punctuation">;</span>        java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date sdate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Date</span><span class="token punctuation">(</span>udate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sql.date = "</span> <span class="token operator">+</span> sdate<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"timezone = "</span> <span class="token operator">+</span> sdate<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1596880993464</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- java常用类-String(含堆)</title>
      <link href="/2020/10/21/62003.html"/>
      <url>/2020/10/21/62003.html</url>
      
        <content type="html"><![CDATA[<h2><span id="string-zi-fu-chuan">String（字符串）</span><a href="#string-zi-fu-chuan" class="header-anchor">.</a></h2><ul><li><code>final</code>类：不可被继承，<strong>不可变的字符序列</strong></li><li><strong>支持序列化</strong></li><li><strong>可以比较大小</strong></li><li><strong>字符串是常量，用双引号表示，其值不可更改</strong>（String a = “1”;  ==&gt;  String a = “12”;   这个不叫更改字符串，只是更改字符串引用指向另一个常量，也就是重新赋值）<ul><li>不会在<strong>原</strong>内存区域进行修改</li><li>看似的修改操作（赋值，连接，replace()等）,都是会重新指定内存区域的</li></ul></li><li><code>JDK1.8及以前</code>字符<strong>内容</strong>是存储在<strong>一个字符数组</strong><code>private final char value[]</code>中</li><li><code>JDK1.9及以后</code>字符<strong>内容</strong>是存储在<strong>一个字节数组</strong><code>private final byte value[]</code>中</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">String</span>    <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable</span><span class="token punctuation">,</span> Comparable<span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">,</span> CharSequence<span class="token punctuation">,</span>               Constable<span class="token punctuation">,</span> ConstantDesc <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="1-ding-yi-fang-shi">1、定义方式</span><a href="#1-ding-yi-fang-shi" class="header-anchor">.</a></h3><ul><li>字面量定义</li><li>new</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//字面量</span>String str1 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>String str2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>str1 <span class="token operator">==</span> str2 <span class="token comment" spellcheck="true">//true : ? ==> 字面量是存储常量池中的，常量池中不会存储相同内容的字符串，所以这两个变量指向同一个常量(地址)</span><span class="token comment" spellcheck="true">//new </span><span class="token comment" spellcheck="true">//带参：字符串</span>String str3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String str4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str3 <span class="token operator">==</span> str4 <span class="token comment" spellcheck="true">//false : ? ==> 创建了两个对象，这两个对象是不同的内存空间</span><span class="token comment" spellcheck="true">//无参</span>String str5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 长度为0的字符串</span><span class="token comment" spellcheck="true">//带参：char[]</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch<span class="token punctuation">;</span>String str6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//String str6 = new String(char[] ch, int startIndex, int count);</span><span class="token comment" spellcheck="true">//带参： byte[]</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b<span class="token punctuation">;</span>String str7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//带参：StringBuffer or StringBuilder</span>String buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>String buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-ji-ben-fang-fa-shi-yong">2、基本方法使用</span><a href="#2-ji-ben-fang-fa-shi-yong" class="header-anchor">.</a></h3><h4><span id="chang-yong-fang-fa">常用方法</span><a href="#chang-yong-fang-fa" class="header-anchor">.</a></h4><h4><span id="1-int-length">1.<code>int length()</code></span><a href="#1-int-length" class="header-anchor">.</a></h4><blockquote><p>返回字符串的长度</p></blockquote><h4><span id="2-char-charat-int-index">2.<code>char charAt(int index)</code></span><a href="#2-char-charat-int-index" class="header-anchor">.</a></h4><blockquote><p>返回某索引处的字符</p></blockquote><h4><span id="3-boolean-isempty">3.<code>boolean isEmpty()</code></span><a href="#3-boolean-isempty" class="header-anchor">.</a></h4><blockquote><p>判断字符串是否为空字符串</p></blockquote><ul><li>“”</li><li>new String();</li><li>new String(“”)</li></ul><blockquote><p><code>boolean isBlank()</code>   <strong><code>JDK11</code></strong>   可以判断字符串是否是空串或是空白的</p></blockquote><h4><span id="4-string-tolowercase">4.<code>String toLowerCase()</code></span><a href="#4-string-tolowercase" class="header-anchor">.</a></h4><blockquote><p>将String中所有字符转为小写</p></blockquote><h4><span id="5-string-touppercase">5.<code>String toUpperCase()</code></span><a href="#5-string-touppercase" class="header-anchor">.</a></h4><blockquote><p>将String中所有字符转为大写</p></blockquote><h4><span id="6-string-trim">6.<code>String trim()</code></span><a href="#6-string-trim" class="header-anchor">.</a></h4><blockquote><p>返回字符串的副本，<strong>忽略前导空白和尾部空白</strong></p></blockquote><h4><span id="7-boolean-equals-object-obj">7.<code>boolean equals(Object obj)</code></span><a href="#7-boolean-equals-object-obj" class="header-anchor">.</a></h4><blockquote><p>比较字符串的内容是否相同</p></blockquote><h4><span id="8-boolean-equalsignorecase-string-anotherstring">8.<code>boolean equalsIgnoreCase(String anotherString)</code></span><a href="#8-boolean-equalsignorecase-string-anotherstring" class="header-anchor">.</a></h4><blockquote><p>忽略大小写比较内容是否相等</p></blockquote><h4><span id="9-string-concat-string-str">9.<code>String concat(String str)</code></span><a href="#9-string-concat-string-str" class="header-anchor">.</a></h4><blockquote><p>将指定字符串拼接到字符串的结尾。 <strong>等价于 +</strong></p></blockquote><h4><span id="10-int-compareto-string-anotherstring">10.<code>int compareTo(String anotherString)</code></span><a href="#10-int-compareto-string-anotherstring" class="header-anchor">.</a></h4><blockquote><p>比较字符串的大小</p></blockquote><h4><span id="11-string-substring-int-beginindex">11.<code>String subString(int beginIndex)</code></span><a href="#11-string-substring-int-beginindex" class="header-anchor">.</a></h4><blockquote><p>返回一个新字符串，<strong>从索引<code>beginIndex</code>开始截取的字符串</strong></p></blockquote><h4><span id="12-string-substring-int-beginindex-int-endindex">12.<code>String subString(int beginIndex,int endIndex)</code></span><a href="#12-string-substring-int-beginindex-int-endindex" class="header-anchor">.</a></h4><blockquote><p>返回一个新字符串，<strong>从索引 <code>beginIndex</code>开始截取到索引<code>endIndex-1</code>的字符串（左闭右开[<code>beginIndex</code>,<code>endIndex</code>)  ）</strong></p></blockquote><h4><span id="13-boolean-endswith-string-suffix">13.<code>boolean endsWith(String suffix)</code></span><a href="#13-boolean-endswith-string-suffix" class="header-anchor">.</a></h4><blockquote><p>测试次字符串是否以指定后缀结尾</p></blockquote><h4><span id="14-boolean-startswith-string-prefix">14.<code>boolean startsWith(String prefix)</code></span><a href="#14-boolean-startswith-string-prefix" class="header-anchor">.</a></h4><blockquote><p>测试次字符串是否以指定前缀结尾</p></blockquote><h4><span id="15-boolean-startswith-string-prefix-int-toffset">15.<code>boolean startsWith(String prefix, int toffset)</code></span><a href="#15-boolean-startswith-string-prefix-int-toffset" class="header-anchor">.</a></h4><blockquote><p>测试此字符串从指定索引（<code>toffset</code>）开始的子字符串是否以指定前缀（<code>prefix</code>）开始</p></blockquote><h4><span id="16-boolean-contains-charsequence-s">16.<code>boolean contains(CharSequence s)</code></span><a href="#16-boolean-contains-charsequence-s" class="header-anchor">.</a></h4><blockquote><p>当且仅当此字符串包含指定char值序列时，返回true</p></blockquote><h4><span id="17-int-indexof-string-str">17.<code>int indexOf(String str)</code></span><a href="#17-int-indexof-string-str" class="header-anchor">.</a></h4><blockquote><p>返回指定的子字符串在此字符串中第一次出现处的索引</p></blockquote><h4><span id="17-int-indexof-string-str-int-fromindex">17.<code>int indexOf(String str, int fromIndex)</code></span><a href="#17-int-indexof-string-str-int-fromindex" class="header-anchor">.</a></h4><blockquote><p>返回从指定索引开始，指定子字符串<code>str</code>在<strong>此字符串子串</strong>中第一次出现的索引</p></blockquote><h4><span id="18-int-lastindexof-string-str">18.<code>int lastIndexOf(String str)</code></span><a href="#18-int-lastindexof-string-str" class="header-anchor">.</a></h4><blockquote><p>同上，但是是最后一次</p></blockquote><h4><span id="18-int-lastindexof-string-str-int-fromindex">18.<code>int lastIndexOf(String str, int fromIndex)</code></span><a href="#18-int-lastindexof-string-str-int-fromindex" class="header-anchor">.</a></h4><blockquote><p>同上，但是是最后一次</p></blockquote><p><mark><strong>17、18如果方法没有找到，放回都是 -1</strong> </mark></p><h4><span id="19-string-replace-char-oldchar-char-newchar">19.<code>String replace(char oldChar,char newChar)</code></span><a href="#19-string-replace-char-oldchar-char-newchar" class="header-anchor">.</a></h4><blockquote><p>返回一个新字符串，会用新字符<code>newChar</code> 替换 旧字符<code>oldChar</code></p></blockquote><h4><span id="20-string-replace-charsequence-target-charsequence-replacement">20.<code>String replace(CharSequence target, CharSequence replacement)</code></span><a href="#20-string-replace-charsequence-target-charsequence-replacement" class="header-anchor">.</a></h4><blockquote><p> 字符序列的替换 ,字符序列用””表示</p></blockquote><h4><span id="21-string-replaceall-string-regex-string-replacement">21.<code>String replaceAll(String regex, String replacement)</code></span><a href="#21-string-replaceall-string-regex-string-replacement" class="header-anchor">.</a></h4><blockquote><p>使用指定的<code>replacement</code>替换匹配给定的正则表达式<code>regex</code>的所有子字符串</p></blockquote><h4><span id="22-string-replacefirst-string-regex-string-replacement">22.<code>String replaceFirst(String regex, String replacement)</code></span><a href="#22-string-replacefirst-string-regex-string-replacement" class="header-anchor">.</a></h4><blockquote><p>使用指定的<code>replacement</code>替换匹配给定的正则表达式<code>regex</code>的第一个子字符串</p></blockquote><h4><span id="23-boolean-matches-string-regex">23.<code>boolean matches(String regex)</code></span><a href="#23-boolean-matches-string-regex" class="header-anchor">.</a></h4><blockquote><p>告知此字符串是否匹配给定的正则表达式</p></blockquote><h4><span id="24-string-split-string-regex">24.<code>String[] split(String regex)</code></span><a href="#24-string-split-string-regex" class="header-anchor">.</a></h4><blockquote><p>根据给定的正则表达式的匹配拆分字符串</p></blockquote><h4><span id="25-string-split-string-regex-int-limit">25.<code>String[] split(String regex, int limit)</code></span><a href="#25-string-split-string-regex-int-limit" class="header-anchor">.</a></h4><blockquote><p>根据匹配给定的正则表达式来拆分字符串，<strong>最多不超过limit个，如果超过了，剩下的全部都放到最后一个元素中</strong></p></blockquote><h3><span id="3-zi-fu-chuan-yu-bao-zhuang-lei-ji-ben-lei-xing-zhi-jian-de-zhuan-huan">3、字符串与包装类、基本类型之间的转换</span><a href="#3-zi-fu-chuan-yu-bao-zhuang-lei-ji-ben-lei-xing-zhi-jian-de-zhuan-huan" class="header-anchor">.</a></h3><blockquote><p>略，详情看 <strong>包装类</strong></p></blockquote><h3><span id="4-zi-fu-chuan-yu-zi-fu-shu-zu-zhi-jian-de-zhuan-huan">4、字符串与字符数组之间的转换</span><a href="#4-zi-fu-chuan-yu-zi-fu-shu-zu-zhi-jian-de-zhuan-huan" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符数组 --> 字符串</span><span class="token comment" spellcheck="true">//1.String 构造器 String(char[]) 和 String(char[], int offset, int length)</span>String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"12"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串 --> 字符数组</span><span class="token comment" spellcheck="true">//1. toCharArray</span><span class="token keyword">char</span> c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="5-zi-fu-chuan-yu-zi-jie-shu-zu-de-zhi-jian-de-zhuang-huan">5、字符串与字节数组的之间的装换</span><a href="#5-zi-fu-chuan-yu-zi-jie-shu-zu-de-zhi-jian-de-zhuang-huan" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字节数组 --> 字符串</span><span class="token comment" spellcheck="true">//1. Arrays.toString</span>String str1 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. 构造器</span>String str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">"12"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//字符串 --> 字节数组</span><span class="token comment" spellcheck="true">//1. getBytes()</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h2><h3><span id="1-string-str1-abc-yu-string-str2-new-string-abc-de-qu-bie">1、String str1 = “abc”; 与 String str2 = new String(“abc”);的区别？</span><a href="#1-string-str1-abc-yu-string-str2-new-string-abc-de-qu-bie" class="header-anchor">.</a></h3><ul><li>前者 变量直接指向内存中常量池里的”abc”（”abc”作为一个对象保存在常量池中）</li><li>后者 变量指向新创建的String类型的对象，对象的属性value是指向内存中常量池里的”abc”</li></ul><h3><span id="2-string-str-new-string-a-zai-nei-cun-zhong-chuang-jian-liao-ji-ge-dui-xiang">2、String str = new String(“a”);在内存中创建了几个对象</span><a href="#2-string-str-new-string-a-zai-nei-cun-zhong-chuang-jian-liao-ji-ge-dui-xiang" class="header-anchor">.</a></h3><ul><li>两个<ul><li>堆内存中new的String对象</li><li>value属性对应常量池中的数据</li></ul></li></ul><h3><span id="3-bu-tong-pin-jie-cao-zuo-de-dui-bi">3、不同拼接操作的对比</span><a href="#3-bu-tong-pin-jie-cao-zuo-de-dui-bi" class="header-anchor">.</a></h3><ul><li>字面量(常量)之间的连接结果，相当于还是在常量池中声明</li><li>有变量名参与的连接结果，会在堆上开辟空间，都相当于new</li><li><code>intern()</code>的返回值都在常量池中</li></ul><pre class="line-numbers language-java"><code class="language-java">String s1 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>String s2 <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>String s3 <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span>String s4 <span class="token operator">=</span> <span class="token string">"helloworld"</span><span class="token punctuation">;</span>String s5 <span class="token operator">=</span> <span class="token string">"hello"</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>String s6 <span class="token operator">=</span> s1 <span class="token operator">+</span> <span class="token string">"world"</span><span class="token punctuation">;</span>String s7 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>String s8 <span class="token operator">=</span> s5<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到的返回值 在常量池中 (不管s5的定义方式)</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4 <span class="token operator">==</span> s8<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span class="token comment" spellcheck="true">//其余的比较都是false</span><span class="token keyword">final</span> String s9 <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// s9 是常量，常量和常量之间的连接的结果是在常量池中的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-san-chong-jvm">4、三种JVM</span><a href="#4-san-chong-jvm" class="header-anchor">.</a></h3><ul><li><p>Sun公司的HotSpot</p><ul><li><p>被Oracle收购</p><p><img src="/2020/10/21/62003/image-20200808114204813.png" alt></p></li></ul></li><li><p>BEA公司的JRockit</p><ul><li>被Oracle收购</li></ul></li><li><p>IBM公司的J9 VM</p></li></ul><h3><span id="5-heap-dui">5、Heap堆</span><a href="#5-heap-dui" class="header-anchor">.</a></h3><blockquote><p>一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保证所有引用类型的真实信息，以方便执行器执行，堆内存分为三部分</p></blockquote><ul><li>Young Generation Space 新生区</li><li>Tenure Generation Space 养老区</li><li><del>Permanent Space 永久存储区</del>  相当于 <strong>方法区</strong></li></ul><h3><span id="6-method-area-fang-fa-qu">6、Method Area方法区</span><a href="#6-method-area-fang-fa-qu" class="header-anchor">.</a></h3><blockquote><p>和堆一样，是各个线程共享的内存区域，它用于存储虚拟机加载的：<strong>类信息、普通常量、静态变量、编译器编译后的代码</strong>等，虽然JVM规范将方法区描述为堆的一个逻辑部分，但是它却还有一个别名叫 Non-Heap（非堆）。目的是将其和堆分开</p></blockquote><blockquote><p>对于HotSpot虚拟机来说，把方法区称为 <strong>永久代</strong>，但严格本质上锁两者是不同的，或者说使用永久代来实现方法区而已，<strong>永久代是方法区的一个实现</strong>，<code>JDK1.7</code>的版本中，<strong>已经将原本放在永久代的字符串常量池移走了</strong></p></blockquote><blockquote><p>常量池（Constant Pool）是方法区的一部分，Class文件除了有类的版本、字段、方法、接口等描述信息，还有一项信息就是常量池，这部分内容将在类加载后进入方法区的运行时常量</p></blockquote><h3><span id="7-xin-sheng-qu">7、新生区</span><a href="#7-xin-sheng-qu" class="header-anchor">.</a></h3><blockquote><p>新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后的被垃圾回收器收集，结束生命。</p></blockquote><p><strong>新生区分为两部分</strong></p><ul><li>伊甸区（Eden Sapce）：所有的类都是在这new出来的</li><li>幸存者区（Survivor Space）：<ul><li>s0区</li><li>s1区</li></ul></li></ul><blockquote><p>当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收（<code>Minor GC</code>），将伊甸园区中的不在被其他对象所引用的对象进行销毁。</p><p>然后将伊甸园中的剩余对象移动到幸存0区，若幸存0区满了，再对该区也进行垃圾回收，然后移到幸存1区。</p><p>如果幸存1区也满了呢？</p><p>在移动到养老区，若养老区也满了，那么这个时候将产生<code>Major GC</code>（<code>FullGC</code>），进行养老区的内存清理。</p><p>若养老区执行了<code>Full GC</code>之后发现依然无法进行对象的保存，就会产生OOM异常（<code>OutOfMemoryError</code>）</p></blockquote><p>如果出现<code>java.lang.OutOfMemoryError</code>:java heap space 异常，<strong>说明java虚拟机的堆内存不够。</strong>原因：</p><ul><li>Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调整</li><li>代码中创建了大量大对象,并且长时间不能被垃圾回收器收集（存在被引用）。—- 内存溢出；内存泄露</li></ul><h3><span id="8-yong-jiu-qu">8、永久区</span><a href="#8-yong-jiu-qu" class="header-anchor">.</a></h3><blockquote><p>永久存储区是一个常驻内存区域，用于存放JDK自身所携带的Class，Interface的元数据，也就是说它存储的是运行环境必须的类信息，被<strong>装载进此区域的数据是不会被垃圾回收器回收调度，关闭JVM才会释放掉此区域所占的内存</strong></p></blockquote><p>如果出现<code>java.lang.OutOfMemoryError</code>: PermGen Space 异常，<strong>说明java虚拟机对永久代Perm内存设置不够</strong>。一般出现这种情况，都是程序启动需要加载大量的第三方jar包。</p><ul><li>列如，在一个tomcat下部署了太多的应用，或者大量动态反射生成的类不断被加载，最终导致Perm区被占满</li></ul><p><strong>字符串常量池</strong></p><p><code>JDK1.6及以前</code> 常量池分配在永久代，<code>1.6</code>在方法区</p><p><code>JDK1.7</code>有，但是已经逐步 “去永久代”，<code>1.7</code>在堆</p><p><code>JDK1.8及以后</code>无，<code>1.8</code>在元空间（MetaSpace）</p><h3><span id="9-bian-ma-he-jie-ma">9、编码和解码</span><a href="#9-bian-ma-he-jie-ma" class="header-anchor">.</a></h3><p>编码：String –编码字符集utf-8–&gt; 字节  <strong>（保存数据，传输数据）</strong></p><p>解码：字节 –解码字符集utf-8–&gt; String <strong>（读取数据，接收数据）</strong></p><blockquote><p>编码字符集和解码字符集不一致，就导致乱码的出现</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- java常用类-StringBuilder和StringBuffer</title>
      <link href="/2020/10/21/35620.html"/>
      <url>/2020/10/21/35620.html</url>
      
        <content type="html"><![CDATA[<h2><span id="stringbuilder-he-stringbuffer">StringBuilder和StringBuffer</span><a href="#stringbuilder-he-stringbuffer" class="header-anchor">.</a></h2><h3><span id="1-string-stringbuilder-stringbuffer-san-zhe-de-yi-tong">1、String、StringBuilder、StringBuffer三者的异同？</span><a href="#1-string-stringbuilder-stringbuffer-san-zhe-de-yi-tong" class="header-anchor">.</a></h3><p><strong>不同</strong></p><p>String：<code>JDK1.0</code> 不可变的字符序列</p><p>StringBuilder：<code>JDK1.0</code> 可变的字符序列：线程安全的，效率偏低</p><p>StringBuffer：<code>JDK1.5</code> 可变的字符序列：线程不安全，效率高</p><p><strong>相同</strong></p><p><code>JDK1.8及以前</code>，底层都是使用<code>char[]</code>存储</p><p><code>JDK1.9及以后</code>，底层都是使用<code>byte[]</code>存储</p><h3><span id="2-di-ceng-zhong">2、底层中</span><a href="#2-di-ceng-zhong" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 底层new了一个容量为16的char或byte数组</span><span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 底层new了一个容量为"ab".length() + 16的char或byte数组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="3-she-ji-wen-ti">3、涉及问题</span><a href="#3-she-ji-wen-ti" class="header-anchor">.</a></h3><h4><span id="1-chang-du">1.长度</span><a href="#1-chang-du" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java">StringBuilder sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//问sb的长度</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 0</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回的是一个计数器，并不是value.length</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/35620/image-20200808151640255.png" alt></p><h4><span id="2-kuo-rong-wen-ti">2.扩容问题</span><a href="#2-kuo-rong-wen-ti" class="header-anchor">.</a></h4><p>如果底层数组装不下，默认扩容为原来的2倍+2，同时将原有数组中的元素复制到性的数组中</p><h3><span id="4-chang-yong-fang-fa-yi-stringbuffer-wei-li">4、常用方法(以StringBuffer为例)</span><a href="#4-chang-yong-fang-fa-yi-stringbuffer-wei-li" class="header-anchor">.</a></h3><p><code>StringBuffer append(XXX)</code>在字符串末尾添加XXX</p><p><code>StringBuffer delete(int start, int end)</code>删除指定位置的内容</p><p><code>StringBuffer replace(int start, int end, String str)</code>替换指定位置的内容</p><p><code>StringBuffer insert(int offset, XXX)</code>在指定位置插入XXX</p><p><code>StringBuffer reverse()</code>字符串序列反转</p><p><code>int indexOf(String str)</code></p><p><code>String substring(int start, int end)</code></p><p><code>int length()</code></p><p><code>int charAt(int n)</code></p><p><code>void setCharAt(int n, char ch)</code>设置指定索引的字符</p><blockquote><p><strong>StringBuilder与StringBuffer相同</strong></p></blockquote><h3><span id="5-xiao-lu-bi-jiao-pin-jie-cao-zuo">5、效率比较(拼接操作)</span><a href="#5-xiao-lu-bi-jiao-pin-jie-cao-zuo" class="header-anchor">.</a></h3><blockquote><p>StringBuilder &gt; StringBuffer &gt; String</p></blockquote><p><img src="/2020/10/21/35620/image-20200808163631462.png" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">CalcTime</span><span class="token punctuation">(</span><span class="token string">"String"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">30000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    s <span class="token operator">+=</span> i<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">CalcTime</span><span class="token punctuation">(</span><span class="token string">"StringBuilder"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            StringBuilder sbd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">30000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sbd<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">CalcTime</span><span class="token punctuation">(</span><span class="token string">"StringBuffer"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            StringBuffer sbf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> <span class="token number">30000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    sbf<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CalcTime</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span><span class="token string">"耗时"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">CalcTime</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 异常</title>
      <link href="/2020/10/21/60799.html"/>
      <url>/2020/10/21/60799.html</url>
      
        <content type="html"><![CDATA[<h2><span id="yi-chang">异常</span><a href="#yi-chang" class="header-anchor">.</a></h2><blockquote><p>在程序执行中发生的不正常情况</p></blockquote><p>语法错误和逻辑错误都不是异常</p><p><strong>异常(广义)分为</strong></p><ul><li>Error：java虚拟机无法解决的严重错误，一般不编写针对性代码进行处理<ul><li>JVM系统内部错误</li><li>资源耗尽</li><li>。。。</li></ul></li><li>Exception：其他因编程错误或偶然的外在因素导致的一致性问题，可以使用针对性代码处理<ul><li>空指针</li><li>数组索引越界</li><li>。。。</li></ul></li></ul><p><strong>Exception异常分为</strong></p><ul><li>编译时异常（checked）：运行javac.exe时，出现的异常</li><li>运行时异常（unchecked）：运行java.exe时，出现的异常</li></ul><h3><span id="yi-chang-ti-xi-jie-gou">异常体系结构</span><a href="#yi-chang-ti-xi-jie-gou" class="header-anchor">.</a></h3><p><code>java.lang.Throwable</code></p><ul><li><code>java.lang.Error</code> 一般不编写针对性代码进行处理</li><li><code>java.lang.Exception</code> 可以使用针对性代码处理<ul><li>编译时异常（常见举例）<ul><li><code>IOException</code><ul><li><code>FileNOTFoundException</code></li></ul></li><li><code>ClassNotFoundException</code></li></ul></li><li>运行时异常<code>RuntimeException</code>（常见举例）<ul><li><code>NullPointerException</code></li><li><code>ArrayIndexOutOfBoundsException</code></li><li><code>ClassCastException</code></li><li><code>NumberFormatException</code></li><li><code>InputMismatchException</code></li><li><code>ArithmaticException</code></li></ul></li></ul></li></ul><h3><span id="yi-chang-de-chu-li-zhua-pao-mo-xing">异常的处理 抓抛模型</span><a href="#yi-chang-de-chu-li-zhua-pao-mo-xing" class="header-anchor">.</a></h3><blockquote><p>过程一： <strong>“抛”</strong>：程序在正常执行的过程中，一旦出现异常，就会在异常代码处<strong>生成</strong>一个对应<strong>异常</strong>类的<strong>对象</strong>，并将此<strong>对象抛出</strong></p><p>一旦抛出对象以后，其后的代码就不在执行</p><ul><li>关于异常对象的产生： <strong>① 系统自动生成的异常对象 ②手动的生成一个异常对象，并抛出（throw）</strong></li></ul><p>过程二：<strong>“抓”</strong>：可以理解为<strong>异常的处理</strong>方法：①try-catch-finally ②throws</p></blockquote><h3><span id="yi-chang-chu-li-fang-shi">异常处理方式</span><a href="#yi-chang-chu-li-fang-shi" class="header-anchor">.</a></h3><h4><span id="1-try-catch-finally">1.try-catch-finally</span><a href="#1-try-catch-finally" class="header-anchor">.</a></h4><blockquote><p>一般处理<strong>编译时异常</strong>，将一个编译时可能会出现的异常，延迟到运行时出现</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//可能出现异常的代码   异常代码后续的代码，就不在执行了。</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//处理异常</span>    <span class="token comment" spellcheck="true">//1. e.getMessage();</span>    <span class="token comment" spellcheck="true">//2. e.printStackTrace();</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//处理异常</span><span class="token punctuation">}</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型n 变量名n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//处理异常</span><span class="token punctuation">}</span><span class="token keyword">finally</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//可选</span>    <span class="token comment" spellcheck="true">//一定会执行的代码  不管是否有异常 不管try或catch里是否有return</span>    <span class="token comment" spellcheck="true">//资源的释放 ：  JVM 无法回收物理连接占用的资源，必须手动释放</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-throws-yi-chang-lei-xing">2.throws + 异常类型</span><a href="#2-throws-yi-chang-lei-xing" class="header-anchor">.</a></h4><p><code>public void method() throws 异常类型1,异常类型2,...,异常类型n {}</code></p><blockquote><p>同样处理编译时异常</p><p>一旦方法执行时，出现异常，仍会在异常代码处生成一个异常类的对象，此对象满足throws后异常类型时，就会被抛出。异常代码后续的代码，就不在执行了。</p></blockquote><blockquote><p><code>main()</code>方法抛出的<code>throws</code>异常是由JVM处理</p></blockquote><p><code>try-catch-finally</code>是真正处理了异常（捕获，处理）</p><p><code>throws</code>的方式只是将异常抛给了方法的调用者。并没有将异常处理掉。（继续抛出）</p><h3><span id="kai-fa-zhong-ru-he-shi-yong-try-catch-finally-huan-shi-throws">开发中如何使用<code>try-catch-finally</code> 还是 <code>throws</code>？</span><a href="#kai-fa-zhong-ru-he-shi-yong-try-catch-finally-huan-shi-throws" class="header-anchor">.</a></h3><ul><li>如果父类中被重写的方法上没有使用<code>throws</code>抛出异常，则如果子类存在异常，子类重写的方法也不能使用<code>throws</code>，只能使用<code>try-catch-finally</code>处理</li><li>先后调用另外几个方法，这几个方法是递进关系（多层调用），底层方法遇到异常采用<code>throws</code>，最上层使用<code>try-catch-finally</code>处理<ul><li><strong>原因，</strong>如果底层使用<code>try-catch-finally</code>处理，会导致每个底层方法都会执行（延迟到运行时）</li><li>如果使用的是 <code>throws</code>处理，只要遇 会抛出异常，后面的代码都不用执行，即后面的调用方法也不会执行</li></ul></li></ul><h3><span id="yi-shang-liang-chong-yi-chang-chu-li-de-yi-chang-du-shi-xi-tong-zi-dong-sheng-cheng-de-yi-chang">以上两种异常处理的异常都是 <mark>系统自动生成的异常</mark></span><a href="#yi-shang-liang-chong-yi-chang-chu-li-de-yi-chang-du-shi-xi-tong-zi-dong-sheng-cheng-de-yi-chang" class="header-anchor">.</a></h3><h3><span id="shou-dong-pao-chu-yi-chang-throw">手动抛出异常（<code>throw</code>）</span><a href="#shou-dong-pao-chu-yi-chang-throw" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>生成异常的条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"自定义抛出异常信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//运行时异常</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>生成异常的条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"自定义抛出异常信息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包含编译，运行异常， 编译时就生成，一般使用throws抛出让调用方法处理</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/21/60799/image-20200731124707956.png" alt="运行时异常手动抛出"></p><hr><p><img src="/2020/10/21/60799/image-20200731123602212.png" alt="编译时异常手动抛出"></p><h2><span id="yong-hu-zi-ding-yi-yi-chang-lei">用户自定义异常类</span><a href="#yong-hu-zi-ding-yi-yi-chang-lei" class="header-anchor">.</a></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>7034897190745766939L<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//序列版本号</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">MyException</span><span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>使用</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//登记id</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//满足生成异常条件</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"id 不小于 0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抛出自定义异常</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Student s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">regist</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    Exception in thread "main" javaSE.MyException: id 不小于 0    at javaSE.Student.regist(Student.java:9)    at javaSE.Student.main(Student.java:18)*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="try-catch-finally-yi-chang-zhi-xing-de-shun-xu"><code>try-catch-finally</code>异常执行的顺序</span><a href="#try-catch-finally-yi-chang-zhi-xing-de-shun-xu" class="header-anchor">.</a></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionTest</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"try内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"制造异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"try内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"制造异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//            e.printStackTrace();</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"catch内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finally内部"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ExceptionTest<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//只有try-finally，及包含手动抛出异常；try内部 --> finally内部 --> "制造异常"</span>        <span class="token comment" spellcheck="true">//ExceptionTest.method2();//try-catch-finally，处理手动抛出的异常；try内部 --> catch内部 --> finally内部</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="zong-jie">总结</span><a href="#zong-jie" class="header-anchor">.</a></h2><ul><li>捕获异常<ul><li><code>try</code> – 执行可能产生异常的代码</li><li><code>catch</code> – 捕获异常</li><li><code>finally</code> – 无论是否发生异常，代码总被执行</li></ul></li><li>抛出异常<ul><li><code>throw</code><ul><li><strong>异常的生成阶段</strong>：手动抛出异常对象</li></ul></li></ul></li><li>声明异常<ul><li><code>throws</code><ul><li><strong>异常的处理方式</strong>：声明方法可能要抛出的各种异常类</li></ul></li></ul></li></ul><h3><span id="throw-he-throws-qu-bie"><code>throw</code>和<code>throws</code>区别</span><a href="#throw-he-throws-qu-bie" class="header-anchor">.</a></h3><p><code>throw</code>：表示抛出一个异常对象，生成对象的过程，声明在方法体内</p><p><code>throws</code>：属于异常处理的一种方式，声明在方法的声明处。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 类的加载顺序</title>
      <link href="/2020/10/21/61834.html"/>
      <url>/2020/10/21/61834.html</url>
      
        <content type="html"><![CDATA[<h3><span id="lei-de-jia-zai-shun-xu">类的加载顺序</span><a href="#lei-de-jia-zai-shun-xu" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Child</span> <span class="token keyword">extends</span> <span class="token class-name">father</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String child <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String staticChild <span class="token operator">=</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类普通代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================子类main方法入口=================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类的静态成员变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"子类静态方法调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类的普通成员变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"子类方法调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">father</span> <span class="token keyword">extends</span> <span class="token class-name">Root</span><span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类普通代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> String father <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String staticFather <span class="token operator">=</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类的静态成员变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"父类静态方法调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类的普通成员变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"父类方法调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Root</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String root <span class="token operator">=</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String staticRoot <span class="token operator">=</span> <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root类静态代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root类普通代码块"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Root</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root类构造器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">staticMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root类的静态成员变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Root类静态方法调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Root类的普通成员变量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"Root类方法调用"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Root类的静态成员变量Root类静态代码块父类静态代码块父类的静态成员变量子类的静态成员变量子类静态代码块    <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>子类main方法入口<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>子类的普通成员变量Root类普通代码块Root类构造器父类普通代码块子类的普通成员变量父类构造器子类的普通成员变量子类普通代码块子类构造器<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>由父及子，静态先行（静态代码块和静态变量看顺序）</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 内部类</title>
      <link href="/2020/10/21/65260.html"/>
      <url>/2020/10/21/65260.html</url>
      
        <content type="html"><![CDATA[<h2><span id="nei-bu-lei-inner-class">内部类（Inner class）</span><a href="#nei-bu-lei-inner-class" class="header-anchor">.</a></h2><ul><li>成员内部类<ul><li>静态成员内部类</li><li>非静态成员内部类</li></ul></li><li>局部内部类<ul><li>方法内</li><li>代码块内</li><li>构造器内</li></ul></li></ul><h3><span id="cheng-yuan-nei-bu-lei">成员内部类</span><a href="#cheng-yuan-nei-bu-lei" class="header-anchor">.</a></h3><p>一方面，作为外部类的成员</p><ul><li><strong>调用外部类的结构 <code>外部类.this.结构名</code> 或 <code>结构名</code>（在不重名的情况下）</strong></li><li>可以被<code>static</code>修饰</li><li>可以被<code>public</code>、<code>protected</code>、<code>缺省</code>、<code>private</code>修饰</li></ul><p>另一方面，作为一个类</p><ul><li>类内部可以定义属性、方法、构造器、代码块、内部类</li><li>可以被<code>final</code>修饰（不能被继承）</li><li>可以被<code>abstract</code>，则是一个抽象内部类，不能实例化</li></ul><blockquote><p><strong>成员内部类几乎可以被所有修饰符修饰</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OuterClass</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//成员内部类</span>    <span class="token comment" spellcheck="true">//1.静态成员内部类</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">StaticInnerClass</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//2.非静态成员内部类</span>    <span class="token keyword">class</span> <span class="token class-name">InnerClass</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">OuterClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构造器内 内部类</span>        <span class="token keyword">class</span> <span class="token class-name">ConstructorInnerClass</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//方法内 内部类</span>        <span class="token keyword">class</span> <span class="token class-name">MethodInnerClass</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="ru-he-shi-li-hua-cheng-yuan-nei-bu-lei-dui-xiang">如何实例化成员内部类对象</span><a href="#ru-he-shi-li-hua-cheng-yuan-nei-bu-lei-dui-xiang" class="header-anchor">.</a></h4><ul><li><p>创建静态内部类对象</p><pre class="line-numbers language-java"><code class="language-java">outerClass<span class="token punctuation">.</span>innerClass inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">outerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">innerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><ul><li><p>创建非静态内部内对象</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1</span>outerClass outer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">outerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>outerClass<span class="token punctuation">.</span>innerClass inner <span class="token operator">=</span> outer<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">innerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2</span>outerClass<span class="token punctuation">.</span>innerClass inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">outerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">innerClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3><span id="ju-bu-nei-bu-lei">局部内部类</span><a href="#ju-bu-nei-bu-lei" class="header-anchor">.</a></h3><p>以方法内举例</p><p> 例子：获取接口实现类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 获取 Comparable接口的实现类</span><span class="token keyword">public</span> Comparable <span class="token function">getComparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建一个实现了Comparable接口的类： 局部内部类</span>    <span class="token comment" spellcheck="true">//方式一：</span>    <span class="token comment" spellcheck="true">/*    class MyComparable implements Comparable{        @Override        public int compareTo(Object o){            return 0;        }    }    return new MyComparable();    */</span>    <span class="token comment" spellcheck="true">//方式二： 匿名内部类</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Comparable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="ni-ming-nei-bu-lei">匿名内部类</span><a href="#ni-ming-nei-bu-lei" class="header-anchor">.</a></h3><blockquote><p>没有名字的内部类</p></blockquote><ul><li><p>匿名子类的匿名对象（继承了父类（也包含抽象类））</p><p><code>new 父类名(){ //可以写类的结构 }</code> –&gt; 这是一个对象</p><blockquote><p>如果是抽象类的话，必须重写所有抽象方法，因为只有重写了抽象方法，才能实例化</p></blockquote></li><li><p>匿名实现类的匿名对象（实现了接口）</p><p><code>new 接口名(){ //实现接口的方法 }</code> –&gt; 这是一个对象</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 接口</title>
      <link href="/2020/10/21/38170.html"/>
      <url>/2020/10/21/38170.html</url>
      
        <content type="html"><![CDATA[<h2><span id="jie-kou">接口</span><a href="#jie-kou" class="header-anchor">.</a></h2><p><code>interface</code></p><ul><li><p>java中类不支持多继承，使用接口实现<strong>多重继承</strong>的效果</p></li><li><p>开发中，类和接口是并列的两个结构</p><ul><li><code>interface</code></li></ul></li><li><p><code>JDK7</code>及以前：只能定义全局常量和抽象方法</p><ul><li>全局常量：<code>[public] [static] [final] type 常量名 = ...;</code></li><li>抽象方法：<code>[public] [abstract] returnType 方法名();</code></li></ul></li><li><p><code>JDK8</code>：除了定义全局常量和抽象方法外，还可以定义<strong>静态方法、默认方法</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//静态方法 这个静态方法只能通过接口调用</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接口中的静态方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//默认方法 权限修饰符 只能是public 或 缺省</span>    <span class="token comment" spellcheck="true">//1、可以重写默认方法（就是要省略default关键字）</span>    <span class="token comment" spellcheck="true">//2、如果实现类的父类，也有这个同名同参的方法，在实现类没有重写这个方法的情况下默认，使用父类的方法，不用接口中的默认方法 --> 类优先</span>    <span class="token comment" spellcheck="true">//3、如果有多个接口中默认方法同名同参 --> 爆红 ，那么必须重写该默认方法</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"接口中的默认方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//匿名实现类  </span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>             a<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接口中的默认方法</span>        <span class="token comment" spellcheck="true">//a.method1();//爆红 接口 A 的静态方法只能以 A.method1 方式访问</span>        A<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接口中的静态方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在实现类的非静态方法中调用这两种方法</strong></p><blockquote><p>之前 通过实现类的对象调用这个默认方法，现在使用 <code>接口.super.默认方法()</code>调用</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//用于调用接口中的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        A<span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//静态方法</span>        A<span class="token punctuation">.</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//默认方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>接口中<strong>不能定义构造器,不可实例化</strong></p></li><li><p>java开发中，接口都是通过类实现</p><ul><li><code>class A implements I{}</code></li></ul></li><li><p>若实现类，<strong>重写了接口所有的抽象方法</strong>，<strong>实现类才可以实例化</strong></p></li><li><p>若实现类，<strong>没有完全重写接口所有的抽象方法，则这个实现类就是抽象类</strong></p></li><li><p><mark>类可以实现多个接口</mark> —- 弥补了单继承的局限性</p><ul><li><code>class A extends B implements I1,I2...{}</code></li></ul></li><li><p><mark>接口存在继承，但是只能继承接口，<strong>且是多继承</strong></mark></p><ul><li><code>interface I extends I1,I2,...{}</code></li></ul></li><li><p>接口的具体使用，体现多态性</p><ul><li><code>接口 i =  new 实现类();</code></li></ul></li><li><p>接口，实际上可以看做是一种规范</p></li><li><p>也存在<strong>匿名实现类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">InterfaceTest</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//接口的匿名实现类的匿名对象</span>        <span class="token keyword">new</span> <span class="token class-name">InterfaceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// TODO 自动生成的方法存根</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2><span id="tuo-zhan">拓展</span><a href="#tuo-zhan" class="header-anchor">.</a></h2><h3><span id="fu-lei-shu-xing-yu-jie-kou-chang-liang-chong-ming">（父类）属性与（接口）常量重名</span><a href="#fu-lei-shu-xing-yu-jie-kou-chang-liang-chong-ming" class="header-anchor">.</a></h3><p>怎么调用</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//1</span><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 同时 继承B和实现A接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// x = 3替换了 B.x 和 A.x </span>    <span class="token comment" spellcheck="true">//但是如果注释掉 上面的语句，会导致 字段 x 有歧义(类B 和 接口A同级的)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// C : 3</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// B : 2</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// A : 1</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//2</span><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 只实现 接口A 看 x 的值</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//int x = 3;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printX</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A : 3</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>A<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// A : 3</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">new</span> <span class="token class-name">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">printX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="bu-tong-jie-kou-de-chou-xiang-fang-fa-tong-ming-tong-can">不同接口的抽象方法同名同参</span><a href="#bu-tong-jie-kou-de-chou-xiang-fang-fa-tong-ming-tong-can" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">interface</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">,</span>B<span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一次重写 两个接口的方法</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="fu-lei-he-jie-kou-de-fang-fa-tong-ming-tong-can">父类和接口的方法同名同参</span><a href="#fu-lei-he-jie-kou-de-fang-fa-tong-ming-tong-can" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">A</span><span class="token punctuation">{</span>  <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//不会报红 --> 上面的类优先原则 当接口和父类中方法同名同参 在子类没有重写父类的方法的情况下，优先使用父类的方法 这个方法 又相当于重写了接口中的抽象方法 所以没有爆红</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">A</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="jie-kou-jiu-jing-shi-bu-shi-lei"></span><a href="#jie-kou-jiu-jing-shi-bu-shi-lei" class="header-anchor">.</a></h2><ul><li><strong>接口不是一种类，而是对类的一组需求描述</strong></li></ul><ul><li>接口与类是并列关系，或则可以<strong>理解</strong>为一种特殊的类，从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义(JDK7.0及之前)，而没有变量和方法的实现。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 代理模式</title>
      <link href="/2020/10/21/27809.html"/>
      <url>/2020/10/21/27809.html</url>
      
        <content type="html"><![CDATA[<h2><span id="dai-li-mo-shi">代理模式</span><a href="#dai-li-mo-shi" class="header-anchor">.</a></h2><ul><li>为其他对象提供一种代理以控制对这个对象的访问</li><li>代理类和被代理类都是某个接口的的实现类</li></ul><p><strong>静态代理</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态代理</span><span class="token keyword">interface</span> <span class="token class-name">NetWork</span><span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Server</span> <span class="token keyword">implements</span> <span class="token class-name">NetWork</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用Server访问网络"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Server s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Server</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">ProxyServer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//看似使用 Proxy对象连接网络，实际是使用Server的browse连接网络</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">ProxyServer</span> <span class="token keyword">implements</span> <span class="token class-name">NetWork</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> NetWork n<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyServer</span><span class="token punctuation">(</span>NetWork n<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>n <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连网之前的检查工作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        n<span class="token punctuation">.</span><span class="token function">browse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//真实的连网操作还是 Server在做</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 抽象类和抽象方法</title>
      <link href="/2020/10/21/48860.html"/>
      <url>/2020/10/21/48860.html</url>
      
        <content type="html"><![CDATA[<p><code>abstract</code></p><blockquote><p>抽象的</p></blockquote><ul><li>可以修饰<code>类</code>、<code>方法</code></li><li>不能用于修饰 <code>私有方法</code> （因为我们需要重写方法的）</li><li>不能用于修饰<code>静态方法</code>（子类与父类同名同参的static方法<strong>不叫重写</strong>）</li><li>不能用于修饰<code>final方法</code>（不能被重写）</li></ul><h2><span id="chou-xiang-lei">抽象类</span><a href="#chou-xiang-lei" class="header-anchor">.</a></h2><p><code>权限修饰符 abstract class A{}</code></p><blockquote><p>权限修饰符:默认 、<code>public</code></p></blockquote><ul><li>不能被实例化（不能造对象）</li><li><mark>有构造器</mark>，便于<strong>子类实例化时调用</strong></li></ul><h2><span id="chou-xiang-fang-fa">抽象方法</span><a href="#chou-xiang-fang-fa" class="header-anchor">.</a></h2><p><code>权限修饰符 abstract 返回值 方法名(形参列表);</code></p><blockquote><p>权限修饰符除了 <code>private</code></p></blockquote><ul><li>只有方法声明，没有方法体</li><li>包含抽象方法的类一定是抽象类</li><li>若子类，<strong>重写了抽象类所有的抽象方法</strong>，<strong>才可以实例化</strong></li><li>若子类，没有完全重写抽象类所有的抽象方法，则这个子类仍然是抽象类</li></ul><h2><span id="tuo-zhan">拓展</span><a href="#tuo-zhan" class="header-anchor">.</a></h2><h3><span id="chou-xiang-lei-de-ni-ming-zi-lei">抽象类的匿名子类</span><a href="#chou-xiang-lei-de-ni-ming-zi-lei" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//抽象类</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"休息一会儿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/*         * 匿名对象：没有对象引用指向的对象         * 抽象类的匿名子类：用抽象类名代替子类名,无需构建子类(像men)         *          */</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Men</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非匿名类的匿名对象 (Person类(抽象类的非匿名子类的匿名对象))</span>        Men m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Men</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//非匿名类的非匿名对象 (Person类(抽象类的非匿名子类的非匿名对象))</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//抽象类的匿名子类的非匿名对象</span>        <span class="token comment" spellcheck="true">// 我们不能说 new Person是一个父类的对象(因为父类(抽象类)无法被实例化)</span>        <span class="token comment" spellcheck="true">// 只能认为Person p = new Person 是Person的匿名子类的非匿名对象</span>        Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//抽象类的匿名子类的匿名对象</span>        <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Men</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">work</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拧一百个螺丝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Men ["</span> <span class="token operator">+</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 模板方法设计模式</title>
      <link href="/2020/10/21/3411.html"/>
      <url>/2020/10/21/3411.html</url>
      
        <content type="html"><![CDATA[<h2><span id="mo-ban-fang-fa-she-ji-mo-shi-chou-xiang-lei-de-ying-yong">模板方法设计模式（抽象类的应用）</span><a href="#mo-ban-fang-fa-she-ji-mo-shi-chou-xiang-lei-de-ying-yong" class="header-anchor">.</a></h2><h3><span id="jie-jue-de-wen-ti">解决的问题</span><a href="#jie-jue-de-wen-ti" class="header-anchor">.</a></h3><ul><li>当功能(方法)内部一部分实现是确定的，一部分实现是不确定的（易变的）。这时可以把不确定的部分暴露出来，让子类去实现</li><li>常用<ul><li>数据库访问的封装</li><li>Junit单元测试</li><li>JavaWeb的Servlet中关于doGet、doPost方法的调用</li><li>Hibernate中的模板程序</li><li>Spring中的JDBCTemlate、HibernateTemplate等</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Template</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spendTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 不确定的部分、易变的部分</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费时间:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"ms"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token keyword">extends</span> <span class="token class-name">Template</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">code</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">MyTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">spendTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- JUnit使用要求</title>
      <link href="/2020/10/21/18906.html"/>
      <url>/2020/10/21/18906.html</url>
      
        <content type="html"><![CDATA[<h2><span id="junit-shi-yong-yao-qiu">JUnit使用要求</span><a href="#junit-shi-yong-yao-qiu" class="header-anchor">.</a></h2><h3><span id="1-dui-lei-de-yao-qiu">1.对类的要求</span><a href="#1-dui-lei-de-yao-qiu" class="header-anchor">.</a></h3><ul><li>公共的 <code>public修饰的</code></li><li>有个无参构造器</li></ul><h3><span id="2-dui-ce-shi-fang-fa-bian-xie-de-yao-qiu">2.对测试方法编写的要求</span><a href="#2-dui-ce-shi-fang-fa-bian-xie-de-yao-qiu" class="header-anchor">.</a></h3><ul><li><p>需要在方法前加注解<code>@Test</code></p></li><li><p>公共的<code>public修饰的</code></p></li><li><p>没有返回值类型 <code>void</code></p></li><li><p>无参</p></li><li><p>非静态</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 属性赋值的先后顺序</title>
      <link href="/2020/10/21/46633.html"/>
      <url>/2020/10/21/46633.html</url>
      
        <content type="html"><![CDATA[<h2><span id="shu-xing-fu-zhi-de-xian-hou-shun-xu">属性赋值的先后顺序</span><a href="#shu-xing-fu-zhi-de-xian-hou-shun-xu" class="header-anchor">.</a></h2><ul><li>默认初始化</li><li>显示初始化 / 在代码块中初始化</li><li>构造器初始化</li><li>有了对象以后，通过 对象.属性 或 对象.set方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不会报错  a = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// a = 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">{</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a = 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>static也同上</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>javase -- final关键字</title>
      <link href="/2020/10/21/57189.html"/>
      <url>/2020/10/21/57189.html</url>
      
        <content type="html"><![CDATA[<h2><span id="final">final</span><a href="#final" class="header-anchor">.</a></h2><blockquote><p>最终的</p></blockquote><ul><li><p>可以修饰的结构：<code>类</code>、<code>方法</code>、<code>变量</code></p></li><li><p>final<strong>修饰一个类</strong></p><ul><li><strong><mark>不能被其他类继承</mark></strong></li><li>String、System、StringBuffer、包装类</li></ul></li><li><p>final<strong>修饰一个方法</strong></p><ul><li><strong><mark>不能被子类重写</mark></strong></li><li>Object对象的getClass方法</li></ul></li><li><p>final<strong>修饰一个<code>变量</code></strong> – <strong>常量</strong></p><ul><li><p><strong><mark>不能重新赋值</mark></strong></p></li><li><p><strong>修饰成员变量</strong></p><ul><li><strong>必须要 显式初始化 或 代码块中初始化 或 构造器中初始化</strong></li></ul></li><li><p><strong>修饰局部变量</strong></p><ul><li><p>final修饰<strong>形参</strong>，表示此形参是一个常量，当我们调用此方法时，给常量赋一个实参，一旦获得实参以后，就只能在方法体内使用形参，但不能进行重新复制</p></li><li><p>修饰普通局部变量</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以</span><span class="token comment" spellcheck="true">//或</span><span class="token keyword">final</span> <span class="token keyword">int</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//可以</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//不行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><blockquote><p>使用<code>static final</code>用于修饰<code>属性</code>：<code>全局常量</code></p><p><strong>static</strong> 只能用于修饰 <strong>属性 、方法、 代码块、内部类</strong></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java简单算法</title>
      <link href="/2020/10/21/45249.html"/>
      <url>/2020/10/21/45249.html</url>
      
        <content type="html"><![CDATA[<h3><span id="java-jian-dan-suan-fa">java简单算法</span><a href="#java-jian-dan-suan-fa" class="header-anchor">.</a></h3><h4><span id="1-jiao-huan-liang-shu">1.交换两数</span><a href="#1-jiao-huan-liang-shu" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原 a = "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"; b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方法一：定义临时变量</span><span class="token comment" spellcheck="true">//好处：①对于任何类型都可以</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法一 a = "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"; b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方法二： 先加，后减</span><span class="token comment" spellcheck="true">//好处：无需定义临时变量</span><span class="token comment" spellcheck="true">//弊端：①相加可能会超出数的存储范围 ②只适用于 数值类型</span>a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法二 a = "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"; b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方法三： 异或</span><span class="token comment" spellcheck="true">//好处：无需定义临时变量</span><span class="token comment" spellcheck="true">//弊端：①只适用于 数值类型</span>a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法三 a = "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"; b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-huo-qu-san-shu-zhong-de-zui-da-zhi">2.获取三数中的最大值</span><a href="#2-huo-qu-san-shu-zhong-de-zui-da-zhi" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//三元运算符</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>tmp <span class="token operator">></span> c<span class="token punctuation">)</span> <span class="token operator">?</span> tmp <span class="token operator">:</span> c<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最值 "</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//条件判断语句</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    max <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    max <span class="token operator">=</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> c<span class="token punctuation">)</span><span class="token punctuation">{</span>    max <span class="token operator">=</span> c<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="3-shu-ru-nian-fen-pan-duan-shi-fou-shi-run-nian">3.输入年份判断是否是闰年</span><a href="#3-shu-ru-nian-fen-pan-duan-shi-fou-shi-run-nian" class="header-anchor">.</a></h4><ul><li>能被4整除，但不能被100整除 或 能被400整除</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 条件判断</span><span class="token keyword">if</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这一年是闰年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这一年不是闰年"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-zhe-ge-yue-di-zui-hou-yi-tian-shi-jin-nian-de-di-ji-tian">4.这个月底最后一天，是今年的第几天</span><a href="#4-zhe-ge-yue-di-zui-hou-yi-tian-shi-jin-nian-de-di-ji-tian" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//使用switch</span><span class="token keyword">int</span> year <span class="token operator">=</span> <span class="token number">2000</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//闰年</span><span class="token keyword">int</span> month <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//三月份</span><span class="token keyword">int</span> totalDay <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>    totalDay<span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>    totalDay<span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>    totalDay<span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>    totalDay<span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>    totalDay<span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>    totalDay<span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>    totalDay<span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>    totalDay<span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>    totalDay<span class="token operator">+=</span><span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    totalDay<span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>year <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> year <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">||</span> year <span class="token operator">%</span> <span class="token number">400</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        totalDay<span class="token operator">+=</span><span class="token number">29</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        totalDay<span class="token operator">+=</span><span class="token number">28</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    totalDay<span class="token operator">+=</span><span class="token number">31</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>month<span class="token operator">+</span><span class="token string">"月最后一天是"</span><span class="token operator">+</span>year<span class="token operator">+</span><span class="token string">"年的第"</span><span class="token operator">+</span> totalDay <span class="token operator">+</span> <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="5-shu-ru-liang-ge-zheng-zheng-shu-qiu-qi-zui-da-gong-yue-shu-he-zui-xiao-gong-bei-shu">5.输入两个正整数，求其最大公约数和最小公倍数</span><a href="#5-shu-ru-liang-ge-zheng-zheng-shu-qiu-qi-zui-da-gong-yue-shu-he-zui-xiao-gong-bei-shu" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方法一 ： 暴力破解法（枚举）</span><span class="token comment" spellcheck="true">//最大公约数</span><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token operator">?</span> n <span class="token operator">:</span> m<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> min<span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>m <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大公约数是"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//最小公倍数</span><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> max<span class="token punctuation">;</span>  <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> m <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最小公倍数是"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//辗转相除法</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//辗转相减法</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4><span id="6-shui-xian-hua-shu-shu-chu-suo-you">6.水仙花数（输出所有）</span><a href="#6-shui-xian-hua-shu-shu-chu-suo-you" class="header-anchor">.</a></h4><ul><li>一个三位数，各位上的立方之和等于其本身</li><li>如153 = 1<sup>3</sup> + 5<sup>3</sup> + 3<sup>3</sup></li><li>153 370 371 407</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//暴力破解法</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> g <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//个位</span>    <span class="token keyword">int</span> s <span class="token operator">=</span> i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//十位 s = i / 10 % 10</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//百位</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> g<span class="token operator">*</span>g<span class="token operator">*</span>g <span class="token operator">+</span> s<span class="token operator">*</span>s<span class="token operator">*</span>s <span class="token operator">+</span> b<span class="token operator">*</span>b<span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="7-da-yin-san-jiao">7.打印三角 *</span><a href="#7-da-yin-san-jiao" class="header-anchor">.</a></h4><pre><code>****************</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="8-da-yin-ling-xing">8.打印菱形 *</span><a href="#8-da-yin-ling-xing" class="header-anchor">.</a></h4><pre><code>    *   * *  * * * * * * *  * * *    * *    *</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//控制空格</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> j <span class="token operator">></span> i<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// * 号</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">8</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="9-jiu-jiu-cheng-fa-biao">9.九九乘法表</span><a href="#9-jiu-jiu-cheng-fa-biao" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span>    <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">4</span>    <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span>    <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">6</span>    <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">9</span>    <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">4</span>    <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">8</span>    <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">12</span>    <span class="token number">4</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">16</span>    <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">5</span>    <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">10</span>    <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">15</span>    <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">20</span>    <span class="token number">5</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">25</span>    <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">6</span>    <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">12</span>    <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">18</span>    <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">24</span>    <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">30</span>    <span class="token number">6</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">36</span>    <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">7</span>    <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">14</span>    <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">21</span>    <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">28</span>    <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">35</span>    <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">42</span>    <span class="token number">7</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">49</span>    <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">8</span>    <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">16</span>    <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">24</span>    <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">32</span>    <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">40</span>    <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">48</span>    <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">56</span>    <span class="token number">8</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">64</span>    <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">9</span>    <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">18</span>    <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">27</span>    <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">36</span>    <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">45</span>    <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">54</span>    <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">7</span> <span class="token operator">=</span> <span class="token number">63</span>    <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">72</span>    <span class="token number">9</span> <span class="token operator">*</span> <span class="token number">9</span> <span class="token operator">=</span> <span class="token number">81</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" * "</span> <span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">" = "</span><span class="token operator">+</span> i<span class="token operator">*</span>j <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="10-100-yi-nei-de-suo-you-zhi-shu-su-shu">10.100以内的所有质数（素数）</span><a href="#10-100-yi-nei-de-suo-you-zhi-shu-su-shu" class="header-anchor">.</a></h4><ul><li>只能被本身和1整除的自然数(除了1)</li></ul><pre><code>2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53 59 61 67 71 73 79 83 89 97</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> isPrime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            isPrime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//优化 使用 sqrt(i)</span><span class="token comment" spellcheck="true">/*原因    首先，约数是成对出现的。比如24,你找到个约数3,那么一定有个约数8,因为24/3=8。然后，这对约数必须一个在根号n之前，一个在根号n之后。因为都在根号n之前的话，乘积一定小于n（根号nX根号n=n）。同样，都在根号n之后的话，乘积一定大于n。所以，如果你在根号n之前都找不到约数的话，那么根号n之后就不会有了。*/</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">boolean</span> isPrime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            isPrime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 带标签的</span>label<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">continue</span> label<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="11-1000-yi-nei-de-suo-you-wan-shu">11.1000以内的所有完数</span><a href="#11-1000-yi-nei-de-suo-you-wan-shu" class="header-anchor">.</a></h4><ul><li>一个数等于它的因子之和</li><li>如 6 = 1 + 2 + 3</li><li>因子：除去这个数本身的其他约数</li></ul><pre><code>6 28 496 </code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>               sum <span class="token operator">+=</span> j<span class="token punctuation">;</span>             <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sum <span class="token operator">==</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="12-er-wei-shu-zu-da-yin-shi-xing-yang-hui-san-jiao">12.二维数组打印十行杨辉三角</span><a href="#12-er-wei-shu-zu-da-yin-shi-xing-yang-hui-san-jiao" class="header-anchor">.</a></h4><ul><li>上面两数之和等于下面的数</li><li>第一行1个元素，第n行n个元素</li><li>每一行第一个和最后一个都是1</li><li>从第三行开始，对于非第一个元素和最后一个元素的元素有：arr[i][j] = arr[i - 1][j - 1] + arr[i - 1][j];</li></ul><pre><code>    1              |\       1   1 1       |-----| \      1 1  1 2 1      |-----| /      1 2 1 1 3 3 1           |/       1 3 3 11 4 6 4 1                   1 4 6 4 1..........                  .......... arr[i][j] = arr[i - 1][j - 1] + arr[i - 1][j];</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第一个</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//最后一个</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//第三行开始,第2个元素到倒数第2个元素</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="13-er-wei-shu-zu-da-yin-hui-xing-shu"><mark>13.二维数组打印回形数</mark></span><a href="#13-er-wei-shu-zu-da-yin-hui-xing-shu" class="header-anchor">.</a></h4><ul><li>输入n打印n阶回形数矩阵</li></ul><pre><code>1   1 2   1 2 3    1  2  3  4   ....    4 3   8 9 4   12 13 14  5   ....          7 6 5   11 16 15  6   ....                  10  9  8  7   ....                                ....</code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>  i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">RectangleTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入一个数字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> s <span class="token operator">=</span> len <span class="token operator">*</span> len<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*         * k = 1:向右 k = 2:向下 k = 3:向左 k = 4:向上         */</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> m <span class="token operator">&lt;=</span> s<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                    m<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>                    i<span class="token operator">--</span><span class="token punctuation">;</span>                    j<span class="token operator">--</span><span class="token punctuation">;</span>                    m<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    k <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>                    i<span class="token operator">--</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                    m<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    arr<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> m<span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    i<span class="token operator">++</span><span class="token punctuation">;</span>                    j<span class="token operator">++</span><span class="token punctuation">;</span>                    m<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 遍历</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> m <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> m<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> n <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="14-shu-zu-zhong-de-zui-da-zhi">14、数组中的最大值</span><a href="#14-shu-zu-zhong-de-zui-da-zhi" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">98</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        max <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="15-shu-zu-de-fu-zhi-fan-zhuan">15.数组的复制，反转</span><a href="#15-shu-zu-de-fu-zhi-fan-zhuan" class="header-anchor">.</a></h4><ul><li>arr1 = arr2 属于赋值，不是复制</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>反转</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span>Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span>Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="16-shu-zu-de-cha-zhao">16.数组的查找</span><a href="#16-shu-zu-de-cha-zhao" class="header-anchor">.</a></h4><ul><li><h5><span id="xian-xing-cha-zhao">线性查找</span><a href="#xian-xing-cha-zhao" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">43</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">192</span><span class="token punctuation">,</span><span class="token number">43</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">67</span><span class="token punctuation">,</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">==</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//String使用equals, 浮点数使用bigDecimal或精确值，</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"存在"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><h5><span id="er-fen-cha-zhao">二分查找</span><a href="#er-fen-cha-zhao" class="header-anchor">.</a></h5><ul><li>前提：有序</li><li>只适用于 数值型</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">302</span><span class="token punctuation">,</span><span class="token number">432</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span><span class="token keyword">int</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> max <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    mid <span class="token operator">=</span> <span class="token punctuation">(</span>max <span class="token operator">+</span> min<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>max <span class="token operator">>=</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">></span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            min <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>target <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            max <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"存在"</span><span class="token operator">+</span>mid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4><span id="17-shu-zu-de-pai-xu-suan-fa">17.数组的排序算法</span><a href="#17-shu-zu-de-pai-xu-suan-fa" class="header-anchor">.</a></h4><ul><li><p>时间复杂度：分析关键字的比较次数和记录的移动次数</p></li><li><p>空间复杂度：分析排序算法中需要多少辅助内存</p></li><li><p>稳定性：若两个记录A、B，A = B，如果排序后的A、B先后顺序不变 —- 排序是稳定的</p></li><li><p><strong>十大内部排序算法</strong></p><ul><li><p>选择排序</p><ul><li>直接选择排序</li><li><strong>堆排序</strong></li></ul></li><li><p>交换排序</p><ul><li><p><strong>冒泡排序</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>快速排序</strong></p></li></ul></li><li><p>插入排序</p><ul><li>直接插入排序</li><li>折半插入排序</li><li>Shell排序</li></ul></li><li><p><strong>归并排序</strong></p></li><li><p>桶式排序</p></li><li><p>基数排序</p></li></ul></li></ul><h4><span id="18-tuo-zhan-bi-shi-ti-1"><mark>18.拓展笔试题-1</mark></span><a href="#18-tuo-zhan-bi-shi-ti-1" class="header-anchor">.</a></h4><ul><li>创建一个长度为6的int型数组，要求数组元素的值都在1-30之间，且是随机赋值，同时，<strong>要求元素的值不同</strong></li></ul><pre class="line-numbers language-JAVA"><code class="language-JAVA">int[] arr = new int[6];int min = 1;int max = 30;// [min,max] = Math.random()*(max - min + 1) + min;// [min,max) = Math.random()*(max - min) + min;for(int i = 0; i < arr.length; i++){    arr[i] = (int)(Math.random()*(max - min + 1) + min);//[1,30]    for(int j = 0; j < i; ){        if(arr[i] == arr[j]){//如果相等 就 跳到内层 开头j = 0            arr[i] = (int)(Math.random()*(max - min + 1) + min;);//[1,30]            j = 0;        }        j++;//必须拿出来，不然 进入 if 后 j=0 每次都会加 1 --> j = 1    }    System.out.println(arr[i]);}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//方式二：</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果相等 就跳到外层的上一次 --i</span>            i<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="19-tuo-zhan-bi-shi-ti-2"><mark>19.拓展笔试题-2</mark></span><a href="#19-tuo-zhan-bi-shi-ti-2" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//需要在method方法被调用之后，仅打印出a=100，b=200，请写出method方法的代码</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//代码编写出</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>看题目好像是在考参数传递，实际上不可能是</li></ul><p><strong>解答</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>    a <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>    b <span class="token operator">*=</span> <span class="token number">10</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"\n"</span> <span class="token operator">+</span> <span class="token string">"b="</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    PrintStream ps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PrintStream</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token annotation punctuation">@override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">println</span><span class="token punctuation">(</span>String x<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"a=10"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                x<span class="token operator">=</span><span class="token string">"a=100"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"b=20"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                x<span class="token operator">=</span><span class="token string">"b=200"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="20-tuo-zhan-bi-shi-ti-3"><mark>20.拓展笔试题-3</mark></span><a href="#20-tuo-zhan-bi-shi-ti-3" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//地址值 println(Object x)</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">prinln</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// char 由于println重载方法为prinln(char4 g  x[])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>实体类定义规则</title>
      <link href="/2020/10/21/15831.html"/>
      <url>/2020/10/21/15831.html</url>
      
        <content type="html"><![CDATA[<h1><span id="shi-ti-lei-ding-yi-gui-ze">实体类定义规则</span><a href="#shi-ti-lei-ding-yi-gui-ze" class="header-anchor">.</a></h1><p><code>PO</code>，<code>Entity</code>：<strong>persistent object 持久化对象</strong></p><ul><li>对应数据库的实体，其一个实例化对象对应数据表中的一条记录（一行）</li></ul><p><code>VO</code>：<strong>view object 表现层对象</strong></p><ul><li>对应<strong>页面显示的数据对象</strong></li><li>可以不对应数据库，也可以对应数据库中的字段</li></ul><p><code>DTO (TO)</code>：<strong>Data Transfer Object 数据传输对象</strong></p><ul><li>有时，可以理解为<code>VO</code></li><li>比如一张表有100个字段，那么对应的PO就有100个字段（一般来说，<strong>DTO的数据来自多张表</strong>），但是视图层只显示10个字段的DTO来传输数据到客户端，这样也不会暴露服务端表结构。到达客户端后，如果<strong>用这个对象来对应界面显示</strong>，此时它的身份就是<strong>VO</strong></li></ul><p><code>POJO</code>：<strong>plain ordinary java object 无规则简单java对象</strong></p><ul><li><p>可理解为以上统称</p></li><li><p>一个中间对象，可以转化为PO、DTO、VO</p></li><li><p><code>POJO 持久化之后  ==&gt;  PO</code></p></li><li><p><code>POJO  传输过程中  ==&gt;  DTO</code></p></li><li><p><code>POJO 用在表现层中  ==&gt;  VO</code></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-22-定时任务</title>
      <link href="/2020/10/04/53981.html"/>
      <url>/2020/10/04/53981.html</url>
      
        <content type="html"><![CDATA[<h2><span id="ding-shi-ren-wu">定时任务</span><a href="#ding-shi-ren-wu" class="header-anchor">.</a></h2><p><strong>相关接口</strong></p><ul><li><code>TaskScheduler</code>调度</li><li><code>TaskExecutor</code>执行</li></ul><p><strong>相关注解</strong></p><ul><li><p><code>@EnableScheduling</code> 添加在入口类，开启定时功能</p></li><li><p><code>@Scheduled</code> 确定什么时候执行</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-21-邮件任务</title>
      <link href="/2020/10/04/22016.html"/>
      <url>/2020/10/04/22016.html</url>
      
        <content type="html"><![CDATA[<h2><span id="you-jian-fu-wu">邮件服务</span><a href="#you-jian-fu-wu" class="header-anchor">.</a></h2><h3><span id="shi-yong">使用</span><a href="#shi-yong" class="header-anchor">.</a></h3><h4><span id="1-yin-ru-yi-lai">1、引入依赖</span><a href="#1-yin-ru-yi-lai" class="header-anchor">.</a></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-pei-zhi-you-jian-fu-wu">2、配置邮件服务</span><a href="#2-pei-zhi-you-jian-fu-wu" class="header-anchor">.</a></h4><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 邮件配置</span><span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">1748616711@qq.com</span><span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">emgpznatyunmccbd</span><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">smtp.qq.com</span><span class="token comment" spellcheck="true"># 开启加密验证（qq）</span><span class="token attr-name">spring.mail.properties.mail.smtp.ssl.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="3-bian-xie-sendmail">3、编写<code>sendMail()</code></span><a href="#3-bian-xie-sendmail" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Mail</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JavaMailSenderImpl mailSender<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendSimple</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 简单邮件发送</span>        SimpleMailMessage simple <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simple<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"liuyou 真帅"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simple<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"......."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simple<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"1748616711@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simple<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"1423928650@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>simple<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 复杂邮件发送</span>        MimeMessage mime <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组装</span><span class="token comment" spellcheck="true">//        MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mime);</span>        MimeMessageHelper mimeMessageHelper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mime<span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 多文本上传（附件）</span><span class="token comment" spellcheck="true">//        MimeMessageHelper mimeMessageHelper = new MimeMessageHelper(mime,true,"utf-8");// 编码</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"一个标题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"&lt;mark>html文本&lt;/mark>"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 附件</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"xiao.jpg"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\14239\\Desktop\\新Hadoop\\pandownload\\SSM\\springboot-08-task\\src\\main\\resources\\xiao.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"1748616711@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mimeMessageHelper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"1423928650@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mime<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-20-异步任务</title>
      <link href="/2020/10/04/48544.html"/>
      <url>/2020/10/04/48544.html</url>
      
        <content type="html"><![CDATA[<h2><span id="yi-bu-ren-wu">异步任务</span><a href="#yi-bu-ren-wu" class="header-anchor">.</a></h2><h3><span id="yi-bu-kai-qi">异步开启</span><a href="#yi-bu-kai-qi" class="header-anchor">.</a></h3><p><strong>第一步</strong></p><blockquote><p>在需要异步处理的方法上添加 <code>@Async</code>注解</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncService</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Async</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据正在处理..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>第二步</strong></p><blockquote><p>在 程序入口类上添加 <code>@EnableAsync</code>注解</p></blockquote><pre><code>@EnableAsync@SpringBootApplicationpublic class TaskApplication {    public static void main(String[] args) {        SpringApplication.run(TaskApplication.class, args);    }}</code></pre><blockquote><p>到这里 我们已经 <strong>完成</strong>了 <strong>开启异步</strong></p></blockquote><h3><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">.</a></h3><p><strong>编写<code>AsyncController</code></strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AsyncController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    AsyncService asyncService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">async</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        asyncService<span class="token punctuation">.</span><span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"OK"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>localhost:8080/hello测试</strong></p><blockquote><p>发现 开启异步 很快就在页面上显示了 OK</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot上使用devtools热部署</title>
      <link href="/2020/10/04/32611.html"/>
      <url>/2020/10/04/32611.html</url>
      
        <content type="html"><![CDATA[<h1><span id="springboot-shang-shi-yong-devtools-re-bu-shu">springboot上使用devtools热部署</span><a href="#springboot-shang-shi-yong-devtools-re-bu-shu" class="header-anchor">.</a></h1><h2><span id="bu-zou">步骤</span><a href="#bu-zou" class="header-anchor">.</a></h2><h3><span id="1-yin-ru-yi-lai">1、引入依赖</span><a href="#1-yin-ru-yi-lai" class="header-anchor">.</a></h3><p><strong>devtools</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-devtools<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.1.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>fork</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 配置devtools  还需要到设置中的Complier开启 Build project automatically --></span>                    true                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>fork</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-guan-bi-thymeleaf-huan-cun">2、关闭Thymeleaf缓存</span><a href="#2-guan-bi-thymeleaf-huan-cun" class="header-anchor">.</a></h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 在application.properties中 </span><span class="token comment" spellcheck="true"># 一般在开发环境关闭 上线后开启</span><span class="token attr-name">spring.thymeleaf.cache</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="3-she-zhi-zi-dong-gou-jian">3、设置自动构建</span><a href="#3-she-zhi-zi-dong-gou-jian" class="header-anchor">.</a></h3><p><img src="/2020/10/04/32611/image-20201004114755162.png" alt></p><p><strong>双击shift</strong></p><p><img src="/2020/10/04/32611/image-20201004115444468.png" alt></p><p><strong>勾选</strong></p><p><img src="/2020/10/04/32611/image-20201004115528014.png" alt></p><p><strong>结束</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 热部署 </tag>
            
            <tag> devtools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-19-Swagger</title>
      <link href="/2020/10/03/36126.html"/>
      <url>/2020/10/03/36126.html</url>
      
        <content type="html"><![CDATA[<h1><span id="swagger">Swagger</span><a href="#swagger" class="header-anchor">.</a></h1><blockquote><p>官网：<a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></p></blockquote><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。Swagger 让部署管理和使用功能强大的 API 从未如此简单。</p><ul><li>号称世界上最流行的API框架</li><li>RestFul API文档在线自动生成工具=&gt; API文档与API定义同步更新</li><li>直接运行，可以在线测试API接口</li><li>支持多种语言：Java、php 。。。</li></ul><h2><span id="springboot-ji-cheng-swagger">SpringBoot集成Swagger</span><a href="#springboot-ji-cheng-swagger" class="header-anchor">.</a></h2><h3><span id="1-dao-ru-yi-lai">1、导入依赖</span><a href="#1-dao-ru-yi-lai" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-chuang-jian-yi-ge-hellocontroller">2、创建一个HelloController</span><a href="#2-chuang-jian-yi-ge-hellocontroller" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-chuang-jian-swaggerconfig">3、创建SwaggerConfig</span><a href="#3-chuang-jian-swaggerconfig" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">// 开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-fang-wen-localhost-8080-swagger-ui-html">4、访问<code>localhost:8080/swagger-ui.html</code></span><a href="#4-fang-wen-localhost-8080-swagger-ui-html" class="header-anchor">.</a></h3><p><img src="/2020/10/03/36126/image-20201004123850617.png" alt></p><h2><span id="pei-zhi-swagger">配置Swagger</span><a href="#pei-zhi-swagger" class="header-anchor">.</a></h2><h3><span id="ji-ben-xin-xi-apiinfo">基本信息apiInfo</span><a href="#ji-ben-xin-xi-apiinfo" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">// 开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置了Swagger的Docket的Bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//基本信息</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 配置Swagger信息 apiInfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"liuyou-website"</span><span class="token punctuation">,</span> <span class="token string">"http://www.liuminkai.top"</span><span class="token punctuation">,</span> <span class="token string">"111@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 作者信息</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"xxx的Swagger信息标题"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标题</span>                <span class="token string">"详细描述"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 描述</span>                <span class="token string">"1.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 版本</span>                <span class="token string">"urn:tos"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 所属组 的 urn </span>                 contact<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 作者信息</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可证</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可证url</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/03/36126/image-20201004155822054.png" alt></p><h3><span id="pei-zhi-jie-kou-sao-miao">配置接口扫描</span><a href="#pei-zhi-jie-kou-sao-miao" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 配置接口扫描</span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*            apis:                RequestHandlerSelectors 配置扫描接口的方式                    basePackage(): 按指定包扫描api接口                    any(): 扫描全部                    none(): 不扫描                    withMethodAnnotation(): 扫描方法上的带指定注解的api接口， 如@GetMapping修饰方法                    withClassAnnotation(): 扫描类上的带指定注解的类上的api接口，如@RestController修饰类下所有的api接口        */</span>        <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.liuyou.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*            paths:                PathSelectors 路径筛选 -- 这里是url请求路径                    ant(): ant pattern 筛选url路径                    none(): 不筛选 -- 不会匹配 任何url路径  导致 No operations defined in spec!                    any(): 筛选所有 -- 所有url路径                    regex(): 正则表达式                    一般用 apis 中 的 basePackage 就够了        */</span><span class="token comment" spellcheck="true">//        .paths(PathSelectors.none())</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pei-zhi-shi-fou-qi-dong-swagger">配置是否启动Swagger</span><a href="#pei-zhi-shi-fou-qi-dong-swagger" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false:关闭</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/03/36126/image-20201004155625805.png" alt></p><p><strong>一般，我们希望Swagger在生成环境中使用，在发布时不使用</strong></p><ul><li>假如我们项目有多个配置文件：<ul><li><code>application.properties</code>  –  <strong><code>spring.profiles.active=</code> 激活环境</strong></li><li><code>application-dev.properties</code></li><li><code>application-prod.properties</code></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 添加参数</span>    <span class="token comment" spellcheck="true">// 设置要显示的 Swagger 环境 -- 当然可以使用 注解代替</span>    Profiles profiles <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 希望测试环境 和 开发环境 显示</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 会会检测当前环境是否是 以上环境 是返回true，否则返回false</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false:关闭</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pei-zhi-fen-zu">配置分组</span><a href="#pei-zhi-fen-zu" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h2><h3><span id="swaggerconfig-he-ji">SwaggerConfig 合集</span><a href="#swaggerconfig-he-ji" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>Environment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>Profiles<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>RequestHandlerSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Contact<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">// 开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置了Swagger的Docket的Bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置要显示的 Swagger 环境 -- 当然可以使用 注解代替</span>        Profiles profiles <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 希望测试环境 和 开发环境 显示</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 会会检测当前环境是否是 以上环境 是返回true，否则返回false</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//基本信息</span>            <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 配置接口扫描</span>            <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/*                apis:                    RequestHandlerSelectors 配置扫描接口的方式                        basePackage(): 按指定包扫描api接口                            any(): 扫描全部                            none(): 不扫描                            withMethodAnnotation(): 扫描方法上的带指定注解的api接口， 如@GetMapping修饰方法                        withClassAnnotation(): 扫描类上的带指定注解的类上的api接口，如@RestController修饰类下所有的api接口            */</span>            <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.liuyou.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/*                paths:                    PathSelectors 路径筛选 -- 这里是url请求路径                        ant(): ant pattern 筛选url路径                        none(): 不筛选 -- 不会匹配 任何url路径  导致 No operations defined in spec!                        any(): 筛选所有 -- 所有url路径                        regex(): 正则表达式                        一般用 apis 中 的 basePackage 就够了                */</span><span class="token comment" spellcheck="true">//              .paths(PathSelectors.none())</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true 启动 | false 关闭</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 配置Swagger信息 apiInfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"liuyou-website"</span><span class="token punctuation">,</span> <span class="token string">"http://www.liuminkai.top"</span><span class="token punctuation">,</span> <span class="token string">"111@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 作者信息</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"xxx的Swagger信息标题"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标题</span>                <span class="token string">"详细描述"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 描述</span>                <span class="token string">"1.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 版本</span>                <span class="token string">"urn:tos"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 所属组 的 urn</span>                 contact<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 作者信息</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可证</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可证url</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-19-Swagger</title>
      <link href="/2020/10/03/36125.html"/>
      <url>/2020/10/03/36125.html</url>
      
        <content type="html"><![CDATA[<h1><span id="swagger">Swagger</span><a href="#swagger" class="header-anchor">.</a></h1><blockquote><p>官网：<a href="https://swagger.io/" target="_blank" rel="noopener">https://swagger.io/</a></p></blockquote><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><p>总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。Swagger 让部署管理和使用功能强大的 API 从未如此简单。</p><ul><li>号称世界上最流行的API框架</li><li>RestFul API文档在线自动生成工具=&gt; API文档与API定义同步更新</li><li>直接运行，可以在线测试API接口</li><li>支持多种语言：Java、php 。。。</li></ul><h2><span id="springboot-ji-cheng-swagger">SpringBoot集成Swagger</span><a href="#springboot-ji-cheng-swagger" class="header-anchor">.</a></h2><h3><span id="1-dao-ru-yi-lai">1、导入依赖</span><a href="#1-dao-ru-yi-lai" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.10.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-chuang-jian-yi-ge-hellocontroller">2、创建一个HelloController</span><a href="#2-chuang-jian-yi-ge-hellocontroller" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-chuang-jian-swaggerconfig">3、创建SwaggerConfig</span><a href="#3-chuang-jian-swaggerconfig" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">// 开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-fang-wen-localhost-8080-swagger-ui-html">4、访问<code>localhost:8080/swagger-ui.html</code></span><a href="#4-fang-wen-localhost-8080-swagger-ui-html" class="header-anchor">.</a></h3><p><img src="/2020/10/03/36125/image-20201004123850617.png" alt></p><h2><span id="pei-zhi-swagger">配置Swagger</span><a href="#pei-zhi-swagger" class="header-anchor">.</a></h2><h3><span id="ji-ben-xin-xi-apiinfo">基本信息apiInfo</span><a href="#ji-ben-xin-xi-apiinfo" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">// 开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置了Swagger的Docket的Bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//基本信息</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 配置Swagger信息 apiInfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"liuyou-website"</span><span class="token punctuation">,</span> <span class="token string">"http://www.liuminkai.top"</span><span class="token punctuation">,</span> <span class="token string">"111@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 作者信息</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"xxx的Swagger信息标题"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标题</span>                <span class="token string">"详细描述"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 描述</span>                <span class="token string">"1.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 版本</span>                <span class="token string">"urn:tos"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 所属组 的 urn </span>                 contact<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 作者信息</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可证</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可证url</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/03/36125/image-20201004155822054.png" alt></p><h3><span id="pei-zhi-jie-kou-sao-miao">配置接口扫描</span><a href="#pei-zhi-jie-kou-sao-miao" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">// 配置接口扫描</span>        <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*            apis:                RequestHandlerSelectors 配置扫描接口的方式                    basePackage(): 按指定包扫描api接口                    any(): 扫描全部                    none(): 不扫描                    withMethodAnnotation(): 扫描方法上的带指定注解的api接口， 如@GetMapping修饰方法                    withClassAnnotation(): 扫描类上的带指定注解的类上的api接口，如@RestController修饰类下所有的api接口        */</span>        <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.liuyou.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">/*            paths:                PathSelectors 路径筛选 -- 这里是url请求路径                    ant(): ant pattern 筛选url路径                    none(): 不筛选 -- 不会匹配 任何url路径  导致 No operations defined in spec!                    any(): 筛选所有 -- 所有url路径                    regex(): 正则表达式                    一般用 apis 中 的 basePackage 就够了        */</span><span class="token comment" spellcheck="true">//        .paths(PathSelectors.none())</span>        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pei-zhi-shi-fou-qi-dong-swagger">配置是否启动Swagger</span><a href="#pei-zhi-shi-fou-qi-dong-swagger" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false:关闭</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/10/03/36125/image-20201004155625805.png" alt></p><p><strong>一般，我们希望Swagger在生成环境中使用，在发布时不使用</strong></p><ul><li>假如我们项目有多个配置文件：<ul><li><code>application.properties</code>  –  <strong><code>spring.profiles.active=</code> 激活环境</strong></li><li><code>application-dev.properties</code></li><li><code>application-prod.properties</code></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 添加参数</span>    <span class="token comment" spellcheck="true">// 设置要显示的 Swagger 环境 -- 当然可以使用 注解代替</span>    Profiles profiles <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 希望测试环境 和 开发环境 显示</span>    <span class="token keyword">boolean</span> flag <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 会会检测当前环境是否是 以上环境 是返回true，否则返回false</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false:关闭</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pei-zhi-fen-zu">配置分组</span><a href="#pei-zhi-fen-zu" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> Docket <span class="token function">docket3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"group3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h2><h3><span id="swaggerconfig-he-ji">SwaggerConfig 合集</span><a href="#swaggerconfig-he-ji" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Bean<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>Environment<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>core<span class="token punctuation">.</span>env<span class="token punctuation">.</span>Profiles<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>builders<span class="token punctuation">.</span>RequestHandlerSelectors<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>ApiInfo<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>service<span class="token punctuation">.</span>Contact<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spi<span class="token punctuation">.</span>DocumentationType<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>web<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span>Docket<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span> <span class="token comment" spellcheck="true">// 开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置了Swagger的Docket的Bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置要显示的 Swagger 环境 -- 当然可以使用 注解代替</span>        Profiles profiles <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 希望测试环境 和 开发环境 显示</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>profiles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 会会检测当前环境是否是 以上环境 是返回true，否则返回false</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//基本信息</span>            <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 配置接口扫描</span>            <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/*                apis:                    RequestHandlerSelectors 配置扫描接口的方式                        basePackage(): 按指定包扫描api接口                            any(): 扫描全部                            none(): 不扫描                            withMethodAnnotation(): 扫描方法上的带指定注解的api接口， 如@GetMapping修饰方法                        withClassAnnotation(): 扫描类上的带指定注解的类上的api接口，如@RestController修饰类下所有的api接口            */</span>            <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.liuyou.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">/*                paths:                    PathSelectors 路径筛选 -- 这里是url请求路径                        ant(): ant pattern 筛选url路径                        none(): 不筛选 -- 不会匹配 任何url路径  导致 No operations defined in spec!                        any(): 筛选所有 -- 所有url路径                        regex(): 正则表达式                        一般用 apis 中 的 basePackage 就够了                */</span><span class="token comment" spellcheck="true">//              .paths(PathSelectors.none())</span>            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true 启动 | false 关闭</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 配置Swagger信息 apiInfo</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"liuyou-website"</span><span class="token punctuation">,</span> <span class="token string">"http://www.liuminkai.top"</span><span class="token punctuation">,</span> <span class="token string">"111@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 作者信息</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"xxx的Swagger信息标题"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 标题</span>                <span class="token string">"详细描述"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 描述</span>                <span class="token string">"1.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 版本</span>                <span class="token string">"urn:tos"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 所属组 的 urn</span>                 contact<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 作者信息</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可证</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 许可证url</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
            <tag> Swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- Array和List之间的转换</title>
      <link href="/2020/10/03/24777.html"/>
      <url>/2020/10/03/24777.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文出自：<a href="https://blog.csdn.net/qq_41097354/article/details/90403953" target="_blank" rel="noopener">https://blog.csdn.net/qq_41097354/article/details/90403953</a></p></blockquote><h2><span id="shu-zu-zhuan-list">数组转List</span><a href="#shu-zu-zhuan-list" class="header-anchor">.</a></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> listtoArray<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Arrays<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Collections<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Collectors<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span>Stream<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayToList</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//数组转list</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token string">"world"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式一：使用for循环把数组元素加进list</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式二：</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式三：</span>        <span class="token comment" spellcheck="true">//同方法二一样使用了asList()方法。这不是最好的，</span>        <span class="token comment" spellcheck="true">//因为asList()返回的列表的大小是固定的。</span>        <span class="token comment" spellcheck="true">//事实上，返回的列表不是java.util.ArrayList类，而是定义在java.util.Arrays中一个私有静态类java.util.Arrays.ArrayList</span>        <span class="token comment" spellcheck="true">//我们知道ArrayList的实现本质上是一个数组，而asList()返回的列表是由原始数组支持的固定大小的列表。</span>        <span class="token comment" spellcheck="true">//这种情况下，如果添加或删除列表中的元素，程序会抛出异常UnsupportedOperationException。</span>        <span class="token comment" spellcheck="true">//java.util.Arrays.ArrayList类具有 set()，get()，contains()等方法，但是不具有添加add()或删除remove()方法,所以调用add()方法会报错。</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list3 <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//list3.remove(1);</span>        <span class="token comment" spellcheck="true">//boolean contains = list3.contains("s");</span>        <span class="token comment" spellcheck="true">//System.out.println(contains);</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式四：使用Collections.addAll()</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list4<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        Collections<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span>list4<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式五：使用Stream中的Collector收集器</span>        <span class="token comment" spellcheck="true">//转换后的List 属于 java.util.ArrayList 能进行正常的增删查操作</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list5<span class="token operator">=</span>Stream<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>Collectors<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list5<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="list-zhuan-shu-zu">List转数组</span><a href="#list-zhuan-shu-zu" class="header-anchor">.</a></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> listtoArray<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListToArray</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//list转数组</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//方式一：使用for循环</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> str1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> str1<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//方式二：使用toArray()方法</span>        <span class="token comment" spellcheck="true">//list.toArray(T[]  a); 将list转化为你所需要类型的数组</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> str2<span class="token operator">=</span>list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span>list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>String string <span class="token operator">:</span> str2<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//错误方式：易错   list.toArray()返回的是Object[]数组，怎么可以转型为String</span>        <span class="token comment" spellcheck="true">//ArrayList&lt;String> list3=new ArrayList&lt;String>();</span>        <span class="token comment" spellcheck="true">//String strings[]=(String [])list.toArray();</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 转载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-18-Shiro</title>
      <link href="/2020/09/30/40658.html"/>
      <url>/2020/09/30/40658.html</url>
      
        <content type="html"><![CDATA[<h1><span id="shiro">Shiro</span><a href="#shiro" class="header-anchor">.</a></h1><ul><li><p><code>Apache Shiro</code>是一个功能强大且易于使用的J<strong>ava安全框架</strong></p></li><li><p>可执行身份<strong>验证</strong>、<strong>授权</strong>、<strong>加密</strong>和<strong>会话管理</strong>。</p></li><li><p>通过Shiro易于理解的API，您可以快速、轻松地保护任何应用程序——从最小的移动应用程序到最大的web和企业应用程序。(<strong>可以在JavaSE中使用</strong>)</p></li></ul><p><img src="/2020/09/30/40658/1752718-20190731024731210-1646751637.png" alt></p><p><strong>功能</strong></p><ul><li><mark>Authentication</mark>：身份认证、登录，验证用户是不是拥有相应的身份</li><li><mark>Authorization</mark>：授权，即权限验证，验证某个已认证的用户是否拥有某个权限，即判断用户能否进行什么操作，如<ul><li>验证某个用户是否拥有某个角色，或者细粒度的验证某个用户对某个资源是否具有某个权限</li></ul></li><li><mark>Session Management</mark>：会话管理，即用户登录后就是第一次会话，在没有退出之前，它的所有信息都在会话中 <strong>会话可以是普通的JavaSE环境，也可以是Web环境</strong></li><li><mark>Cryptography</mark>：加密，保护数据的安全性，如<ul><li>密码加密存储在数据库中，而不是明文存储</li></ul></li><li><mark>Web Support</mark>：Web支持，可以非常容易的集成到Web环境</li><li><mark>Caching</mark>：缓存，比如<ul><li>用户登录后，其用户信息，拥有的角色、权限不必每次去查，这样可以提高效率</li></ul></li><li><mark>Concurrency</mark>：Shiro支持多线程应用的并发验证，如<ul><li>在一个线程中开启另一个线程，能把权限自动的传播过去</li></ul></li><li><mark>Testing</mark>：提供测试支持</li><li><mark>Run As</mark>：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问</li><li><mark>Remember Me</mark>：记住我，即一次登录后，下次就无需登录了</li></ul><p><strong>架构（外部）</strong></p><p><img src="/2020/09/30/40658/12617-20161206222914147-1809869115.jpg" alt="img"></p><ul><li><mark>Subject</mark>：应用代码直接交互的对象，也就是说Shiro的对外API的核心就是Subject，Subject代表了当前的用户，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject，如网络爬虫、机器人等，与Subject的所有交互都会委托给SecurityManager；Subject其实是一个门面，SecurityManager才是实际执行者</li><li><mark>Shiro SecurityManager</mark>：安全管理器，即所有与安全有关的操作都会与SecurityManager交互，并且它管理着所有的Subject，可以看出它是Shiro的核心，它负责与Shiro的其他组件进行交换，它相当于SpringMVC的DispatcherServlet的角色</li><li><mark>Realm</mark>：Shiro从Realm获取安全数据（如用户、角色、权限），就是说SecurityManager要验证用户身份，那么他需要从Realm获取相应的用户进行比较，来确定用户的身份是否合法；也需要从Realm得到用户相应的角色、权限，进行验证用户的操作是否能够进行，可以把Realm看出DataSource</li></ul><p><strong>架构（内部）</strong></p><p><img src="/2020/09/30/40658/12617-20161206222914835-1184096667.jpg" alt></p><ul><li>Subject：任何可以与应用交互的 对象</li><li>SecurityManager：相当于SpringMVC中的DispatcherServlet；是Shiro的心脏，所有具体的交互都通过SecurityManager进行控制，它管理者所有的Subject，且负责进行认证、授权、会话、及缓存的管理</li><li>Authenticator：负责Subject认证，是一个扩展点，可以自定义实现；可以使用认证策略（Authentication Strategy），即什么情况下算用户认证通过了</li><li>Authorizer：授权器，即访问控制器，用来决定主体是否有权限进行相应的操作；即控制着用户能访问应用中的那些功能</li><li>Realm：可以有一个或多个的Realm，可以认为是安全实体数据源，即用于获取安全实体的，可以用JDBC实现，也可以是内存实现等等，由用户提供；所以一般在应用中都需要实现自己的Realm</li><li>SessionManager：管理Session生命周期的组件，而Shiro并不仅仅可以用在Web环境，也可以用在普通的JavaSE环境中</li><li>CacheManager：缓存控制器，来管理如用户、角色、权限等缓存的；因为这些数据基本上很少改变，放到缓存中后可以提高访问的性能</li><li>Cryptography：密码模块，Shiro提高了一些常见的加密组件用于密码加密，解密等等</li></ul><h2><span id="kuai-su-ru-men">快速入门</span><a href="#kuai-su-ru-men" class="header-anchor">.</a></h2><h3><span id="1-dao-ru-yi-lai">1、导入依赖</span><a href="#1-dao-ru-yi-lai" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 日志使用 slf4j + log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jcl-over-slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.slf4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>slf4j-log4j12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.7.30<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>springboot 默认 日志实现 是 logback</p><p>可以 在pom.xml 中关闭它</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 关掉 springboot 默认的日志实现 logback --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>logback-classic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>ch.qos.logback<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h3><span id="2-log4j-properties">2、 log4j.properties</span><a href="#2-log4j-properties" class="header-anchor">.</a></h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">INFO, stdout</span><span class="token attr-name">log4j.appender.stdout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.stdout.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.stdout.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">%d %p [%c] - %m %n</span><span class="token comment" spellcheck="true"># General Apache libraries</span><span class="token attr-name">log4j.logger.org.apache</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span class="token comment" spellcheck="true"># Spring</span><span class="token attr-name">log4j.logger.org.springframework</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span class="token comment" spellcheck="true"># Default Shiro logging</span><span class="token attr-name">log4j.logger.org.apache.shiro</span><span class="token punctuation">=</span><span class="token attr-value">INFO</span><span class="token comment" spellcheck="true"># Disable verbose logging</span><span class="token attr-name">log4j.logger.org.apache.shiro.util.ThreadContext</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span class="token attr-name">log4j.logger.org.apache.shiro.cache.ehcache.EhCache</span><span class="token punctuation">=</span><span class="token attr-value">WARN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-shiro-ini">3、shiro.ini</span><a href="#3-shiro-ini" class="header-anchor">.</a></h3><pre class="line-numbers language-ini"><code class="language-ini"><span class="token selector">[users]</span># user 'root' with password 'secret' and the 'admin' role<span class="token constant">root</span> <span class="token attr-value"><span class="token punctuation">=</span> secret, admin</span># user 'guest' with the password 'guest' and the 'guest' role<span class="token constant">guest</span> <span class="token attr-value"><span class="token punctuation">=</span> guest, guest</span># user 'presidentskroob' with password '12345' ("That's the same combination on# my luggage!!!" ;)), and role 'president'<span class="token constant">presidentskroob</span> <span class="token attr-value"><span class="token punctuation">=</span> 12345, president</span># user 'darkhelmet' with password 'ludicrousspeed' and roles 'darklord' and 'schwartz'<span class="token constant">darkhelmet</span> <span class="token attr-value"><span class="token punctuation">=</span> ludicrousspeed, darklord, schwartz</span># user 'lonestarr' with password 'vespa' and roles 'goodguy' and 'schwartz'<span class="token constant">lonestarr</span> <span class="token attr-value"><span class="token punctuation">=</span> vespa, goodguy, schwartz</span># -----------------------------------------------------------------------------# Roles with assigned permissions## Each line conforms to the format defined in the# org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc# -----------------------------------------------------------------------------<span class="token selector">[roles]</span># 'admin' role has all permissions, indicated by the wildcard '*'<span class="token constant">admin</span> <span class="token attr-value"><span class="token punctuation">=</span> *</span># The 'schwartz' role can do anything (*) with any lightsaber:<span class="token constant">schwartz</span> <span class="token attr-value"><span class="token punctuation">=</span> lightsaber:*</span># The 'goodguy' role is allowed to 'drive' (action) the winnebago (type) with# license plate 'eagle5' (instance specific id)<span class="token constant">goodguy</span> <span class="token attr-value"><span class="token punctuation">=</span> winnebago:drive:eagle5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-quickstart-java">4、Quickstart.java</span><a href="#4-quickstart-java" class="header-anchor">.</a></h3><blockquote><p>重点看 流程 和 方法的作用</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>SecurityUtils<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>authc<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原来的路径是 import org.apache.shiro.ini.IniSecurityManagerFactory;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>config<span class="token punctuation">.</span>IniSecurityManagerFactory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>mgt<span class="token punctuation">.</span>SecurityManager<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>session<span class="token punctuation">.</span>Session<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>subject<span class="token punctuation">.</span>Subject<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//原来的路径是 import org.apache.shiro.lang.util.Factory;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Factory<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>slf4j<span class="token punctuation">.</span>LoggerFactory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Quickstart</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">transient</span> Logger log <span class="token operator">=</span> LoggerFactory<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>Quickstart<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// The easiest way to create a Shiro SecurityManager with configured</span>        <span class="token comment" spellcheck="true">// realms, users, roles and permissions is to use the simple INI config.</span>        <span class="token comment" spellcheck="true">// We'll do that by using a factory that can ingest a .ini file and</span>        <span class="token comment" spellcheck="true">// return a SecurityManager instance:</span>        <span class="token comment" spellcheck="true">// Use the shiro.ini file at the root of the classpath</span>        <span class="token comment" spellcheck="true">// (file: and url: prefixes load from files and urls respectively):</span>        Factory<span class="token operator">&lt;</span>SecurityManager<span class="token operator">></span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IniSecurityManagerFactory</span><span class="token punctuation">(</span><span class="token string">"classpath:shiro.ini"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SecurityManager securityManager <span class="token operator">=</span> factory<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//        DefaultSecurityManager securityManager = new DefaultSecurityManager();</span><span class="token comment" spellcheck="true">//        IniRealm iniRealm = new IniRealm("classpath:shiro.ini");</span><span class="token comment" spellcheck="true">//        securityManager.setRealm(iniRealm);</span>        <span class="token comment" spellcheck="true">// for this simple example quickstart, make the SecurityManager</span>        <span class="token comment" spellcheck="true">// accessible as a JVM singleton.  Most applications wouldn't do this</span>        <span class="token comment" spellcheck="true">// and instead rely on their container configuration or web.xml for</span>        <span class="token comment" spellcheck="true">// webapps.  That is outside the scope of this simple quickstart, so</span>        <span class="token comment" spellcheck="true">// we'll just do the bare minimum so you can continue to get a feel</span>        <span class="token comment" spellcheck="true">// for things.</span>        SecurityUtils<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// Now that a simple Shiro environment is set up, let's see what you can do:</span>        <span class="token comment" spellcheck="true">// 获取当前用户对象</span>        Subject currentUser <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 通过当前用户拿到session（shiro的）</span>        Session session <span class="token operator">=</span> currentUser<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"someKey"</span><span class="token punctuation">,</span> <span class="token string">"aValue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 存值</span>        String value <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"someKey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 取值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"aValue"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Retrieved the correct value! ["</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 测试当前用户 是否被认证</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>currentUser<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 通过 账号和密码 生成 令牌</span>            UsernamePasswordToken token <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UsernamePasswordToken</span><span class="token punctuation">(</span><span class="token string">"lonestarr"</span><span class="token punctuation">,</span> <span class="token string">"vespa"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            token<span class="token punctuation">.</span><span class="token function">setRememberMe</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 记住我</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                currentUser<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 执行登录操作</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnknownAccountException</span> uae<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 用户不存在</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"There is no user with username of "</span> <span class="token operator">+</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IncorrectCredentialsException</span> ice<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 密码不对</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Password for account "</span> <span class="token operator">+</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" was incorrect!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">LockedAccountException</span> lae<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 密码锁定</span>                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"The account for username "</span> <span class="token operator">+</span> token<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" is locked.  "</span> <span class="token operator">+</span>                        <span class="token string">"Please contact your administrator to unlock it."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// ... catch more exceptions here (maybe custom ones specific to your application?</span>            <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">AuthenticationException</span> ae<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 认证失败</span>                <span class="token comment" spellcheck="true">//unexpected condition?  error?</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//say who they are:</span>        <span class="token comment" spellcheck="true">//print their identifying principal (in this case, a username):</span>        <span class="token comment" spellcheck="true">// 获取当前用户的认证</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"User ["</span> <span class="token operator">+</span> currentUser<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"] logged in successfully."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//test a role:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"schwartz"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"May the Schwartz be with you!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Hello, mere mortal."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//test a typed permission (not instance-level)</span>        <span class="token comment" spellcheck="true">// 粗粒度权限 *</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"lightsaber:wield"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"You may use a lightsaber ring.  Use it wisely."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Sorry, lightsaber rings are for schwartz masters only."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//a (very powerful) Instance Level permission:</span>        <span class="token comment" spellcheck="true">// 细粒度权限 指定</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"winnebago:drive:eagle5"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"You are permitted to 'drive' the winnebago with license plate (id) 'eagle5'.  "</span> <span class="token operator">+</span>                    <span class="token string">"Here are the keys - have fun!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"Sorry, you aren't allowed to drive the 'eagle5' winnebago!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//all done - log out!</span>        <span class="token comment" spellcheck="true">// 注销</span>        currentUser<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 结束</span>        System<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Subject 主要涉及方法</strong></p><pre class="line-numbers language-java"><code class="language-java">Subject currentUser <span class="token operator">=</span> SecurityUtils<span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Session session <span class="token operator">=</span> currentUser<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>currentUser<span class="token punctuation">.</span><span class="token function">isAuthenticated</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    currentUser<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>currentUser<span class="token punctuation">.</span><span class="token function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span>currentUser<span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"schwartz"</span><span class="token punctuation">)</span>currentUser<span class="token punctuation">.</span><span class="token function">isPermitted</span><span class="token punctuation">(</span><span class="token string">"lightsaber:wield"</span><span class="token punctuation">)</span>currentUser<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="springboot-zhong-ji-cheng-shiro">SpringBoot中集成Shiro</span><a href="#springboot-zhong-ji-cheng-shiro" class="header-anchor">.</a></h2><p><strong>导入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>shiro-spring-boot-web-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.6.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>三大对象</strong></p><ul><li>Subject：用户</li><li>SecurityManager：管理所有用户</li><li>Realm：连接数据</li></ul><h3><span id="1-bian-xie-pei-zhi-lei-shiroconfig">1、编写配置类 ShiroConfig</span><a href="#1-bian-xie-pei-zhi-lei-shiroconfig" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShiroConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.创建 realm对象，需要自定义 -- realm</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> UserRealm <span class="token function">userRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">UserRealm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 2.DefaultWebSecurityManager -- securityManager</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"securityManager"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> DefaultWebSecurityManager <span class="token function">getDefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"userRealm"</span><span class="token punctuation">)</span> UserRealm userRealm<span class="token punctuation">)</span><span class="token punctuation">{</span>        DefaultWebSecurityManager securityManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultWebSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 关联UserRealm</span>        securityManager<span class="token punctuation">.</span><span class="token function">setRealm</span><span class="token punctuation">(</span>userRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3.ShiroFilterFactoryBean -- subject</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ShiroFilterFactoryBean <span class="token function">shiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"securityManager"</span><span class="token punctuation">)</span> DefaultWebSecurityManager defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">{</span>        ShiroFilterFactoryBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShiroFilterFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置安全管理器</span>        bean<span class="token punctuation">.</span><span class="token function">setSecurityManager</span><span class="token punctuation">(</span>defaultWebSecurityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义的UserRealm 需要继承 AuthorizingRealm</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserRealm</span> <span class="token keyword">extends</span> <span class="token class-name">AuthorizingRealm</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 授权</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthorizationInfo <span class="token function">doGetAuthorizationInfo</span><span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"授权"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 认证</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> AuthenticationInfo <span class="token function">doGetAuthenticationInfo</span><span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> <span class="token keyword">throws</span> AuthenticationException <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"认证"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-bian-xie-controller-he-qian-duan-ye-mian">2、编写 controller 和 前端页面</span><a href="#2-bian-xie-controller-he-qian-duan-ye-mian" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">index</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"shiro index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/list"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/add"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"add"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/update"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"update"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>首页</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span>          <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, user-scalable<span class="token punctuation">=</span>no, initial-scale<span class="token punctuation">=</span>1.0, maximum-scale<span class="token punctuation">=</span>1.0, minimum-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>首页<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mark</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${msg}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mark</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/list}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>跳到list<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>列表页</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>列表<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>添加 和 修改</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>add ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>update ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-shi-xian-deng-lu-lan-jie">3、实现登录拦截</span><a href="#3-shi-xian-deng-lu-lan-jie" class="header-anchor">.</a></h3><blockquote><p>在 ShiroConfig中 添加 过滤器</p></blockquote><h3><span id="shiro-zheng-he-thymeleaf">Shiro整合Thymeleaf</span><a href="#shiro-zheng-he-thymeleaf" class="header-anchor">.</a></h3><p><strong>引入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 还需要 在ShiroConfig中 进行配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.theborakompanioni<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-shiro<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在 <code>ShiroConfig.java</code>中添加 <code>ShiroDialect</code></strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 整合ShiroDialect : 用于整合 shiro thymeleaf</span><span class="token annotation punctuation">@Bean</span><span class="token keyword">public</span> ShiroDialect <span class="token function">getShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ShiroDialect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>页面导入命名空间</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>shiro</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.pollix.at/thymeleaf/shiro<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>标签使用说明</strong></p><pre class="line-numbers language-html"><code class="language-html">guest标签　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>guest</span><span class="token punctuation">></span></span>　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>guest</span><span class="token punctuation">></span></span>　　用户没有身份验证时显示相应信息，即游客访问信息。user标签　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>user</span><span class="token punctuation">></span></span>　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>user</span><span class="token punctuation">></span></span>　　用户已经身份验证/记住我登录后显示相应的信息。authenticated标签　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>authenticated</span><span class="token punctuation">></span></span>　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>authenticated</span><span class="token punctuation">></span></span>　　用户已经身份验证通过，即Subject.login登录成功，不是记住我登录的。notAuthenticated标签　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>notAuthenticated</span><span class="token punctuation">></span></span>　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>notAuthenticated</span><span class="token punctuation">></span></span>　　用户已经身份验证通过，即没有调用Subject.login进行登录，包括记住我自动登录的也属于未进行身份验证。principal标签　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span></span> <span class="token attr-name">principal</span><span class="token punctuation">/></span></span>　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>principal</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>　　相当于((User)Subject.getPrincipals()).getUsername()。lacksPermission标签　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>lacksPermission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org:create<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>lacksPermission</span><span class="token punctuation">></span></span>　　如果当前Subject没有权限将显示body体内容。hasRole标签　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>hasRole</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>hasRole</span><span class="token punctuation">></span></span>　　如果当前Subject有角色将显示body体内容。hasAnyRoles标签　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>hasAnyRoles</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin,user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>　　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>hasAnyRoles</span><span class="token punctuation">></span></span>　　如果当前Subject有任意一个角色（或的关系）将显示body体内容。lacksRole标签　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>lacksRole</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>lacksRole</span><span class="token punctuation">></span></span>　　如果当前Subject没有角色将显示body体内容。hasPermission标签　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">shiro:</span>hasPermission</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user:create<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>　　　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">shiro:</span>hasPermission</span><span class="token punctuation">></span></span>　　如果当前Subject有权限将显示body体内容<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-17-SpringSecurity</title>
      <link href="/2020/09/30/44859.html"/>
      <url>/2020/09/30/44859.html</url>
      
        <content type="html"><![CDATA[<h1><span id="springsecurity">SpringSecurity</span><a href="#springsecurity" class="header-anchor">.</a></h1><ul><li><code>Spring Security</code>是一个<strong>功能强大且高度可定制</strong>的<strong>身份验证</strong>和<strong>访问控制</strong><mark>框架</mark>。</li><li>它是保护基于spring的应用程序的事实标准。</li><li><code>Spring Security</code>是一个重点为<strong>Java应用程序</strong>提供身份验证和授权的框架。– <strong>认证和授权</strong></li><li>与所有Spring项目一样，<code>Spring Security</code>的真正强大之处在于它可以<strong>很容易地扩展以满足定制需求</strong></li></ul><blockquote><p>也就是说 它是做<strong>认证<code>Authentication</code>和授权<code>Authorization</code></strong>的，它可以代替之前 Filter 和 Intercept上 身份验证等繁琐操作</p></blockquote><p><strong>有关类：</strong></p><ul><li><code>WebSecurityConfigurerAdapter</code> 自定义Security策略</li><li><code>AuthenticationManagerBuilder</code> 自定义认证策略</li><li><code>@EnableWebSecurity</code> 开启WebSecurity模式</li></ul><p><strong>引入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.security<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-security-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="yong-hu-shou-quan-he-ren-zheng">用户授权 和 认证</span><a href="#yong-hu-shou-quan-he-ren-zheng" class="header-anchor">.</a></h2><blockquote><p><strong>自定义 配置类</strong></p></blockquote><p>在用户账号密码的认证后，通过角色不同 赋予 不同的权限</p><ul><li>认证<ul><li>用户名 和 密码，角色 验证</li></ul></li><li>授权<ul><li>页面权限过滤</li><li>登录</li><li>注销</li><li>记住我</li><li>防御网站攻击</li><li>。。。</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@EnableWebSecurity</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityConfig</span> <span class="token keyword">extends</span> <span class="token class-name">WebSecurityConfigurerAdapter</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 授权</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>HttpSecurity http<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 首页所有人都可以访问 功能页只有对应 有权限的人才能访问</span>        <span class="token comment" spellcheck="true">// 请求授权的规则</span>        http<span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permitAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level1/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level2/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip2"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">antMatchers</span><span class="token punctuation">(</span><span class="token string">"/level3/**"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hasRole</span><span class="token punctuation">(</span><span class="token string">"vip3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token operator">/</span> 没有权限默认会跳到登录页面        http<span class="token punctuation">.</span><span class="token function">formLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">loginPage</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 定制登录页 之前是他 默认的那个登录页                <span class="token punctuation">.</span><span class="token function">loginProcessingUrl</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 表单提交 如果只有loginPage 那么跳转和表单都是同一个url<span class="token operator">/</span><span class="token operator">/</span>                <span class="token punctuation">.</span><span class="token function">failureForwardUrl</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 失败跳转 url                <span class="token punctuation">.</span><span class="token function">failureUrl</span><span class="token punctuation">(</span><span class="token string">"/toLogin"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">successForwardUrl</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 成功跳转 url                <span class="token punctuation">.</span><span class="token function">usernameParameter</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span> 设定 表单中的 用户名的 name                <span class="token punctuation">.</span><span class="token function">passwordParameter</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 设定 表单中的 密码的 name        <span class="token operator">/</span><span class="token operator">/</span>        <span class="token operator">/</span><span class="token operator">/</span> cors csrf        http<span class="token punctuation">.</span><span class="token function">csrf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span> 关闭csrf保护        <span class="token operator">/</span><span class="token operator">/</span> 注销  点击注销 会 出现 <span class="token number">404</span> <span class="token operator">--</span> 需要关闭csrf        <span class="token operator">/</span><span class="token operator">*</span>            触发注销发生的<span class="token function">URL</span><span class="token punctuation">(</span>默认为“<span class="token operator">/</span>logout”<span class="token punctuation">)</span>。如果CSRF保护            如果启用<span class="token punctuation">(</span>默认<span class="token punctuation">)</span>，则请求也必须是POST。这意味着            默认的POST“<span class="token operator">/</span>注销”是必须触发注销。如果CSRF保护是            禁用，那么任何HTTP方法都是允许的。         <span class="token operator">*</span><span class="token operator">/</span>        http<span class="token punctuation">.</span><span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logoutUrl</span><span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">logoutSuccessUrl</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 开启记住我功能 cookie 默认保存2周</span>        http<span class="token punctuation">.</span><span class="token function">rememberMe</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">rememberMeParameter</span><span class="token punctuation">(</span><span class="token string">"remember"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 表单中 记住我 的 name</span>                <span class="token punctuation">.</span><span class="token function">rememberMeCookieName</span><span class="token punctuation">(</span><span class="token string">"rememberme"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// cookie 的名字</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 认证</span>    <span class="token comment" spellcheck="true">// springboot 2.1.x 可以直接使用</span>    <span class="token comment" spellcheck="true">// 密码编码 -- PasswordEncode -- 明文密码 可能会被反编译获取</span>    <span class="token comment" spellcheck="true">// 在Spring Security 5.0+ 新增了很多加密方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span>AuthenticationManagerBuilder auth<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 内存中 虚拟数据</span>        auth<span class="token punctuation">.</span><span class="token function">inMemoryAuthentication</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">passwordEncoder</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"liuyou"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"liuyou"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">withUser</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">password</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BCryptPasswordEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">roles</span><span class="token punctuation">(</span><span class="token string">"vip1"</span><span class="token punctuation">,</span><span class="token string">"vip2"</span><span class="token punctuation">,</span><span class="token string">"vip3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 数据库</span><span class="token comment" spellcheck="true">//        auth.jdbcAuthentication()</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="zheng-he-thymeleaf">整合Thymeleaf</span><a href="#zheng-he-thymeleaf" class="header-anchor">.</a></h2><p><strong>引入依赖</strong></p><blockquote><p>整合包需要 看自己引入的SpringSecurity的版本 选择</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.thymeleaf.extras<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>thymeleaf-extras-springsecurity5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.0.4.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在前端页面中 引入命名空间</strong></p><blockquote><p>SpringSecurity 命名空间 url路径 就是 Thymeleaf + artifactId</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">xmlns:</span>sec</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/thymeleaf-extras-springsecurity5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p><strong>以上 使用 sec 没有 提示可以使用如下 替换</strong></p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span>                <span class="token attr-name"><span class="token namespace">xmlns:</span>sec</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org/extras/spring-security<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>简单用法</strong></p><pre class="line-numbers language-java"><code class="language-java">sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"isAuthenticated()"</span>  <span class="token comment" spellcheck="true">// 授权(登录) 后 才会显示内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"> sec<span class="token operator">:</span>authorize<span class="token operator">=</span><span class="token string">"hasRole('vip1')"</span> <span class="token comment" spellcheck="true">// 角色 为 vip1 才会显示内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/2020/09/30/44859/image-20201001082725026.png" style="zoom:50%;"><img src="/2020/09/30/44859/image-20201001083515240.png" style="zoom:50%;"><p><strong>结果展示</strong></p><p><img src="/2020/09/30/44859/image-20201001083842525.png" alt="未登录"></p><p><img src="/2020/09/30/44859/image-20201001084058615.png" alt="已登录"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-16-整合JDBC</title>
      <link href="/2020/09/29/65228.html"/>
      <url>/2020/09/29/65228.html</url>
      
        <content type="html"><![CDATA[<h2><span id="1-chuang-jian-xin-xiang-mu">1、创建新项目</span><a href="#1-chuang-jian-xin-xiang-mu" class="header-anchor">.</a></h2><p><img src="/2020/09/29/65228/image-20200909112350063.png" alt></p><p><img src="/2020/09/29/65228/image-20200929192401033.png" alt="选中JDBC API 和 MySQL Driver"></p><h2><span id="2-bian-xie-application-properties-pei-zhi-wen-jian-shu-ju-ku-lian-jie">2、编写 application.properties配置文件 – 数据库连接</span><a href="#2-bian-xie-application-properties-pei-zhi-wen-jian-shu-ju-ku-lian-jie" class="header-anchor">.</a></h2><blockquote><p>注意：serverTimezone 必须写，SpringBoot默认mysql8 ，mysql8需要配置时区</p></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 数据库连接</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="3-huo-qu-shu-ju-yuan-he-lian-jie">3、获取数据源 和 连接</span><a href="#3-huo-qu-shu-ju-yuan-he-lian-jie" class="header-anchor">.</a></h2><p><strong>数据源</strong><code>使用 DataSource 自动注入即可</code></p><p><strong>连接</strong> <code>调用 dateSource.getConnection()</code></p><blockquote><p><code>SpringBoot</code> 中使用的 默认数据库连接池 是 <code>Hikari</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span>jupiter<span class="token punctuation">.</span>api<span class="token punctuation">.</span>Test<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>test<span class="token punctuation">.</span>context<span class="token punctuation">.</span>SpringBootTest<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DataSource<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Connection<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>SQLException<span class="token punctuation">;</span><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">DataApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    DataSource dataSource<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> SQLException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 查看默认的数据源 class com.zaxxer.hikari.HikariDataSource</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取数据库的连接</span>        Connection connection <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// xxx Template : SpringBoot 写好的Bean 可以直接用</span>        <span class="token comment" spellcheck="true">// jdbcTemplate</span>        <span class="token comment" spellcheck="true">// redisTemplate</span>        <span class="token comment" spellcheck="true">// ...</span>        <span class="token comment" spellcheck="true">// 关闭连接</span>        connection<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="4-xxxtemplate-de-shi-yong">4、<code>xxxTemplate</code>的使用</span><a href="#4-xxxtemplate-de-shi-yong" class="header-anchor">.</a></h2><blockquote><p><strong>CRUD : 原生</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JDBCController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JdbcTemplate jdbcTemplate<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询数据库的所以信息</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/userList"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> <span class="token function">userList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from mybatis.user"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">>></span> maps <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> maps<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/addUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"insert into mybatis.user(name,pwd) values('heihei','buheihei')"</span><span class="token punctuation">;</span>        Integer update <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> update<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/updateUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">updateUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"update mybatis.user set name = ?,pwd = ? where id = ?"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"kaikai"</span><span class="token punctuation">,</span><span class="token string">"liuminkai"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        Integer update <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> update<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/deleteUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        String sql <span class="token operator">=</span> <span class="token string">"delete from mybatis.user where id = ?"</span><span class="token punctuation">;</span>        Integer update <span class="token operator">=</span> jdbcTemplate<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> update<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="5-zheng-he-druiddatasource-shu-ju-yuan">5、整合<code>DruidDataSource</code>数据源</span><a href="#5-zheng-he-druiddatasource-shu-ju-yuan" class="header-anchor">.</a></h2><h3><span id="yin-ru-yi-lai"><strong>引入依赖</strong></span><a href="#yin-ru-yi-lai" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.24<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pei-zhi-wen-jian-zhong-zhi-ding-shu-ju-yuan"><strong>配置文件中 指定数据源</strong></span><a href="#pei-zhi-wen-jian-zhong-zhi-ding-shu-ju-yuan" class="header-anchor">.</a></h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 数据库连接</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token comment" spellcheck="true"># 指定数据源</span><span class="token attr-name">spring.datasource.type</span><span class="token punctuation">=</span><span class="token attr-value">com.alibaba.druid.pool.DruidDataSource</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="druid-de-pei-zhi-xu-yao-dao-ru-log4j"><strong>druid的配置</strong>（需要导入log4j）</span><a href="#druid-de-pei-zhi-xu-yao-dao-ru-log4j" class="header-anchor">.</a></h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># druid 数据源专有配置</span><span class="token attr-name">spring.datasource.druid.initial-size</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token attr-name">spring.datasource.druid.min-idle</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token attr-name">spring.datasource.druid.max-active</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token attr-name">spring.datasource.druid.max-wait</span><span class="token punctuation">=</span><span class="token attr-value">60000</span><span class="token attr-name">spring.datasource.druid.time-between-eviction-runs-millis</span><span class="token punctuation">=</span><span class="token attr-value">60000</span><span class="token attr-name">spring.datasource.druid.min-evictable-idle-time-millis</span><span class="token punctuation">=</span><span class="token attr-value">300000</span><span class="token attr-name">spring.datasource.druid.validation-query</span><span class="token punctuation">=</span><span class="token attr-value">SELECT 1 FROM DUAL</span><span class="token attr-name">spring.datasource.druid.test-while-idle</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.datasource.druid.test-on-borrow</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">spring.datasource.druid.test-on-return</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">spring.datasource.druid.pool-prepared-statements</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 配置监控统计拦截的filters、stat:监控统计、log4j:日志记录、wall、防御sql注入</span><span class="token comment" spellcheck="true"># 使用日志 需要导入 log4j</span><span class="token attr-name">spring.datasource.druid.filters</span><span class="token punctuation">=</span><span class="token attr-value">stat,wall,log4j</span><span class="token attr-name">spring.datasource.druid.max-pool-prepared-statement-per-connection-size</span><span class="token punctuation">=</span><span class="token attr-value">20</span><span class="token attr-name">spring.datasource.druid.use-global-data-source-stat</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">spring.datasource.druid.connection-properties</span><span class="token punctuation">=</span><span class="token attr-value">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="druidconfig">DruidConfig</span><a href="#druidconfig" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidConfig</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> DataSource <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 后台监控 这个相当于 Web.xml</span>    <span class="token comment" spellcheck="true">// 因为 SpringBoot 内置了 servlet容器，所以没有web.xml</span>    <span class="token comment" spellcheck="true">// 替代方法 ServletRegistrationBean</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> ServletRegistrationBean <span class="token function">statViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ServletRegistrationBean<span class="token operator">&lt;</span>StatViewServlet<span class="token operator">></span> bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletRegistrationBean</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StatViewServlet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 后台需要有人登陆，账号密码配置</span>        HashMap<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> initParameters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 增加配置</span>        initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginUsername"</span><span class="token punctuation">,</span><span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 这两个是固定的</span>        initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"loginPassword"</span><span class="token punctuation">,</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 允许谁可以访问 后面是ip地址</span>        initParameters<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"allow"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 禁止谁访问 initParameters.put("名字","ip") deny</span>        bean<span class="token punctuation">.</span><span class="token function">setInitParameters</span><span class="token punctuation">(</span>initParameters<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置初始化参数</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// filter</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> FilterRegistrationBean <span class="token function">webStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建过滤器</span>        FilterRegistrationBean bean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterRegistrationBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bean<span class="token punctuation">.</span><span class="token function">setFilter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WebStatFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 可以过滤的请求</span>        bean<span class="token punctuation">.</span><span class="token function">addUrlPatterns</span><span class="token punctuation">(</span><span class="token string">"/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 忽略</span>        bean<span class="token punctuation">.</span><span class="token function">addInitParameter</span><span class="token punctuation">(</span><span class="token string">"exclusions"</span><span class="token punctuation">,</span><span class="token string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><strong>编写完以上代码后 启动项目 可以 直接访问 localhost:8080/druid/login.html 使用设置好的账号密码进行登录，查看后台信息</strong></p></blockquote><h2><span id="6-zheng-he-mybatis-kuang-jia">6、整合MyBatis框架</span><a href="#6-zheng-he-mybatis-kuang-jia" class="header-anchor">.</a></h2><h3><span id="yin-ru-yi-lai">引入依赖</span><a href="#yin-ru-yi-lai" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.spring.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.1.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="lian-jie-shu-ju-ku">连接数据库</span><a href="#lian-jie-shu-ju-ku" class="header-anchor">.</a></h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># 数据库连接 application.properties</span><span class="token attr-name">spring.datasource.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/mybatis?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=false&amp;serverTimezone=GMT%2B8</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">spring.datasource.password</span><span class="token punctuation">=</span><span class="token attr-value">mysql</span><span class="token attr-name">spring.datasource.driver-class-name</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="bian-xie-shi-ti-lei-he-mapper-jie-kou">编写实体类 和 Mapper接口</span><a href="#bian-xie-shi-ti-lei-he-mapper-jie-kou" class="header-anchor">.</a></h3><p><strong>实体类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 使用了lombok 需要引入依赖 和 安装插件</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> String pwd<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Mapper接口</strong></p><blockquote><p><code>@Mapper</code> <strong>表示这是一个mybatis 的 mapper类 ： Dao</strong></p></blockquote><blockquote><p><code>@Repsitory</code> <strong>被spring容器接管</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Mapper</span> <span class="token comment" spellcheck="true">//表示这是一个mybatis 的 mapper类 ： Dao</span><span class="token annotation punctuation">@Repository</span> <span class="token comment" spellcheck="true">// spring容器接管</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">queryUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    User <span class="token function">queryUserById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer <span class="token function">updateUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer <span class="token function">deleteUser</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="chuang-jian-mapper-xml-xu-yao-zai-resource-mu-lu-xia">创建Mapper.xml(需要在resource目录下)</span><a href="#chuang-jian-mapper-xml-xu-yao-zai-resource-mu-lu-xia" class="header-anchor">.</a></h3><p><strong>UserMapper.xml</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.liuyou.mapper.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="pei-zhi-wen-jian-zhong-she-zhi-mybatis">配置文件中，设置MyBatis</span><a href="#pei-zhi-wen-jian-zhong-she-zhi-mybatis" class="header-anchor">.</a></h3><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># MyBatis</span><span class="token comment" spellcheck="true"># 别名</span><span class="token attr-name">mybatis.type-aliases-package</span><span class="token punctuation">=</span><span class="token attr-value">com.liuyou.pojo </span><span class="token comment" spellcheck="true"># 本地配置文件</span><span class="token comment" spellcheck="true">#mybatis.config-location=</span><span class="token comment" spellcheck="true"># 绑定Mapper.xml 注意：classpath: 后别跟 /</span><span class="token attr-name">mybatis.mapper-locations</span><span class="token punctuation">=</span><span class="token attr-value">classpath:mapper/*.xml</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="bian-xie-sql-zai-dui-ying-de-mapper-xml-zhong">编写SQL，在对应的Mapper.xml中</span><a href="#bian-xie-sql-zai-dui-ying-de-mapper-xml-zhong" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    insert into mybatis.user(name, pwd)    values(#{name},#{pwd})<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from mybatis.user    whehe    id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update mybatis.user    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            name = #{name},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            pwd = #{pwd},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where    id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryUserById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user    where     id = #{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="bian-xie-kong-zhi-ceng-zhe-li-zhi-jie-tiao-guo-ye-wu-ceng-zhi-jie-controller-diao-dao">编写控制层（这里直接跳过业务层，直接Controller调Dao）</span><a href="#bian-xie-kong-zhi-ceng-zhe-li-zhi-jie-tiao-guo-ye-wu-ceng-zhi-jie-controller-diao-dao" class="header-anchor">.</a></h3><blockquote><p>真实情况下，必须写业务层</p></blockquote><h3><span id="jie-guo-zhan-shi">结果展示</span><a href="#jie-guo-zhan-shi" class="header-anchor">.</a></h3><p><strong>查询所有用户</strong></p><p><img src="/2020/09/29/65228/image-20200930152549183.png" alt="查询所有用户"></p><p><strong>查询单个用户</strong></p><p><img src="/2020/09/29/65228/image-20200930153119334.png" alt="查询单个用户"></p><p><strong>新增一个用户</strong></p><p><img src="/2020/09/29/65228/image-20200930153226334.png" alt="新增一个用户"></p><p><img src="/2020/09/29/65228/image-20200930153314239.png" alt="新增成功"></p><p><strong>修改一个用户</strong></p><p><img src="/2020/09/29/65228/image-20200930153416081.png" alt="修改一个用户"></p><p><img src="/2020/09/29/65228/image-20200930153448924.png" alt="修改成功"></p><p><strong>删除一个用户</strong></p><p><img src="/2020/09/29/65228/image-20200930154023506.png" alt="删除一个用户"></p><p><img src="/2020/09/29/65228/image-20200930154130202.png" alt="移除成功"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-14-添加员工</title>
      <link href="/2020/09/29/17943.html"/>
      <url>/2020/09/29/17943.html</url>
      
        <content type="html"><![CDATA[<h2><span id="tian-jia-yuan-gong">添加员工</span><a href="#tian-jia-yuan-gong" class="header-anchor">.</a></h2><h2><span id="1-zeng-jia-tian-jia-an-niu">1、增加添加按钮</span><a href="#1-zeng-jia-tian-jia-an-niu" class="header-anchor">.</a></h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success btn-sm float-right<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/emp}<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/09/29/17943/image-20200929101600288.png" alt></p><h2><span id="2-tian-xie-tian-jia-ye-mian-add-html">2、填写添加 页面 <code>add.html</code></span><a href="#2-tian-xie-tian-jia-ye-mian-add-html" class="header-anchor">.</a></h2><blockquote><p>这里直接拷贝 list.html , 替换 main标签下的内容</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9 ml-sm-auto col-lg-10 pt-3 px-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/emp/add}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>LastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>海绵宝宝<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1176244270@qq.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check form-check-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check form-check-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>department<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department.id<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department:${departments}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${department.getDepartmentName()}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${department.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Birth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span>  <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>添加<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="3-tian-xie-tiao-zhuan-fang-fa-he-tian-jia-fang-fa">3、填写 跳转方法 和 添加方法</span><a href="#3-tian-xie-tiao-zhuan-fang-fa-he-tian-jia-fang-fa" class="header-anchor">.</a></h2><p><img src="/2020/09/29/17943/image-20200929183930668.png" alt></p><h2><span id="4-jie-guo-zhan-shi">4、结果展示</span><a href="#4-jie-guo-zhan-shi" class="header-anchor">.</a></h2><p><img src="/2020/09/29/17943/image-20200929184116743.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-15-修改和删除员工(含404)</title>
      <link href="/2020/09/29/48976.html"/>
      <url>/2020/09/29/48976.html</url>
      
        <content type="html"><![CDATA[<h1><span id="xiu-gai-yuan-gong">修改员工</span><a href="#xiu-gai-yuan-gong" class="header-anchor">.</a></h1><h2><span id="1-xiu-gai-list-html-ye-mian">1、修改<code>list.html</code>页面</span><a href="#1-xiu-gai-list-html-ye-mian" class="header-anchor">.</a></h2><p><img src="/2020/09/29/48976/image-20200929184414691.png" alt></p><h2><span id="2-bian-xie-edit-html-ye-mian">2、编写 edit.html页面</span><a href="#2-bian-xie-edit-html-ye-mian" class="header-anchor">.</a></h2><blockquote><p>替换 list.html中的main标签部分</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-9 ml-sm-auto col-lg-10 pt-3 px-4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name"><span class="token namespace">th:</span>action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/emp/add}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>LastName<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lastName<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getLastName()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Email<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getEmail()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Gender<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check form-check-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getGender() <span class="token punctuation">=</span><span class="token punctuation">=</span> 1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check form-check-inline<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-input<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>gender<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getGender() <span class="token punctuation">=</span><span class="token punctuation">=</span> 0}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-check-label<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>department<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department.id<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>department:${departments}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${department.getDepartmentName()}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${department.getId()}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>selected</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${employee.getDepartment().getId() <span class="token punctuation">=</span><span class="token punctuation">=</span> department.getId()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>Birth<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birth<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(employee.getBirth(),<span class="token punctuation">'</span>yyyy/MM/dd HH:mm:ss<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>修改<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="3-bian-xie-tiao-zhuan-fang-fa-he-xiu-gai-fang-fa">3、编写 跳转方法 和 修改方法</span><a href="#3-bian-xie-tiao-zhuan-fang-fa-he-xiu-gai-fang-fa" class="header-anchor">.</a></h2><p><img src="/2020/09/29/48976/image-20200929184854823.png" alt></p><h1><span id="shan-chu-yuan-gong">删除员工</span><a href="#shan-chu-yuan-gong" class="header-anchor">.</a></h1><h2><span id="1-xiu-gai-list-html-ye-mian">1、修改<code>list.html</code>页面</span><a href="#1-xiu-gai-list-html-ye-mian" class="header-anchor">.</a></h2><p><img src="/2020/09/29/48976/image-20200929184414691.png" alt></p><h2><span id="2-bian-xie-shan-chu-fang-fa">2、编写 删除方法</span><a href="#2-bian-xie-shan-chu-fang-fa" class="header-anchor">.</a></h2><p><img src="/2020/09/29/48976/image-20200929185343778.png" alt></p><h1><span id="404-ye-mian">404页面</span><a href="#404-ye-mian" class="header-anchor">.</a></h1><h2><span id="1-zai-templates-xia-zai-xin-jian-yi-ge-error-wen-jian-jia">1、在templates下载新建一个<code>error</code>文件夹</span><a href="#1-zai-templates-xia-zai-xin-jian-yi-ge-error-wen-jian-jia" class="header-anchor">.</a></h2><h2><span id="2-zai-zhe-ge-wen-jian-xia-de-ye-mian-bian-xie-404-html-ji-ke">2、在这个文件下的页面编写 <code>404.html</code>即可</span><a href="#2-zai-zhe-ge-wen-jian-xia-de-ye-mian-bian-xie-404-html-ji-ke" class="header-anchor">.</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-13-展示员工列表</title>
      <link href="/2020/09/28/63257.html"/>
      <url>/2020/09/28/63257.html</url>
      
        <content type="html"><![CDATA[<h1><span id="zhan-shi-yuan-gong-lie-biao">展示员工列表</span><a href="#zhan-shi-yuan-gong-lie-biao" class="header-anchor">.</a></h1><h2><span id="1-bian-xie-employeecontroller">1、编写EmployeeController</span><a href="#1-bian-xie-employeecontroller" class="header-anchor">.</a></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> EmployeeDao employeeDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/emps"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">list</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        Collection<span class="token operator">&lt;</span>Employee<span class="token operator">></span> employees <span class="token operator">=</span> employeeDao<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span> employees<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"list"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="2-ti-qu-gong-gong-ye-mian">2、提取公共页面</span><a href="#2-ti-qu-gong-gong-ye-mian" class="header-anchor">.</a></h2><p><strong>标签的使用</strong></p><ul><li><pre class="line-numbers language-java"><code class="language-java">th<span class="token operator">:</span>fragment<span class="token operator">=</span><span class="token string">"name(var)"</span> <span class="token comment" spellcheck="true">// 碎片</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><pre class="line-numbers language-java"><code class="language-java">th<span class="token operator">:</span>insert<span class="token operator">=</span><span class="token string">"~{commons::name(var)}"</span> <span class="token comment" spellcheck="true">//引入碎片 insert 会在当前标签中插入内容</span>orth<span class="token operator">:</span>replace<span class="token operator">=</span><span class="token string">"~{commons::name(var)}"</span> <span class="token comment" spellcheck="true">// replace 会替换当前标签</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2020/09/28/63257/image-20200928165518100.png" alt></p><p><img src="/2020/09/28/63257/image-20200928165607457.png" alt></p><h3><span id="3-yuan-gong-lie-biao-bian-li">3、员工列表遍历</span><a href="#3-yuan-gong-lie-biao-bian-li" class="header-anchor">.</a></h3><p><img src="/2020/09/28/63257/image-20200928165854471.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-12-登录拦截器</title>
      <link href="/2020/09/28/2908.html"/>
      <url>/2020/09/28/2908.html</url>
      
        <content type="html"><![CDATA[<h1><span id="deng-lu-lan-jie-qi">登录拦截器</span><a href="#deng-lu-lan-jie-qi" class="header-anchor">.</a></h1><h2><span id="1-xiu-gai-logincontroller">1、修改LoginController</span><a href="#1-xiu-gai-logincontroller" class="header-anchor">.</a></h2><p><img src="/2020/09/28/2908/image-20200928113110678.png" alt></p><h2><span id="2-bian-xie-deng-lu-lan-jie-qi">2、编写登录拦截器</span><a href="#2-bian-xie-deng-lu-lan-jie-qi" class="header-anchor">.</a></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginHandlerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Object loginUser <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginUser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>loginUser <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            request<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"没有权限，请先登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-zai-pei-zhi-lei-zhong-zhu-ce-lan-jie-qi">3、在配置类中注册拦截器</span><a href="#3-zai-pei-zhi-lei-zhong-zhu-ce-lan-jie-qi" class="header-anchor">.</a></h3><p><img src="/2020/09/28/2908/image-20200928113232783.png" alt></p><h3><span id="4-jie-guo-zhan-shi">4、结果展示</span><a href="#4-jie-guo-zhan-shi" class="header-anchor">.</a></h3><p><img src="/2020/09/28/2908/image-20200928113502567.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-11-登录功能实现</title>
      <link href="/2020/09/28/33815.html"/>
      <url>/2020/09/28/33815.html</url>
      
        <content type="html"><![CDATA[<h1><span id="deng-lu-gong-neng-shi-xian">登录功能实现</span><a href="#deng-lu-gong-neng-shi-xian" class="header-anchor">.</a></h1><h2><span id="1-xiu-gai-biao-dan">1、修改表单</span><a href="#1-xiu-gai-biao-dan" class="header-anchor">.</a></h2><p><img src="/2020/09/28/33815/image-20200928104732417.png" alt></p><h2><span id="2-bian-xie-logincontroller">2、编写LoginController</span><a href="#2-bian-xie-logincontroller" class="header-anchor">.</a></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LoginController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user/login"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">login</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String username<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> String password<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> username<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"liuyou"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"redirect:/main.html"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"用户名或密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyMvcConfig</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> LocaleResolver <span class="token function">localeResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyLocaleResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addViewControllers</span><span class="token punctuation">(</span>ViewControllerRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 视图跳转</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/index.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        registry<span class="token punctuation">.</span><span class="token function">addViewController</span><span class="token punctuation">(</span><span class="token string">"/main.html"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"dashboard"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="3-jie-guo-zhan-shi">3、结果展示</span><a href="#3-jie-guo-zhan-shi" class="header-anchor">.</a></h2><p><img src="/2020/09/28/33815/image-20200928105013907.png" alt></p><h1><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h1><h2><span id="wei-zao-de-shu-ju-biao-map">伪造的数据表(Map)</span><a href="#wei-zao-de-shu-ju-biao-map" class="header-anchor">.</a></h2><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DepartmentDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模拟数据表(事先存在的 -- static)  &lt;索引, 记录></span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Department<span class="token operator">></span> departments <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        departments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">"教学部"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">"市场部"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token string">"教研部"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">"运营部"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        departments<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">"后勤部"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 以下 是 dao的操作 只是没有数据库的连接 和 释放</span>    <span class="token comment" spellcheck="true">// 获取所有部门信息</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>Department<span class="token operator">></span> <span class="token function">getDepartments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> departments<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过id获取部门</span>    <span class="token keyword">public</span> Department <span class="token function">getDepartmentById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> departments<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmployeeDao</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//模拟数据表(事先存在的 -- static)  &lt;索引, 记录></span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Employee<span class="token operator">></span> employees <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> DepartmentDao departmentDao<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 主键自增</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Integer initId <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        employees <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">,</span><span class="token string">"123@qq.com"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">"教学部"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"BB"</span><span class="token punctuation">,</span><span class="token string">"345@qq.com"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">"市场部"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">"CC"</span><span class="token punctuation">,</span><span class="token string">"234@qq.com"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token string">"教研部"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">"DD"</span><span class="token punctuation">,</span><span class="token string">"456@qq.com"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">,</span><span class="token string">"运营部"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">"EE"</span><span class="token punctuation">,</span><span class="token string">"146@qq.com"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Department</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">,</span><span class="token string">"后勤部"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 以下 是 dao的操作 只是没有数据库的连接 和 释放</span>    <span class="token comment" spellcheck="true">// 获取所有员工信息</span>    <span class="token keyword">public</span> Collection<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> employees<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过id获取员工</span>    <span class="token keyword">public</span> Employee <span class="token function">getEmployeeById</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> employees<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 添加 一个员工</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span>Employee employee<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            employee<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>initId<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 外键</span>        employee<span class="token punctuation">.</span><span class="token function">setDepartment</span><span class="token punctuation">(</span>departmentDao<span class="token punctuation">.</span><span class="token function">getDepartmentById</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getDepartment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        employees<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>employee<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>employee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 删除 一个员工</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span>Integer id<span class="token punctuation">)</span><span class="token punctuation">{</span>        employees<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="shi-ti-lei">实体类</span><a href="#shi-ti-lei" class="header-anchor">.</a></h2><blockquote><p>需要安装lombok插件，及依赖</p></blockquote><p><strong>Department实体类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Department</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6619420117724195L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String departmentName<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Employee实体类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>5357243432996969444L<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String lastName<span class="token punctuation">;</span>    <span class="token keyword">private</span> String email<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer gender<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0 : 女 1 : 男</span>    <span class="token keyword">private</span> Date birth<span class="token punctuation">;</span>    <span class="token keyword">private</span> Department department<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM 探究</title>
      <link href="/2020/09/20/19459.html"/>
      <url>/2020/09/20/19459.html</url>
      
        <content type="html"><![CDATA[<h1><span id="jvm-tan-jiu">JVM探究</span><a href="#jvm-tan-jiu" class="header-anchor">.</a></h1><h3><span id="1-jvm-de-wei-zhi">1、JVM的位置</span><a href="#1-jvm-de-wei-zhi" class="header-anchor">.</a></h3><p><img src="/2020/09/20/19459/image-20200921155105828.png" alt></p><blockquote><p>在操作系统之上</p></blockquote><h3><span id="2-jvm-de-ti-xi-jie-gou">2、JVM的体系结构</span><a href="#2-jvm-de-ti-xi-jie-gou" class="header-anchor">.</a></h3><p><img src="/2020/09/20/19459/image-20200921154553650.png" alt></p><blockquote><p>方法区 和 堆 是 线程共享的。<strong>我们经常听到的JVM调优主要在这两个上（堆更多）</strong></p></blockquote><blockquote><p>JVM栈 、本地方法栈、程序计数器是 线程私有的</p></blockquote><p><img src="/2020/09/20/19459/timg.jpg" alt="更详细"></p><h3><span id="3-lei-jia-zai-qi">3、类加载器</span><a href="#3-lei-jia-zai-qi" class="header-anchor">.</a></h3><h4><span id="zuo-yong">作用：</span><a href="#zuo-yong" class="header-anchor">.</a></h4><ul><li>加载Class文件  </li></ul><blockquote><p>classpath到底指什么(这边文章写得很详细)：<a href="https://segmentfault.com/a/1190000015802324" target="_blank" rel="noopener">https://segmentfault.com/a/1190000015802324</a></p></blockquote><h4><span id="fen-lei">分类：</span><a href="#fen-lei" class="header-anchor">.</a></h4><blockquote><p> 分类来自：<a href="https://www.jianshu.com/p/1e4011617650" target="_blank" rel="noopener">https://www.jianshu.com/p/1e4011617650</a></p></blockquote><ul><li>应用程序加载器 AppClassLoader <code>定义类编译输出目录(包含资源)</code><ul><li>java编写，加载程序所在的目录，如<code>user.dir</code>所在的位置的<code>class</code></li></ul></li><li>扩展类/平台加载器 ExtClassLoader   <code>/jre/lib/ext  --  JDK 11之前</code><ul><li><code>java</code>编写，加载扩展库，如<code>classpath</code>中的<code>jre</code> ，<code>javax.*</code>或者<br><code>java.ext.dir</code> 指定位置中的类，开发者可以直接使用标准扩展类加载器。</li></ul></li><li>启动类/根加载器 BootstrapClassLoader <code>rt.jar</code><ul><li><code>c++</code>编写，加载<code>java</code>核心库 <code>java.*</code>,构造<code>ExtClassLoader</code>和<code>AppClassLoader</code>。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作</li></ul></li><li>用户自定义加载器<ul><li>实现 <code>ClassLoader</code>这个抽象类的类</li></ul></li></ul><blockquote><p>拓展： java与c++相比，去掉了 指针和 内存管理</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ClassLoaderTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ClassLoaderTest test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassLoaderTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Class<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">ClassLoaderTest</span><span class="token operator">></span> aClass <span class="token operator">=</span> test<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取 该Class 的类加载器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// AppClassLoader@3fee733d</span>        <span class="token comment" spellcheck="true">// 获取其 父类加载器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// PlatformClassLoader@3fa77460 （JDK1.9之前 为ExtClassLoader）</span>        <span class="token comment" spellcheck="true">// 获取其 父类的父类记载器</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>aClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null 不是没有父加载器，而是无法获取 BootstrapClassLoader</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-shuang-qin-wei-pai-ji-zhi">4、双亲委派机制</span><a href="#4-shuang-qin-wei-pai-ji-zhi" class="header-anchor">.</a></h3><blockquote><p>为了保证安全</p></blockquote><p>当某个类加载器需要加载某个<code>.class</code>文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作（直到启动类加载器），如果上级的类加载器没有加载，自己才会去加载这个类。</p><p><strong>大致可以划分为4步</strong></p><ol><li>类加载器接收到类加载的请求  <code>对应加载器AppClassLoader</code></li><li>他会将这个请求委托给父类加载器，一致往上委托，直到启动类加载器  <code>对应加载器 BootstrapClassLoader</code></li><li>加载器检查 能否加载 这个类  （<code>此时加载器 先是启动类，然后其子类</code>）<ol><li>如果能，就结束，使用当前的加载器</li><li>如果不能，就抛出异常，通知其子加载器 加载 该类</li></ol></li><li>重复步骤<code>3</code></li></ol><p>自定义类 委托顺序： <code>AppClassLoader --&gt; ExtClassloader --&gt; BootStrapClassLoader</code></p><p><img src="/2020/09/20/19459/image-20200921211911282.png" alt="自定义java.lang.String"></p><h3><span id="5-sha-xiang-an-quan-ji-zhi">5、沙箱安全机制</span><a href="#5-sha-xiang-an-quan-ji-zhi" class="header-anchor">.</a></h3><blockquote><p>Java安全的核心就是 <strong>Java沙箱</strong></p></blockquote><h4><span id="shi-me-shi-sha-xiang">什么是沙箱？</span><a href="#shi-me-shi-sha-xiang" class="header-anchor">.</a></h4><p>​    沙箱是一个限制程序运行的环境。</p><h4><span id="shi-me-shi-sha-xiang-ji-zhi">什么是沙箱机制？</span><a href="#shi-me-shi-sha-xiang-ji-zhi" class="header-anchor">.</a></h4><p>​    沙箱机制就是将Java代码限定在虚拟机（JVM）特定的运行范围中，并且严格限制代码对本地资源访问，通过这种措施来保证对代码的有效隔离，防止对本地系统造成破坏。</p><h4><span id="zuo-yong">作用</span><a href="#zuo-yong" class="header-anchor">.</a></h4><ul><li>主要是限制系统的资源访问</li></ul><blockquote><p>系统资源：CPU、内存、文件系统、网络。</p></blockquote><blockquote><p>不同一别的沙箱对这些资源的访问的限制也不一样</p></blockquote><blockquote><p>所有的java程序运行都可以指定沙箱，可以定制安全策略</p></blockquote><h4><span id="qi-ji-ben-zu-jian">其基本组件</span><a href="#qi-ji-ben-zu-jian" class="header-anchor">.</a></h4><ul><li><p>字节码校验器：确保Java类文件遵循Java语言规范。这样可以帮助Java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类</p></li><li><p>类装载器：其中装载器在三个方面对 Java 沙箱起作用</p><ul><li>防止恶意代码去干涉善意的代码  <code>双亲委派机制</code></li><li>守护了被信任的类库边界 <code>双亲委派机制</code></li><li>将代码归入保护域，确定了代码可以进行那些操作  ``</li></ul></li></ul><p><img src="/2020/09/20/19459/image-20200922142652306.png" alt></p><h3><span id="6-native-guan-jian-zi">6、<code>native</code>关键字</span><a href="#6-native-guan-jian-zi" class="header-anchor">.</a></h3><blockquote><p>native 修饰的方法 都是调用 底层 C 写的代码（C语言的库），使用的栈 是 本地方法栈</p></blockquote><p>通过Java本地方法接口（<code>JNI</code> ：<code>Native Method Interface</code>）进行对其进行调用</p><h4><span id="jni-zuo-yong">JNI作用</span><a href="#jni-zuo-yong" class="header-anchor">.</a></h4><ul><li>为了扩展Java的使用，融合不同的编程语言为Java所用，如 最初C，C++</li></ul><h3><span id="7-cheng-xu-ji-cun-qi">7、程序寄存器</span><a href="#7-cheng-xu-ji-cun-qi" class="header-anchor">.</a></h3><p><code>线程私有</code></p><blockquote><p>每个线程都有一个程序计数器，是线程是有的，就是一个指针，指向方法区中的方法字节码（用来存储一条指令的地址— 即将执行的指令的），在执行引擎读取下一条指令，是一个非常小的内存空间，几乎可以忽略不计。</p></blockquote><h3><span id="8-fang-fa-qu">8、方法区</span><a href="#8-fang-fa-qu" class="header-anchor">.</a></h3><p><code>线程共享</code></p><blockquote><p>静态方法、常量、类信息（构造方法，接口定义），运行时的常量池存在方法区中， </p><p>但是 实例变量存在堆内存中，和方法区无关</p></blockquote><p><code>static</code>，<code>final</code>，<code>Class</code>、<code>Constants Pool</code></p><h4><span id="zhu-yi">注意：</span><a href="#zhu-yi" class="header-anchor">.</a></h4><ul><li>JDK</li></ul><h3><span id="9-zhan">9、栈</span><a href="#9-zhan" class="header-anchor">.</a></h3><p><code>线程私有</code></p><p><code>不存在垃圾回收机制</code></p><ul><li><p>它是一种运算受限的线性表。</p></li><li><p>限定仅在表尾进行插入和删除操作的线性表。</p></li><li><p>这一端被称为栈顶，相对地，把另一端称为栈底。</p></li><li><p>向一个栈插入新元素又称作进栈、入栈或压栈，它是把新元素放到栈顶元素的上面，使之成为新的栈顶元素；</p></li><li><p>从一个栈删除元素又称作出栈或退栈，它是把栈顶元素删除掉，使其相邻的元素成为新的栈顶元素。</p></li></ul><h4><span id="zhan-yun-xing-yuan-li">栈运行原理</span><a href="#zhan-yun-xing-yuan-li" class="header-anchor">.</a></h4><ul><li><strong>栈帧</strong></li></ul><p><img src="/2020/09/20/19459/u=1772997164,1356201091&fm=26&gp=0.jpg" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-10-国际化(i18n)</title>
      <link href="/2020/09/18/30762.html"/>
      <url>/2020/09/18/30762.html</url>
      
        <content type="html"><![CDATA[<h1><span id="guo-ji-hua-internationalization-i18n">国际化（Internationalization，i18n）</span><a href="#guo-ji-hua-internationalization-i18n" class="header-anchor">.</a></h1><blockquote><p>必须保证 项目编码为UTF-8</p></blockquote><p>国际化信息配置：<code>MessageSourceAutoConfiguration</code></p><p>国际化请求解释器：<code>AcceptHeaderLocaleResolver</code></p><p><code>LocaleResolver</code></p><h2><span id="di-yi-bu-chuang-jian-wen-jian">第一步 创建文件</span><a href="#di-yi-bu-chuang-jian-wen-jian" class="header-anchor">.</a></h2><p><img src="/2020/09/18/30762/image-20200918133149062.png" alt></p><h3><span id="ye-mian-de-xiao-guo-wei-jia-guo-ji-hua-qian">页面的效果（未加 国际化前）</span><a href="#ye-mian-de-xiao-guo-wei-jia-guo-ji-hua-qian" class="header-anchor">.</a></h3><p><img src="/2020/09/18/30762/image-20200918133257135.png" alt></p><h3><span id="ye-mian-zui-chu-dai-ma">页面最初代码</span><a href="#ye-mian-zui-chu-dai-ma" class="header-anchor">.</a></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1, shrink-to-fit<span class="token punctuation">=</span>no<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Signin Template for Bootstrap<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- Bootstrap core CSS --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/bootstrap.min.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!-- Custom styles for this template --></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/signin.css}<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text-center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-signin<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dashboard.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mb-4<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/img/bootstrap-solid.svg}<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span> <span class="token attr-name">height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>72<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>h3 mb-3 font-weight-normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Please sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Username<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Username<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">autofocus</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sr-only<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Password<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox mb-3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>remember-me<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Remember me        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-lg btn-primary btn-block<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Sign in<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mt-5 mb-3 text-muted<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>© 2017-2018<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>中文<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-sm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>English<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="di-er-bu-bian-xie-wen-jian">第二步 编写文件</span><a href="#di-er-bu-bian-xie-wen-jian" class="header-anchor">.</a></h2><p><img src="/2020/09/18/30762/image-20200918133746366.png" alt></p><h2><span id="di-san-bu-xiu-gai-ye-mian-dai-ma">第三步 修改页面代码</span><a href="#di-san-bu-xiu-gai-ye-mian-dai-ma" class="header-anchor">.</a></h2><p><img src="/2020/09/18/30762/image-20200918135756077.png" alt></p><h3><span id="ye-mian-geng-gai-hou-de-xiao-guo">页面更改后的效果</span><a href="#ye-mian-geng-gai-hou-de-xiao-guo" class="header-anchor">.</a></h3><p><img src="/2020/09/18/30762/image-20200918135943533.png" alt></p><h2><span id="di-si-bu-zhong-ying-wen-tiao-zhuan">第四步 中英文跳转</span><a href="#di-si-bu-zhong-ying-wen-tiao-zhuan" class="header-anchor">.</a></h2><p><strong>自定义本地解析器编写</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyLocaleResolver</span> <span class="token keyword">implements</span> <span class="token class-name">LocaleResolver</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Locale <span class="token function">resolveLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Locale defaultLocale <span class="token operator">=</span> Locale<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String lang <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"lang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>StringUtils<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> lang<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lang<span class="token punctuation">)</span><span class="token punctuation">;</span>            defaultLocale <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Locale</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> defaultLocale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLocale</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Locale locale<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>在配置类中注册</strong><br><img src="/2020/09/18/30762/image-20200928081526048.png" alt></p><blockquote><p>完成后就可以使用 中英文切换了</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-09-MVC扩展</title>
      <link href="/2020/09/14/1464.html"/>
      <url>/2020/09/14/1464.html</url>
      
        <content type="html"><![CDATA[<h2><span id="jie-guan-springmvc">接管SpringMVC</span><a href="#jie-guan-springmvc" class="header-anchor">.</a></h2><h2><span id="enablewebmvc"><code>@EnableWebMvc</code></span><a href="#enablewebmvc" class="header-anchor">.</a></h2><blockquote><p>在自定义的WebMvcConfig类上加上这个注解表示，全面接管MVC配置</p></blockquote><p><img src="/2020/09/14/1464/image-20201102191355618.png" alt></p><p><code>DelegatingWebMvcConfiguration</code> 作用是 从容器中获取所有的WebMvcConfig</p><p><img src="/2020/09/14/1464/image-20201102191657366.png" alt></p><p><strong>当我们使用<code>＠EnableWebMvc</code>这个注解，将会导入<code>DelegatingWebMvcConfiguration</code> 这个类，由于这类是继承自 <code>WebMvcConfigurationSupport</code>，所以<code>WebMvcAutoConfiguration</code>会失效</strong></p><p><img src="/2020/09/14/1464/image-20201102191856813.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-08-Thymeleaf模板引擎</title>
      <link href="/2020/09/14/3498.html"/>
      <url>/2020/09/14/3498.html</url>
      
        <content type="html"><![CDATA[<h1><span id="thymeleaf-mo-ban-yin-qing">Thymeleaf模板引擎</span><a href="#thymeleaf-mo-ban-yin-qing" class="header-anchor">.</a></h1><blockquote><p>本文转载自：<a href="https://fanlychie.github.io/post/thymeleaf.html" target="_blank" rel="noopener">https://fanlychie.github.io/post/thymeleaf.html</a></p></blockquote><h3><span id="tian-jia-qi-dong-qi">添加启动器</span><a href="#tian-jia-qi-dong-qi" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-thymeleaf<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="ji-ben-biao-da-shi">基本表达式</span><a href="#ji-ben-biao-da-shi" class="header-anchor">.</a></h3><ul><li><code>${}</code><ul><li>取上下文变量内容</li></ul></li><li><code>#{}</code><ul><li>取国际化内容</li></ul></li><li><code>@{}</code><ul><li>取链接，静态资源 </li></ul></li><li><code>*{}</code><ul><li>取对象的属性值</li></ul></li><li><code>~{}</code><ul><li>取片段</li></ul></li></ul><blockquote><p>Thymeleaf 是一个服务器端 Java 模板引擎，能够处理 HTML、XML、CSS、JAVASCRIPT 等模板文件。Thymeleaf 模板可以直接当作静态原型来使用，它主要目标是为开发者的开发工作流程带来优雅的自然模板，也是 Java 服务器端 HTML5 开发的理想选择。</p></blockquote><h2><span id="1-chuang-jian-mo-ban-wen-jian">1. 创建模板文件</span><a href="#1-chuang-jian-mo-ban-wen-jian" class="header-anchor">.</a></h2><p>创建一个 HTML 模板文件：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Index Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${message}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Welcome to BeiJing!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过<code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;</code>引入 Thymeleaf 命名空间。<code>th:text</code>用于处理<code>p</code>标签体的文本内容。该模板文件直接在任何浏览器中正确显示，浏览器会自动忽略它们不能理解的属性<code>th:text</code>。但这不是一个真正有效的 HTML5 文档，因为 HTML5 规范是不允许使用<code>th:*</code>这些非标准属性的。我们可以切换到 Thymeleaf 的<code>data-th-*</code>语法，以此来替换<code>th:*</code>语法：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>th</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.thymeleaf.org<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Index Page<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Content-Type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html; charset<span class="token punctuation">=</span>UTF-8<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">data-th-text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${message}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Welcome to BeiJing!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>HTML5 规范是允许<code>data-*</code>这样自定义的属性的。<code>th:*</code>和<code>data-th-*</code>这两个符号是完全等效且可以互换的。但为了简单直观和代码的紧凑性，本文采用<code>th:*</code>的表示形式。</p><h2><span id="2-biao-zhun-biao-da-shi-yu-fa">2. 标准表达式语法</span><a href="#2-biao-zhun-biao-da-shi-yu-fa" class="header-anchor">.</a></h2><p>Thymeleaf 提供了非常丰富的标准表达式语法，总共有 8 大类：</p><ul><li>简单表达式</li><li>字面值</li><li>文本操作</li><li>算术运算</li><li>布尔运算</li><li>比较和相等</li><li>条件运算</li><li>无操作符</li></ul><h3><span id="2-1-jian-dan-biao-da-shi">2.1 简单表达式</span><a href="#2-1-jian-dan-biao-da-shi" class="header-anchor">.</a></h3><table><thead><tr><th align="center">语法</th><th align="center">名称</th><th align="center">描述</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">${…}</td><td align="center">Variable Expressions</td><td align="center">变量表达式</td><td align="center">取出上下文变量的值</td></tr><tr><td align="center">*{…}</td><td align="center">Selection Variable Expressions</td><td align="center">选择变量表达式</td><td align="center">取出选择的对象的属性值</td></tr><tr><td align="center">#{…}</td><td align="center">Message Expressions</td><td align="center">消息表达式</td><td align="center">使文字消息国际化，I18N</td></tr><tr><td align="center">@{…}</td><td align="center">Link URL Expressions</td><td align="center">链接表达式</td><td align="center">用于表示各种超链接地址</td></tr><tr><td align="center">~{…}</td><td align="center">Fragment Expressions</td><td align="center">片段表达式</td><td align="center">引用一段公共的代码片段</td></tr></tbody></table><h4><span id="2-1-1">2.1.1 ${…}</span><a href="#2-1-1" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/standard-expression-syntax/variables"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">variables</span><span class="token punctuation">(</span>ModelMap model<span class="token punctuation">,</span> HttpSession session<span class="token punctuation">)</span> <span class="token punctuation">{</span>    model<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"now"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    model<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">,</span> <span class="token string">"Welcome to BeiJing!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"fanlychie"</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过变量表达式<code>${}</code>取出上下文环境中的<code>message</code>变量：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Welcome to BeiJing! --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${message}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>它相当于：</p><pre class="line-numbers language-java"><code class="language-java">ctx<span class="token punctuation">.</span><span class="token function">getVariable</span><span class="token punctuation">(</span><span class="token string">"message"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4><span id="2-1-2">2.1.2 *{…}</span><a href="#2-1-2" class="header-anchor">.</a></h4><p>变量表达式<code>${}</code>是面向整个上下文的，而选择变量表达式<code>*{}</code>的上下文是父标签（<code>th:object</code>）所选择的对象：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>object</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{sex}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>它相当于：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.sex}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果对象没有被选择，那么，<code>*{}</code>和<code>${}</code>表达式所达到的效果是完全相同的：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*{session.user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4><span id="2-1-3">2.1.3 #{…}</span><a href="#2-1-3" class="header-anchor">.</a></h4><p>消息表达式可用于国际化文字信息。首先我们来了解一下 i18n 资源文件的命名规则：</p><ul><li>basename.properties</li><li>basename_language.properties</li><li>basename_language_country.properties</li></ul><p><code>basename</code>是自定义的资源文件名称，<code>language</code>和<code>country</code>必须是 Java 支持的语言和国家。<code>basename.properties</code>是缺省加载的资源文件，当客户端根据本地语言查找不到相关的资源文件时，则使用该配置文件。</p><p>创建文件<code>src/main/resources/messages.properties</code></p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">welcome.message</span> <span class="token punctuation">=</span> <span class="token attr-value">北京欢迎你！</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建文件<code>src/main/resources/messages_en_US.properties</code></p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">welcome.message</span> <span class="token punctuation">=</span> <span class="token attr-value">Welcome to BeiJing!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在 IntelliJ IDEA 编辑视图：</p><p><img src="/2020/09/14/3498/i18n-messages.png" alt></p><p><code>messages</code>是 Spring Boot 加载资源文件默认采用的名称（<code>basename</code>），如果你所使用的资源文件名称不是以<code>messages</code>命名或所使用的资源文件不是在<code>src/main/resources</code>根目录，你可以通过<code>spring.messages.basename</code>属性来做具体的配置。如，资源文件<code>messages.properties</code>和<code>messages_en_US.properties</code>假设它们所在的目录位置是<code>src/main/resources/i18n</code>。</p><p>application.properties 配置示例：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">:</span><span class="token attr-value">i18n/messages</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>application.yml 配置示例：</p><pre class="line-numbers language-yaml"><code class="language-yaml">spring  messages    <span class="token key atrule">basename</span><span class="token punctuation">:</span> i18n/messages<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>静态文本消息示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 北京欢迎你！ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{welcom.message}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>消息表达式<code>#{}</code>是不允许直接处理非静态的文本消息的，但是你可以在资源文件中通过使用占位符<code>{}</code>来处理非静态的文本消息：</strong></p><p>messages.properties 配置示例：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">welcome.user.message</span> <span class="token punctuation">=</span> <span class="token attr-value">{0}, 北京欢迎你！</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>messages_en_US.properties 配置示例：</p><pre class="line-numbers language-properties"><code class="language-properties"><span class="token attr-name">welcome.user.message</span> <span class="token punctuation">=</span> <span class="token attr-value">{0}, Welcome to BeiJing!</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>非静态文本消息，以参数的形式传递变量的值：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- fanlychie, 北京欢迎你！ --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#{welcome.user.message(${session.user.name})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4><span id="2-1-4">2.1.4 @{…}</span><a href="#2-1-4" class="header-anchor">.</a></h4><p>链接表达式<code>@{}</code>是专门用来处理 URL 链接地址的。</p><p>绝对地址示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- https://fanlychie.github.io --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{https://fanlychie.github.io}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>页面相对地址示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- commons/base.html --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{commons/base.html}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>上下文相对地址（相对于当前的服务）示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- /css/mian.css --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/mian.css}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>服务器相对地址（相对于部署在同一个服务器中的不同服务）示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- /image/upload --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{~/image/upload}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>参数使用示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- /css/mian.css?v=1.0 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/css/mian.css(v<span class="token punctuation">=</span>1.0)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- /user/order?username=fanlychie --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/order(username<span class="token punctuation">=</span>${session.user.name})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- /user/order?username=fanlychie&amp;status=PAIED --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/order(username<span class="token punctuation">=</span>${session.user.name},status<span class="token punctuation">=</span><span class="token punctuation">'</span>PAIED<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- /user/fanlychie/info --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/{username}/info(username<span class="token punctuation">=</span>${session.user.name})}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-1-5">2.1.5 ~{…}</span><a href="#2-1-5" class="header-anchor">.</a></h4><p>片段表达式<code>~{}</code>可以用来引用一段公共的 HTML 代码片段。</p><table><thead><tr><th align="center">语法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">~{templatename}</td><td align="center">引用整个模板文件的代码片段</td></tr><tr><td align="center">~{templatename :: selector}</td><td align="center">selector 可以是 th:fragment 指定的名称或其他选择器。 如类选择器、ID选择器等</td></tr><tr><td align="center">~{::selector}</td><td align="center">相当于 ~{this :: selector}，表示引用当前模板定义的代码片段</td></tr></tbody></table><p>在 Thymeleaf 模板文件中，你可以使用<code>th:fragment</code>属性来定义一段公共的代码片段，然后你可以通过使用<code>th:insert</code>、<code>th:replace</code>、<code>th:include</code>（Thymeleaf 3.0 开始不再推荐使用，本文也将不再介绍它）属性来将这些公共的代码片段引入到模板文件中来。</p><p>src/main/resources/templates/base.html，通过<code>th:fragment</code>属性定义一段公共的代码片段：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>footerFragment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token entity" title="&copy;">&amp;copy;</span> 2017 fanlychie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>src/main/resources/templates/index.html，通过<code>th:insert</code>属性引用一段公共的代码片段：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{base :: footerFragment}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>其中，<code>~{}</code>是可选的，我们可以去掉这层的包裹：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>base :: footerFragment<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若 index.html 与 base.html 不在同级目录，如 templates/commons/base.html：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{commons/base :: footerFragment}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>th:fragment</code>属性定义代码片段时，你还可以声明一组参数：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>fragment</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>crumbs(parent, child)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${parent}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>i</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${child}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>i</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--&lt;i>用户中心&lt;/i>&lt;i>我的订单&lt;/i>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>::crumbs(<span class="token punctuation">'</span>用户中心<span class="token punctuation">'</span>, <span class="token punctuation">'</span>我的订单<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此外，我们还可以通过类选择器、ID选择器等来引用公共的代码片段：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{base :: #footer}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>除了<code>th:insert</code>属性<code>th:replace</code>也可以用来引用公共的代码片段。不同的是，<code>th:insert</code>是直接将代码片段插入到标签体内，而<code>th:replace</code>则是用代码片段直接替换标签体内容。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--&lt;div>    &lt;div id="footer">© 2017 fanlychie&lt;/div>&lt;/div>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>insert</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{base :: footerFragment}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--&lt;div id="footer">© 2017 fanlychie&lt;/div>--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>replace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>~{base :: footerFragment}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-1-6-nei-zhi-dui-xiang">2.1.6 内置对象</span><a href="#2-1-6-nei-zhi-dui-xiang" class="header-anchor">.</a></h4><table><thead><tr><th align="center">对象</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/context/IContext.java" target="_blank" rel="noopener">#ctx</a></td><td align="center">上下文对象</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/context/IContext.java" target="_blank" rel="noopener">#vars</a></td><td align="center">同 #ctx，表示上下文变量</td></tr><tr><td align="center">#locale</td><td align="center">上下文本地化（特定的地理区域）变量，可参考 java.util.Locale</td></tr><tr><td align="center">#request</td><td align="center">HttpServletRequest 对象，可参考 javax.servlet.http.HttpServletRequest</td></tr><tr><td align="center">#response</td><td align="center">HttpServletResponse 对象，可参考 javax.servlet.http.HttpServletResponse</td></tr><tr><td align="center">#session</td><td align="center">HttpSession 对象，可参考 javax.servlet.http.HttpSession</td></tr><tr><td align="center">#servletContext</td><td align="center">ServletContext 对象，可参考 javax.servlet.ServletContext</td></tr></tbody></table><p><code>#ctx</code>示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- zh_CN --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#ctx.getLocale()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Welcome to BeiJing! --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#ctx.getVariable(<span class="token punctuation">'</span>message<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- true --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#ctx.containsVariable(<span class="token punctuation">'</span>message<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>#vars</code>示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- zh_CN --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#vars.getLocale()}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- Welcome to BeiJing! --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#vars.getVariable(<span class="token punctuation">'</span>message<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- true --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#vars.containsVariable(<span class="token punctuation">'</span>message<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>#locale</code>示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- zh_CN --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#locale}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- CN --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#locale.country}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 中国 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#locale.displayCountry}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- zh --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#locale.language}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 中文 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#locale.displayLanguage}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 中文 (中国) --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#locale.displayName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>#request</code>示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- HTTP/1.1 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.protocol}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- http --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.scheme}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- localhost --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.serverName}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 8080 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.serverPort}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- GET --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.method}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- /standard-expression-syntax/variables --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.requestURI}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- http://localhost:8080/standard-expression-syntax/variables --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.requestURL}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- /standard-expression-syntax/variables --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.servletPath}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- java.util.Collections$3@203646fe --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.parameterNames}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- {q=[Ljava.lang.String;@3308c69f} --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.parameterMap}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- q=expression --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#request.queryString}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，请求地址的 URL 参数直接通过<code>#request.x</code>是取不出来的，需要使用<code>param.x</code>语法来取出。如，URL：<code>/standard-expression-syntax/variables?q=expression</code>，取出 q 参数的正确姿势：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${param.q}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>#response</code>示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 200 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#response.status}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 8192 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#response.bufferSize}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- UTF-8 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#response.characterEncoding}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- text/html;charset=UTF-8 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#response.contentType}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>#session</code>示例：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 2BCB2A0EACFF2D9D249D9799431B5127 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#session.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 1499786693244 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#session.lastAccessedTime}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- fanlychie --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#session.getAttribute(<span class="token punctuation">'</span>user<span class="token punctuation">'</span>).name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意，放到会话里面的对象直接通过<code>#session.x</code>是取不出来的，需要使用<code>session.x</code>语法来取出。如，取出会话里面的 user 对象的正确姿势：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${session.user.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4><span id="2-1-7-gong-ju-lei">2.1.7 工具类</span><a href="#2-1-7-gong-ju-lei" class="header-anchor">.</a></h4><table><thead><tr><th align="center">对象</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Messages.java" target="_blank" rel="noopener">#messages</a></td><td align="center">消息工具类，与 ＃{…} 作用相同</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Uris.java" target="_blank" rel="noopener">#uris</a></td><td align="center">地址相关的工具类</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Conversions.java" target="_blank" rel="noopener">#conversions</a></td><td align="center">对象转换工具类</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Dates.java" target="_blank" rel="noopener">#dates</a></td><td align="center">日期时间工具类</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Calendars.java" target="_blank" rel="noopener">#calendars</a></td><td align="center">日历工具类</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Numbers.java" target="_blank" rel="noopener">#numbers</a></td><td align="center">数字工具类</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Strings.java" target="_blank" rel="noopener">#strings</a></td><td align="center">字符串工具类</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Objects.java" target="_blank" rel="noopener">#objects</a></td><td align="center">对象工具类</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Bools.java" target="_blank" rel="noopener">#bools</a></td><td align="center">布尔工具类</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Arrays.java" target="_blank" rel="noopener">#arrays</a></td><td align="center">数组工具类</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Lists.java" target="_blank" rel="noopener">#lists</a></td><td align="center">List 工具类</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Sets.java" target="_blank" rel="noopener">#sets</a></td><td align="center">Set 工具类</td></tr><tr><td align="center"><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Maps.java" target="_blank" rel="noopener">#maps</a></td><td align="center">Map 工具类</td></tr></tbody></table><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- false --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#strings.isEmpty(message)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 2017-07-12 00:37:25 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${#dates.format(now, <span class="token punctuation">'</span>yyyy-MM-dd HH:mm:ss<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-2-zi-mian-zhi">2.2 字面值</span><a href="#2-2-zi-mian-zhi" class="header-anchor">.</a></h3><p>所谓字面值，首先它不是一个变量，它是一个具体的确切的值，通常这些值是比较简单的，例如：<code>18</code>、<code>&#39;welcome&#39;</code>等，它们没有名称，以至于我们只能用值来称呼它们，因此我们称其为字面值。</p><h4><span id="2-2-1-wen-zi-zi-mian-zhi">2.2.1 文字字面值</span><a href="#2-2-1-wen-zi-zi-mian-zhi" class="header-anchor">.</a></h4><p>文字字面值是用单引号引起来的任何字符内容，如果字符内容里面含有单引号，则需要进行转义：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Welcome to BeiJing! --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>Welcome to BeiJing!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 'Welcome to BeiJing!' --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>\<span class="token punctuation">'</span>Welcome to BeiJing!\<span class="token punctuation">'</span><span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-2-2-shu-zi-zi-mian-zhi">2.2.2 数字字面值</span><a href="#2-2-2-shu-zi-zi-mian-zhi" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 2017 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2017<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 2018 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2017 + 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-2-3-bu-er-zi-mian-zhi">2.2.3 布尔字面值</span><a href="#2-2-3-bu-er-zi-mian-zhi" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- false --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1 <span class="token punctuation">></span> 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 否 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1 <span class="token punctuation">></span> 2 ? <span class="token punctuation">'</span>是<span class="token punctuation">'</span> : <span class="token punctuation">'</span>否<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-2-4-kong-zi-mian-zhi">2.2.4 空字面值</span><a href="#2-2-4-kong-zi-mian-zhi" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- false --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user <span class="token punctuation">=</span><span class="token punctuation">=</span> null}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4><span id="2-2-5-zi-mian-ling-pai">2.2.5 字面令牌</span><a href="#2-2-5-zi-mian-ling-pai" class="header-anchor">.</a></h4><p>字面令牌（Literal Tokens）的内容只能含有（不能含有空格、特殊符号等）：</p><ul><li>大写或小写的字母、中文等不含空格和特殊符号的文本</li><li>0 到 9 的数字</li><li>中括号</li><li>下划线</li><li>连字符（-）</li><li>点符号（.）</li></ul><p>实际上，数字、布尔和空字面值都是字面令牌的特殊情况。字面令牌能够用来对标准表达式语法进行简化，我们可以将包裹它的内容的单引号去掉：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Welcome to BeiJing!<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>它等效于：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>Welcome to BeiJing!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="2-3-wen-ben-cao-zuo">2.3 文本操作</span><a href="#2-3-wen-ben-cao-zuo" class="header-anchor">.</a></h3><p>我们可以对文本内容进行两种常用的操作，它们分别为字符串连接和字符串替换。</p><h4><span id="2-3-1-zi-fu-chuan-lian-jie">2.3.1 字符串连接</span><a href="#2-3-1-zi-fu-chuan-lian-jie" class="header-anchor">.</a></h4><p>不管是字面值还是表达式的结果，我们都可以使用<code>+</code>符号将它们连接起来：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Welcome to BeiJing! --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">'</span>Welcome to <span class="token punctuation">'</span> + ${location} + <span class="token punctuation">'</span>!<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4><span id="2-3-2-zi-mian-zhi-ti-huan">2.3.2 字面值替换</span><a href="#2-3-2-zi-mian-zhi-ti-huan" class="header-anchor">.</a></h4><p>符号<code>||</code>可以用来将字面值和表达式包裹起来，这样就能方便的替换变量的值，而不需要使用<code>+</code>连接符：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- Welcome to BeiJing! --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>|Welcome to ${location}!|<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="2-4-suan-zhu-yun-suan">2.4 算术运算</span><a href="#2-4-suan-zhu-yun-suan" class="header-anchor">.</a></h3><p>支持<code>+</code>（加）、<code>-</code>（减）、<code>*</code>（乘）、<code>/</code>（除）、<code>%</code>（模）运算：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 6 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4 + 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4 - 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 8 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4 * 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4 / 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 0 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4 % 2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pagination.page + 1}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${pagination.page} + 1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-5-bu-er-yun-suan">2.5 布尔运算</span><a href="#2-5-bu-er-yun-suan" class="header-anchor">.</a></h3><p>支持<code>and</code>（且）、<code>or</code>（或）、<code>!</code>（非）、<code>not</code>（非）运算：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.online and user.vip}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.online or user.vip}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${!user.online}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${not user.online}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-6-bi-jiao-he-xiang-deng">2.6 比较和相等</span><a href="#2-6-bi-jiao-he-xiang-deng" class="header-anchor">.</a></h3><p>支持<code>&lt;</code>（<code>lt</code>）、<code>&gt;</code>（<code>gt</code>）、<code>&lt;=</code>（<code>le</code>）、<code>&gt;=</code>（<code>ge</code>）、<code>==</code>（<code>eq</code>）、<code>！=</code>（<code>ne</code>）：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age &lt; 60}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age &lt;<span class="token punctuation">=</span> 60}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age <span class="token punctuation">></span> 18}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age <span class="token punctuation">></span><span class="token punctuation">=</span> 18}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age <span class="token punctuation">=</span><span class="token punctuation">=</span> 18}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.age !<span class="token punctuation">=</span> 18}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-7-tiao-jian-yun-suan">2.7 条件运算</span><a href="#2-7-tiao-jian-yun-suan" class="header-anchor">.</a></h3><p>三元运算符：<code>(if) ? (then) : (else)</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.online ? <span class="token punctuation">'</span>在线<span class="token punctuation">'</span> : <span class="token punctuation">'</span>离线<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.online ? (user.vip ? <span class="token punctuation">'</span>VIP用户在线<span class="token punctuation">'</span> : <span class="token punctuation">'</span>普通用户在线<span class="token punctuation">'</span>) : <span class="token punctuation">'</span>离线<span class="token punctuation">'</span>}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>二元运算符：<code>(value) ?: (defaultValue)</code>。</p><p>其中，<code>value</code>非空（null）即真，条件为真时输出<code>value</code>，否则输出<code>defaultValue</code>。假设<code>token = null</code>，<code>user.email = fanlychie@gmail.com</code></p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 你还没有登录，请先登录 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${token} ?: <span class="token punctuation">'</span>你还没有登录，请先登录<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- fanlychie@gmail.com --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.email} ?: <span class="token punctuation">'</span>你还没有绑定邮箱<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-8-wu-cao-zuo-fu">2.8 无操作符</span><a href="#2-8-wu-cao-zuo-fu" class="header-anchor">.</a></h3><p>当模板运行在服务器端时，Thymeleaf 会解析<code>th:*</code>属性的具体值替换标签体的内容。无操作符（<code>_</code>）则允许你使用原型标签体的内容作为默认值：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 你还没有登录，请先登录 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${token} ?: _<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>你还没有登录，请先登录<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="3-shi-yong-wen-ben">3. 使用文本</span><a href="#3-shi-yong-wen-ben" class="header-anchor">.</a></h2><p>首先介绍两个最基础的<code>th:*</code>属<code>th:text</code>和<code>th:utext</code>，它们都是用于处理文本消息内容。</p><h3><span id="3-1-th-text">3.1 th:text</span><a href="#3-1-th-text" class="header-anchor">.</a></h3><p>在标签体中展示表达式评估结果的文本内容：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${message}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用外部化的文本内容：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${message}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Welcome to BeiJing!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>当它作为静态文件直接运行时，浏览器会自动忽略它不能识别的<code>th:text</code>属性，而显示<code>&lt;p&gt;</code>标签体的文本内容<code>Welcome to BeiJing!</code></p><p>当它作为模板文件运行在服务器端时，<code>th:text</code>属性的具体值将会替换<code>&lt;p&gt;</code>标签体的文本内容。</p><h3><span id="3-2-th-utext">3.2 th:utext</span><a href="#3-2-th-utext" class="header-anchor">.</a></h3><p>属性<code>th:utext</code>与<code>th:text</code>的区别在于：</p><ul><li><code>th:text</code>默认会对含有 HTML 标签的内容进行字符转义；</li><li><code>th:utext</code>（Unescaped Text）则不会对含有 HTML 标签的内容进行字符转义；</li></ul><p>假设：<code>message = &quot;&lt;b&gt;Welcome to BeiJing!&lt;/b&gt;&quot;</code>。</p><p>使用<code>th:text</code>属性：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${message}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>th:text</code>效果：&lt;b&gt;Welcome to BeiJing!&lt;/b&gt;</p><p>使用<code>th:utext</code>属性：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>utext</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${message}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>th:utext</code>效果：<strong>Welcome to BeiJing!</strong></p><h2><span id="4-she-zhi-shu-xing-zhi">4. 设置属性值</span><a href="#4-she-zhi-shu-xing-zhi" class="header-anchor">.</a></h2><p>在 Thymeleaf 模板文件中，你可以使用<code>th:*</code>（或者使用<code>th:attr</code>属性）来设置任意的 HTML5 标签属性的值。不仅如此，你还可以<code>th:*-*</code>来同时为多个不同的标签属性设置相同的一个值，甚至你可以使用<code>th:attrappend</code>和<code>th:attrprepend</code>来追加新的值到现有的标签属性值中。</p><h3><span id="4-1-th-attr">4.1 th:attr</span><a href="#4-1-th-attr" class="header-anchor">.</a></h3><p>这种方式是不被推荐的，了解一下就行。下面是用<code>th:attr=&quot;href=...&quot;</code>来设置标签<code>href</code>属性的值：</p><pre><code>&lt;a th:attr=&quot;href=@{https://www.google.com.hk}&quot;&gt;谷歌一下你就知道&lt;/a&gt;</code></pre><h3><span id="4-2-th">4.2 th:*</span><a href="#4-2-th" class="header-anchor">.</a></h3><p>显然<code>th:attr=&quot;href=@{http://www.baidu.com}&quot;</code>不够简洁，我们更推荐下面的这种语法：</p><pre><code>&lt;a th:href=&quot;@{https://www.google.com.hk}&quot;&gt;谷歌一下你就知道&lt;/a&gt;</code></pre><p>其中<code>th:*</code>中的<code>*</code>可以是 HTML5 支持的任意属性名称，甚至这些属性名称可以是自定义的：</p><pre><code>&lt;!-- &lt;div item-id=&quot;1001&quot;&gt;Welcome to BeiJing!&lt;/div&gt; --&gt;&lt;div th:item-id=&quot;${user.id}&quot;&gt;Welcome to BeiJing!&lt;/div&gt;</code></pre><h3><span id="4-3-th">4.3 th:<em>-</em></span><a href="#4-3-th" class="header-anchor">.</a></h3><p><strong>如果想要同时为标签的多个不同属性设置相同的一个值，可以使用<code>th:*-*</code>的语法：</strong></p><pre><code>&lt;img src=&quot;logo.png&quot; th:alt-title=&quot;LOGO图片&quot;&gt;</code></pre><p>它相当于：</p><pre><code>&lt;img src=&quot;logo.png&quot; th:alt=&quot;LOGO图片&quot; th:title=&quot;LOGO图片&quot;&gt;</code></pre><h3><span id="4-4-th-attrappend-amp-th-attrprepend">4.4 th:attrappend &amp; th:attrprepend</span><a href="#4-4-th-attrappend-amp-th-attrprepend" class="header-anchor">.</a></h3><p><code>th:attrappend</code>和<code>th:attrprepend</code>可以将表达式的结果分别追加到指定的属性值之后和之前。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- &lt;button class="btn enable">购买&lt;/button> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attrappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>class<span class="token punctuation">=</span>${outOfStock} ? <span class="token punctuation">'</span> enable<span class="token punctuation">'</span> : <span class="token punctuation">'</span> disable<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>购买<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- &lt;button class="enable btn">购买&lt;/button> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>attrprepend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>class<span class="token punctuation">=</span>${outOfStock} ? <span class="token punctuation">'</span>enable <span class="token punctuation">'</span> : <span class="token punctuation">'</span>disable <span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>购买<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>另外，还有两个常用的具体附加属性<code>th:classappend=&quot;...&quot;</code>和<code>th:styleappend=&quot;&quot;</code>。</p><p>它们分别用来代替<code>th:attrappend=&quot;class=...&quot;</code>和<code>th:attrappend=&quot;style=...&quot;</code>。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- &lt;button class="btn enable">购买&lt;/button> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>classappend</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${outOfStock} ? <span class="token punctuation">'</span> enable<span class="token punctuation">'</span> : <span class="token punctuation">'</span> disable<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>购买<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="4-5-bu-er-shu-xing">4.5 布尔属性</span><a href="#4-5-bu-er-shu-xing" class="header-anchor">.</a></h3><p>在 HTML 中有些属性是布尔属性，布尔属性是指没有值的属性，如<code>readonly</code>、<code>checked</code>、<code>selected</code>等。它们若存在那就意味着值为 true。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rememberme<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span> <span class="token punctuation">/></span></span> 记住我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>male<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span> 男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>female<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> 女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>appId<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>J123654<span class="token punctuation">"</span></span> <span class="token attr-name">readonly</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>北京<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>上海<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>广州<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>深圳<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Thymeleaf 也允许我们通过<code>th:*</code>（这里的<code>*</code>表示任意的布尔属性） 来选择是否使用这些布尔属性。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkbox<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rememberme<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>checked</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${rememberme}<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span> 记住我<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>正如你所见，如果表达式的结果为<code>true</code>，则自动勾选复选框，若为<code>false</code>，则不会自动勾选。</p><h2><span id="5-bian-li">5. 遍历</span><a href="#5-bian-li" class="header-anchor">.</a></h2><p>遍历（迭代）的语法<code>th:each=&quot;自定义的元素变量名称 : ${集合变量名称}&quot;</code>：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spn</span><span class="token punctuation">></span></span>你所在城市：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mycity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city : ${cities}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${city.name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>属性<code>th:each</code>提供了一个用于跟踪迭代的状态变量，它包含以下几个属性：</p><table><thead><tr><th align="center">属性</th><th align="center">类型</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">index</td><td align="center">int</td><td align="center">当前迭代的索引，从 0 开始</td></tr><tr><td align="center">count</td><td align="center">int</td><td align="center">当前迭代的计数，从 1 开始</td></tr><tr><td align="center">size</td><td align="center">int</td><td align="center">集合中元素的总个数</td></tr><tr><td align="center">current</td><td align="center">int</td><td align="center">当前的元素对象</td></tr><tr><td align="center">even</td><td align="center">boolean</td><td align="center">当前迭代的计数是否是偶数</td></tr><tr><td align="center">odd</td><td align="center">boolean</td><td align="center">当前迭代的计数是否是奇数</td></tr><tr><td align="center">first</td><td align="center">boolean</td><td align="center">当前元素是否是集合的第一个元素</td></tr><tr><td align="center">last</td><td align="center">boolean</td><td align="center">当前元素是否是集合的最后一个元素</td></tr></tbody></table><p>状态变量的使用语法：<code>th:each=&quot;自定义的元素变量名称, 自定义的状态变量名称 : ${集合变量名称}&quot;</code>：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spn</span><span class="token punctuation">></span></span>所在城市：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spn</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mycity<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name"><span class="token namespace">th:</span>each</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>city, status : ${cities}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${city.name}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>item-index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${status.count}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不管什么时候，Thymeleaf 始终会为每个<code>th:each</code>创建一个状态变量，默认的状态变量名称就是自定义的元素变量名称后面加<code>Stat</code>字符串组成：</p><pre><code>&lt;div&gt;    &lt;spn&gt;所在城市：&lt;/spn&gt;    &lt;select name=&quot;mycity&quot;&gt;        &lt;option th:each=&quot;city : ${cities}&quot; th:text=&quot;${city.name}&quot; th:item-index=&quot;${cityStat.count}&quot;&gt;&lt;/option&gt;    &lt;/select&gt;&lt;/div&gt;</code></pre><h2><span id="6-tiao-jian-pan-duan">6. 条件判断</span><a href="#6-tiao-jian-pan-duan" class="header-anchor">.</a></h2><p>条件判断语句有三种，分别是：<code>th:if</code>、<code>th:unless</code>、<code>th:switch</code>。</p><h3><span id="6-1-th-if">6.1 th:if</span><a href="#6-1-th-if" class="header-anchor">.</a></h3><p>当表达式的评估结果为真时则显示内容，否则不显示：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/order(uid<span class="token punctuation">=</span>${user.id})}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user !<span class="token punctuation">=</span> null}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的订单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>真假评估的依据：</p><ul><li>当表达式的值不为空（null）时<ul><li>如果表达式的值是一个布尔类型，且值为<code>true</code>评估为真，否则为假</li><li>如果表达式的值是一个数字类型，且值为非<code>0</code>评估为真，否则为假</li><li>如果表达式的值是一个字符类型，且值为非<code>0</code>评估为真，否则为假</li><li>如果表达式的值是一个字符串类型，且值为非<code>&quot;false&quot;</code>、<code>&quot;off&quot;</code>、<code>&quot;no&quot;</code>评估为真，否则为假</li><li>如果表达式的值不是一个<code>布尔</code>、<code>数字</code>、<code>字符</code>或<code>字符串</code>评估为真</li></ul></li><li>当表达式的值为空（null）时，评估结果为假</li></ul><p>因此，上面代码我们也可以简写成：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/order(uid<span class="token punctuation">=</span>${user.id})}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的订单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是，为了代码的可读性，我们并不建议这样使用。</p><h3><span id="6-2-th-unless">6.2 th:unless</span><a href="#6-2-th-unless" class="header-anchor">.</a></h3><p><code>th:unless</code>与<code>th:if</code>判断恰好相反，当表达式的评估结果为假时则显示内容，否则不显示：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">th:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@{/user/order(uid<span class="token punctuation">=</span>${user.id})}<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">th:</span>unless</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user <span class="token punctuation">=</span><span class="token punctuation">=</span> null}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我的订单<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="6-3-th-switch">6.3 th:switch</span><a href="#6-3-th-switch" class="header-anchor">.</a></h3><p>多路选择语句，它需要搭配<code>th:case</code>来使用：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.role}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>管理员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>普通用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="7-ding-yi-ju-bu-bian-liang">7. 定义局部变量</span><a href="#7-ding-yi-ju-bu-bian-liang" class="header-anchor">.</a></h2><p>使用<code>th:with</code>属性可以定义局部变量：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>with</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">=</span><span class="token punctuation">'</span>fanlychie<span class="token punctuation">'</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">th:</span>text</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${name}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>同时定义多个局部变量时，用英文<code>,</code>号分隔开：</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>with</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">=</span>${user.name},age<span class="token punctuation">=</span>{user.age}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2><span id="8-zhu-shi">8. 注释</span><a href="#8-zhu-shi" class="header-anchor">.</a></h2><p>下面介绍常见的两种注释：</p><h3><span id="8-1-biao-zhun-zhu-shi">8.1 标准注释</span><a href="#8-1-biao-zhun-zhu-shi" class="header-anchor">.</a></h3><p>语法：<code>&lt;!-- ... ---&gt;</code>，注释的代码块会在文件源代码中显示出来。</p><h4><span id="8-1-1-dan-xing-zhu-shi">8.1.1 单行注释</span><a href="#8-1-1-dan-xing-zhu-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- &lt;span>${message}&lt;/span> ---></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4><span id="8-1-2-duo-xing-zhu-shi">8.1.2 多行注释</span><a href="#8-1-2-duo-xing-zhu-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--&lt;div th:switch="${user.role}">    &lt;p th:case="admin">管理员&lt;/p>    &lt;p th:case="user">普通用户&lt;/p>&lt;/div>---></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="8-2-jie-xi-qi-ji-zhu-shi">8.2 解析器级注释</span><a href="#8-2-jie-xi-qi-ji-zhu-shi" class="header-anchor">.</a></h3><p>语法：<code>&lt;!--/* ... */--&gt;</code>，注释的代码块会在引擎解析的时候抹去。</p><h4><span id="8-2-1-dan-xing-zhu-shi">8.2.1 单行注释：</span><a href="#8-2-1-dan-xing-zhu-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--/* &lt;span>${message}&lt;/span> */--></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4><span id="8-2-2-duo-xing-zhu-shi">8.2.2 多行注释</span><a href="#8-2-2-duo-xing-zhu-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--/*--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name"><span class="token namespace">th:</span>switch</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${user.role}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>admin<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>管理员<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>case</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>普通用户<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--*/--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="9-nei-lian-biao-da-shi">9. 内联表达式</span><a href="#9-nei-lian-biao-da-shi" class="header-anchor">.</a></h2><p>内联表达式允许我们直接在 HTML 文本中使用标准表达式，而不需要使用<code>th:*</code>标签属性。</p><h3><span id="9-1">9.1 [[…]]</span><a href="#9-1" class="header-anchor">.</a></h3><p><code>[[]]</code>相当于<code>th:text</code>，对含有 HTML 标签的内容自动进行字符转义。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The message is : [[${htmlContent}]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="9-2">9.2 [(…)]</span><a href="#9-2" class="header-anchor">.</a></h3><p><code>[()]</code>相当于<code>th:utext</code>，对含有 HTML 标签的内容不进行字符转义。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>The message is : [(${htmlContent})]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="9-3-th-inline">9.3 th:inline</span><a href="#9-3-th-inline" class="header-anchor">.</a></h3><p>我们已经了解到，使用<code>[[]]</code>和<code>[()]</code>语法可以直接在 HTML 文本中使用标准表达式，如果想要使用更多高级的功能，需要使用<code>th:inline</code>属性来激活，它的取值如下：</p><table><thead><tr><th align="center">值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">none</td><td align="center">禁止内联表达式，可以原样输出 [[]] 和 [()] 字符串</td></tr><tr><td align="center">text</td><td align="center">文本内联，可以使用 th:each 等高级语法</td></tr><tr><td align="center">css</td><td align="center">样式内联，如：``</td></tr><tr><td align="center">javascript</td><td align="center">脚本内联，如：``</td></tr></tbody></table><h4><span id="9-3-1-none">9.3.1 none</span><a href="#9-3-1-none" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- [[1, 2], [3, 4]] --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>none<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>[[1, 2], [3, 4]]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4><span id="9-3-2-text">9.3.2 text</span><a href="#9-3-2-text" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 北京 上海 广州 深圳 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    [# th:each="city : ${cities}"]        [(${city.name})]    [/]<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="9-3-3-css">9.3.3 css</span><a href="#9-3-3-css" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">body </span><span class="token punctuation">{</span>        <span class="token selector">background-color:[[$</span><span class="token punctuation">{</span>bgColor<span class="token punctuation">}</span>]]<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="9-3-4-javascript">9.3.4 javascript</span><a href="#9-3-4-javascript" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name"><span class="token namespace">th:</span>inline</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>$<span class="token punctuation">{</span>user<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"用户名："</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-07-SpringBoot_Web开发</title>
      <link href="/2020/09/14/36153.html"/>
      <url>/2020/09/14/36153.html</url>
      
        <content type="html"><![CDATA[<h1><span id="web-kai-fa">Web开发</span><a href="#web-kai-fa" class="header-anchor">.</a></h1><p><strong>springboot</strong></p><ul><li>自动装配<ul><li>自动将环境配置好（执行导入相应的starter）</li><li>只需专注于业务代码</li></ul></li></ul><p><strong>SpringBoot 配置了什么？能修改吗？可以修改什么?能不能扩展？</strong></p><ul><li>xxxxAutoConfiguration… 向容器中自动配置组件</li><li>xxxxProperties：自动装配类，装配配置文件中自动义的一些内容</li></ul><p>WebMvcAutoConfiguration</p><p>WebMvcProperties</p><p>ResourceProperties</p><h2><span id="tian-jia-jing-tai-zi-yuan">添加静态资源</span><a href="#tian-jia-jing-tai-zi-yuan" class="header-anchor">.</a></h2><h3><span id="1-shi-me-shi-webjars">1、什么是webjars</span><a href="#1-shi-me-shi-webjars" class="header-anchor">.</a></h3><blockquote><p><a href="https://www.webjars.org/" target="_blank" rel="noopener">https://www.webjars.org/</a></p></blockquote><p>WebJars是将客户端（浏览器）资源（JavaScript，Css等）打成jar包文件，以对资源进行统一依赖管理。WebJars的jar包部署在Maven中央仓库上。</p><h3><span id="2-ru-he-shi-yong-webjars">2、如何使用 webjars</span><a href="#2-ru-he-shi-yong-webjars" class="header-anchor">.</a></h3><ul><li><p>后端添加依赖（静态资源会加载到 <code>classpath:/META-INF/resources/webjars/</code> 下 ）映射到</p><ul><li><code>/webjars/**</code></li></ul></li><li><p><code>classpath:/META-INF/resource/**</code>,<code>classpath:/resources/</code>,<code>classpath:/static/</code>,<code>classpath:/public/</code>会被映射到</p><ul><li><code>/**</code></li></ul><blockquote><p>优先级：resoures &gt; static &gt; public</p></blockquote></li></ul><blockquote><p>localhost:port/** 静态资源都会到 后端以上目录中找</p></blockquote><p><img src="/2020/09/14/36153/image-20200914114450935.png" alt></p><h3><span id="zong-jie">总结：</span><a href="#zong-jie" class="header-anchor">.</a></h3><p><strong>在springboot中，我们可以使用以下方式处理静态资源</strong></p><ul><li>webjars            <code>localhost:port/webjars</code></li><li>public,static,/**,resources         <code>localhost:8080/</code></li></ul><h2><span id="tian-jia-shou-ye-he-tu-biao-ding-zhi">添加首页和图标定制</span><a href="#tian-jia-shou-ye-he-tu-biao-ding-zhi" class="header-anchor">.</a></h2><p><strong>index.html</strong> 可放置在</p><ul><li><code>classpath:/resources/</code></li><li><code>classpath:/static/</code></li><li><code>classpath:/public/</code></li><li><code>classpath:/templates/</code></li></ul><blockquote><p><strong>templates 目录下的所有页面，只能通过controller跳转</strong></p></blockquote><p>图标定制：<a href="https://blog.csdn.net/yemuyouhan/article/details/105784153?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160006064919724836700746%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=160006064919724836700746&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v2-1-105784153.first_rank_ecpm_v3_pc_rank_v2&amp;utm_term=springboot+2.3+%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E6%A0%87&amp;spm=1018.2118.3001.4187" target="_blank" rel="noopener">https://blog.csdn.net/yemuyouhan/article/details/105784153?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160006064919724836700746%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&amp;request_id=160006064919724836700746&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v3~pc_rank_v2-1-105784153.first_rank_ecpm_v3_pc_rank_v2&amp;utm_term=springboot+2.3+%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E6%A0%87&amp;spm=1018.2118.3001.4187</a></p><p><strong>注意：所有的页面静态资源（本地url）都需要都需要thymeleaf托管 @{}</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-06-JSR303校验</title>
      <link href="/2020/09/13/24119.html"/>
      <url>/2020/09/13/24119.html</url>
      
        <content type="html"><![CDATA[<h1><span id="jsr303-xiao-yan">JSR303校验</span><a href="#jsr303-xiao-yan" class="header-anchor">.</a></h1><blockquote><p>JSR-303是一个数据验证的规范，但是spring并没有对其进行实现，Hibernate Validator是实现了这一规范的，通过此这个实现来讲SpringMVC对JSR-303的支持。</p></blockquote><p><strong>注解：</strong></p><p><code>@Validated</code></p><p><strong>导入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--jsr3参数校验器--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-validation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/09/13/24119/image-20200914001051021.png" alt></p><h2><span id="bean-validation-zhong-de-constraint-yue-shu">Bean Validation 中的 constraint(约束)</span><a href="#bean-validation-zhong-de-constraint-yue-shu" class="header-anchor">.</a></h2><h3><span id="biao-1-bean-validation-zhong-nei-zhi-de-constraint">表 1. Bean Validation 中内置的 constraint</span><a href="#biao-1-bean-validation-zhong-nei-zhi-de-constraint" class="header-anchor">.</a></h3><table><thead><tr><th align="left"><strong>Constraint</strong></th><th align="left"><strong>详细信息</strong></th></tr></thead><tbody><tr><td align="left"><code>@Null</code></td><td align="left">被注释的元素必须为 <code>null</code></td></tr><tr><td align="left"><code>@NotNull</code></td><td align="left">被注释的元素必须不为 <code>null</code></td></tr><tr><td align="left"><code>@AssertTrue</code></td><td align="left">被注释的元素必须为 <code>true</code></td></tr><tr><td align="left"><code>@AssertFalse</code></td><td align="left">被注释的元素必须为 <code>false</code></td></tr><tr><td align="left"><code>@Min(value)</code></td><td align="left">被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td align="left"><code>@Max(value)</code></td><td align="left">被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td align="left"><code>@DecimalMin(value)</code></td><td align="left">被注释的元素必须是一个数字，其值必须大于等于指定的最小值</td></tr><tr><td align="left"><code>@DecimalMax(value)</code></td><td align="left">被注释的元素必须是一个数字，其值必须小于等于指定的最大值</td></tr><tr><td align="left"><code>@Size(max, min)</code></td><td align="left">被注释的元素的大小必须在指定的范围内</td></tr><tr><td align="left"><code>@Digits (integer, fraction)</code></td><td align="left">被注释的元素必须是一个数字，其值必须在可接受的范围内</td></tr><tr><td align="left"><code>@Past</code></td><td align="left">被注释的元素必须是一个过去的日期</td></tr><tr><td align="left"><code>@Future</code></td><td align="left">被注释的元素必须是一个将来的日期</td></tr><tr><td align="left"><code>@Pattern(value)</code></td><td align="left">被注释的元素必须符合指定的正则表达式</td></tr></tbody></table><h3><span id="biao-2-hibernate-validator-fu-jia-de-constraint">表 2. Hibernate Validator 附加的 constraint</span><a href="#biao-2-hibernate-validator-fu-jia-de-constraint" class="header-anchor">.</a></h3><table><thead><tr><th align="left"><strong>Constraint</strong></th><th align="left"><strong>详细信息</strong></th></tr></thead><tbody><tr><td align="left"><code>@Email</code></td><td align="left">被注释的元素必须是电子邮箱地址</td></tr><tr><td align="left"><code>@Length</code></td><td align="left">被注释的字符串的大小必须在指定的范围内</td></tr><tr><td align="left"><code>@NotEmpty</code></td><td align="left">被注释的字符串的必须非空</td></tr><tr><td align="left"><code>@Range</code></td><td align="left">被注释的元素必须在合适的范围内</td></tr></tbody></table><p><img src="/2020/09/13/24119/image-20200914001543252.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-05-SpringBoot配置</title>
      <link href="/2020/09/12/4061.html"/>
      <url>/2020/09/12/4061.html</url>
      
        <content type="html"><![CDATA[<h1><span id="springboot-pei-zhi">SpringBoot配置</span><a href="#springboot-pei-zhi" class="header-anchor">.</a></h1><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/</a></p></blockquote><p><strong>配置文件格式</strong></p><ul><li>application.properties<ul><li>key = value</li></ul></li><li>application.yaml<ul><li>key:<code>(空格)</code>value</li></ul></li></ul><h2><span id="he-xin-pei-zhi-wen-jian-application-properties">核心配置文件 <code>application.properties</code></span><a href="#he-xin-pei-zhi-wen-jian-application-properties" class="header-anchor">.</a></h2><blockquote><p>来自：<a href="https://blog.csdn.net/lpfsuperman/article/details/78287265" target="_blank" rel="noopener">https://blog.csdn.net/lpfsuperman/article/details/78287265</a></p></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># 核心属性</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># 文件编码</span><span class="token attr-name">banner.charset</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 文件位置</span><span class="token attr-name">banner.location</span><span class="token punctuation">=</span> <span class="token attr-value">classpath:banner.txt</span><span class="token comment" spellcheck="true"># 日志配置</span><span class="token comment" spellcheck="true"># 日志配置文件的位置。 例如对于Logback的`classpath：logback.xml`</span><span class="token attr-name">logging.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># ％wEx#记录异常时使用的转换字。</span><span class="token attr-name">logging.exception-conversion-word</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志文件名。 例如`myapp.log`</span><span class="token attr-name">logging.file</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志级别严重性映射。 例如`logging.level.org.springframework =  DEBUG`</span><span class="token attr-name">logging.level.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志文件的位置。 例如`/ var / log`</span><span class="token attr-name">logging.path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于输出到控制台的Appender模式。 只支持默认的logback设置。</span><span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于输出到文件的Appender模式。 只支持默认的logback设置。</span><span class="token attr-name">logging.pattern.file</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志级别的Appender模式（默认％5p）。 只支持默认的logback设置。</span><span class="token attr-name">logging.pattern.level</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true">#注册日志记录系统的初始化挂钩。</span><span class="token attr-name">logging.register-shutdown-hook</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># AOP 切面</span><span class="token comment" spellcheck="true"># 添加@EnableAspectJAutoProxy。</span><span class="token attr-name">spring.aop.auto</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 是否要创建基于子类（CGLIB）的代理（true），而不是基于标准的基于Java接口的代理（false）。</span><span class="token attr-name">spring.aop.proxy-target-class</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 应用程序上下文初始化器</span><span class="token comment" spellcheck="true"># 应用指标。</span><span class="token attr-name">spring.application.index</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应用程序名称。</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 国际化（消息源自动配置）</span><span class="token comment" spellcheck="true">#</span><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">=</span> <span class="token attr-value">messages</span><span class="token comment" spellcheck="true"># 以逗号分隔的基础名称列表，每个都在ResourceBundle约定之后。</span><span class="token comment" spellcheck="true"># 加载的资源束文件缓存到期，以秒为单位。 设置为-1时，软件包将永久缓存。</span><span class="token attr-name">spring.messages.cache-seconds</span><span class="token punctuation">=</span> <span class="token attr-value">-1</span><span class="token comment" spellcheck="true"># 消息编码。</span><span class="token attr-name">spring.messages.encoding</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 设置是否返回到系统区域设置，如果没有找到特定语言环境的文件。</span><span class="token attr-name">spring.messages.fallback-to-system-locale</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># REDIS (Redis 配置)</span><span class="token comment" spellcheck="true"># 连接工厂使用的数据库索引。</span><span class="token attr-name">spring.redis.database</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># Redis服务器主机。</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span> <span class="token attr-value">localhost</span><span class="token comment" spellcheck="true"># 登录redis服务器的密码。</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 给定时间池可以分配的最大连接数。 使用负值为无限制。</span><span class="token attr-name">spring.redis.pool.max-active</span><span class="token punctuation">=</span> <span class="token attr-value">8</span><span class="token comment" spellcheck="true"># 池中“空闲”连接的最大数量。 使用负值来表示无限数量的空闲连接。</span><span class="token attr-name">spring.redis.pool.max-idle</span><span class="token punctuation">=</span> <span class="token attr-value">8</span><span class="token comment" spellcheck="true"># 连接分配在池耗尽之前在抛出异常之前应阻止的最大时间量（以毫秒为单位）。 使用负值无限期地阻止。</span><span class="token attr-name">spring.redis.pool.max-wait</span><span class="token punctuation">=</span> <span class="token attr-value">-1</span><span class="token comment" spellcheck="true"># 定义池中维护的最小空闲连接数。 此设置只有在正值时才有效果。</span><span class="token attr-name">spring.redis.pool.min-idle</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># redis服务器端口</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span> <span class="token attr-value">6379</span><span class="token comment" spellcheck="true"># redis服务器名称</span><span class="token attr-name">spring.redis.sentinel.master</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># </span><span class="token attr-name">spring.redis.sentinel.nodes</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 连接超时（毫秒）。</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 管理员 （Spring应用程序管理员JMX自动配置）</span><span class="token comment" spellcheck="true"># 开启应用管理功能。</span><span class="token attr-name">spring.application.admin.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># JMX应用程序名称MBean。</span><span class="token attr-name">spring.application.admin.jmx-name</span><span class="token punctuation">=</span> <span class="token attr-value">org.springframework.boot:type= Admin,name= SpringApplication</span><span class="token comment" spellcheck="true"># 自动配置</span><span class="token comment" spellcheck="true"># 自动配置类排除。</span><span class="token attr-name">spring.autoconfigure.exclude</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># spring 核心配置</span><span class="token comment" spellcheck="true"># 跳过搜索BeanInfo类。</span><span class="token attr-name">spring.beaninfo.ignore</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># spring 缓存配置</span><span class="token comment" spellcheck="true"># 由底层缓存管理器支持的要创建的缓存名称的逗号分隔列表。</span><span class="token attr-name">spring.cache.cache-names</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化EhCache的配置文件的位置。</span><span class="token attr-name">spring.cache.ehcache.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于创建缓存的规范。 检查CacheBuilderSpec有关规格格式的更多细节。</span><span class="token attr-name">spring.cache.guava.spec</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化Hazelcast的配置文件的位置。</span><span class="token attr-name">spring.cache.hazelcast.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化Infinispan的配置文件的位置。</span><span class="token attr-name">spring.cache.infinispan.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化缓存管理器的配置文件的位置。</span><span class="token attr-name">spring.cache.jcache.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于检索符合JSR-107的缓存管理器的CachingProvider实现的完全限定名称。 只有在类路径上有多个JSR-107实现可用时才需要。</span><span class="token attr-name">spring.cache.jcache.provider</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 缓存类型，默认情况下根据环境自动检测。</span><span class="token attr-name">spring.cache.type</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># spring配置 （配置文件应用侦听器）</span><span class="token comment" spellcheck="true"># 配置文件位置。</span><span class="token attr-name">spring.config.location</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 配置文件名。</span><span class="token attr-name">spring.config.name</span><span class="token punctuation">=</span> <span class="token attr-value">application</span><span class="token comment" spellcheck="true"># hazelcast配置(Hazelcast是一个高度可扩展的数据分发和集群平台，提供了高效的、可扩展的分布式数据存储、数据缓存.)</span><span class="token comment" spellcheck="true"># 用于初始化Hazelcast的配置文件的位置。</span><span class="token attr-name">spring.hazelcast.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># JMX</span><span class="token comment" spellcheck="true"># JMX域名。</span><span class="token attr-name">spring.jmx.default-domain</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 将管理bean暴露给JMX域。</span><span class="token attr-name">spring.jmx.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># MBean服务器bean名称。</span><span class="token attr-name">spring.jmx.server</span><span class="token punctuation">=</span> <span class="token attr-value">mbeanServer</span><span class="token comment" spellcheck="true"># Email (MailProperties)  邮件属性</span><span class="token comment" spellcheck="true"># 默认MimeMessage编码。</span><span class="token attr-name">spring.mail.default-encoding</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># SMTP服务器主机。 例如`smtp.example.com`</span><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话JNDI名称。 设置时，优先于其他邮件设置。</span><span class="token attr-name">spring.mail.jndi-name</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 登录SMTP服务器的密码。</span><span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SMTP服务器端口。</span><span class="token attr-name">spring.mail.port</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 其他JavaMail会话属性。</span><span class="token attr-name">spring.mail.properties.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SMTP服务器使用的协议。</span><span class="token attr-name">spring.mail.protocol</span><span class="token punctuation">=</span> <span class="token attr-value">smtp</span><span class="token comment" spellcheck="true"># 测试邮件服务器在启动时可用。</span><span class="token attr-name">spring.mail.test-connection</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 登录SMTP服务器的用户。</span><span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应用设置（spring应用）</span><span class="token comment" spellcheck="true"># 用于在应用程序运行时显示横幅的模式。</span><span class="token attr-name">spring.main.banner-mode</span><span class="token punctuation">=</span> <span class="token attr-value">console</span><span class="token comment" spellcheck="true"># 源（类名，包名或XML资源位置）包含在ApplicationContext中。</span><span class="token attr-name">spring.main.sources</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 在Web环境中运行应用程序（默认情况下自动检测）。</span><span class="token attr-name">spring.main.web-environment</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 文件编码（文件编码应用程序侦听器）</span><span class="token comment" spellcheck="true"># 应用程序使用的预期字符编码。</span><span class="token attr-name">spring.mandatory-file-encoding</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 输出</span><span class="token comment" spellcheck="true"># 配置ANSI输出（可以是“detect”，“always”，“never”）-->“检测”，“永远”，“从不”</span><span class="token attr-name">spring.output.ansi.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">detect</span><span class="token comment" spellcheck="true"># PID文件（应用程序文件写入器）</span><span class="token comment" spellcheck="true"># 如果使用ApplicationPidFileWriter但是无法写入PID文件，则失败。</span><span class="token attr-name">spring.pid.fail-on-write-error</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 要写入的PID文件的位置（如果使用ApplicationPidFileWriter）。</span><span class="token attr-name">spring.pid.file</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true">#   简介（profiles 这个单词翻译过来就是这样... 没用过这个属性，有哪位大神用过请留言我改正，感谢。）</span><span class="token comment" spellcheck="true"># 活动配置文件的逗号分隔列表。</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 无条件地激活指定的逗号分隔的配置文件。</span><span class="token attr-name">spring.profiles.include</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SendGrid（SendGrid自动配置）</span><span class="token comment" spellcheck="true"># SendGrid帐号用户名</span><span class="token attr-name">spring.sendgrid.username</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SendGrid帐号密码</span><span class="token attr-name">spring.sendgrid.password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SendGrid代理主机</span><span class="token attr-name">spring.sendgrid.proxy.host</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SendGrid代理端口</span><span class="token attr-name">spring.sendgrid.proxy.port</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true">#   WEB属性</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># 文件上传属性</span><span class="token comment" spellcheck="true"># 启用对文件上传的支持。</span><span class="token attr-name">multipart.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 将文件写入磁盘后的阈值。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><span class="token attr-name">multipart.file-size-threshold</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 上传文件的位置。</span><span class="token attr-name">multipart.location</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 最大文件大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><span class="token attr-name">multipart.max-file-size</span><span class="token punctuation">=</span> <span class="token attr-value">1Mb</span><span class="token comment" spellcheck="true"># 最大请求大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><span class="token attr-name">multipart.max-request-size</span><span class="token punctuation">=</span> <span class="token attr-value">10Mb</span><span class="token comment" spellcheck="true"># 嵌入式服务器配置（服务器属性）</span><span class="token comment" spellcheck="true"># 服务器应绑定到的网络地址。</span><span class="token attr-name">server.address</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 如果启用响应压缩。</span><span class="token attr-name">server.compression.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 从压缩中排除的用户代理列表。</span><span class="token attr-name">server.compression.excluded-user-agents</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应该压缩的MIME类型的逗号分隔列表。 例如`text / html，text / css，application / json`</span><span class="token attr-name">server.compression.mime-types</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 执行压缩所需的最小响应大小。 例如2048</span><span class="token attr-name">server.compression.min-response-size</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Servlet上下文初始化参数。 例如`server.context-parameters.a =  alpha`</span><span class="token attr-name">server.context-parameters.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应用程序的上下文路径。</span><span class="token attr-name">server.context-path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 显示应用程序的名称。</span><span class="token attr-name">server.display-name</span><span class="token punctuation">=</span> <span class="token attr-value">application</span><span class="token comment" spellcheck="true"># 何时包含“stacktrace”属性。</span><span class="token attr-name">server.error.include-stacktrace</span><span class="token punctuation">=</span> <span class="token attr-value">never</span><span class="token comment" spellcheck="true"># 错误控制器的路径。</span><span class="token attr-name">server.error.path</span><span class="token punctuation">=</span> <span class="token attr-value">/error</span><span class="token comment" spellcheck="true"># 启动浏览器中出现服务器错误时显示的默认错误页面。</span><span class="token attr-name">server.error.whitelabel.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># JSP servlet的类名。</span><span class="token attr-name">server.jsp-servlet.class-name</span><span class="token punctuation">=</span> <span class="token attr-value">org.apache.jasper.servlet.JspServlet</span><span class="token comment" spellcheck="true"># Init参数用于配置JSP servlet</span><span class="token attr-name">server.jsp-servlet.init-parameters.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># JSP servlet是否被注册</span><span class="token attr-name">server.jsp-servlet.registered</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 服务器HTTP端口。</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span> <span class="token attr-value">8080</span><span class="token comment" spellcheck="true"># 主调度程序servlet的路径。</span><span class="token attr-name">server.servlet-path</span><span class="token punctuation">=</span> <span class="token attr-value">/</span><span class="token comment" spellcheck="true"># 会话cookie的注释。</span><span class="token attr-name">server.session.cookie.comment</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的域。</span><span class="token attr-name">server.session.cookie.domain</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># “HttpOnly”标志为会话cookie。</span><span class="token attr-name">server.session.cookie.http-only</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的最大时长（以秒为单位）。</span><span class="token attr-name">server.session.cookie.max-age</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie名称。</span><span class="token attr-name">server.session.cookie.name</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的路径。</span><span class="token attr-name">server.session.cookie.path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的“安全”标志。</span><span class="token attr-name">server.session.cookie.secure</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 重启之间持续会话数据。</span><span class="token attr-name">server.session.persistent</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 用于存储会话数据的目录。</span><span class="token attr-name">server.session.store-dir</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话超时（秒）。</span><span class="token attr-name">server.session.timeout</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话跟踪模式（以下一个或多个：“cookie”，“url”，“ssl”）。</span><span class="token attr-name">server.session.tracking-modes</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 支持SSL密码。</span><span class="token attr-name">server.ssl.ciphers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 客户端认证是否需要（“want”）或需要（“need”）。 需要信任存储。</span><span class="token attr-name">server.ssl.client-auth</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># ssl配置</span><span class="token attr-name">server.ssl.enabled</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-alias</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store-password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store-provider</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store-type</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.protocol</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store-password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store-provider</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store-type</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 创建日志文件的目录。 可以相对于tomcat base dir或absolute。</span><span class="token attr-name">server.tomcat.accesslog.directory</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用访问日志。</span><span class="token attr-name">server.tomcat.accesslog.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 访问日志的格式化模式。</span><span class="token attr-name">server.tomcat.accesslog.pattern</span><span class="token punctuation">=</span> <span class="token attr-value">common</span><span class="token comment" spellcheck="true"># 日志文件名前缀。</span><span class="token attr-name">server.tomcat.accesslog.prefix</span><span class="token punctuation">=</span> <span class="token attr-value">access_log</span><span class="token comment" spellcheck="true"># 日志文件名后缀。</span><span class="token attr-name">server.tomcat.accesslog.suffix</span><span class="token punctuation">=</span> <span class="token attr-value">.log</span><span class="token comment" spellcheck="true"># 在调用backgroundProcess方法之间延迟秒。</span><span class="token attr-name">server.tomcat.background-processor-delay</span><span class="token punctuation">=</span> <span class="token attr-value">30</span><span class="token comment" spellcheck="true"># Tomcat基本目录。 如果未指定，将使用临时目录。</span><span class="token attr-name">server.tomcat.basedir</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 正则表达式匹配可信IP地址。</span><span class="token attr-name">server.tomcat.internal-proxies</span><span class="token punctuation">=</span> <span class="token attr-value">10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\192\\.168\\.\\d{1,3}\\.\\d{1,3}|\\169\\.254\\.\\d{1,3}\\.\\d{1,3}|\\127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}</span><span class="token comment" spellcheck="true"># HTTP消息头的最大大小（以字节为单位）。</span><span class="token attr-name">server.tomcat.max-http-header-size</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 最大工作线程数。</span><span class="token attr-name">server.tomcat.max-threads</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 用于覆盖原始端口值的HTTP头的名称。</span><span class="token attr-name">server.tomcat.port-header</span><span class="token punctuation">=</span> <span class="token attr-value">X-Forwarded-Port</span><span class="token comment" spellcheck="true"># 头文件，保存传入协议，通常命名为“X-Forwarded-Proto”。</span><span class="token attr-name">server.tomcat.protocol-header</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 表示传入请求使用SSL的协议头的值。</span><span class="token attr-name">server.tomcat.protocol-header-https-value</span><span class="token punctuation">=</span> <span class="token attr-value">https</span><span class="token comment" spellcheck="true"># 提取远程ip的HTTP头的名称。 例如`X-FORWARDED-FOR`</span><span class="token attr-name">server.tomcat.remote-ip-header</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于解码URI的字符编码。</span><span class="token attr-name">server.tomcat.uri-encoding</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 访问日志目录。</span><span class="token attr-name">server.undertow.accesslog.dir</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用访问日志。</span><span class="token attr-name">server.undertow.accesslog.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 访问日志的格式化模式。</span><span class="token attr-name">server.undertow.accesslog.pattern</span><span class="token punctuation">=</span> <span class="token attr-value">common</span><span class="token comment" spellcheck="true"># 每个缓冲区的大小字节数。</span><span class="token attr-name">server.undertow.buffer-size</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 每个区域的缓冲区数。</span><span class="token attr-name">server.undertow.buffers-per-region</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 在Java堆之外分配缓冲区。</span><span class="token attr-name">server.undertow.direct-buffers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 为工作者创建的I / O线程数。</span><span class="token attr-name">server.undertow.io-threads</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 工作线程数。</span><span class="token attr-name">server.undertow.worker-threads</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 如果X-Forwarded- *头应该应用于HttpRequest。</span><span class="token attr-name">server.use-forward-headers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 自由标记（自由标记自动配置）</span><span class="token comment" spellcheck="true"># 设置是否允许HttpServletRequest属性重写（隐藏）控制器生成的同名模型属性。</span><span class="token attr-name">spring.freemarker.allow-request-override</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置是否允许HttpSession属性重写（隐藏）控制器生成的相同名称的模型属性。</span><span class="token attr-name">spring.freemarker.allow-session-override</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 启用模板缓存。</span><span class="token attr-name">spring.freemarker.cache</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 模板编码。</span><span class="token attr-name">spring.freemarker.charset</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 检查模板位置是否存在。</span><span class="token attr-name">spring.freemarker.check-template-location</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># Content-Type值。</span><span class="token attr-name">spring.freemarker.content-type</span><span class="token punctuation">=</span> <span class="token attr-value">text/html</span><span class="token comment" spellcheck="true"># 启用此技术的MVC视图分辨率。</span><span class="token attr-name">spring.freemarker.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><span class="token attr-name">spring.freemarker.expose-request-attributes</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><span class="token attr-name">spring.freemarker.expose-session-attributes</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置是否公开一个RequestContext供Spring 的宏库使用，名称为“springMacroRequestContext”。</span><span class="token attr-name">spring.freemarker.expose-spring-macro-helpers</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 首选文件系统访问模板加载。 文件系统访问可以对模板更改进行热检测。</span><span class="token attr-name">spring.freemarker.prefer-file-system-access</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 前缀，在构建URL时先查看名称。</span><span class="token attr-name">spring.freemarker.prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 所有视图的RequestContext属性的名称。</span><span class="token attr-name">spring.freemarker.request-context-attribute</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 公开的FreeMarker密钥将被传递给FreeMarker的配置。</span><span class="token attr-name">spring.freemarker.settings.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 后缀，在构建URL时附加到查看名称。</span><span class="token attr-name">spring.freemarker.suffix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 逗号分隔的模板路径列表。</span><span class="token attr-name">spring.freemarker.template-loader-path</span><span class="token punctuation">=</span> <span class="token attr-value">classpath:/templates/</span><span class="token comment" spellcheck="true"># 可以解决的视图名称的白名单。</span><span class="token attr-name">spring.freemarker.view-names</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># groovr模板（Groovy模板自动配置）</span><span class="token comment" spellcheck="true"># 设置是否允许HttpServletRequest属性重写（隐藏）控制器生成的同名模型属性。</span><span class="token attr-name">spring.groovy.template.allow-request-override</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置是否允许HttpSession属性重写（隐藏）控制器生成的相同名称的模型属性。</span><span class="token attr-name">spring.groovy.template.allow-session-override</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 启用模板缓存。</span><span class="token attr-name">spring.groovy.template.cache</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 模板编码。</span><span class="token attr-name">spring.groovy.template.charset</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 检查模板位置是否存在。</span><span class="token attr-name">spring.groovy.template.check-template-location</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 请参阅GroovyMarkupConfigurer</span><span class="token attr-name">spring.groovy.template.configuration.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Content-Type值。</span><span class="token attr-name">spring.groovy.template.content-type</span><span class="token punctuation">=</span> <span class="token attr-value">test/html</span><span class="token comment" spellcheck="true"># 启用此技术的MVC视图分辨率。</span><span class="token attr-name">spring.groovy.template.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><span class="token attr-name">spring.groovy.template.expose-request-attributes</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><span class="token attr-name">spring.groovy.template.expose-session-attributes</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置是否公开一个RequestContext供Spring Spring的宏库使用，名称为“springMacroRequestContext”。</span><span class="token attr-name">spring.groovy.template.expose-spring-macro-helpers</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 前缀，在构建URL时先查看名称。</span><span class="token attr-name">spring.groovy.template.prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 所有视图的RequestContext属性的名称。</span><span class="token attr-name">spring.groovy.template.request-context-attribute</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 模板路径。</span><span class="token attr-name">spring.groovy.template.resource-loader-path</span><span class="token punctuation">=</span> <span class="token attr-value">classpath:/templates/</span><span class="token comment" spellcheck="true"># 后缀，在构建URL时附加到查看名称。</span><span class="token attr-name">spring.groovy.template.suffix</span><span class="token punctuation">=</span> <span class="token attr-value">.tpl</span><span class="token comment" spellcheck="true"># 可以解决的视图名称的白名单。</span><span class="token attr-name">spring.groovy.template.view-names</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># spring Hateoas 配置</span><span class="token comment" spellcheck="true"># 指定应用程序/ hal + json响应是否应发送到接受application / json的请求。</span><span class="token attr-name">spring.hateoas.use-hal-as-default-json-media-type</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># HTTP 消息转换</span><span class="token comment" spellcheck="true"># 首选JSON映射程序用于HTTP消息转换。 设置为“gson”强制使用Gson，当它和Jackson都在类路径上时。</span><span class="token attr-name">spring.http.converters.preferred-json-mapper</span><span class="token punctuation">=</span> <span class="token attr-value">jackson</span><span class="token comment" spellcheck="true"># HTTP 编码（Http编码属性）</span><span class="token comment" spellcheck="true"># HTTP请求和响应的字符集。 如果未明确设置，则添加到“Content-Type”头。</span><span class="token attr-name">spring.http.encoding.charset</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 启用http编码支持。</span><span class="token attr-name">spring.http.encoding.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 将编码强制到HTTP请求和响应上配置的字符集。</span><span class="token attr-name">spring.http.encoding.force</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># Jackson(解析json和序列化json) 配置</span><span class="token comment" spellcheck="true"># 日期格式字符串或全限定日期格式类名。 例如`yyyy-MM-dd HH：mm：ss`。</span><span class="token attr-name">spring.jackson.date-format</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Jones开/关功能，影响Java对象反序列化的方式。</span><span class="token attr-name">spring.jackson.deserialization.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 关闭或者打开Jackson 功能</span><span class="token attr-name">spring.jackson.generator.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Joda日期时间格式字符串。 如果未配置，如果配置了格式字符串，则“日期格式”将用作后备。</span><span class="token attr-name">spring.jackson.joda-date-time-format</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于格式化的区域设置。</span><span class="token attr-name">spring.jackson.locale</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># jackson通用开/关功能。</span><span class="token attr-name">spring.jackson.mapper.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Jackson 解析器的开/关功能。</span><span class="token attr-name">spring.jackson.parser.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Jackson的PropertyNamingStrategy的一个常量。 也可以是PropertyNamingStrategy子类的完全限定类名。</span><span class="token attr-name">spring.jackson.property-naming-strategy</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Jones开/关功能，影响Java对象序列化的方式。</span><span class="token attr-name">spring.jackson.serialization.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 控制在序列化期间包含属性。 配置了Jackson的JsonInclude.Include枚举中的一个值。</span><span class="token attr-name">spring.jackson.serialization-inclusion</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 格式化日期时使用的时区。 例如`America / Los_Angeles`</span><span class="token attr-name">spring.jackson.time-zone</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Jersey 配置</span><span class="token comment" spellcheck="true"># 作为应用程序的基本URI的路径。 如果指定，则覆盖“@ApplicationPath”的值。</span><span class="token attr-name">spring.jersey.application-path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># jersey过滤器链顺序。</span><span class="token attr-name">spring.jersey.filter.order</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true">#  init参数传递到Jersey通过servlet或过滤器。</span><span class="token attr-name">spring.jersey.init.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># jersey整合型。可以是“servlet”也可以是“filter”。</span><span class="token attr-name">spring.jersey.type</span><span class="token punctuation">=</span> <span class="token attr-value">servlet</span><span class="token comment" spellcheck="true"># spring 视图分解器 配置</span><span class="token comment" spellcheck="true"># 启用后退解析支持。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.enable-fallback</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 启用设备视图解析器。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 前缀，用于查看移动设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.mobile-prefix</span><span class="token punctuation">=</span> <span class="token attr-value">mobile/</span><span class="token comment" spellcheck="true"># 后缀，附加到查看移动设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.mobile-suffix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 前缀，用于查看普通设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.normal-prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 后缀，附加到查看普通设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.normal-suffix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 前缀，用于查看平板设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.tablet-prefix</span><span class="token punctuation">=</span> <span class="token attr-value">tablet/</span><span class="token comment" spellcheck="true"># 后缀，附加到查看平板电脑设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.tablet-suffix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 移动网站首选项 （站点首选项自动配置）</span><span class="token comment" spellcheck="true"># 启用SitePreferenceHandler。</span><span class="token attr-name">spring.mobile.sitepreference.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># MUSTACHE模板（Mustache AutoConfiguration）</span><span class="token comment" spellcheck="true"># 启用模板缓存。</span><span class="token attr-name">spring.mustache.cache</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 模板编码。</span><span class="token attr-name">spring.mustache.charset</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 检查模板位置是否存在。</span><span class="token attr-name">spring.mustache.check-template-location</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># Content-Type值</span><span class="token attr-name">spring.mustache.content-type</span><span class="token punctuation">=</span> <span class="token attr-value">text/html</span><span class="token comment" spellcheck="true"># 启用此技术的MVC视图分辨率。</span><span class="token attr-name">spring.mustache.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 前缀应用于模板名称。</span><span class="token attr-name">spring.mustache.prefix</span><span class="token punctuation">=</span> <span class="token attr-value">classpath:/templates/</span><span class="token comment" spellcheck="true"># 后缀应用于模板名称。</span><span class="token attr-name">spring.mustache.suffix</span><span class="token punctuation">=</span> <span class="token attr-value">.html</span><span class="token comment" spellcheck="true"># 可以解决的视图名称的白名单。</span><span class="token attr-name">spring.mustache.view-names</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SPRING MVC (Web Mvc 配置)</span><span class="token comment" spellcheck="true"># 异步请求处理超时之前的时间量（以毫秒为单位）。</span><span class="token attr-name">spring.mvc.async.request-timeout</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 要使用的日期格式。 例如`dd / MM / yyyy`。</span><span class="token attr-name">spring.mvc.date-format</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 发送TRACE请求到FrameworkServlet doService方法。</span><span class="token attr-name">spring.mvc.dispatch-trace-request</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 发送OPTIONS请求到FrameworkServlet doService方法。</span><span class="token attr-name">spring.mvc.dispatch-options-request</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 启用favicon.ico的解析。</span><span class="token attr-name">spring.mvc.favicon.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 如果在重定向方案期间应该忽略“默认”模型的内容。</span><span class="token attr-name">spring.mvc.ignore-default-model-on-redirect</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 要使用的区域设置。</span><span class="token attr-name">spring.mvc.locale</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 将文件扩展名映射到内容协商的媒体类型。</span><span class="token attr-name">spring.mvc.media-types.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 消息代码格式策略。 例如`PREFIX_ERROR_CODE`。</span><span class="token attr-name">spring.mvc.message-codes-resolver-format</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于静态资源的路径模式。</span><span class="token attr-name">spring.mvc.static-path-pattern</span><span class="token punctuation">=</span> <span class="token attr-value">/**</span><span class="token comment" spellcheck="true"># 如果没有发现处理程序来处理请求，则应抛出“NoHandlerFoundException”。</span><span class="token attr-name">spring.mvc.throw-exception-if-no-handler-found</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># Spring MVC视图前缀。</span><span class="token attr-name">spring.mvc.view.prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Spring MVC视图后缀。</span><span class="token attr-name">spring.mvc.view.suffix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"> #SPRING RESOURCES HANDLING（ResourceProperties）资源处理</span><span class="token attr-name">spring.resources.add-mappings</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用默认资源处理。</span><span class="token attr-name">spring.resources.cache-period</span> <span class="token punctuation">=</span> <span class="token attr-value">#由资源处理程序提供的资源的缓存期，以秒为单位。</span><span class="token attr-name">spring.resources.chain.cache</span> <span class="token punctuation">=</span> <span class="token attr-value">true #在资源链中启用缓存。</span><span class="token attr-name">spring.resources.chain.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">#启用Spring资源处理链。默认情况下禁用，除非启用了至少一个策略。</span><span class="token attr-name">spring.resources.chain.html-application-cache</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用HTML5应用程序缓存清单重写。</span><span class="token attr-name">spring.resources.chain.strategy.content.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用内容版本策略。</span><span class="token attr-name">spring.resources.chain.strategy.content.paths</span> <span class="token punctuation">=</span> <span class="token attr-value">/ ** #应用于版本策略的模式的逗号分隔列表。</span><span class="token attr-name">spring.resources.chain.strategy.fixed.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用固定版本策略。</span><span class="token attr-name">spring.resources.chain.strategy.fixed.paths</span> <span class="token punctuation">=</span> <span class="token attr-value">#应用于版本策略的逗号分隔的模式列表。</span><span class="token attr-name">spring.resources.chain.strategy.fixed.version</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于版本策略的版本字符串。</span><span class="token attr-name">spring.resources.static-locations</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：/ META-INF / resources /，classpath：/ resources /，classpath：/ static /，classpath：/ public / #静态资源的位置。</span><span class="token comment" spellcheck="true"> #SPRING SOCIAL（SocialWebAutoConfiguration）集群</span><span class="token attr-name">spring.social.auto-connection-views</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用支持的提供程序的连接状态视图。</span><span class="token comment" spellcheck="true"> #SPRING SOCIAL FACEBOOK（FacebookAutoConfiguration）</span><span class="token attr-name">spring.social.facebook.app-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#您的应用程序的Facebook应用程序ID</span><span class="token attr-name">spring.social.facebook.app-secret</span> <span class="token punctuation">=</span> <span class="token attr-value">#你的应用程序的Facebook应用程序密码</span><span class="token comment" spellcheck="true"> #SPRING SOCIAL LINKEDIN（LinkedInAutoConfiguration）</span><span class="token attr-name">spring.social.linkedin.app-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#您的应用程序的LinkedIn应用程序ID</span><span class="token attr-name">spring.social.linkedin.app-secret</span> <span class="token punctuation">=</span> <span class="token attr-value">#您的应用程序的LinkedIn App Secret</span><span class="token comment" spellcheck="true"> #SPRING SOCIAL TWITTER（TwitterAutoConfiguration）</span><span class="token attr-name">spring.social.twitter.app-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#你的应用程序的Twitter应用程序ID</span><span class="token attr-name">spring.social.twitter.app-secret</span> <span class="token punctuation">=</span> <span class="token attr-value">#你的应用程序的Twitter App Secret</span><span class="token comment" spellcheck="true"> #THYMELEAF Thymeleaf模板引擎配置</span><span class="token attr-name">spring.thymeleaf.cache</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用模板缓存。</span><span class="token attr-name">spring.thymeleaf.check-template-location</span> <span class="token punctuation">=</span> <span class="token attr-value">true #检查模板位置是否存在。</span><span class="token attr-name">spring.thymeleaf.content-type</span> <span class="token punctuation">=</span> <span class="token attr-value">text / html #Content-Type值。</span><span class="token attr-name">spring.thymeleaf.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用MVC Thymeleaf视图分辨率。</span><span class="token attr-name">spring.thymeleaf.encoding</span> <span class="token punctuation">=</span> <span class="token attr-value">UTF-8 #模板编码。</span><span class="token attr-name">spring.thymeleaf.excluded-view-names</span> <span class="token punctuation">=</span> <span class="token attr-value">#应该从解决方案中排除的视图名称的逗号分隔列表。</span><span class="token attr-name">spring.thymeleaf.mode</span> <span class="token punctuation">=</span> <span class="token attr-value">HTML5 #应用于模板的模板模式。另请参见StandardTemplateModeHandlers。</span><span class="token attr-name">spring.thymeleaf.prefix</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：/ templates / #在构建URL时预先查看名称的前缀。</span><span class="token attr-name">spring.thymeleaf.suffix</span> <span class="token punctuation">=</span> <span class="token attr-value">.html #构建URL时附加查看名称的后缀。</span><span class="token attr-name">spring.thymeleaf.template-resolver-order</span> <span class="token punctuation">=</span> <span class="token attr-value">#链中模板解析器的顺序。</span><span class="token attr-name">spring.thymeleaf.view-names</span> <span class="token punctuation">=</span> <span class="token attr-value">#可以解析的视图名称的逗号分隔列表。</span><span class="token comment" spellcheck="true"> #VELOCITY TEMPLATES（VelocityAutoConfiguration）</span><span class="token attr-name">spring.velocity.allow-request-override</span> <span class="token punctuation">=</span> <span class="token attr-value">false #设置是否允许HttpServletRequest属性覆盖（隐藏）控制器生成的同名的模型属性。</span><span class="token attr-name">spring.velocity.allow-session-override</span> <span class="token punctuation">=</span> <span class="token attr-value">false #设置是否允许HttpSession属性重写（隐藏）控制器生成的同名的模型属性。</span><span class="token attr-name">spring.velocity.cache</span> <span class="token punctuation">=</span> <span class="token attr-value">#启用模板缓存。</span><span class="token attr-name">spring.velocity.charset</span> <span class="token punctuation">=</span> <span class="token attr-value">UTF-8 #模板编码。</span><span class="token attr-name">spring.velocity.check-template-location</span> <span class="token punctuation">=</span> <span class="token attr-value">true #检查模板位置是否存在。</span><span class="token attr-name">spring.velocity.content-type</span> <span class="token punctuation">=</span> <span class="token attr-value">text / html #Content-Type值。</span><span class="token attr-name">spring.velocity.date-tool-attribute</span> <span class="token punctuation">=</span> <span class="token attr-value">#在视图的Velocity上下文中公开的DateTool辅助对象的名称。</span><span class="token attr-name">spring.velocity.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用此技术的MVC视图分辨率。</span><span class="token attr-name">spring.velocity.expose-request-attributes</span> <span class="token punctuation">=</span> <span class="token attr-value">false #设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><span class="token attr-name">spring.velocity.expose-session-attributes</span> <span class="token punctuation">=</span> <span class="token attr-value">false #设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><span class="token attr-name">spring.velocity.expose-spring-macro-helpers</span> <span class="token punctuation">=</span> <span class="token attr-value">true #设置是否公开一个RequestContext供Spring Spring的宏库使用，名称为“springMacroRequestContext”。</span><span class="token attr-name">spring.velocity.number-tool-attribute</span> <span class="token punctuation">=</span> <span class="token attr-value">#在视图的Velocity上下文中公开的NumberTool帮助对象的名称。</span><span class="token attr-name">spring.velocity.prefer-file-system-access</span> <span class="token punctuation">=</span> <span class="token attr-value">true #首选文件系统访问模板加载。文件系统访问可以对模板更改进行热检测。</span><span class="token attr-name">spring.velocity.prefix</span> <span class="token punctuation">=</span> <span class="token attr-value">#前缀，用于在构建URL时查看名称。</span><span class="token attr-name">spring.velocity.properties。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#附加速度属性。</span><span class="token attr-name">spring.velocity.request-context-attribute</span> <span class="token punctuation">=</span> <span class="token attr-value">#所有视图的RequestContext属性的名称。</span><span class="token attr-name">spring.velocity.resource-loader-path</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：/ templates / #模板路径。</span><span class="token attr-name">spring.velocity.suffix</span> <span class="token punctuation">=</span> <span class="token attr-value">.vm #构建URL时附加到查看名称的后缀。</span><span class="token attr-name">spring.velocity.toolbox-config-location</span> <span class="token punctuation">=</span> <span class="token attr-value">#Velocity Toolbox配置位置。例如`/ WEB-INF / toolbox.xml'</span><span class="token attr-name">spring.velocity.view-names</span> <span class="token punctuation">=</span> <span class="token attr-value">#可以解决的视图名称的白名单。</span><span class="token comment" spellcheck="true"> #----------------------------------------</span><span class="token comment" spellcheck="true"> #安全属性</span><span class="token comment" spellcheck="true"> #----------------------------------------</span><span class="token comment" spellcheck="true"> #SECURITY（SecurityProperties）</span><span class="token attr-name">security.basic.authorize-mode</span> <span class="token punctuation">=</span> <span class="token attr-value">role #应用安全授权模式。</span><span class="token attr-name">security.basic.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用基本身份验证。</span><span class="token attr-name">security.basic.path</span> <span class="token punctuation">=</span> <span class="token attr-value">/ ** #安全路径的逗号分隔列表。</span><span class="token attr-name">security.basic.realm</span> <span class="token punctuation">=</span> <span class="token attr-value">Spring #HTTP基本的领域名称。</span><span class="token attr-name">security.enable-csrf</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用跨站点请求伪造支持。</span><span class="token attr-name">security.filter-order</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #安全过滤器连锁订单。</span><span class="token attr-name">security.headers.cache</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用缓存控制HTTP头。</span><span class="token attr-name">security.headers.content-type</span> <span class="token punctuation">=</span> <span class="token attr-value">true# 启用“X-Content-Type-Options”头。</span><span class="token attr-name">security.headers.frame</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用“X-Frame-Options”标题。</span><span class="token attr-name">security.headers.hsts</span> <span class="token punctuation">=</span> <span class="token attr-value"># HTTP严格传输安全（HSTS）模式（无，域，全部）。</span><span class="token attr-name">security.headers.xss</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用跨站点脚本（XSS）保护。</span><span class="token attr-name">security.ignored</span> <span class="token punctuation">=</span> <span class="token attr-value">#从默认安全路径中排除的路径的逗号分隔列表。</span><span class="token attr-name">security.require-ssl</span> <span class="token punctuation">=</span> <span class="token attr-value">false #为所有请求启用安全通道。</span><span class="token attr-name">security.sessions</span> <span class="token punctuation">=</span> <span class="token attr-value">stateless #会话创建策略（永远不会，if_required，无状态）。</span><span class="token attr-name">security.user.name</span> <span class="token punctuation">=</span> <span class="token attr-value">user #默认用户名。</span><span class="token attr-name">security.user.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#默认用户名的密码。默认情况下，启动时会记录随机密码。</span><span class="token attr-name">security.user.role</span> <span class="token punctuation">=</span> <span class="token attr-value">USER #为默认用户名授予角色。</span><span class="token comment" spellcheck="true"> #SECURITY OAUTH2 CLIENT（OAuth2ClientProperties</span><span class="token attr-name">security.oauth2.client.client-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#OAuth2客户端ID。</span><span class="token attr-name">security.oauth2.client.client-secret</span> <span class="token punctuation">=</span> <span class="token attr-value">#OAuth2客户机密码。默认生成随机密码</span><span class="token comment" spellcheck="true"> #SECURITY OAUTH2 RESOURCES（ResourceServerProperties</span><span class="token attr-name">security.oauth2.resource.id</span> <span class="token punctuation">=</span> <span class="token attr-value">#资源的标识符。</span><span class="token attr-name">security.oauth2.resource.jwt.key-uri</span> <span class="token punctuation">=</span> <span class="token attr-value">#JWT令牌的URI。如果值不可用并且密钥是公共的，可以设置。</span><span class="token attr-name">security.oauth2.resource.jwt.key-value</span> <span class="token punctuation">=</span> <span class="token attr-value">#JWT令牌的验证密钥。可以是对称秘密或PEM编码的RSA公钥。</span><span class="token attr-name">security.oauth2.resource.prefer-token-info</span> <span class="token punctuation">=</span> <span class="token attr-value">true #使用令牌信息，可以设置为false以使用用户信息。</span><span class="token attr-name">security.oauth2.resource.service-id</span> <span class="token punctuation">=</span> <span class="token attr-value">resource #</span><span class="token attr-name">security.oauth2.resource.token-info-uri</span> <span class="token punctuation">=</span> <span class="token attr-value">#令牌解码端点的URI。</span><span class="token attr-name">security.oauth2.resource.token-type</span> <span class="token punctuation">=</span> <span class="token attr-value">#使用userInfoUri时发送的令牌类型。</span><span class="token attr-name">security.oauth2.resource.user-info-uri</span> <span class="token punctuation">=</span> <span class="token attr-value">#用户端点的URI。</span><span class="token comment" spellcheck="true"> #SECURITY OAUTH2 SSO（OAuth2SsoProperties</span><span class="token attr-name">security.oauth2.sso.filter-order</span> <span class="token punctuation">=</span> <span class="token attr-value">#如果不提供显式的WebSecurityConfigurerAdapter，则应用过滤器顺序</span><span class="token attr-name">security.oauth2.sso.login-path</span> <span class="token punctuation">=</span> <span class="token attr-value">/ login #登录页面的路径，即触发重定向到OAuth2授权服务器的路径</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># DATA PROPERTIES 数据性能</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># FLYWAY (FlywayProperties)</span><span class="token attr-name">flyway.baseline-description</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.baseline-version</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #版本开始迁移</span><span class="token attr-name">flyway.baseline-on-migrate</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.check-location</span> <span class="token punctuation">=</span> <span class="token attr-value">false #检查迁移脚本位置是否存在。</span><span class="token attr-name">flyway.clean-on-validation-error</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用飞行路线。</span><span class="token attr-name">flyway.encoding</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.ignore-failed-future-migration</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.init-sqls</span> <span class="token punctuation">=</span> <span class="token attr-value">#执行SQL语句，以便在获取连接后立即初始化连接。</span><span class="token attr-name">flyway.locations</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：db / migration #迁移脚本的位置</span><span class="token attr-name">flyway.out-of-order</span> <span class="token punctuation">=</span> <span class="token attr-value">#如果您希望Flyway创建自己的DataSource，则需要使用#path密码</span><span class="token attr-name">flyway.placeholder-prefix</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.placeholder-replacement</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.placeholder-suffix</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.placeholders。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.schemas</span> <span class="token punctuation">=</span> <span class="token attr-value">#schemas来更新</span><span class="token attr-name">flyway.sql-migration-prefix</span> <span class="token punctuation">=</span> <span class="token attr-value">V #</span><span class="token attr-name">flyway.sql-migration-separator</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.sql-migration-suffix</span> <span class="token punctuation">=</span> <span class="token attr-value">.sql #</span><span class="token attr-name">flyway.table</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.url</span> <span class="token punctuation">=</span> <span class="token attr-value">#要迁移的数据库的JDBC url。如果未设置，则使用主配置的数据源。</span><span class="token attr-name">flyway.user</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录要迁移的数据库的用户。</span><span class="token attr-name">flyway.validate-on-migrate</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token comment" spellcheck="true"># LIQUIBASE (LiquibaseProperties)</span><span class="token attr-name">liquibase.change-log</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：/db/changelog/db.changelog-master.yaml #更改日志配置路径。</span><span class="token attr-name">liquibase.check-change-log-location</span> <span class="token punctuation">=</span> <span class="token attr-value">true #检查更改日志位置是否存在。</span><span class="token attr-name">liquibase.contexts</span> <span class="token punctuation">=</span> <span class="token attr-value">#使用逗号分隔的运行时上下文列表。</span><span class="token attr-name">liquibase.default-schema</span> <span class="token punctuation">=</span> <span class="token attr-value">#默认数据库模式。</span><span class="token attr-name">liquibase.drop-first</span> <span class="token punctuation">=</span> <span class="token attr-value">false #首先删除数据库模式。</span><span class="token attr-name">liquibase.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用liquidibase支持。</span><span class="token attr-name">liquibase.labels</span> <span class="token punctuation">=</span> <span class="token attr-value">#使用逗号分隔的运行时标签列表。</span><span class="token attr-name">liquibase.parameters。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#更改日志参数。</span><span class="token attr-name">liquibase.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录要迁移的数据库的密码。</span><span class="token attr-name">liquibase.url</span> <span class="token punctuation">=</span> <span class="token attr-value">#要迁移的数据库的JDBC url。 如果未设置，则使用主配置的数据源。</span><span class="token attr-name">liquibase.user</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录要迁移的数据库的用户。</span><span class="token comment" spellcheck="true"># DAO (PersistenceExceptionTranslationAutoConfiguration)</span><span class="token attr-name">spring.dao.exceptiontranslation.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true # 启用持久异常翻译后处理器。</span><span class="token comment" spellcheck="true"># CASSANDRA (CassandraProperties)</span><span class="token attr-name">spring.data.cassandra.cluster-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#Cassandra群集的名称。</span><span class="token attr-name">spring.data.cassandra.compression</span> <span class="token punctuation">=</span> <span class="token attr-value">#由Cassandra二进制协议支持的压缩。</span><span class="token attr-name">spring.data.cassandra.connect-timeout-millis</span> <span class="token punctuation">=</span> <span class="token attr-value">#套接字选项：连接超时。</span><span class="token attr-name">spring.data.cassandra.consistency-level</span> <span class="token punctuation">=</span> <span class="token attr-value">#查询一致性级别。</span><span class="token attr-name">spring.data.cassandra.contact-points</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost #集群节点地址的逗号分隔列表。</span><span class="token attr-name">spring.data.cassandra.fetch-size</span> <span class="token punctuation">=</span> <span class="token attr-value">#查询默认的抓取大小。</span><span class="token attr-name">spring.data.cassandra.keyspace-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#要使用的密钥空间名称。</span><span class="token attr-name">spring.data.cassandra.load-balancing-policy</span> <span class="token punctuation">=</span> <span class="token attr-value">#负载均衡策略的类名。</span><span class="token attr-name">spring.data.cassandra.port</span> <span class="token punctuation">=</span> <span class="token attr-value">#Cassandra服务器端口。</span><span class="token attr-name">spring.data.cassandra.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录服务器的密码。</span><span class="token attr-name">spring.data.cassandra.read-timeout-millis</span> <span class="token punctuation">=</span> <span class="token attr-value">#套接字选项：读取超时。</span><span class="token attr-name">spring.data.cassandra.reconnection-policy</span> <span class="token punctuation">=</span> <span class="token attr-value">#重新连接策略类。</span><span class="token attr-name">spring.data.cassandra.retry-policy</span> <span class="token punctuation">=</span> <span class="token attr-value">#重试策略的类名。</span><span class="token attr-name">spring.data.cassandra.serial-consistency-level</span> <span class="token punctuation">=</span> <span class="token attr-value">#查询串行一致性级别。</span><span class="token attr-name">spring.data.cassandra.ssl</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用SSL支持。</span><span class="token attr-name">spring.data.cassandra.username</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录用户的服务器。</span><span class="token comment" spellcheck="true"># ELASTICSEARCH (ElasticsearchProperties)</span><span class="token attr-name">spring.data.elasticsearch.cluster-name</span> <span class="token punctuation">=</span> <span class="token attr-value">elasticsearch #弹性搜索集群名称。</span><span class="token attr-name">spring.data.elasticsearch.cluster-nodes</span> <span class="token punctuation">=</span> <span class="token attr-value">#集群节点地址的逗号分隔列表。 如果未指定，则启动客户端节点。</span><span class="token attr-name">spring.data.elasticsearch.properties。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于配置客户端的其他属性。</span><span class="token attr-name">spring.data.elasticsearch.repositories.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用Elasticsearch存储库。</span><span class="token comment" spellcheck="true"># MONGODB (MongoProperties)</span><span class="token attr-name">spring.data.mongodb.authentication-database</span> <span class="token punctuation">=</span> <span class="token attr-value">#验证数据库名称。</span><span class="token attr-name">spring.data.mongodb.database</span> <span class="token punctuation">=</span> <span class="token attr-value">test #数据库名称。</span><span class="token attr-name">spring.data.mongodb.field-naming-strategy</span> <span class="token punctuation">=</span> <span class="token attr-value">#要使用的FieldNamingStrategy的完全限定名称。</span><span class="token attr-name">spring.data.mongodb.grid-fs-database</span> <span class="token punctuation">=</span> <span class="token attr-value">#GridFS数据库名称。</span><span class="token attr-name">spring.data.mongodb.host</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost #Mongo服务器主机。</span><span class="token attr-name">spring.data.mongodb.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录mongo服务器的密码。</span><span class="token attr-name">spring.data.mongodb.port</span> <span class="token punctuation">=</span> <span class="token attr-value">27017 #Mongo服务器端口。</span><span class="token attr-name">spring.data.mongodb.repositories.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用Mongo存储库。</span><span class="token attr-name">spring.data.mongodb.uri</span> <span class="token punctuation">=</span> <span class="token attr-value">mongodb：// localhost / test #Mongo数据库URI。 设置时，主机和端口将被忽略。</span><span class="token attr-name">spring.data.mongodb.username</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录mongo服务器的用户。</span><span class="token comment" spellcheck="true"># DATA REST (RepositoryRestProperties)</span><span class="token attr-name">spring.data.rest.base-path</span> <span class="token punctuation">=</span> <span class="token attr-value">#由Spring Data REST用于公开存储库资源的基本路径。</span><span class="token attr-name">spring.data.rest.default-page-size</span> <span class="token punctuation">=</span> <span class="token attr-value">#页面的默认大小。</span><span class="token attr-name">spring.data.rest.enable-enum-translation</span> <span class="token punctuation">=</span> <span class="token attr-value">#通过Spring Data REST默认资源包启用枚举值转换。</span><span class="token attr-name">spring.data.rest.limit-param-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#指示一次返回多少结果的URL查询字符串参数的名称。</span><span class="token attr-name">spring.data.rest.max-page-size</span> <span class="token punctuation">=</span> <span class="token attr-value">#最大页面大小。</span><span class="token attr-name">spring.data.rest.page-param-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#指示要返回的页面的URL查询字符串参数的名称。</span><span class="token attr-name">spring.data.rest.return-body-on-create</span> <span class="token punctuation">=</span> <span class="token attr-value">#创建一个实体后返回响应体。</span><span class="token attr-name">spring.data.rest.return-body-on-update</span> <span class="token punctuation">=</span> <span class="token attr-value">#更新实体后返回响应体。</span><span class="token attr-name">spring.data.rest.sort-param-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#指示排序结果的方向的URL查询字符串参数的名称。</span><span class="token comment" spellcheck="true"># SOLR (SolrProperties)</span><span class="token attr-name">spring.data.solr.host</span> <span class="token punctuation">=</span> <span class="token attr-value">http://127.0.0.1:8983/solr #Solr主机。 如果设置了“zk-host”，则被忽略。</span><span class="token attr-name">spring.data.solr.repositories.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用Solr存储库。</span><span class="token attr-name">spring.data.solr.zk-host</span> <span class="token punctuation">=</span> <span class="token attr-value">#ZooKeeper主机地址，格式为HOST：PORT。</span><span class="token comment" spellcheck="true"># 数据源 配置 (DataSourceAutoConfiguration &amp; DataSourceProperties)</span><span class="token attr-name">spring.datasource.continue-on-error</span> <span class="token punctuation">=</span> <span class="token attr-value">false #初始化数据库时发生错误时不要停止。</span><span class="token attr-name">spring.datasource.data</span> <span class="token punctuation">=</span> <span class="token attr-value">#Data（DML）脚本资源引用。</span><span class="token attr-name">spring.datasource.driver-class-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#JDBC驱动程序的完全限定名称。默认情况下，根据URL自动检测。</span><span class="token attr-name">spring.datasource.initialize</span> <span class="token punctuation">=</span> <span class="token attr-value">true #使用'data.sql'填充数据库。</span><span class="token attr-name">spring.datasource.jmx-enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用JMX支持（如果由底层池提供）。</span><span class="token attr-name">spring.datasource.jndi-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#数据源的JNDI位置。设置时，类，网址，用户名和密码将被忽略。</span><span class="token attr-name">spring.datasource.max-active</span> <span class="token punctuation">=</span> <span class="token attr-value">#例如100</span><span class="token attr-name">spring.datasource.max-idle</span> <span class="token punctuation">=</span> <span class="token attr-value">#例如8</span><span class="token attr-name">spring.datasource.max等待</span><span class="token punctuation">=</span><span class="token attr-name">spring.datasource.min-evictable空闲时间-米利斯</span><span class="token punctuation">=</span><span class="token attr-name">spring.datasource.min-idle</span> <span class="token punctuation">=</span> <span class="token attr-value">8</span><span class="token attr-name">spring.datasource.name</span> <span class="token punctuation">=</span> <span class="token attr-value">testdb #数据源的名称。</span><span class="token attr-name">spring.datasource.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录数据库的密码。</span><span class="token attr-name">spring.datasource.platform</span> <span class="token punctuation">=</span> <span class="token attr-value">all #在资源模式（schema - $ {platform} .sql）中使用的平台。</span><span class="token attr-name">spring.datasource.schema</span> <span class="token punctuation">=</span> <span class="token attr-value">#Schema（DDL）脚本资源引用。</span><span class="token attr-name">spring.datasource.separator</span> <span class="token punctuation">=</span><span class="token attr-value">;  #语句分隔符在SQL初始化脚本中。</span><span class="token attr-name">spring.datasource.sql-script-encoding</span> <span class="token punctuation">=</span> <span class="token attr-value">#SQL脚本编码。</span><span class="token attr-name">spring.datasource.test-on-borrow</span> <span class="token punctuation">=</span> <span class="token attr-value">#例如`false`</span><span class="token attr-name">spring.datasource.test-on-return</span> <span class="token punctuation">=</span> <span class="token attr-value">#例如`false`</span><span class="token attr-name">spring.datasource.test-while-idle</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">spring.datasource.time-between-eviction-runs-millis</span> <span class="token punctuation">=</span> <span class="token attr-value">1</span><span class="token attr-name">spring.datasource.type</span> <span class="token punctuation">=</span> <span class="token attr-value">#要使用的连接池实现的完全限定名称。默认情况下，它是从类路径自动检测的。</span><span class="token attr-name">spring.datasource.url</span> <span class="token punctuation">=</span> <span class="token attr-value">#数据库的JDBC url。</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">spring.datasource.validation-query</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># H2 Web Console (H2ConsoleProperties)  </span><span class="token attr-name">spring.h2.console.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用控制台。</span><span class="token attr-name">spring.h2.console.path</span> <span class="token punctuation">=</span> <span class="token attr-value">/ h2-console #控制台可用的路径。</span><span class="token comment" spellcheck="true"># JOOQ (JooqAutoConfiguration)</span><span class="token attr-name">spring.jooq.sql-dialect</span><span class="token punctuation">=</span>  <span class="token attr-value"># 与配置的数据源通信时使用的SQLDialect JOOQ。 例如`POSTGRES`</span><span class="token comment" spellcheck="true"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span><span class="token attr-name">spring.data.jpa.repositories.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用JPA存储库。</span><span class="token attr-name">spring.jpa.database</span> <span class="token punctuation">=</span> <span class="token attr-value">#目标数据库进行操作，默认情况下自动检测。可以使用“databasePlatform”属性设置。</span><span class="token attr-name">spring.jpa.database-platform</span> <span class="token punctuation">=</span> <span class="token attr-value">#要运行的目标数据库的名称，默认情况下自动检测。可以使用“数据库”枚举来设置。</span><span class="token attr-name">spring.jpa.generate-ddl</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启动时初始化模式。</span><span class="token attr-name">spring.jpa.hibernate.ddl-auto</span> <span class="token punctuation">=</span> <span class="token attr-value">#DDL模式。这实际上是“hibernate.hbm2ddl.auto”属性的快捷方式。使用嵌入式数据库时默认为“创建删除”，否则为“否”。</span><span class="token attr-name">spring.jpa.hibernate.naming-strategy</span> <span class="token punctuation">=</span> <span class="token attr-value">#命名策略完全限定名。</span><span class="token attr-name">spring.jpa.open-in-view</span> <span class="token punctuation">=</span> <span class="token attr-value">true #注册OpenEntityManagerInViewInterceptor。将JPA EntityManager绑定到线程以进行请求的整个处理。</span><span class="token attr-name">spring.jpa.properties。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#在JPA提供程序上设置的其他本机属性。</span><span class="token attr-name">spring.jpa.show-sql</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用SQL语句的日志记录。</span><span class="token comment" spellcheck="true"># JTA (JtaAutoConfiguration)</span><span class="token attr-name">spring.jta。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#技术特定配置</span><span class="token attr-name">spring.jta.log-dir</span> <span class="token punctuation">=</span> <span class="token attr-value">#Transaction logs目录。</span><span class="token comment" spellcheck="true"># ATOMIKOS</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.borrow-connection-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">30 #从池中借用连接的超时（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag</span> <span class="token punctuation">=</span> <span class="token attr-value">true #创建会话时是否忽略事务标志。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.local-transaction-mode</span> <span class="token punctuation">=</span> <span class="token attr-value">false #是否需要本地事务。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.maintenance-interval</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #池的维护线程运行之间的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.max-idle-time</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #从池中清除连接之后的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.max-lifetime</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #在被破坏之前可以将连接合并的时间（以秒为单位）。 0表示无限制。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.max-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #池的最大大小。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.min-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #池的最小大小。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.reap-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #借用连接的收获超时（以秒为单位）。 0表示无限制。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.unique-resource-name</span> <span class="token punctuation">=</span> <span class="token attr-value">jmsConnectionFactory #用于在恢复期间标识资源的唯一名称。</span><span class="token attr-name">spring.jta.atomikos.datasource.borrow-connection-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">30 #从池中借出连接的超时（秒）。</span><span class="token attr-name">spring.jta.atomikos.datasource.default-isolation-level</span> <span class="token punctuation">=</span> <span class="token attr-value">#池提供的连接的默认隔离级别。</span><span class="token attr-name">spring.jta.atomikos.datasource.login-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于建立数据库连接的超时（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.datasource.maintenance-interval</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #池的维护线程运行之间的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.datasource.max-idle-time</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #从池中清除连接之后的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.datasource.max-lifetime</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #在被破坏之前可以将连接合并的时间（以秒为单位）。 0表示无限制。</span><span class="token attr-name">spring.jta.atomikos.datasource.max-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #池的最大大小。</span><span class="token attr-name">spring.jta.atomikos.datasource.min-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #池的最小大小。</span><span class="token attr-name">spring.jta.atomikos.datasource.reap-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #借用连接的收获超时（以秒为单位）。 0表示无限制。</span><span class="token attr-name">spring.jta.atomikos.datasource.test-query</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于在返回连接之前验证连接的SQL查询或语句。</span><span class="token attr-name">spring.jta.atomikos.datasource.unique-resource-name</span> <span class="token punctuation">=</span> <span class="token attr-value">dataSource #用于在恢复期间识别资源的唯一名称。</span><span class="token comment" spellcheck="true"># BITRONIX</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.acquire-increment</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #生成池时要创建的连接数。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.acquisition-interval</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #在获取无效连接后再次尝试获取连接之前等待的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.acquisition-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">30 #从池中获取连接的超时（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.allow-local-transactions</span> <span class="token punctuation">=</span> <span class="token attr-value">true #事务管理器是否允许混合XA和非XA事务。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.apply-transaction-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">false #当XAResource被登记时，是否应该设置事务超时。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #资源是否应该被自动登记和删除。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.cache-producer-consumer</span> <span class="token punctuation">=</span> <span class="token attr-value">true #是否生产和消费者应该被缓存。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.defer-connection-release</span> <span class="token punctuation">=</span> <span class="token attr-value">true #提供程序是否可以在同一连接上运行许多事务，并支持事务交织。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.ignore-recovery-failures</span> <span class="token punctuation">=</span> <span class="token attr-value">false #是否应忽略恢复失败。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.max-idle-time</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #从池中清除连接之后的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.max-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">10 #池的最大大小。 0表示无限制。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.min-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #池的最小大小。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于连接到JMS提供程序的密码。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.share-transaction-connections</span> <span class="token punctuation">=</span> <span class="token attr-value">false #ACCESSIBLE状态中的连接是否可以在事务的上下文中共享。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.test-connections</span> <span class="token punctuation">=</span> <span class="token attr-value">true #从池中获取连接是否应该进行测试。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.two-pc-ordering-position</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #在两阶段提交期间该资源应该采取的位置（始终为Integer.MIN_VALUE，始终为Integer.MAX_VALUE）。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.unique-name</span> <span class="token punctuation">=</span> <span class="token attr-value">jmsConnectionFactory #用于在恢复期间标识资源的唯一名称。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.use-tm-join</span> <span class="token punctuation">=</span> <span class="token attr-value">true启动XAResource时是否应使用TMJOIN。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.user</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于连接到JMS提供者的用户。</span><span class="token attr-name">spring.jta.bitronix.datasource.acquire-increment</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #生成池时要创建的连接数。</span><span class="token attr-name">spring.jta.bitronix.datasource.acquisition-interval</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #在获取无效连接后再尝试获取连接之前等待的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.datasource.acquisition-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">30 #从池中获取连接的超时（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.datasource.allow-local-transactions</span> <span class="token punctuation">=</span> <span class="token attr-value">true #事务管理器是否允许混合XA和非XA事务。</span><span class="token attr-name">spring.jta.bitronix.datasource.apply-transaction-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">false #当XAResource被登记时，是否应该设置事务超时。</span><span class="token attr-name">spring.jta.bitronix.datasource.automatic-enlisting-enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #资源是否应该被登记和自动删除。</span><span class="token attr-name">spring.jta.bitronix.datasource.cursor-holdability</span> <span class="token punctuation">=</span> <span class="token attr-value">#连接的默认游标保持性。</span><span class="token attr-name">spring.jta.bitronix.datasource.defer-connection-release</span> <span class="token punctuation">=</span> <span class="token attr-value">true #数据库是否可以在同一连接上运行许多事务，并支持事务交织。</span><span class="token attr-name">spring.jta.bitronix.datasource.enable-jdbc4-connection-test</span> <span class="token punctuation">=</span> <span class="token attr-value">#从池中获取连接时是否调用Connection.isValid（）。</span><span class="token attr-name">spring.jta.bitronix.datasource.ignore-recovery-failures</span> <span class="token punctuation">=</span> <span class="token attr-value">false #是否应忽略恢复失败。</span><span class="token attr-name">spring.jta.bitronix.datasource.isolation-level</span> <span class="token punctuation">=</span> <span class="token attr-value">#连接的默认隔离级别。</span><span class="token attr-name">spring.jta.bitronix.datasource.local-auto-commit</span> <span class="token punctuation">=</span> <span class="token attr-value">#本地事务的默认自动提交模式。</span><span class="token attr-name">spring.jta.bitronix.datasource.login-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于建立数据库连接的超时（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.datasource.max-idle-time</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #从池中清除连接之后的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.datasource.max-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">10 #池的最大大小。 0表示无限制。</span><span class="token attr-name">spring.jta.bitronix.datasource.min-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #池的最小大小。</span><span class="token attr-name">spring.jta.bitronix.datasource.prepared-statement-cache-size</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #准备好的语句高速缓存的目标大小。 0禁用缓存。</span><span class="token attr-name">spring.jta.bitronix.datasource.share-transaction-connections</span> <span class="token punctuation">=</span> <span class="token attr-value">false #ACCESSIBLE状态下的连接是否可以在事务的上下文中共享。</span><span class="token attr-name">spring.jta.bitronix.datasource.test-query</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于在返回连接之前验证连接的SQL查询或语句。</span><span class="token attr-name">spring.jta.bitronix.datasource.two-pc-ordering-position</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #在两阶段提交期间该资源应该采取的位置（始终为Integer.MIN_VALUE，始终为Integer.MAX_VALUE）。</span><span class="token attr-name">spring.jta.bitronix.datasource.unique-name</span> <span class="token punctuation">=</span> <span class="token attr-value">dataSource #用于在恢复期间标识资源的唯一名称。</span><span class="token attr-name">spring.jta.bitronix.datasource.use-tm-join</span> <span class="token punctuation">=</span> <span class="token attr-value">true启动XAResource时是否应使用TMJOIN。</span><span class="token comment" spellcheck="true"># EMBEDDED MONGODB (EmbeddedMongoProperties)</span><span class="token attr-name">spring.mongodb.embedded.features</span> <span class="token punctuation">=</span> <span class="token attr-value">SYNC_DELAY #启用功能的逗号分隔列表。</span><span class="token attr-name">spring.mongodb.embedded.version</span> <span class="token punctuation">=</span> <span class="token attr-value">2.6.10 #Mongo使用版本。</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># 整合属性</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"> #ACTIVEMQ（ActiveMQProperties）</span><span class="token attr-name">spring.activemq.broker-url</span> <span class="token punctuation">=</span> <span class="token attr-value">#ActiveMQ代理的URL。 默认自动生成。 例如`tcp：// localhost：61616`</span><span class="token attr-name">spring.activemq.in-memory</span> <span class="token punctuation">=</span> <span class="token attr-value">true #指定默认代理URL是否应在内存中。 如果指定了一个显式代理，则被忽略。</span><span class="token attr-name">spring.activemq.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录密码的代理。</span><span class="token attr-name">spring.activemq.pooled</span> <span class="token punctuation">=</span> <span class="token attr-value">false #指定是否创建PooledConnectionFactory而不是常规的ConnectionFactory。</span><span class="token attr-name">spring.activemq.user</span> <span class="token punctuation">=</span> <span class="token attr-value">#代理登录用户。</span><span class="token comment" spellcheck="true"># ARTEMIS (ArtemisProperties)</span><span class="token attr-name">spring.artemis.embedded.cluster-password</span> <span class="token punctuation">=</span> <span class="token attr-value">#群集密码。 默认情况下随机生成。</span><span class="token attr-name">spring.artemis.embedded.data-directory</span> <span class="token punctuation">=</span> <span class="token attr-value">#日志文件目录。 如果持久性被关闭，则不需要。</span><span class="token attr-name">spring.artemis.embedded.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #如果Artemis服务器API可用，启用嵌入式模式。</span><span class="token attr-name">spring.artemis.embedded.persistent</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用持久存储。</span><span class="token attr-name">spring.artemis.embedded.queues</span> <span class="token punctuation">=</span> <span class="token attr-value">#启动时要创建的队列的逗号分隔列表。</span><span class="token attr-name">spring.artemis.embedded.server-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#服务器ID。 默认情况下，使用自动递增的计数器。</span><span class="token attr-name">spring.artemis.embedded.topics</span> <span class="token punctuation">=</span> <span class="token attr-value">#启动时要创建的主题的逗号分隔列表。</span><span class="token attr-name">spring.artemis.host</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost #Artemis代理主机。</span><span class="token attr-name">spring.artemis.mode</span> <span class="token punctuation">=</span> <span class="token attr-value">#Artemis部署模式，默认情况下自动检测。 可以显式设置为“native”或“embedded”。</span><span class="token attr-name">spring.artemis.port</span> <span class="token punctuation">=</span> <span class="token attr-value">61616 #Artemis 中间件端口。</span><span class="token comment" spellcheck="true"># SPRING BATCH(Batch 配置)</span><span class="token attr-name">spring.batch.initializer.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #如果需要，在启动时创建所需的批处理表。</span><span class="token attr-name">spring.batch.job.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #在启动时执行上下文中的所有Spring批处理作业。</span><span class="token attr-name">spring.batch.job.names</span> <span class="token punctuation">=</span> <span class="token attr-value">#在启动时执行的作业名称的逗号分隔列表（例如`job1，job2`）。 默认情况下，执行在上下文中找到的所有作业。</span><span class="token attr-name">spring.batch.schema</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：org / springframework / batch / core / schema - @@ platform @@。sql #用于初始化数据库模式的SQL文件的路径。</span><span class="token attr-name">spring.batch.table-prefix</span> <span class="token punctuation">=</span> <span class="token attr-value">#所有批次元数据表的表前缀。</span><span class="token comment" spellcheck="true"># HORNETQ (HornetQ 配置)</span><span class="token attr-name">spring.hornetq.embedded.cluster-password</span> <span class="token punctuation">=</span> <span class="token attr-value">#集群密码。 默认情况下随机生成。</span><span class="token attr-name">spring.hornetq.embedded.data-directory</span> <span class="token punctuation">=</span> <span class="token attr-value">#日志文件目录。 如果持久性被关闭，则不需要。</span><span class="token attr-name">spring.hornetq.embedded.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #如果HornetQ服务器API可用，启用嵌入式模式。</span><span class="token attr-name">spring.hornetq.embedded.persistent</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用持久存储。</span><span class="token attr-name">spring.hornetq.embedded.queues</span> <span class="token punctuation">=</span> <span class="token attr-value">#启动时要创建的队列的逗号分隔列表。</span><span class="token attr-name">spring.hornetq.embedded.server-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#服务器ID。 默认情况下，使用自动递增的计数器。</span><span class="token attr-name">spring.hornetq.embedded.topics</span> <span class="token punctuation">=</span> <span class="token attr-value">#在启动时创建的主题的逗号分隔列表。</span><span class="token attr-name">spring.hornetq.host</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost #HornetQ代理主机。</span><span class="token attr-name">spring.hornetq.mode</span> <span class="token punctuation">=</span> <span class="token attr-value">#HornetQ部署模式，默认情况下自动检测。 可以显式设置为“native”或“embedded”。</span><span class="token attr-name">spring.hornetq.port</span> <span class="token punctuation">=</span> <span class="token attr-value">5445 #HornetQ代理端口。</span><span class="token comment" spellcheck="true"># JMS (Jms 配置)</span><span class="token comment" spellcheck="true"># 连接工厂JNDI名称。 设置时，优先于其他连接工厂自动配置。</span><span class="token attr-name">spring.jms.jndi-name</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 容器的确认模式。 默认情况下，监听器被自动确认处理。</span><span class="token attr-name">spring.jms.listener.acknowledge-mode</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启动时自动启动容器。</span><span class="token attr-name">spring.jms.listener.auto-startup</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 最小并发消费者数。</span><span class="token attr-name">spring.jms.listener.concurrency</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 最大并发消费者数。</span><span class="token attr-name">spring.jms.listener.max-concurrency</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 指定默认的目的地类型是否为主题。</span><span class="token attr-name">spring.jms.pub-sub-domain</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># RABBIT (Rabbit 配置)</span><span class="token comment" spellcheck="true"># 客户端应连接到的逗号分隔的地址列表。</span><span class="token attr-name">spring.rabbitmq.addresses</span> <span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">spring.rabbitmq.dynamic</span> <span class="token punctuation">=</span>  <span class="token attr-value">true # 创建一个AmqpAdmin bean。</span><span class="token attr-name">spring.rabbitmq.host</span> <span class="token punctuation">=</span>  <span class="token attr-value">localhost# RabbitMQ主机。</span><span class="token attr-name">spring.rabbitmq.listener.acknowledge-mode</span> <span class="token punctuation">=</span> <span class="token attr-value"># 容器的确认模式。</span><span class="token attr-name">spring.rabbitmq.listener.auto-startup</span> <span class="token punctuation">=</span>  <span class="token attr-value">true# 启动时自动启动容器。</span><span class="token attr-name">spring.rabbitmq.listener.concurrency</span> <span class="token punctuation">=</span> <span class="token attr-value"># 最少消费者数。</span><span class="token attr-name">spring.rabbitmq.listener.max-concurrency</span> <span class="token punctuation">=</span> <span class="token attr-value"># 最大消费者数。</span><span class="token attr-name">spring.rabbitmq.listener.prefetch</span> <span class="token punctuation">=</span> <span class="token attr-value"># 在单个请求中要处理的消息数。它应该大于或等于事务大小（如果使用）。</span><span class="token attr-name">spring.rabbitmq.listener.transaction-size</span> <span class="token punctuation">=</span> <span class="token attr-value"># 在事务中要处理的消息数。为了获得最佳结果，它应该小于或等于预取计数。</span><span class="token attr-name">spring.rabbitmq.password</span> <span class="token punctuation">=</span> <span class="token attr-value"># 登录以对代理进行身份验证。</span><span class="token attr-name">spring.rabbitmq.port</span> <span class="token punctuation">=</span>  <span class="token attr-value">5672# RabbitMQ端口。</span><span class="token attr-name">spring.rabbitmq.requested-heartbeat</span> <span class="token punctuation">=</span> <span class="token attr-value"># 请求的心跳超时，以秒为单位;零为无。</span><span class="token attr-name">spring.rabbitmq.ssl.enabled</span> <span class="token punctuation">=</span>  <span class="token attr-value">false# 启用SSL支持。</span><span class="token attr-name">spring.rabbitmq.ssl.key-store</span> <span class="token punctuation">=</span>  <span class="token attr-value"># 保存SSL证书的密钥存储区的路径。</span><span class="token attr-name">spring.rabbitmq.ssl.key-store-password</span> <span class="token punctuation">=</span> <span class="token attr-value"># 用于访问密钥库的密码。</span><span class="token attr-name">spring.rabbitmq.ssl.trust-store</span> <span class="token punctuation">=</span> <span class="token attr-value"># 保存SSL证书的Trust存储。</span><span class="token attr-name">spring.rabbitmq.ssl.trust-store-password</span> <span class="token punctuation">=</span> <span class="token attr-value"># 用于访问信任存储的密码。</span><span class="token attr-name">spring.rabbitmq.username</span> <span class="token punctuation">=</span> <span class="token attr-value"># 登录用户对代理进行身份验证。</span><span class="token attr-name">spring.rabbitmq.virtual-host</span> <span class="token punctuation">=</span> <span class="token attr-value"># 连接到代理时使用的虚拟主机。</span><span class="token comment" spellcheck="true"># 端点配置（EndpointCorsProperties）</span><span class="token comment" spellcheck="true"># 设置是否支持凭据。 未设置时，不支持凭据。</span><span class="token attr-name">endpoints.cors.allow-credentials</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 在请求中允许的头文件逗号分隔列表。 '*'允许所有标题。</span><span class="token attr-name">endpoints.cors.allowed-headers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 逗号分隔的允许的方法列表。 '*'允许所有方法。</span><span class="token attr-name">endpoints.cors.allowed-methods</span><span class="token punctuation">=</span> <span class="token attr-value">GET</span><span class="token comment" spellcheck="true"># 逗号分隔的起始列表允许。 '*'允许所有来源。 未设置时，禁用CORS支持。</span><span class="token attr-name">endpoints.cors.allowed-origins</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 包含在响应中的标题的逗号分隔列表。</span><span class="token attr-name">endpoints.cors.exposed-headers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 客户端可以缓存飞行前请求的响应时间（秒）。</span><span class="token attr-name">endpoints.cors.max-age</span><span class="token punctuation">=</span> <span class="token attr-value">1800</span><span class="token comment" spellcheck="true"># JMX ENDPOINT (EndpointMBeanExportProperties) （端点MBean导出属性）</span><span class="token comment" spellcheck="true"># JMX域名。 如果设置为'spring.jmx.default-domain'的值初始化。</span><span class="token attr-name">endpoints.jmx.domain</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用所有端点的JMX导出。</span><span class="token attr-name">endpoints.jmx.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 附加静态属性以附加到表示端点的MBean的所有对象名称。</span><span class="token attr-name">endpoints.jmx.static-names</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 确保在发生冲突时修改ObjectNames。</span><span class="token attr-name">endpoints.jmx.unique-names</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># JOLOKIA  JOLOKIA 配置</span><span class="token comment" spellcheck="true"># 见Jolokia手册</span><span class="token attr-name">jolokia.config.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 管理HTTP服务器（管理服务器属性）</span><span class="token comment" spellcheck="true"># 在每个响应中添加“X-Application-Context”HTTP头。</span><span class="token attr-name">management.add-application-context-header</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 管理端点应绑定到的网络地址。</span><span class="token attr-name">management.address</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 管理端点上下文路径。 例如`/ actuator`</span><span class="token attr-name">management.context-path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 管理端点HTTP端口。 默认使用与应用程序相同的端口。</span><span class="token attr-name">management.port</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用安全性</span><span class="token attr-name">management.security.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 访问管理端点所需的角色。</span><span class="token attr-name">management.security.role</span><span class="token punctuation">=</span> <span class="token attr-value">ADMIN</span><span class="token comment" spellcheck="true"># 会话创建策略使用（always，never，if_required，stateless）（总是，永远，if_required，无状态）。</span><span class="token attr-name">management.security.sessions</span><span class="token punctuation">=</span> <span class="token attr-value">stateless</span><span class="token comment" spellcheck="true"># HEALTH INDICATORS (previously health.*)</span><span class="token comment" spellcheck="true"># 启用数据库运行状况检查</span><span class="token attr-name">management.health.db.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用默认的健康指标。</span><span class="token attr-name">management.health.defaults.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用磁盘空间运行状况检查。</span><span class="token attr-name">management.health.diskspace.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 用于计算可用磁盘空间的路径。</span><span class="token attr-name">management.health.diskspace.path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应该可用的最小磁盘空间（以字节为单位）。</span><span class="token attr-name">management.health.diskspace.threshold</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 启用弹性搜索健康检查。</span><span class="token attr-name">management.health.elasticsearch.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 逗号分隔的索引名称。</span><span class="token attr-name">management.health.elasticsearch.indices</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 等待群集响应的时间（以毫秒为单位）。</span><span class="token attr-name">management.health.elasticsearch.response-timeout</span><span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token comment" spellcheck="true"># 启用JMS健康检查。</span><span class="token attr-name">management.health.jms.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用邮件运行状况检查。</span><span class="token attr-name">management.health.mail.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用MongoDB健康检查。</span><span class="token attr-name">management.health.mongo.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用RabbitMQ运行状况检查。</span><span class="token attr-name">management.health.rabbit.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用Redis健康检查。</span><span class="token attr-name">management.health.redis.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用Solr运行状况检查。</span><span class="token attr-name">management.health.solr.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 按照严重性的顺序，以逗号分隔的健康状态列表。</span><span class="token attr-name">management.health.status.order</span><span class="token punctuation">=</span> <span class="token attr-value">DOWN, OUT_OF_SERVICE, UNKNOWN, UP</span><span class="token comment" spellcheck="true"># TRACING ((TraceProperties) 跟踪性能</span><span class="token comment" spellcheck="true"># 跟踪中包含的项目。</span><span class="token attr-name">management.trace.include</span><span class="token punctuation">=</span> <span class="token attr-value">request-headers,response-headers,errors</span><span class="token comment" spellcheck="true"># 远程 shell配置</span><span class="token comment" spellcheck="true"># 验证类型。 根据环境自动检测。</span><span class="token attr-name">shell.auth</span><span class="token punctuation">=</span> <span class="token attr-value">simple</span><span class="token comment" spellcheck="true"># JAAS域。</span><span class="token attr-name">shell.auth.jaas.domain</span><span class="token punctuation">=</span> <span class="token attr-value">my-domain</span><span class="token comment" spellcheck="true"># 验证密钥的路径。 这应该指向一个有效的“.pem”文件。</span><span class="token attr-name">shell.auth.key.path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 登录用户。</span><span class="token attr-name">shell.auth.simple.user.name</span><span class="token punctuation">=</span> <span class="token attr-value">user</span><span class="token comment" spellcheck="true"># 登录用户的密码。</span><span class="token attr-name">shell.auth.simple.user.password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 登录到CRaSH控制台的所需的角色，以逗号分隔列表。</span><span class="token attr-name">shell.auth.spring.roles</span><span class="token punctuation">=</span> <span class="token attr-value">ADMIN</span><span class="token comment" spellcheck="true"># 用于查找命令的模式。</span><span class="token attr-name">shell.command-path-patterns</span><span class="token punctuation">=</span> <span class="token attr-value">classpath*:/commands/**,classpath*:/crash/commands/**</span><span class="token comment" spellcheck="true"># 扫描更改并在必要时更新命令（以秒为单位）。</span><span class="token attr-name">shell.command-refresh-interval</span><span class="token punctuation">=</span> <span class="token attr-value">-1</span><span class="token comment" spellcheck="true"># 用于查找配置的模式。</span><span class="token attr-name">shell.config-path-patterns</span><span class="token punctuation">=</span> <span class="token attr-value">classpath*:/crash/*</span><span class="token comment" spellcheck="true"># 逗号分隔的要禁用的命令列表。</span><span class="token attr-name">shell.disabled-commands</span><span class="token punctuation">=</span> <span class="token attr-value">jpa*,jdbc*,jndi*</span><span class="token comment" spellcheck="true"># 禁用逗号分隔的插件列表。 默认情况下，根据环境禁用某些插件。</span><span class="token attr-name">shell.disabled-plugins</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用户被提示再次登录后的毫秒数。</span><span class="token attr-name">shell.ssh.auth-timeout</span> <span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用CRaSH SSH支持。</span><span class="token attr-name">shell.ssh.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 未使用的连接关闭之后的毫秒数。</span><span class="token attr-name">shell.ssh.idle-timeout</span> <span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SSH服务器密钥路径。</span><span class="token attr-name">shell.ssh.key-path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SSH端口。</span><span class="token attr-name">shell.ssh.port</span><span class="token punctuation">=</span> <span class="token attr-value">2000</span><span class="token comment" spellcheck="true"># 启用CRaSH telnet支持。 如果TelnetPlugin可用，默认情况下启用。</span><span class="token attr-name">shell.telnet.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># Telnet端口。</span><span class="token attr-name">shell.telnet.port</span><span class="token punctuation">=</span> <span class="token attr-value">5000</span><span class="token comment" spellcheck="true"># GIT 信息配置</span><span class="token comment" spellcheck="true"># 生成的git信息属性文件的资源引用。</span><span class="token attr-name">spring.git.properties</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 标准出口</span><span class="token comment" spellcheck="true"># 模式，告诉聚合器如何从源存储库中的键。</span><span class="token attr-name">spring.metrics.export.aggregate.key-pattern</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 全局存储库的前缀如果处于活动状态。</span><span class="token attr-name">spring.metrics.export.aggregate.prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 导出刻度之间以毫秒为单位的延迟。 按照这种延迟，指标将按计划导出到外部来源。</span><span class="token attr-name">spring.metrics.export.delay-millis</span><span class="token punctuation">=</span> <span class="token attr-value">5000</span><span class="token comment" spellcheck="true"># 标志以启用度量标准导出（假设MetricWriter可用）。</span><span class="token attr-name">spring.metrics.export.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 要排除的度量名称列表。 应用后包括。</span><span class="token attr-name">spring.metrics.export.excludes</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 要包含的度量名称的模式列表。</span><span class="token attr-name">spring.metrics.export.includes</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># redis存储库导出的密钥（如果活动）。</span><span class="token attr-name">spring.metrics.export.redis.key</span><span class="token punctuation">=</span> <span class="token attr-value">keys.spring.metrics</span><span class="token comment" spellcheck="true"># redis存储库的前缀 如果处于活动状态。</span><span class="token attr-name">spring.metrics.export.redis.prefix</span><span class="token punctuation">=</span> <span class="token attr-value">spring.metrics</span><span class="token comment" spellcheck="true"># 标志基于不导出不变的度量值来关闭任何可用的优化。</span><span class="token attr-name">spring.metrics.export.send-latest</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 主机的statsd服务器接收导出的指标。</span><span class="token attr-name">spring.metrics.export.statsd.host</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 接收导出指标的statsd服务器端口。</span><span class="token attr-name">spring.metrics.export.statsd.port</span><span class="token punctuation">=</span> <span class="token attr-value">8125</span><span class="token comment" spellcheck="true"># statsd导出指标的前缀。</span><span class="token attr-name">spring.metrics.export.statsd.prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 每个MetricWriter bean名称具有特定的触发器属性。</span><span class="token attr-name">spring.metrics.export.triggers.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># DEVTOOLS属性</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># DEVTOOLS（开发工具属性）</span><span class="token comment" spellcheck="true"># 启用一个livereload.com兼容的服务器。</span><span class="token attr-name">spring.devtools.livereload.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true">#  # Server port.</span><span class="token attr-name">spring.devtools.livereload.port</span><span class="token punctuation">=</span> <span class="token attr-value">35729</span><span class="token comment" spellcheck="true"># 应该排除的触发完全重新启动的其他模式。</span><span class="token attr-name">spring.devtools.restart.additional-exclude</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 观看更改的附加路径。</span><span class="token attr-name">spring.devtools.restart.additional-paths</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用自动重启功能。</span><span class="token attr-name">spring.devtools.restart.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 应该排除的模式触发完全重新启动。</span><span class="token attr-name">spring.devtools.restart.exclude</span><span class="token punctuation">=</span> <span class="token attr-value">META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties</span><span class="token comment" spellcheck="true"># 轮询类路径更改之间等待的时间量（以毫秒为单位）。</span><span class="token attr-name">spring.devtools.restart.poll-interval</span><span class="token punctuation">=</span> <span class="token attr-value">1000</span><span class="token comment" spellcheck="true"># 触发重新启动之前没有任何类路径更改所需的安静时间量（以毫秒为单位）。</span><span class="token attr-name">spring.devtools.restart.quiet-period</span><span class="token punctuation">=</span> <span class="token attr-value">400</span><span class="token comment" spellcheck="true"># 更改后的特定文件的名称将触发重新启动检查。 如果未指定任何类路径文件更改将触发重新启动。</span><span class="token attr-name">spring.devtools.restart.trigger-file</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 远程开发工具属性</span><span class="token comment" spellcheck="true"># 用于处理远程连接的上下文路径。</span><span class="token attr-name">spring.devtools.remote.context-path</span><span class="token punctuation">=</span> <span class="token attr-value">/.~~spring-boot!~</span><span class="token comment" spellcheck="true"># 启用远程调试支持。</span><span class="token attr-name">spring.devtools.remote.debug.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 本地远程调试服务器端口。</span><span class="token attr-name">spring.devtools.remote.debug.local-port</span><span class="token punctuation">=</span> <span class="token attr-value">8000</span><span class="token comment" spellcheck="true"># 用于连接到远程应用程序的代理主机。</span><span class="token attr-name">spring.devtools.remote.proxy.host</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于连接到远程应用程序的代理端口。</span><span class="token attr-name">spring.devtools.remote.proxy.port</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用远程重启。</span><span class="token attr-name">spring.devtools.remote.restart.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 建立连接所需的共享密钥（需要启用远程支持）。</span><span class="token attr-name">spring.devtools.remote.secret</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># HTTP头用于传输共享密钥。</span><span class="token attr-name">spring.devtools.remote.secret-header-name</span><span class="token punctuation">=</span> <span class="token attr-value">X-AUTH-TOKEN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="yaml-wen-jian-pei-zhi"><code>yaml</code>文件配置</span><a href="#yaml-wen-jian-pei-zhi" class="header-anchor">.</a></h2><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config</a></p></blockquote><p><img src="/2020/09/12/4061/image-20200913003916036.png" alt></p><h3><span id="qiang-da-de-di-fang">强大的地方</span><a href="#qiang-da-de-di-fang" class="header-anchor">.</a></h3><blockquote><p>它可以直接给实体类赋值(注入)</p></blockquote><h4><span id="shu-xing-si-you-fu-zhi-de-fang-shi-chu-liao-zhi-jie-fan-she">属性（私有）赋值的方式（除了直接反射）</span><a href="#shu-xing-si-you-fu-zhi-de-fang-shi-chu-liao-zhi-jie-fan-she" class="header-anchor">.</a></h4><ul><li>setter方法 和  constructor</li><li>spring中<ul><li>配置文件中，bean中注入（setter 和 constructor</li><li>使用注解 <code>@Value</code></li></ul></li><li><strong>springboot中</strong><ul><li>使用<code>application.yaml</code>和注解 <code>@configurationProperties(prefix = &quot;类名(小写)&quot;)</code></li></ul></li></ul><h4><span id="configurationproperties-de-zuo-yong">@configurationProperties的作用</span><a href="#configurationproperties-de-zuo-yong" class="header-anchor">.</a></h4><p>​    将配置文件的每一个属性的值，映射到这个组件中；</p><p>​    告诉springboot将本类中的所有属性和配置文件中相关的配置进行绑定</p><p>​    参数 prefix = “” 将配置文件中的””下面的所有属性一一对应</p><p>​    需要导入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuyou<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuminkai * @version 1.0 * @datetime 2020/9/13 9:45 * @decription **/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>531165355267377822L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean isFemale<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> hobbies<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> card<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Boolean <span class="token function">getFemale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> isFemale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFemale</span><span class="token punctuation">(</span>Boolean female<span class="token punctuation">)</span> <span class="token punctuation">{</span>        isFemale <span class="token operator">=</span> female<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Date <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>Date birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getHobbies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hobbies<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHobbies</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> hobbies<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> hobbies<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> card<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCard</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> card<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>card <span class="token operator">=</span> card<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Dog <span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dog<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDog</span><span class="token punctuation">(</span>Dog dog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dog <span class="token operator">=</span> dog<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", isFemale="</span> <span class="token operator">+</span> isFemale <span class="token operator">+</span>                <span class="token string">", birthday="</span> <span class="token operator">+</span> birthday <span class="token operator">+</span>                <span class="token string">", hobbies="</span> <span class="token operator">+</span> hobbies <span class="token operator">+</span>                <span class="token string">", card="</span> <span class="token operator">+</span> card <span class="token operator">+</span>                <span class="token string">", dog="</span> <span class="token operator">+</span> dog <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuyou<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuminkai * @version 1.0 * @datetime 2020/9/13 9:37 * @decription **/</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6427446484435308919L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"阿黄"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Dog{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot01ConfigApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Person person<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> liuyou  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">female</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">birthday</span><span class="token punctuation">:</span> 1999/2/14  <span class="token key atrule">hobbies</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token key atrule">l1</span><span class="token punctuation">:</span> <span class="token string">"你好"</span><span class="token punctuation">,</span><span class="token key atrule">l2</span><span class="token punctuation">:</span> <span class="token string">"不好"</span>  <span class="token punctuation">}</span>  <span class="token key atrule">card</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    IDCard<span class="token punctuation">,</span> BandCard<span class="token punctuation">,</span> SchoolCard  <span class="token punctuation">]</span>  <span class="token key atrule">dag</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> liu    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/09/12/4061/image-20200913104813879.png" alt></p><h2><span id="duo-wen-jian-pei-zhi">多文件配置</span><a href="#duo-wen-jian-pei-zhi" class="header-anchor">.</a></h2><h3><span id="you-xian-ji-guan-xi-bu-che-fu-gai">优先级关系（不扯覆盖）</span><a href="#you-xian-ji-guan-xi-bu-che-fu-gai" class="header-anchor">.</a></h3><blockquote><p>./ 代表 在项目路径下</p><p>数字越小，优先使用 配置文件</p></blockquote><ol><li><code>file：./custom-config/application.yaml</code></li><li><code>classpath: custom-config/application.yaml</code></li><li><code>file: ./config/application.yaml</code></li><li><code>file: ./application.yaml</code></li><li><code>classpath: config/application.yaml</code></li><li><code>classpath: /application.yaml</code></li></ol><p><img src="/2020/09/12/4061/image-20200914105010249.png" alt></p><h2><span id="duo-huan-jing-pei-zhi">多环境配置</span><a href="#duo-huan-jing-pei-zhi" class="header-anchor">.</a></h2><h3><span id="ru-guo-shi-yong-properties-zuo-wei-pei-zhi-wen-jian">如果使用<code>properties</code>作为配置文件</span><a href="#ru-guo-shi-yong-properties-zuo-wei-pei-zhi-wen-jian" class="header-anchor">.</a></h3><blockquote><p>需要写多个配置文件</p></blockquote><p><img src="/2020/09/12/4061/image-20200914110344615.png" alt></p><h3><span id="ru-guo-shi-yong-yaml-zuo-wei-pei-zhi-wen-jian">如果使用<code>yaml</code>作为配置文件</span><a href="#ru-guo-shi-yong-yaml-zuo-wei-pei-zhi-wen-jian" class="header-anchor">.</a></h3><blockquote><p>使用 — 实现多文档 分块</p></blockquote><p><img src="/2020/09/12/4061/image-20200914111025176.png" alt></p><h1><span id="tuo-zhan">拓展</span><a href="#tuo-zhan" class="header-anchor">.</a></h1><h3><span id="1-bang-ding-qi-ta-de-pei-zhi-wen-jian">1、绑定其他的配置文件</span><a href="#1-bang-ding-qi-ta-de-pei-zhi-wen-jian" class="header-anchor">.</a></h3><p>使用 <code>@PropertySource(value = &quot;classpath:properties配置文件&quot;)</code>即可</p><h3><span id="2-yaml-de-qi-ta-yong-fa">2、yaml的其他用法</span><a href="#2-yaml-de-qi-ta-yong-fa" class="header-anchor">.</a></h3><blockquote><p>其他用法：<a href="https://www.jianshu.com/p/20c3cde0f189" target="_blank" rel="noopener">https://www.jianshu.com/p/20c3cde0f189</a></p></blockquote><p>EL表达式：</p><ul><li><code>${random.int}</code></li><li><code>${random.uuid}</code></li><li><code>${person.name:liuyou}_name</code> : 如果person的name存在，就有存在的值，不存在就用liuyou</li></ul><p><img src="/2020/09/12/4061/image-20200913110106233.png" alt></p><blockquote><p>松散绑定: 类似于 可以在 yaml配置文件中使用 下滑线等形式匹配 实体属性(驼峰命名)</p></blockquote><p><img src="/2020/09/12/4061/image-20200913231749854.png" alt></p><blockquote><p>JSR303数据校验具体看 相应的博客</p></blockquote><h3><span id="3-properties-yu-yaml-de-jia-zai-shun-xu">3、properties 与 yaml的加载顺序</span><a href="#3-properties-yu-yaml-de-jia-zai-shun-xu" class="header-anchor">.</a></h3><ul><li>先yaml</li><li>后properties</li></ul><blockquote><p><strong>即 properties的优先级要比 yaml的高</strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-05-SpringBoot配置</title>
      <link href="/2020/09/12/4062.html"/>
      <url>/2020/09/12/4062.html</url>
      
        <content type="html"><![CDATA[<h1><span id="springboot-pei-zhi">SpringBoot配置</span><a href="#springboot-pei-zhi" class="header-anchor">.</a></h1><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/</a></p></blockquote><p><strong>配置文件格式</strong></p><ul><li>application.properties<ul><li>key = value</li></ul></li><li>application.yaml<ul><li>key:<code>(空格)</code>value</li></ul></li></ul><h2><span id="he-xin-pei-zhi-wen-jian-application-properties">核心配置文件 <code>application.properties</code></span><a href="#he-xin-pei-zhi-wen-jian-application-properties" class="header-anchor">.</a></h2><blockquote><p>来自：<a href="https://blog.csdn.net/lpfsuperman/article/details/78287265" target="_blank" rel="noopener">https://blog.csdn.net/lpfsuperman/article/details/78287265</a></p></blockquote><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># 核心属性</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># 文件编码</span><span class="token attr-name">banner.charset</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 文件位置</span><span class="token attr-name">banner.location</span><span class="token punctuation">=</span> <span class="token attr-value">classpath:banner.txt</span><span class="token comment" spellcheck="true"># 日志配置</span><span class="token comment" spellcheck="true"># 日志配置文件的位置。 例如对于Logback的`classpath：logback.xml`</span><span class="token attr-name">logging.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># ％wEx#记录异常时使用的转换字。</span><span class="token attr-name">logging.exception-conversion-word</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志文件名。 例如`myapp.log`</span><span class="token attr-name">logging.file</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志级别严重性映射。 例如`logging.level.org.springframework =  DEBUG`</span><span class="token attr-name">logging.level.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志文件的位置。 例如`/ var / log`</span><span class="token attr-name">logging.path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于输出到控制台的Appender模式。 只支持默认的logback设置。</span><span class="token attr-name">logging.pattern.console</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于输出到文件的Appender模式。 只支持默认的logback设置。</span><span class="token attr-name">logging.pattern.file</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 日志级别的Appender模式（默认％5p）。 只支持默认的logback设置。</span><span class="token attr-name">logging.pattern.level</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true">#注册日志记录系统的初始化挂钩。</span><span class="token attr-name">logging.register-shutdown-hook</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># AOP 切面</span><span class="token comment" spellcheck="true"># 添加@EnableAspectJAutoProxy。</span><span class="token attr-name">spring.aop.auto</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 是否要创建基于子类（CGLIB）的代理（true），而不是基于标准的基于Java接口的代理（false）。</span><span class="token attr-name">spring.aop.proxy-target-class</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 应用程序上下文初始化器</span><span class="token comment" spellcheck="true"># 应用指标。</span><span class="token attr-name">spring.application.index</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应用程序名称。</span><span class="token attr-name">spring.application.name</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 国际化（消息源自动配置）</span><span class="token comment" spellcheck="true">#</span><span class="token attr-name">spring.messages.basename</span><span class="token punctuation">=</span> <span class="token attr-value">messages</span><span class="token comment" spellcheck="true"># 以逗号分隔的基础名称列表，每个都在ResourceBundle约定之后。</span><span class="token comment" spellcheck="true"># 加载的资源束文件缓存到期，以秒为单位。 设置为-1时，软件包将永久缓存。</span><span class="token attr-name">spring.messages.cache-seconds</span><span class="token punctuation">=</span> <span class="token attr-value">-1</span><span class="token comment" spellcheck="true"># 消息编码。</span><span class="token attr-name">spring.messages.encoding</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 设置是否返回到系统区域设置，如果没有找到特定语言环境的文件。</span><span class="token attr-name">spring.messages.fallback-to-system-locale</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># REDIS (Redis 配置)</span><span class="token comment" spellcheck="true"># 连接工厂使用的数据库索引。</span><span class="token attr-name">spring.redis.database</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># Redis服务器主机。</span><span class="token attr-name">spring.redis.host</span><span class="token punctuation">=</span> <span class="token attr-value">localhost</span><span class="token comment" spellcheck="true"># 登录redis服务器的密码。</span><span class="token attr-name">spring.redis.password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 给定时间池可以分配的最大连接数。 使用负值为无限制。</span><span class="token attr-name">spring.redis.pool.max-active</span><span class="token punctuation">=</span> <span class="token attr-value">8</span><span class="token comment" spellcheck="true"># 池中“空闲”连接的最大数量。 使用负值来表示无限数量的空闲连接。</span><span class="token attr-name">spring.redis.pool.max-idle</span><span class="token punctuation">=</span> <span class="token attr-value">8</span><span class="token comment" spellcheck="true"># 连接分配在池耗尽之前在抛出异常之前应阻止的最大时间量（以毫秒为单位）。 使用负值无限期地阻止。</span><span class="token attr-name">spring.redis.pool.max-wait</span><span class="token punctuation">=</span> <span class="token attr-value">-1</span><span class="token comment" spellcheck="true"># 定义池中维护的最小空闲连接数。 此设置只有在正值时才有效果。</span><span class="token attr-name">spring.redis.pool.min-idle</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># redis服务器端口</span><span class="token attr-name">spring.redis.port</span><span class="token punctuation">=</span> <span class="token attr-value">6379</span><span class="token comment" spellcheck="true"># redis服务器名称</span><span class="token attr-name">spring.redis.sentinel.master</span><span class="token punctuation">=</span><span class="token comment" spellcheck="true"># </span><span class="token attr-name">spring.redis.sentinel.nodes</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 连接超时（毫秒）。</span><span class="token attr-name">spring.redis.timeout</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 管理员 （Spring应用程序管理员JMX自动配置）</span><span class="token comment" spellcheck="true"># 开启应用管理功能。</span><span class="token attr-name">spring.application.admin.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># JMX应用程序名称MBean。</span><span class="token attr-name">spring.application.admin.jmx-name</span><span class="token punctuation">=</span> <span class="token attr-value">org.springframework.boot:type= Admin,name= SpringApplication</span><span class="token comment" spellcheck="true"># 自动配置</span><span class="token comment" spellcheck="true"># 自动配置类排除。</span><span class="token attr-name">spring.autoconfigure.exclude</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># spring 核心配置</span><span class="token comment" spellcheck="true"># 跳过搜索BeanInfo类。</span><span class="token attr-name">spring.beaninfo.ignore</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># spring 缓存配置</span><span class="token comment" spellcheck="true"># 由底层缓存管理器支持的要创建的缓存名称的逗号分隔列表。</span><span class="token attr-name">spring.cache.cache-names</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化EhCache的配置文件的位置。</span><span class="token attr-name">spring.cache.ehcache.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于创建缓存的规范。 检查CacheBuilderSpec有关规格格式的更多细节。</span><span class="token attr-name">spring.cache.guava.spec</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化Hazelcast的配置文件的位置。</span><span class="token attr-name">spring.cache.hazelcast.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化Infinispan的配置文件的位置。</span><span class="token attr-name">spring.cache.infinispan.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于初始化缓存管理器的配置文件的位置。</span><span class="token attr-name">spring.cache.jcache.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于检索符合JSR-107的缓存管理器的CachingProvider实现的完全限定名称。 只有在类路径上有多个JSR-107实现可用时才需要。</span><span class="token attr-name">spring.cache.jcache.provider</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 缓存类型，默认情况下根据环境自动检测。</span><span class="token attr-name">spring.cache.type</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># spring配置 （配置文件应用侦听器）</span><span class="token comment" spellcheck="true"># 配置文件位置。</span><span class="token attr-name">spring.config.location</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 配置文件名。</span><span class="token attr-name">spring.config.name</span><span class="token punctuation">=</span> <span class="token attr-value">application</span><span class="token comment" spellcheck="true"># hazelcast配置(Hazelcast是一个高度可扩展的数据分发和集群平台，提供了高效的、可扩展的分布式数据存储、数据缓存.)</span><span class="token comment" spellcheck="true"># 用于初始化Hazelcast的配置文件的位置。</span><span class="token attr-name">spring.hazelcast.config</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># JMX</span><span class="token comment" spellcheck="true"># JMX域名。</span><span class="token attr-name">spring.jmx.default-domain</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 将管理bean暴露给JMX域。</span><span class="token attr-name">spring.jmx.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># MBean服务器bean名称。</span><span class="token attr-name">spring.jmx.server</span><span class="token punctuation">=</span> <span class="token attr-value">mbeanServer</span><span class="token comment" spellcheck="true"># Email (MailProperties)  邮件属性</span><span class="token comment" spellcheck="true"># 默认MimeMessage编码。</span><span class="token attr-name">spring.mail.default-encoding</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># SMTP服务器主机。 例如`smtp.example.com`</span><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话JNDI名称。 设置时，优先于其他邮件设置。</span><span class="token attr-name">spring.mail.jndi-name</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 登录SMTP服务器的密码。</span><span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SMTP服务器端口。</span><span class="token attr-name">spring.mail.port</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 其他JavaMail会话属性。</span><span class="token attr-name">spring.mail.properties.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SMTP服务器使用的协议。</span><span class="token attr-name">spring.mail.protocol</span><span class="token punctuation">=</span> <span class="token attr-value">smtp</span><span class="token comment" spellcheck="true"># 测试邮件服务器在启动时可用。</span><span class="token attr-name">spring.mail.test-connection</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 登录SMTP服务器的用户。</span><span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应用设置（spring应用）</span><span class="token comment" spellcheck="true"># 用于在应用程序运行时显示横幅的模式。</span><span class="token attr-name">spring.main.banner-mode</span><span class="token punctuation">=</span> <span class="token attr-value">console</span><span class="token comment" spellcheck="true"># 源（类名，包名或XML资源位置）包含在ApplicationContext中。</span><span class="token attr-name">spring.main.sources</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 在Web环境中运行应用程序（默认情况下自动检测）。</span><span class="token attr-name">spring.main.web-environment</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 文件编码（文件编码应用程序侦听器）</span><span class="token comment" spellcheck="true"># 应用程序使用的预期字符编码。</span><span class="token attr-name">spring.mandatory-file-encoding</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 输出</span><span class="token comment" spellcheck="true"># 配置ANSI输出（可以是“detect”，“always”，“never”）-->“检测”，“永远”，“从不”</span><span class="token attr-name">spring.output.ansi.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">detect</span><span class="token comment" spellcheck="true"># PID文件（应用程序文件写入器）</span><span class="token comment" spellcheck="true"># 如果使用ApplicationPidFileWriter但是无法写入PID文件，则失败。</span><span class="token attr-name">spring.pid.fail-on-write-error</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 要写入的PID文件的位置（如果使用ApplicationPidFileWriter）。</span><span class="token attr-name">spring.pid.file</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true">#   简介（profiles 这个单词翻译过来就是这样... 没用过这个属性，有哪位大神用过请留言我改正，感谢。）</span><span class="token comment" spellcheck="true"># 活动配置文件的逗号分隔列表。</span><span class="token attr-name">spring.profiles.active</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 无条件地激活指定的逗号分隔的配置文件。</span><span class="token attr-name">spring.profiles.include</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SendGrid（SendGrid自动配置）</span><span class="token comment" spellcheck="true"># SendGrid帐号用户名</span><span class="token attr-name">spring.sendgrid.username</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SendGrid帐号密码</span><span class="token attr-name">spring.sendgrid.password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SendGrid代理主机</span><span class="token attr-name">spring.sendgrid.proxy.host</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SendGrid代理端口</span><span class="token attr-name">spring.sendgrid.proxy.port</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true">#   WEB属性</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># 文件上传属性</span><span class="token comment" spellcheck="true"># 启用对文件上传的支持。</span><span class="token attr-name">multipart.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 将文件写入磁盘后的阈值。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><span class="token attr-name">multipart.file-size-threshold</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 上传文件的位置。</span><span class="token attr-name">multipart.location</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 最大文件大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><span class="token attr-name">multipart.max-file-size</span><span class="token punctuation">=</span> <span class="token attr-value">1Mb</span><span class="token comment" spellcheck="true"># 最大请求大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><span class="token attr-name">multipart.max-request-size</span><span class="token punctuation">=</span> <span class="token attr-value">10Mb</span><span class="token comment" spellcheck="true"># 嵌入式服务器配置（服务器属性）</span><span class="token comment" spellcheck="true"># 服务器应绑定到的网络地址。</span><span class="token attr-name">server.address</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 如果启用响应压缩。</span><span class="token attr-name">server.compression.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 从压缩中排除的用户代理列表。</span><span class="token attr-name">server.compression.excluded-user-agents</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应该压缩的MIME类型的逗号分隔列表。 例如`text / html，text / css，application / json`</span><span class="token attr-name">server.compression.mime-types</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 执行压缩所需的最小响应大小。 例如2048</span><span class="token attr-name">server.compression.min-response-size</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Servlet上下文初始化参数。 例如`server.context-parameters.a =  alpha`</span><span class="token attr-name">server.context-parameters.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应用程序的上下文路径。</span><span class="token attr-name">server.context-path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 显示应用程序的名称。</span><span class="token attr-name">server.display-name</span><span class="token punctuation">=</span> <span class="token attr-value">application</span><span class="token comment" spellcheck="true"># 何时包含“stacktrace”属性。</span><span class="token attr-name">server.error.include-stacktrace</span><span class="token punctuation">=</span> <span class="token attr-value">never</span><span class="token comment" spellcheck="true"># 错误控制器的路径。</span><span class="token attr-name">server.error.path</span><span class="token punctuation">=</span> <span class="token attr-value">/error</span><span class="token comment" spellcheck="true"># 启动浏览器中出现服务器错误时显示的默认错误页面。</span><span class="token attr-name">server.error.whitelabel.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># JSP servlet的类名。</span><span class="token attr-name">server.jsp-servlet.class-name</span><span class="token punctuation">=</span> <span class="token attr-value">org.apache.jasper.servlet.JspServlet</span><span class="token comment" spellcheck="true"># Init参数用于配置JSP servlet</span><span class="token attr-name">server.jsp-servlet.init-parameters.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># JSP servlet是否被注册</span><span class="token attr-name">server.jsp-servlet.registered</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 服务器HTTP端口。</span><span class="token attr-name">server.port</span><span class="token punctuation">=</span> <span class="token attr-value">8080</span><span class="token comment" spellcheck="true"># 主调度程序servlet的路径。</span><span class="token attr-name">server.servlet-path</span><span class="token punctuation">=</span> <span class="token attr-value">/</span><span class="token comment" spellcheck="true"># 会话cookie的注释。</span><span class="token attr-name">server.session.cookie.comment</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的域。</span><span class="token attr-name">server.session.cookie.domain</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># “HttpOnly”标志为会话cookie。</span><span class="token attr-name">server.session.cookie.http-only</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的最大时长（以秒为单位）。</span><span class="token attr-name">server.session.cookie.max-age</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie名称。</span><span class="token attr-name">server.session.cookie.name</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的路径。</span><span class="token attr-name">server.session.cookie.path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话cookie的“安全”标志。</span><span class="token attr-name">server.session.cookie.secure</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 重启之间持续会话数据。</span><span class="token attr-name">server.session.persistent</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 用于存储会话数据的目录。</span><span class="token attr-name">server.session.store-dir</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话超时（秒）。</span><span class="token attr-name">server.session.timeout</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 会话跟踪模式（以下一个或多个：“cookie”，“url”，“ssl”）。</span><span class="token attr-name">server.session.tracking-modes</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 支持SSL密码。</span><span class="token attr-name">server.ssl.ciphers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 客户端认证是否需要（“want”）或需要（“need”）。 需要信任存储。</span><span class="token attr-name">server.ssl.client-auth</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># ssl配置</span><span class="token attr-name">server.ssl.enabled</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-alias</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store-password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store-provider</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.key-store-type</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.protocol</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store-password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store-provider</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">server.ssl.trust-store-type</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 创建日志文件的目录。 可以相对于tomcat base dir或absolute。</span><span class="token attr-name">server.tomcat.accesslog.directory</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用访问日志。</span><span class="token attr-name">server.tomcat.accesslog.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 访问日志的格式化模式。</span><span class="token attr-name">server.tomcat.accesslog.pattern</span><span class="token punctuation">=</span> <span class="token attr-value">common</span><span class="token comment" spellcheck="true"># 日志文件名前缀。</span><span class="token attr-name">server.tomcat.accesslog.prefix</span><span class="token punctuation">=</span> <span class="token attr-value">access_log</span><span class="token comment" spellcheck="true"># 日志文件名后缀。</span><span class="token attr-name">server.tomcat.accesslog.suffix</span><span class="token punctuation">=</span> <span class="token attr-value">.log</span><span class="token comment" spellcheck="true"># 在调用backgroundProcess方法之间延迟秒。</span><span class="token attr-name">server.tomcat.background-processor-delay</span><span class="token punctuation">=</span> <span class="token attr-value">30</span><span class="token comment" spellcheck="true"># Tomcat基本目录。 如果未指定，将使用临时目录。</span><span class="token attr-name">server.tomcat.basedir</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 正则表达式匹配可信IP地址。</span><span class="token attr-name">server.tomcat.internal-proxies</span><span class="token punctuation">=</span> <span class="token attr-value">10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\192\\.168\\.\\d{1,3}\\.\\d{1,3}|\\169\\.254\\.\\d{1,3}\\.\\d{1,3}|\\127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|\\172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|\\172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}</span><span class="token comment" spellcheck="true"># HTTP消息头的最大大小（以字节为单位）。</span><span class="token attr-name">server.tomcat.max-http-header-size</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 最大工作线程数。</span><span class="token attr-name">server.tomcat.max-threads</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 用于覆盖原始端口值的HTTP头的名称。</span><span class="token attr-name">server.tomcat.port-header</span><span class="token punctuation">=</span> <span class="token attr-value">X-Forwarded-Port</span><span class="token comment" spellcheck="true"># 头文件，保存传入协议，通常命名为“X-Forwarded-Proto”。</span><span class="token attr-name">server.tomcat.protocol-header</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 表示传入请求使用SSL的协议头的值。</span><span class="token attr-name">server.tomcat.protocol-header-https-value</span><span class="token punctuation">=</span> <span class="token attr-value">https</span><span class="token comment" spellcheck="true"># 提取远程ip的HTTP头的名称。 例如`X-FORWARDED-FOR`</span><span class="token attr-name">server.tomcat.remote-ip-header</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于解码URI的字符编码。</span><span class="token attr-name">server.tomcat.uri-encoding</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 访问日志目录。</span><span class="token attr-name">server.undertow.accesslog.dir</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用访问日志。</span><span class="token attr-name">server.undertow.accesslog.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 访问日志的格式化模式。</span><span class="token attr-name">server.undertow.accesslog.pattern</span><span class="token punctuation">=</span> <span class="token attr-value">common</span><span class="token comment" spellcheck="true"># 每个缓冲区的大小字节数。</span><span class="token attr-name">server.undertow.buffer-size</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 每个区域的缓冲区数。</span><span class="token attr-name">server.undertow.buffers-per-region</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 在Java堆之外分配缓冲区。</span><span class="token attr-name">server.undertow.direct-buffers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 为工作者创建的I / O线程数。</span><span class="token attr-name">server.undertow.io-threads</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 工作线程数。</span><span class="token attr-name">server.undertow.worker-threads</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 如果X-Forwarded- *头应该应用于HttpRequest。</span><span class="token attr-name">server.use-forward-headers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 自由标记（自由标记自动配置）</span><span class="token comment" spellcheck="true"># 设置是否允许HttpServletRequest属性重写（隐藏）控制器生成的同名模型属性。</span><span class="token attr-name">spring.freemarker.allow-request-override</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置是否允许HttpSession属性重写（隐藏）控制器生成的相同名称的模型属性。</span><span class="token attr-name">spring.freemarker.allow-session-override</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 启用模板缓存。</span><span class="token attr-name">spring.freemarker.cache</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 模板编码。</span><span class="token attr-name">spring.freemarker.charset</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 检查模板位置是否存在。</span><span class="token attr-name">spring.freemarker.check-template-location</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># Content-Type值。</span><span class="token attr-name">spring.freemarker.content-type</span><span class="token punctuation">=</span> <span class="token attr-value">text/html</span><span class="token comment" spellcheck="true"># 启用此技术的MVC视图分辨率。</span><span class="token attr-name">spring.freemarker.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><span class="token attr-name">spring.freemarker.expose-request-attributes</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><span class="token attr-name">spring.freemarker.expose-session-attributes</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置是否公开一个RequestContext供Spring 的宏库使用，名称为“springMacroRequestContext”。</span><span class="token attr-name">spring.freemarker.expose-spring-macro-helpers</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 首选文件系统访问模板加载。 文件系统访问可以对模板更改进行热检测。</span><span class="token attr-name">spring.freemarker.prefer-file-system-access</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 前缀，在构建URL时先查看名称。</span><span class="token attr-name">spring.freemarker.prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 所有视图的RequestContext属性的名称。</span><span class="token attr-name">spring.freemarker.request-context-attribute</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 公开的FreeMarker密钥将被传递给FreeMarker的配置。</span><span class="token attr-name">spring.freemarker.settings.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 后缀，在构建URL时附加到查看名称。</span><span class="token attr-name">spring.freemarker.suffix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 逗号分隔的模板路径列表。</span><span class="token attr-name">spring.freemarker.template-loader-path</span><span class="token punctuation">=</span> <span class="token attr-value">classpath:/templates/</span><span class="token comment" spellcheck="true"># 可以解决的视图名称的白名单。</span><span class="token attr-name">spring.freemarker.view-names</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># groovr模板（Groovy模板自动配置）</span><span class="token comment" spellcheck="true"># 设置是否允许HttpServletRequest属性重写（隐藏）控制器生成的同名模型属性。</span><span class="token attr-name">spring.groovy.template.allow-request-override</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置是否允许HttpSession属性重写（隐藏）控制器生成的相同名称的模型属性。</span><span class="token attr-name">spring.groovy.template.allow-session-override</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 启用模板缓存。</span><span class="token attr-name">spring.groovy.template.cache</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 模板编码。</span><span class="token attr-name">spring.groovy.template.charset</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 检查模板位置是否存在。</span><span class="token attr-name">spring.groovy.template.check-template-location</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 请参阅GroovyMarkupConfigurer</span><span class="token attr-name">spring.groovy.template.configuration.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Content-Type值。</span><span class="token attr-name">spring.groovy.template.content-type</span><span class="token punctuation">=</span> <span class="token attr-value">test/html</span><span class="token comment" spellcheck="true"># 启用此技术的MVC视图分辨率。</span><span class="token attr-name">spring.groovy.template.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><span class="token attr-name">spring.groovy.template.expose-request-attributes</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><span class="token attr-name">spring.groovy.template.expose-session-attributes</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 设置是否公开一个RequestContext供Spring Spring的宏库使用，名称为“springMacroRequestContext”。</span><span class="token attr-name">spring.groovy.template.expose-spring-macro-helpers</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 前缀，在构建URL时先查看名称。</span><span class="token attr-name">spring.groovy.template.prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 所有视图的RequestContext属性的名称。</span><span class="token attr-name">spring.groovy.template.request-context-attribute</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 模板路径。</span><span class="token attr-name">spring.groovy.template.resource-loader-path</span><span class="token punctuation">=</span> <span class="token attr-value">classpath:/templates/</span><span class="token comment" spellcheck="true"># 后缀，在构建URL时附加到查看名称。</span><span class="token attr-name">spring.groovy.template.suffix</span><span class="token punctuation">=</span> <span class="token attr-value">.tpl</span><span class="token comment" spellcheck="true"># 可以解决的视图名称的白名单。</span><span class="token attr-name">spring.groovy.template.view-names</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># spring Hateoas 配置</span><span class="token comment" spellcheck="true"># 指定应用程序/ hal + json响应是否应发送到接受application / json的请求。</span><span class="token attr-name">spring.hateoas.use-hal-as-default-json-media-type</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># HTTP 消息转换</span><span class="token comment" spellcheck="true"># 首选JSON映射程序用于HTTP消息转换。 设置为“gson”强制使用Gson，当它和Jackson都在类路径上时。</span><span class="token attr-name">spring.http.converters.preferred-json-mapper</span><span class="token punctuation">=</span> <span class="token attr-value">jackson</span><span class="token comment" spellcheck="true"># HTTP 编码（Http编码属性）</span><span class="token comment" spellcheck="true"># HTTP请求和响应的字符集。 如果未明确设置，则添加到“Content-Type”头。</span><span class="token attr-name">spring.http.encoding.charset</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 启用http编码支持。</span><span class="token attr-name">spring.http.encoding.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 将编码强制到HTTP请求和响应上配置的字符集。</span><span class="token attr-name">spring.http.encoding.force</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># Jackson(解析json和序列化json) 配置</span><span class="token comment" spellcheck="true"># 日期格式字符串或全限定日期格式类名。 例如`yyyy-MM-dd HH：mm：ss`。</span><span class="token attr-name">spring.jackson.date-format</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Jones开/关功能，影响Java对象反序列化的方式。</span><span class="token attr-name">spring.jackson.deserialization.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 关闭或者打开Jackson 功能</span><span class="token attr-name">spring.jackson.generator.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Joda日期时间格式字符串。 如果未配置，如果配置了格式字符串，则“日期格式”将用作后备。</span><span class="token attr-name">spring.jackson.joda-date-time-format</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于格式化的区域设置。</span><span class="token attr-name">spring.jackson.locale</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># jackson通用开/关功能。</span><span class="token attr-name">spring.jackson.mapper.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Jackson 解析器的开/关功能。</span><span class="token attr-name">spring.jackson.parser.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Jackson的PropertyNamingStrategy的一个常量。 也可以是PropertyNamingStrategy子类的完全限定类名。</span><span class="token attr-name">spring.jackson.property-naming-strategy</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Jones开/关功能，影响Java对象序列化的方式。</span><span class="token attr-name">spring.jackson.serialization.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 控制在序列化期间包含属性。 配置了Jackson的JsonInclude.Include枚举中的一个值。</span><span class="token attr-name">spring.jackson.serialization-inclusion</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 格式化日期时使用的时区。 例如`America / Los_Angeles`</span><span class="token attr-name">spring.jackson.time-zone</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Jersey 配置</span><span class="token comment" spellcheck="true"># 作为应用程序的基本URI的路径。 如果指定，则覆盖“@ApplicationPath”的值。</span><span class="token attr-name">spring.jersey.application-path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># jersey过滤器链顺序。</span><span class="token attr-name">spring.jersey.filter.order</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true">#  init参数传递到Jersey通过servlet或过滤器。</span><span class="token attr-name">spring.jersey.init.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># jersey整合型。可以是“servlet”也可以是“filter”。</span><span class="token attr-name">spring.jersey.type</span><span class="token punctuation">=</span> <span class="token attr-value">servlet</span><span class="token comment" spellcheck="true"># spring 视图分解器 配置</span><span class="token comment" spellcheck="true"># 启用后退解析支持。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.enable-fallback</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 启用设备视图解析器。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 前缀，用于查看移动设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.mobile-prefix</span><span class="token punctuation">=</span> <span class="token attr-value">mobile/</span><span class="token comment" spellcheck="true"># 后缀，附加到查看移动设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.mobile-suffix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 前缀，用于查看普通设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.normal-prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 后缀，附加到查看普通设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.normal-suffix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 前缀，用于查看平板设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.tablet-prefix</span><span class="token punctuation">=</span> <span class="token attr-value">tablet/</span><span class="token comment" spellcheck="true"># 后缀，附加到查看平板电脑设备的名称。</span><span class="token attr-name">spring.mobile.devicedelegatingviewresolver.tablet-suffix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 移动网站首选项 （站点首选项自动配置）</span><span class="token comment" spellcheck="true"># 启用SitePreferenceHandler。</span><span class="token attr-name">spring.mobile.sitepreference.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># MUSTACHE模板（Mustache AutoConfiguration）</span><span class="token comment" spellcheck="true"># 启用模板缓存。</span><span class="token attr-name">spring.mustache.cache</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 模板编码。</span><span class="token attr-name">spring.mustache.charset</span><span class="token punctuation">=</span> <span class="token attr-value">UTF-8</span><span class="token comment" spellcheck="true"># 检查模板位置是否存在。</span><span class="token attr-name">spring.mustache.check-template-location</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># Content-Type值</span><span class="token attr-name">spring.mustache.content-type</span><span class="token punctuation">=</span> <span class="token attr-value">text/html</span><span class="token comment" spellcheck="true"># 启用此技术的MVC视图分辨率。</span><span class="token attr-name">spring.mustache.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 前缀应用于模板名称。</span><span class="token attr-name">spring.mustache.prefix</span><span class="token punctuation">=</span> <span class="token attr-value">classpath:/templates/</span><span class="token comment" spellcheck="true"># 后缀应用于模板名称。</span><span class="token attr-name">spring.mustache.suffix</span><span class="token punctuation">=</span> <span class="token attr-value">.html</span><span class="token comment" spellcheck="true"># 可以解决的视图名称的白名单。</span><span class="token attr-name">spring.mustache.view-names</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SPRING MVC (Web Mvc 配置)</span><span class="token comment" spellcheck="true"># 异步请求处理超时之前的时间量（以毫秒为单位）。</span><span class="token attr-name">spring.mvc.async.request-timeout</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 要使用的日期格式。 例如`dd / MM / yyyy`。</span><span class="token attr-name">spring.mvc.date-format</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 发送TRACE请求到FrameworkServlet doService方法。</span><span class="token attr-name">spring.mvc.dispatch-trace-request</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 发送OPTIONS请求到FrameworkServlet doService方法。</span><span class="token attr-name">spring.mvc.dispatch-options-request</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># 启用favicon.ico的解析。</span><span class="token attr-name">spring.mvc.favicon.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 如果在重定向方案期间应该忽略“默认”模型的内容。</span><span class="token attr-name">spring.mvc.ignore-default-model-on-redirect</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 要使用的区域设置。</span><span class="token attr-name">spring.mvc.locale</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 将文件扩展名映射到内容协商的媒体类型。</span><span class="token attr-name">spring.mvc.media-types.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 消息代码格式策略。 例如`PREFIX_ERROR_CODE`。</span><span class="token attr-name">spring.mvc.message-codes-resolver-format</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于静态资源的路径模式。</span><span class="token attr-name">spring.mvc.static-path-pattern</span><span class="token punctuation">=</span> <span class="token attr-value">/**</span><span class="token comment" spellcheck="true"># 如果没有发现处理程序来处理请求，则应抛出“NoHandlerFoundException”。</span><span class="token attr-name">spring.mvc.throw-exception-if-no-handler-found</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># Spring MVC视图前缀。</span><span class="token attr-name">spring.mvc.view.prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># Spring MVC视图后缀。</span><span class="token attr-name">spring.mvc.view.suffix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"> #SPRING RESOURCES HANDLING（ResourceProperties）资源处理</span><span class="token attr-name">spring.resources.add-mappings</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用默认资源处理。</span><span class="token attr-name">spring.resources.cache-period</span> <span class="token punctuation">=</span> <span class="token attr-value">#由资源处理程序提供的资源的缓存期，以秒为单位。</span><span class="token attr-name">spring.resources.chain.cache</span> <span class="token punctuation">=</span> <span class="token attr-value">true #在资源链中启用缓存。</span><span class="token attr-name">spring.resources.chain.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">#启用Spring资源处理链。默认情况下禁用，除非启用了至少一个策略。</span><span class="token attr-name">spring.resources.chain.html-application-cache</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用HTML5应用程序缓存清单重写。</span><span class="token attr-name">spring.resources.chain.strategy.content.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用内容版本策略。</span><span class="token attr-name">spring.resources.chain.strategy.content.paths</span> <span class="token punctuation">=</span> <span class="token attr-value">/ ** #应用于版本策略的模式的逗号分隔列表。</span><span class="token attr-name">spring.resources.chain.strategy.fixed.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用固定版本策略。</span><span class="token attr-name">spring.resources.chain.strategy.fixed.paths</span> <span class="token punctuation">=</span> <span class="token attr-value">#应用于版本策略的逗号分隔的模式列表。</span><span class="token attr-name">spring.resources.chain.strategy.fixed.version</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于版本策略的版本字符串。</span><span class="token attr-name">spring.resources.static-locations</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：/ META-INF / resources /，classpath：/ resources /，classpath：/ static /，classpath：/ public / #静态资源的位置。</span><span class="token comment" spellcheck="true"> #SPRING SOCIAL（SocialWebAutoConfiguration）集群</span><span class="token attr-name">spring.social.auto-connection-views</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用支持的提供程序的连接状态视图。</span><span class="token comment" spellcheck="true"> #SPRING SOCIAL FACEBOOK（FacebookAutoConfiguration）</span><span class="token attr-name">spring.social.facebook.app-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#您的应用程序的Facebook应用程序ID</span><span class="token attr-name">spring.social.facebook.app-secret</span> <span class="token punctuation">=</span> <span class="token attr-value">#你的应用程序的Facebook应用程序密码</span><span class="token comment" spellcheck="true"> #SPRING SOCIAL LINKEDIN（LinkedInAutoConfiguration）</span><span class="token attr-name">spring.social.linkedin.app-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#您的应用程序的LinkedIn应用程序ID</span><span class="token attr-name">spring.social.linkedin.app-secret</span> <span class="token punctuation">=</span> <span class="token attr-value">#您的应用程序的LinkedIn App Secret</span><span class="token comment" spellcheck="true"> #SPRING SOCIAL TWITTER（TwitterAutoConfiguration）</span><span class="token attr-name">spring.social.twitter.app-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#你的应用程序的Twitter应用程序ID</span><span class="token attr-name">spring.social.twitter.app-secret</span> <span class="token punctuation">=</span> <span class="token attr-value">#你的应用程序的Twitter App Secret</span><span class="token comment" spellcheck="true"> #THYMELEAF Thymeleaf模板引擎配置</span><span class="token attr-name">spring.thymeleaf.cache</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用模板缓存。</span><span class="token attr-name">spring.thymeleaf.check-template-location</span> <span class="token punctuation">=</span> <span class="token attr-value">true #检查模板位置是否存在。</span><span class="token attr-name">spring.thymeleaf.content-type</span> <span class="token punctuation">=</span> <span class="token attr-value">text / html #Content-Type值。</span><span class="token attr-name">spring.thymeleaf.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用MVC Thymeleaf视图分辨率。</span><span class="token attr-name">spring.thymeleaf.encoding</span> <span class="token punctuation">=</span> <span class="token attr-value">UTF-8 #模板编码。</span><span class="token attr-name">spring.thymeleaf.excluded-view-names</span> <span class="token punctuation">=</span> <span class="token attr-value">#应该从解决方案中排除的视图名称的逗号分隔列表。</span><span class="token attr-name">spring.thymeleaf.mode</span> <span class="token punctuation">=</span> <span class="token attr-value">HTML5 #应用于模板的模板模式。另请参见StandardTemplateModeHandlers。</span><span class="token attr-name">spring.thymeleaf.prefix</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：/ templates / #在构建URL时预先查看名称的前缀。</span><span class="token attr-name">spring.thymeleaf.suffix</span> <span class="token punctuation">=</span> <span class="token attr-value">.html #构建URL时附加查看名称的后缀。</span><span class="token attr-name">spring.thymeleaf.template-resolver-order</span> <span class="token punctuation">=</span> <span class="token attr-value">#链中模板解析器的顺序。</span><span class="token attr-name">spring.thymeleaf.view-names</span> <span class="token punctuation">=</span> <span class="token attr-value">#可以解析的视图名称的逗号分隔列表。</span><span class="token comment" spellcheck="true"> #VELOCITY TEMPLATES（VelocityAutoConfiguration）</span><span class="token attr-name">spring.velocity.allow-request-override</span> <span class="token punctuation">=</span> <span class="token attr-value">false #设置是否允许HttpServletRequest属性覆盖（隐藏）控制器生成的同名的模型属性。</span><span class="token attr-name">spring.velocity.allow-session-override</span> <span class="token punctuation">=</span> <span class="token attr-value">false #设置是否允许HttpSession属性重写（隐藏）控制器生成的同名的模型属性。</span><span class="token attr-name">spring.velocity.cache</span> <span class="token punctuation">=</span> <span class="token attr-value">#启用模板缓存。</span><span class="token attr-name">spring.velocity.charset</span> <span class="token punctuation">=</span> <span class="token attr-value">UTF-8 #模板编码。</span><span class="token attr-name">spring.velocity.check-template-location</span> <span class="token punctuation">=</span> <span class="token attr-value">true #检查模板位置是否存在。</span><span class="token attr-name">spring.velocity.content-type</span> <span class="token punctuation">=</span> <span class="token attr-value">text / html #Content-Type值。</span><span class="token attr-name">spring.velocity.date-tool-attribute</span> <span class="token punctuation">=</span> <span class="token attr-value">#在视图的Velocity上下文中公开的DateTool辅助对象的名称。</span><span class="token attr-name">spring.velocity.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用此技术的MVC视图分辨率。</span><span class="token attr-name">spring.velocity.expose-request-attributes</span> <span class="token punctuation">=</span> <span class="token attr-value">false #设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><span class="token attr-name">spring.velocity.expose-session-attributes</span> <span class="token punctuation">=</span> <span class="token attr-value">false #设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><span class="token attr-name">spring.velocity.expose-spring-macro-helpers</span> <span class="token punctuation">=</span> <span class="token attr-value">true #设置是否公开一个RequestContext供Spring Spring的宏库使用，名称为“springMacroRequestContext”。</span><span class="token attr-name">spring.velocity.number-tool-attribute</span> <span class="token punctuation">=</span> <span class="token attr-value">#在视图的Velocity上下文中公开的NumberTool帮助对象的名称。</span><span class="token attr-name">spring.velocity.prefer-file-system-access</span> <span class="token punctuation">=</span> <span class="token attr-value">true #首选文件系统访问模板加载。文件系统访问可以对模板更改进行热检测。</span><span class="token attr-name">spring.velocity.prefix</span> <span class="token punctuation">=</span> <span class="token attr-value">#前缀，用于在构建URL时查看名称。</span><span class="token attr-name">spring.velocity.properties。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#附加速度属性。</span><span class="token attr-name">spring.velocity.request-context-attribute</span> <span class="token punctuation">=</span> <span class="token attr-value">#所有视图的RequestContext属性的名称。</span><span class="token attr-name">spring.velocity.resource-loader-path</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：/ templates / #模板路径。</span><span class="token attr-name">spring.velocity.suffix</span> <span class="token punctuation">=</span> <span class="token attr-value">.vm #构建URL时附加到查看名称的后缀。</span><span class="token attr-name">spring.velocity.toolbox-config-location</span> <span class="token punctuation">=</span> <span class="token attr-value">#Velocity Toolbox配置位置。例如`/ WEB-INF / toolbox.xml'</span><span class="token attr-name">spring.velocity.view-names</span> <span class="token punctuation">=</span> <span class="token attr-value">#可以解决的视图名称的白名单。</span><span class="token comment" spellcheck="true"> #----------------------------------------</span><span class="token comment" spellcheck="true"> #安全属性</span><span class="token comment" spellcheck="true"> #----------------------------------------</span><span class="token comment" spellcheck="true"> #SECURITY（SecurityProperties）</span><span class="token attr-name">security.basic.authorize-mode</span> <span class="token punctuation">=</span> <span class="token attr-value">role #应用安全授权模式。</span><span class="token attr-name">security.basic.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用基本身份验证。</span><span class="token attr-name">security.basic.path</span> <span class="token punctuation">=</span> <span class="token attr-value">/ ** #安全路径的逗号分隔列表。</span><span class="token attr-name">security.basic.realm</span> <span class="token punctuation">=</span> <span class="token attr-value">Spring #HTTP基本的领域名称。</span><span class="token attr-name">security.enable-csrf</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用跨站点请求伪造支持。</span><span class="token attr-name">security.filter-order</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #安全过滤器连锁订单。</span><span class="token attr-name">security.headers.cache</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用缓存控制HTTP头。</span><span class="token attr-name">security.headers.content-type</span> <span class="token punctuation">=</span> <span class="token attr-value">true# 启用“X-Content-Type-Options”头。</span><span class="token attr-name">security.headers.frame</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用“X-Frame-Options”标题。</span><span class="token attr-name">security.headers.hsts</span> <span class="token punctuation">=</span> <span class="token attr-value"># HTTP严格传输安全（HSTS）模式（无，域，全部）。</span><span class="token attr-name">security.headers.xss</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用跨站点脚本（XSS）保护。</span><span class="token attr-name">security.ignored</span> <span class="token punctuation">=</span> <span class="token attr-value">#从默认安全路径中排除的路径的逗号分隔列表。</span><span class="token attr-name">security.require-ssl</span> <span class="token punctuation">=</span> <span class="token attr-value">false #为所有请求启用安全通道。</span><span class="token attr-name">security.sessions</span> <span class="token punctuation">=</span> <span class="token attr-value">stateless #会话创建策略（永远不会，if_required，无状态）。</span><span class="token attr-name">security.user.name</span> <span class="token punctuation">=</span> <span class="token attr-value">user #默认用户名。</span><span class="token attr-name">security.user.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#默认用户名的密码。默认情况下，启动时会记录随机密码。</span><span class="token attr-name">security.user.role</span> <span class="token punctuation">=</span> <span class="token attr-value">USER #为默认用户名授予角色。</span><span class="token comment" spellcheck="true"> #SECURITY OAUTH2 CLIENT（OAuth2ClientProperties</span><span class="token attr-name">security.oauth2.client.client-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#OAuth2客户端ID。</span><span class="token attr-name">security.oauth2.client.client-secret</span> <span class="token punctuation">=</span> <span class="token attr-value">#OAuth2客户机密码。默认生成随机密码</span><span class="token comment" spellcheck="true"> #SECURITY OAUTH2 RESOURCES（ResourceServerProperties</span><span class="token attr-name">security.oauth2.resource.id</span> <span class="token punctuation">=</span> <span class="token attr-value">#资源的标识符。</span><span class="token attr-name">security.oauth2.resource.jwt.key-uri</span> <span class="token punctuation">=</span> <span class="token attr-value">#JWT令牌的URI。如果值不可用并且密钥是公共的，可以设置。</span><span class="token attr-name">security.oauth2.resource.jwt.key-value</span> <span class="token punctuation">=</span> <span class="token attr-value">#JWT令牌的验证密钥。可以是对称秘密或PEM编码的RSA公钥。</span><span class="token attr-name">security.oauth2.resource.prefer-token-info</span> <span class="token punctuation">=</span> <span class="token attr-value">true #使用令牌信息，可以设置为false以使用用户信息。</span><span class="token attr-name">security.oauth2.resource.service-id</span> <span class="token punctuation">=</span> <span class="token attr-value">resource #</span><span class="token attr-name">security.oauth2.resource.token-info-uri</span> <span class="token punctuation">=</span> <span class="token attr-value">#令牌解码端点的URI。</span><span class="token attr-name">security.oauth2.resource.token-type</span> <span class="token punctuation">=</span> <span class="token attr-value">#使用userInfoUri时发送的令牌类型。</span><span class="token attr-name">security.oauth2.resource.user-info-uri</span> <span class="token punctuation">=</span> <span class="token attr-value">#用户端点的URI。</span><span class="token comment" spellcheck="true"> #SECURITY OAUTH2 SSO（OAuth2SsoProperties</span><span class="token attr-name">security.oauth2.sso.filter-order</span> <span class="token punctuation">=</span> <span class="token attr-value">#如果不提供显式的WebSecurityConfigurerAdapter，则应用过滤器顺序</span><span class="token attr-name">security.oauth2.sso.login-path</span> <span class="token punctuation">=</span> <span class="token attr-value">/ login #登录页面的路径，即触发重定向到OAuth2授权服务器的路径</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># DATA PROPERTIES 数据性能</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># FLYWAY (FlywayProperties)</span><span class="token attr-name">flyway.baseline-description</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.baseline-version</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #版本开始迁移</span><span class="token attr-name">flyway.baseline-on-migrate</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.check-location</span> <span class="token punctuation">=</span> <span class="token attr-value">false #检查迁移脚本位置是否存在。</span><span class="token attr-name">flyway.clean-on-validation-error</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用飞行路线。</span><span class="token attr-name">flyway.encoding</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.ignore-failed-future-migration</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.init-sqls</span> <span class="token punctuation">=</span> <span class="token attr-value">#执行SQL语句，以便在获取连接后立即初始化连接。</span><span class="token attr-name">flyway.locations</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：db / migration #迁移脚本的位置</span><span class="token attr-name">flyway.out-of-order</span> <span class="token punctuation">=</span> <span class="token attr-value">#如果您希望Flyway创建自己的DataSource，则需要使用#path密码</span><span class="token attr-name">flyway.placeholder-prefix</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.placeholder-replacement</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.placeholder-suffix</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.placeholders。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.schemas</span> <span class="token punctuation">=</span> <span class="token attr-value">#schemas来更新</span><span class="token attr-name">flyway.sql-migration-prefix</span> <span class="token punctuation">=</span> <span class="token attr-value">V #</span><span class="token attr-name">flyway.sql-migration-separator</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.sql-migration-suffix</span> <span class="token punctuation">=</span> <span class="token attr-value">.sql #</span><span class="token attr-name">flyway.table</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">flyway.url</span> <span class="token punctuation">=</span> <span class="token attr-value">#要迁移的数据库的JDBC url。如果未设置，则使用主配置的数据源。</span><span class="token attr-name">flyway.user</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录要迁移的数据库的用户。</span><span class="token attr-name">flyway.validate-on-migrate</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token comment" spellcheck="true"># LIQUIBASE (LiquibaseProperties)</span><span class="token attr-name">liquibase.change-log</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：/db/changelog/db.changelog-master.yaml #更改日志配置路径。</span><span class="token attr-name">liquibase.check-change-log-location</span> <span class="token punctuation">=</span> <span class="token attr-value">true #检查更改日志位置是否存在。</span><span class="token attr-name">liquibase.contexts</span> <span class="token punctuation">=</span> <span class="token attr-value">#使用逗号分隔的运行时上下文列表。</span><span class="token attr-name">liquibase.default-schema</span> <span class="token punctuation">=</span> <span class="token attr-value">#默认数据库模式。</span><span class="token attr-name">liquibase.drop-first</span> <span class="token punctuation">=</span> <span class="token attr-value">false #首先删除数据库模式。</span><span class="token attr-name">liquibase.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用liquidibase支持。</span><span class="token attr-name">liquibase.labels</span> <span class="token punctuation">=</span> <span class="token attr-value">#使用逗号分隔的运行时标签列表。</span><span class="token attr-name">liquibase.parameters。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#更改日志参数。</span><span class="token attr-name">liquibase.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录要迁移的数据库的密码。</span><span class="token attr-name">liquibase.url</span> <span class="token punctuation">=</span> <span class="token attr-value">#要迁移的数据库的JDBC url。 如果未设置，则使用主配置的数据源。</span><span class="token attr-name">liquibase.user</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录要迁移的数据库的用户。</span><span class="token comment" spellcheck="true"># DAO (PersistenceExceptionTranslationAutoConfiguration)</span><span class="token attr-name">spring.dao.exceptiontranslation.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true # 启用持久异常翻译后处理器。</span><span class="token comment" spellcheck="true"># CASSANDRA (CassandraProperties)</span><span class="token attr-name">spring.data.cassandra.cluster-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#Cassandra群集的名称。</span><span class="token attr-name">spring.data.cassandra.compression</span> <span class="token punctuation">=</span> <span class="token attr-value">#由Cassandra二进制协议支持的压缩。</span><span class="token attr-name">spring.data.cassandra.connect-timeout-millis</span> <span class="token punctuation">=</span> <span class="token attr-value">#套接字选项：连接超时。</span><span class="token attr-name">spring.data.cassandra.consistency-level</span> <span class="token punctuation">=</span> <span class="token attr-value">#查询一致性级别。</span><span class="token attr-name">spring.data.cassandra.contact-points</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost #集群节点地址的逗号分隔列表。</span><span class="token attr-name">spring.data.cassandra.fetch-size</span> <span class="token punctuation">=</span> <span class="token attr-value">#查询默认的抓取大小。</span><span class="token attr-name">spring.data.cassandra.keyspace-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#要使用的密钥空间名称。</span><span class="token attr-name">spring.data.cassandra.load-balancing-policy</span> <span class="token punctuation">=</span> <span class="token attr-value">#负载均衡策略的类名。</span><span class="token attr-name">spring.data.cassandra.port</span> <span class="token punctuation">=</span> <span class="token attr-value">#Cassandra服务器端口。</span><span class="token attr-name">spring.data.cassandra.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录服务器的密码。</span><span class="token attr-name">spring.data.cassandra.read-timeout-millis</span> <span class="token punctuation">=</span> <span class="token attr-value">#套接字选项：读取超时。</span><span class="token attr-name">spring.data.cassandra.reconnection-policy</span> <span class="token punctuation">=</span> <span class="token attr-value">#重新连接策略类。</span><span class="token attr-name">spring.data.cassandra.retry-policy</span> <span class="token punctuation">=</span> <span class="token attr-value">#重试策略的类名。</span><span class="token attr-name">spring.data.cassandra.serial-consistency-level</span> <span class="token punctuation">=</span> <span class="token attr-value">#查询串行一致性级别。</span><span class="token attr-name">spring.data.cassandra.ssl</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用SSL支持。</span><span class="token attr-name">spring.data.cassandra.username</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录用户的服务器。</span><span class="token comment" spellcheck="true"># ELASTICSEARCH (ElasticsearchProperties)</span><span class="token attr-name">spring.data.elasticsearch.cluster-name</span> <span class="token punctuation">=</span> <span class="token attr-value">elasticsearch #弹性搜索集群名称。</span><span class="token attr-name">spring.data.elasticsearch.cluster-nodes</span> <span class="token punctuation">=</span> <span class="token attr-value">#集群节点地址的逗号分隔列表。 如果未指定，则启动客户端节点。</span><span class="token attr-name">spring.data.elasticsearch.properties。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于配置客户端的其他属性。</span><span class="token attr-name">spring.data.elasticsearch.repositories.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用Elasticsearch存储库。</span><span class="token comment" spellcheck="true"># MONGODB (MongoProperties)</span><span class="token attr-name">spring.data.mongodb.authentication-database</span> <span class="token punctuation">=</span> <span class="token attr-value">#验证数据库名称。</span><span class="token attr-name">spring.data.mongodb.database</span> <span class="token punctuation">=</span> <span class="token attr-value">test #数据库名称。</span><span class="token attr-name">spring.data.mongodb.field-naming-strategy</span> <span class="token punctuation">=</span> <span class="token attr-value">#要使用的FieldNamingStrategy的完全限定名称。</span><span class="token attr-name">spring.data.mongodb.grid-fs-database</span> <span class="token punctuation">=</span> <span class="token attr-value">#GridFS数据库名称。</span><span class="token attr-name">spring.data.mongodb.host</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost #Mongo服务器主机。</span><span class="token attr-name">spring.data.mongodb.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录mongo服务器的密码。</span><span class="token attr-name">spring.data.mongodb.port</span> <span class="token punctuation">=</span> <span class="token attr-value">27017 #Mongo服务器端口。</span><span class="token attr-name">spring.data.mongodb.repositories.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用Mongo存储库。</span><span class="token attr-name">spring.data.mongodb.uri</span> <span class="token punctuation">=</span> <span class="token attr-value">mongodb：// localhost / test #Mongo数据库URI。 设置时，主机和端口将被忽略。</span><span class="token attr-name">spring.data.mongodb.username</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录mongo服务器的用户。</span><span class="token comment" spellcheck="true"># DATA REST (RepositoryRestProperties)</span><span class="token attr-name">spring.data.rest.base-path</span> <span class="token punctuation">=</span> <span class="token attr-value">#由Spring Data REST用于公开存储库资源的基本路径。</span><span class="token attr-name">spring.data.rest.default-page-size</span> <span class="token punctuation">=</span> <span class="token attr-value">#页面的默认大小。</span><span class="token attr-name">spring.data.rest.enable-enum-translation</span> <span class="token punctuation">=</span> <span class="token attr-value">#通过Spring Data REST默认资源包启用枚举值转换。</span><span class="token attr-name">spring.data.rest.limit-param-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#指示一次返回多少结果的URL查询字符串参数的名称。</span><span class="token attr-name">spring.data.rest.max-page-size</span> <span class="token punctuation">=</span> <span class="token attr-value">#最大页面大小。</span><span class="token attr-name">spring.data.rest.page-param-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#指示要返回的页面的URL查询字符串参数的名称。</span><span class="token attr-name">spring.data.rest.return-body-on-create</span> <span class="token punctuation">=</span> <span class="token attr-value">#创建一个实体后返回响应体。</span><span class="token attr-name">spring.data.rest.return-body-on-update</span> <span class="token punctuation">=</span> <span class="token attr-value">#更新实体后返回响应体。</span><span class="token attr-name">spring.data.rest.sort-param-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#指示排序结果的方向的URL查询字符串参数的名称。</span><span class="token comment" spellcheck="true"># SOLR (SolrProperties)</span><span class="token attr-name">spring.data.solr.host</span> <span class="token punctuation">=</span> <span class="token attr-value">http://127.0.0.1:8983/solr #Solr主机。 如果设置了“zk-host”，则被忽略。</span><span class="token attr-name">spring.data.solr.repositories.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用Solr存储库。</span><span class="token attr-name">spring.data.solr.zk-host</span> <span class="token punctuation">=</span> <span class="token attr-value">#ZooKeeper主机地址，格式为HOST：PORT。</span><span class="token comment" spellcheck="true"># 数据源 配置 (DataSourceAutoConfiguration &amp; DataSourceProperties)</span><span class="token attr-name">spring.datasource.continue-on-error</span> <span class="token punctuation">=</span> <span class="token attr-value">false #初始化数据库时发生错误时不要停止。</span><span class="token attr-name">spring.datasource.data</span> <span class="token punctuation">=</span> <span class="token attr-value">#Data（DML）脚本资源引用。</span><span class="token attr-name">spring.datasource.driver-class-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#JDBC驱动程序的完全限定名称。默认情况下，根据URL自动检测。</span><span class="token attr-name">spring.datasource.initialize</span> <span class="token punctuation">=</span> <span class="token attr-value">true #使用'data.sql'填充数据库。</span><span class="token attr-name">spring.datasource.jmx-enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用JMX支持（如果由底层池提供）。</span><span class="token attr-name">spring.datasource.jndi-name</span> <span class="token punctuation">=</span> <span class="token attr-value">#数据源的JNDI位置。设置时，类，网址，用户名和密码将被忽略。</span><span class="token attr-name">spring.datasource.max-active</span> <span class="token punctuation">=</span> <span class="token attr-value">#例如100</span><span class="token attr-name">spring.datasource.max-idle</span> <span class="token punctuation">=</span> <span class="token attr-value">#例如8</span><span class="token attr-name">spring.datasource.max等待</span><span class="token punctuation">=</span><span class="token attr-name">spring.datasource.min-evictable空闲时间-米利斯</span><span class="token punctuation">=</span><span class="token attr-name">spring.datasource.min-idle</span> <span class="token punctuation">=</span> <span class="token attr-value">8</span><span class="token attr-name">spring.datasource.name</span> <span class="token punctuation">=</span> <span class="token attr-value">testdb #数据源的名称。</span><span class="token attr-name">spring.datasource.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录数据库的密码。</span><span class="token attr-name">spring.datasource.platform</span> <span class="token punctuation">=</span> <span class="token attr-value">all #在资源模式（schema - $ {platform} .sql）中使用的平台。</span><span class="token attr-name">spring.datasource.schema</span> <span class="token punctuation">=</span> <span class="token attr-value">#Schema（DDL）脚本资源引用。</span><span class="token attr-name">spring.datasource.separator</span> <span class="token punctuation">=</span><span class="token attr-value">;  #语句分隔符在SQL初始化脚本中。</span><span class="token attr-name">spring.datasource.sql-script-encoding</span> <span class="token punctuation">=</span> <span class="token attr-value">#SQL脚本编码。</span><span class="token attr-name">spring.datasource.test-on-borrow</span> <span class="token punctuation">=</span> <span class="token attr-value">#例如`false`</span><span class="token attr-name">spring.datasource.test-on-return</span> <span class="token punctuation">=</span> <span class="token attr-value">#例如`false`</span><span class="token attr-name">spring.datasource.test-while-idle</span> <span class="token punctuation">=</span> <span class="token attr-value">#</span><span class="token attr-name">spring.datasource.time-between-eviction-runs-millis</span> <span class="token punctuation">=</span> <span class="token attr-value">1</span><span class="token attr-name">spring.datasource.type</span> <span class="token punctuation">=</span> <span class="token attr-value">#要使用的连接池实现的完全限定名称。默认情况下，它是从类路径自动检测的。</span><span class="token attr-name">spring.datasource.url</span> <span class="token punctuation">=</span> <span class="token attr-value">#数据库的JDBC url。</span><span class="token attr-name">spring.datasource.username</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">spring.datasource.validation-query</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># H2 Web Console (H2ConsoleProperties)  </span><span class="token attr-name">spring.h2.console.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用控制台。</span><span class="token attr-name">spring.h2.console.path</span> <span class="token punctuation">=</span> <span class="token attr-value">/ h2-console #控制台可用的路径。</span><span class="token comment" spellcheck="true"># JOOQ (JooqAutoConfiguration)</span><span class="token attr-name">spring.jooq.sql-dialect</span><span class="token punctuation">=</span>  <span class="token attr-value"># 与配置的数据源通信时使用的SQLDialect JOOQ。 例如`POSTGRES`</span><span class="token comment" spellcheck="true"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span><span class="token attr-name">spring.data.jpa.repositories.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #启用JPA存储库。</span><span class="token attr-name">spring.jpa.database</span> <span class="token punctuation">=</span> <span class="token attr-value">#目标数据库进行操作，默认情况下自动检测。可以使用“databasePlatform”属性设置。</span><span class="token attr-name">spring.jpa.database-platform</span> <span class="token punctuation">=</span> <span class="token attr-value">#要运行的目标数据库的名称，默认情况下自动检测。可以使用“数据库”枚举来设置。</span><span class="token attr-name">spring.jpa.generate-ddl</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启动时初始化模式。</span><span class="token attr-name">spring.jpa.hibernate.ddl-auto</span> <span class="token punctuation">=</span> <span class="token attr-value">#DDL模式。这实际上是“hibernate.hbm2ddl.auto”属性的快捷方式。使用嵌入式数据库时默认为“创建删除”，否则为“否”。</span><span class="token attr-name">spring.jpa.hibernate.naming-strategy</span> <span class="token punctuation">=</span> <span class="token attr-value">#命名策略完全限定名。</span><span class="token attr-name">spring.jpa.open-in-view</span> <span class="token punctuation">=</span> <span class="token attr-value">true #注册OpenEntityManagerInViewInterceptor。将JPA EntityManager绑定到线程以进行请求的整个处理。</span><span class="token attr-name">spring.jpa.properties。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#在JPA提供程序上设置的其他本机属性。</span><span class="token attr-name">spring.jpa.show-sql</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用SQL语句的日志记录。</span><span class="token comment" spellcheck="true"># JTA (JtaAutoConfiguration)</span><span class="token attr-name">spring.jta。*</span> <span class="token punctuation">=</span> <span class="token attr-value">#技术特定配置</span><span class="token attr-name">spring.jta.log-dir</span> <span class="token punctuation">=</span> <span class="token attr-value">#Transaction logs目录。</span><span class="token comment" spellcheck="true"># ATOMIKOS</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.borrow-connection-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">30 #从池中借用连接的超时（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag</span> <span class="token punctuation">=</span> <span class="token attr-value">true #创建会话时是否忽略事务标志。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.local-transaction-mode</span> <span class="token punctuation">=</span> <span class="token attr-value">false #是否需要本地事务。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.maintenance-interval</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #池的维护线程运行之间的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.max-idle-time</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #从池中清除连接之后的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.max-lifetime</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #在被破坏之前可以将连接合并的时间（以秒为单位）。 0表示无限制。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.max-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #池的最大大小。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.min-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #池的最小大小。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.reap-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #借用连接的收获超时（以秒为单位）。 0表示无限制。</span><span class="token attr-name">spring.jta.atomikos.connectionfactory.unique-resource-name</span> <span class="token punctuation">=</span> <span class="token attr-value">jmsConnectionFactory #用于在恢复期间标识资源的唯一名称。</span><span class="token attr-name">spring.jta.atomikos.datasource.borrow-connection-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">30 #从池中借出连接的超时（秒）。</span><span class="token attr-name">spring.jta.atomikos.datasource.default-isolation-level</span> <span class="token punctuation">=</span> <span class="token attr-value">#池提供的连接的默认隔离级别。</span><span class="token attr-name">spring.jta.atomikos.datasource.login-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于建立数据库连接的超时（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.datasource.maintenance-interval</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #池的维护线程运行之间的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.datasource.max-idle-time</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #从池中清除连接之后的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.atomikos.datasource.max-lifetime</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #在被破坏之前可以将连接合并的时间（以秒为单位）。 0表示无限制。</span><span class="token attr-name">spring.jta.atomikos.datasource.max-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #池的最大大小。</span><span class="token attr-name">spring.jta.atomikos.datasource.min-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #池的最小大小。</span><span class="token attr-name">spring.jta.atomikos.datasource.reap-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #借用连接的收获超时（以秒为单位）。 0表示无限制。</span><span class="token attr-name">spring.jta.atomikos.datasource.test-query</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于在返回连接之前验证连接的SQL查询或语句。</span><span class="token attr-name">spring.jta.atomikos.datasource.unique-resource-name</span> <span class="token punctuation">=</span> <span class="token attr-value">dataSource #用于在恢复期间识别资源的唯一名称。</span><span class="token comment" spellcheck="true"># BITRONIX</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.acquire-increment</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #生成池时要创建的连接数。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.acquisition-interval</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #在获取无效连接后再次尝试获取连接之前等待的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.acquisition-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">30 #从池中获取连接的超时（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.allow-local-transactions</span> <span class="token punctuation">=</span> <span class="token attr-value">true #事务管理器是否允许混合XA和非XA事务。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.apply-transaction-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">false #当XAResource被登记时，是否应该设置事务超时。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #资源是否应该被自动登记和删除。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.cache-producer-consumer</span> <span class="token punctuation">=</span> <span class="token attr-value">true #是否生产和消费者应该被缓存。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.defer-connection-release</span> <span class="token punctuation">=</span> <span class="token attr-value">true #提供程序是否可以在同一连接上运行许多事务，并支持事务交织。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.ignore-recovery-failures</span> <span class="token punctuation">=</span> <span class="token attr-value">false #是否应忽略恢复失败。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.max-idle-time</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #从池中清除连接之后的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.max-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">10 #池的最大大小。 0表示无限制。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.min-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #池的最小大小。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于连接到JMS提供程序的密码。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.share-transaction-connections</span> <span class="token punctuation">=</span> <span class="token attr-value">false #ACCESSIBLE状态中的连接是否可以在事务的上下文中共享。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.test-connections</span> <span class="token punctuation">=</span> <span class="token attr-value">true #从池中获取连接是否应该进行测试。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.two-pc-ordering-position</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #在两阶段提交期间该资源应该采取的位置（始终为Integer.MIN_VALUE，始终为Integer.MAX_VALUE）。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.unique-name</span> <span class="token punctuation">=</span> <span class="token attr-value">jmsConnectionFactory #用于在恢复期间标识资源的唯一名称。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.use-tm-join</span> <span class="token punctuation">=</span> <span class="token attr-value">true启动XAResource时是否应使用TMJOIN。</span><span class="token attr-name">spring.jta.bitronix.connectionfactory.user</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于连接到JMS提供者的用户。</span><span class="token attr-name">spring.jta.bitronix.datasource.acquire-increment</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #生成池时要创建的连接数。</span><span class="token attr-name">spring.jta.bitronix.datasource.acquisition-interval</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #在获取无效连接后再尝试获取连接之前等待的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.datasource.acquisition-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">30 #从池中获取连接的超时（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.datasource.allow-local-transactions</span> <span class="token punctuation">=</span> <span class="token attr-value">true #事务管理器是否允许混合XA和非XA事务。</span><span class="token attr-name">spring.jta.bitronix.datasource.apply-transaction-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">false #当XAResource被登记时，是否应该设置事务超时。</span><span class="token attr-name">spring.jta.bitronix.datasource.automatic-enlisting-enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #资源是否应该被登记和自动删除。</span><span class="token attr-name">spring.jta.bitronix.datasource.cursor-holdability</span> <span class="token punctuation">=</span> <span class="token attr-value">#连接的默认游标保持性。</span><span class="token attr-name">spring.jta.bitronix.datasource.defer-connection-release</span> <span class="token punctuation">=</span> <span class="token attr-value">true #数据库是否可以在同一连接上运行许多事务，并支持事务交织。</span><span class="token attr-name">spring.jta.bitronix.datasource.enable-jdbc4-connection-test</span> <span class="token punctuation">=</span> <span class="token attr-value">#从池中获取连接时是否调用Connection.isValid（）。</span><span class="token attr-name">spring.jta.bitronix.datasource.ignore-recovery-failures</span> <span class="token punctuation">=</span> <span class="token attr-value">false #是否应忽略恢复失败。</span><span class="token attr-name">spring.jta.bitronix.datasource.isolation-level</span> <span class="token punctuation">=</span> <span class="token attr-value">#连接的默认隔离级别。</span><span class="token attr-name">spring.jta.bitronix.datasource.local-auto-commit</span> <span class="token punctuation">=</span> <span class="token attr-value">#本地事务的默认自动提交模式。</span><span class="token attr-name">spring.jta.bitronix.datasource.login-timeout</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于建立数据库连接的超时（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.datasource.max-idle-time</span> <span class="token punctuation">=</span> <span class="token attr-value">60 #从池中清除连接之后的时间（以秒为单位）。</span><span class="token attr-name">spring.jta.bitronix.datasource.max-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">10 #池的最大大小。 0表示无限制。</span><span class="token attr-name">spring.jta.bitronix.datasource.min-pool-size</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #池的最小大小。</span><span class="token attr-name">spring.jta.bitronix.datasource.prepared-statement-cache-size</span> <span class="token punctuation">=</span> <span class="token attr-value">0 #准备好的语句高速缓存的目标大小。 0禁用缓存。</span><span class="token attr-name">spring.jta.bitronix.datasource.share-transaction-connections</span> <span class="token punctuation">=</span> <span class="token attr-value">false #ACCESSIBLE状态下的连接是否可以在事务的上下文中共享。</span><span class="token attr-name">spring.jta.bitronix.datasource.test-query</span> <span class="token punctuation">=</span> <span class="token attr-value">#用于在返回连接之前验证连接的SQL查询或语句。</span><span class="token attr-name">spring.jta.bitronix.datasource.two-pc-ordering-position</span> <span class="token punctuation">=</span> <span class="token attr-value">1 #在两阶段提交期间该资源应该采取的位置（始终为Integer.MIN_VALUE，始终为Integer.MAX_VALUE）。</span><span class="token attr-name">spring.jta.bitronix.datasource.unique-name</span> <span class="token punctuation">=</span> <span class="token attr-value">dataSource #用于在恢复期间标识资源的唯一名称。</span><span class="token attr-name">spring.jta.bitronix.datasource.use-tm-join</span> <span class="token punctuation">=</span> <span class="token attr-value">true启动XAResource时是否应使用TMJOIN。</span><span class="token comment" spellcheck="true"># EMBEDDED MONGODB (EmbeddedMongoProperties)</span><span class="token attr-name">spring.mongodb.embedded.features</span> <span class="token punctuation">=</span> <span class="token attr-value">SYNC_DELAY #启用功能的逗号分隔列表。</span><span class="token attr-name">spring.mongodb.embedded.version</span> <span class="token punctuation">=</span> <span class="token attr-value">2.6.10 #Mongo使用版本。</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># 整合属性</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"> #ACTIVEMQ（ActiveMQProperties）</span><span class="token attr-name">spring.activemq.broker-url</span> <span class="token punctuation">=</span> <span class="token attr-value">#ActiveMQ代理的URL。 默认自动生成。 例如`tcp：// localhost：61616`</span><span class="token attr-name">spring.activemq.in-memory</span> <span class="token punctuation">=</span> <span class="token attr-value">true #指定默认代理URL是否应在内存中。 如果指定了一个显式代理，则被忽略。</span><span class="token attr-name">spring.activemq.password</span> <span class="token punctuation">=</span> <span class="token attr-value">#登录密码的代理。</span><span class="token attr-name">spring.activemq.pooled</span> <span class="token punctuation">=</span> <span class="token attr-value">false #指定是否创建PooledConnectionFactory而不是常规的ConnectionFactory。</span><span class="token attr-name">spring.activemq.user</span> <span class="token punctuation">=</span> <span class="token attr-value">#代理登录用户。</span><span class="token comment" spellcheck="true"># ARTEMIS (ArtemisProperties)</span><span class="token attr-name">spring.artemis.embedded.cluster-password</span> <span class="token punctuation">=</span> <span class="token attr-value">#群集密码。 默认情况下随机生成。</span><span class="token attr-name">spring.artemis.embedded.data-directory</span> <span class="token punctuation">=</span> <span class="token attr-value">#日志文件目录。 如果持久性被关闭，则不需要。</span><span class="token attr-name">spring.artemis.embedded.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #如果Artemis服务器API可用，启用嵌入式模式。</span><span class="token attr-name">spring.artemis.embedded.persistent</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用持久存储。</span><span class="token attr-name">spring.artemis.embedded.queues</span> <span class="token punctuation">=</span> <span class="token attr-value">#启动时要创建的队列的逗号分隔列表。</span><span class="token attr-name">spring.artemis.embedded.server-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#服务器ID。 默认情况下，使用自动递增的计数器。</span><span class="token attr-name">spring.artemis.embedded.topics</span> <span class="token punctuation">=</span> <span class="token attr-value">#启动时要创建的主题的逗号分隔列表。</span><span class="token attr-name">spring.artemis.host</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost #Artemis代理主机。</span><span class="token attr-name">spring.artemis.mode</span> <span class="token punctuation">=</span> <span class="token attr-value">#Artemis部署模式，默认情况下自动检测。 可以显式设置为“native”或“embedded”。</span><span class="token attr-name">spring.artemis.port</span> <span class="token punctuation">=</span> <span class="token attr-value">61616 #Artemis 中间件端口。</span><span class="token comment" spellcheck="true"># SPRING BATCH(Batch 配置)</span><span class="token attr-name">spring.batch.initializer.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #如果需要，在启动时创建所需的批处理表。</span><span class="token attr-name">spring.batch.job.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #在启动时执行上下文中的所有Spring批处理作业。</span><span class="token attr-name">spring.batch.job.names</span> <span class="token punctuation">=</span> <span class="token attr-value">#在启动时执行的作业名称的逗号分隔列表（例如`job1，job2`）。 默认情况下，执行在上下文中找到的所有作业。</span><span class="token attr-name">spring.batch.schema</span> <span class="token punctuation">=</span> <span class="token attr-value">classpath：org / springframework / batch / core / schema - @@ platform @@。sql #用于初始化数据库模式的SQL文件的路径。</span><span class="token attr-name">spring.batch.table-prefix</span> <span class="token punctuation">=</span> <span class="token attr-value">#所有批次元数据表的表前缀。</span><span class="token comment" spellcheck="true"># HORNETQ (HornetQ 配置)</span><span class="token attr-name">spring.hornetq.embedded.cluster-password</span> <span class="token punctuation">=</span> <span class="token attr-value">#集群密码。 默认情况下随机生成。</span><span class="token attr-name">spring.hornetq.embedded.data-directory</span> <span class="token punctuation">=</span> <span class="token attr-value">#日志文件目录。 如果持久性被关闭，则不需要。</span><span class="token attr-name">spring.hornetq.embedded.enabled</span> <span class="token punctuation">=</span> <span class="token attr-value">true #如果HornetQ服务器API可用，启用嵌入式模式。</span><span class="token attr-name">spring.hornetq.embedded.persistent</span> <span class="token punctuation">=</span> <span class="token attr-value">false #启用持久存储。</span><span class="token attr-name">spring.hornetq.embedded.queues</span> <span class="token punctuation">=</span> <span class="token attr-value">#启动时要创建的队列的逗号分隔列表。</span><span class="token attr-name">spring.hornetq.embedded.server-id</span> <span class="token punctuation">=</span> <span class="token attr-value">#服务器ID。 默认情况下，使用自动递增的计数器。</span><span class="token attr-name">spring.hornetq.embedded.topics</span> <span class="token punctuation">=</span> <span class="token attr-value">#在启动时创建的主题的逗号分隔列表。</span><span class="token attr-name">spring.hornetq.host</span> <span class="token punctuation">=</span> <span class="token attr-value">localhost #HornetQ代理主机。</span><span class="token attr-name">spring.hornetq.mode</span> <span class="token punctuation">=</span> <span class="token attr-value">#HornetQ部署模式，默认情况下自动检测。 可以显式设置为“native”或“embedded”。</span><span class="token attr-name">spring.hornetq.port</span> <span class="token punctuation">=</span> <span class="token attr-value">5445 #HornetQ代理端口。</span><span class="token comment" spellcheck="true"># JMS (Jms 配置)</span><span class="token comment" spellcheck="true"># 连接工厂JNDI名称。 设置时，优先于其他连接工厂自动配置。</span><span class="token attr-name">spring.jms.jndi-name</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 容器的确认模式。 默认情况下，监听器被自动确认处理。</span><span class="token attr-name">spring.jms.listener.acknowledge-mode</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启动时自动启动容器。</span><span class="token attr-name">spring.jms.listener.auto-startup</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 最小并发消费者数。</span><span class="token attr-name">spring.jms.listener.concurrency</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 最大并发消费者数。</span><span class="token attr-name">spring.jms.listener.max-concurrency</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 指定默认的目的地类型是否为主题。</span><span class="token attr-name">spring.jms.pub-sub-domain</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># RABBIT (Rabbit 配置)</span><span class="token comment" spellcheck="true"># 客户端应连接到的逗号分隔的地址列表。</span><span class="token attr-name">spring.rabbitmq.addresses</span> <span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token attr-name">spring.rabbitmq.dynamic</span> <span class="token punctuation">=</span>  <span class="token attr-value">true # 创建一个AmqpAdmin bean。</span><span class="token attr-name">spring.rabbitmq.host</span> <span class="token punctuation">=</span>  <span class="token attr-value">localhost# RabbitMQ主机。</span><span class="token attr-name">spring.rabbitmq.listener.acknowledge-mode</span> <span class="token punctuation">=</span> <span class="token attr-value"># 容器的确认模式。</span><span class="token attr-name">spring.rabbitmq.listener.auto-startup</span> <span class="token punctuation">=</span>  <span class="token attr-value">true# 启动时自动启动容器。</span><span class="token attr-name">spring.rabbitmq.listener.concurrency</span> <span class="token punctuation">=</span> <span class="token attr-value"># 最少消费者数。</span><span class="token attr-name">spring.rabbitmq.listener.max-concurrency</span> <span class="token punctuation">=</span> <span class="token attr-value"># 最大消费者数。</span><span class="token attr-name">spring.rabbitmq.listener.prefetch</span> <span class="token punctuation">=</span> <span class="token attr-value"># 在单个请求中要处理的消息数。它应该大于或等于事务大小（如果使用）。</span><span class="token attr-name">spring.rabbitmq.listener.transaction-size</span> <span class="token punctuation">=</span> <span class="token attr-value"># 在事务中要处理的消息数。为了获得最佳结果，它应该小于或等于预取计数。</span><span class="token attr-name">spring.rabbitmq.password</span> <span class="token punctuation">=</span> <span class="token attr-value"># 登录以对代理进行身份验证。</span><span class="token attr-name">spring.rabbitmq.port</span> <span class="token punctuation">=</span>  <span class="token attr-value">5672# RabbitMQ端口。</span><span class="token attr-name">spring.rabbitmq.requested-heartbeat</span> <span class="token punctuation">=</span> <span class="token attr-value"># 请求的心跳超时，以秒为单位;零为无。</span><span class="token attr-name">spring.rabbitmq.ssl.enabled</span> <span class="token punctuation">=</span>  <span class="token attr-value">false# 启用SSL支持。</span><span class="token attr-name">spring.rabbitmq.ssl.key-store</span> <span class="token punctuation">=</span>  <span class="token attr-value"># 保存SSL证书的密钥存储区的路径。</span><span class="token attr-name">spring.rabbitmq.ssl.key-store-password</span> <span class="token punctuation">=</span> <span class="token attr-value"># 用于访问密钥库的密码。</span><span class="token attr-name">spring.rabbitmq.ssl.trust-store</span> <span class="token punctuation">=</span> <span class="token attr-value"># 保存SSL证书的Trust存储。</span><span class="token attr-name">spring.rabbitmq.ssl.trust-store-password</span> <span class="token punctuation">=</span> <span class="token attr-value"># 用于访问信任存储的密码。</span><span class="token attr-name">spring.rabbitmq.username</span> <span class="token punctuation">=</span> <span class="token attr-value"># 登录用户对代理进行身份验证。</span><span class="token attr-name">spring.rabbitmq.virtual-host</span> <span class="token punctuation">=</span> <span class="token attr-value"># 连接到代理时使用的虚拟主机。</span><span class="token comment" spellcheck="true"># 端点配置（EndpointCorsProperties）</span><span class="token comment" spellcheck="true"># 设置是否支持凭据。 未设置时，不支持凭据。</span><span class="token attr-name">endpoints.cors.allow-credentials</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 在请求中允许的头文件逗号分隔列表。 '*'允许所有标题。</span><span class="token attr-name">endpoints.cors.allowed-headers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 逗号分隔的允许的方法列表。 '*'允许所有方法。</span><span class="token attr-name">endpoints.cors.allowed-methods</span><span class="token punctuation">=</span> <span class="token attr-value">GET</span><span class="token comment" spellcheck="true"># 逗号分隔的起始列表允许。 '*'允许所有来源。 未设置时，禁用CORS支持。</span><span class="token attr-name">endpoints.cors.allowed-origins</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 包含在响应中的标题的逗号分隔列表。</span><span class="token attr-name">endpoints.cors.exposed-headers</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 客户端可以缓存飞行前请求的响应时间（秒）。</span><span class="token attr-name">endpoints.cors.max-age</span><span class="token punctuation">=</span> <span class="token attr-value">1800</span><span class="token comment" spellcheck="true"># JMX ENDPOINT (EndpointMBeanExportProperties) （端点MBean导出属性）</span><span class="token comment" spellcheck="true"># JMX域名。 如果设置为'spring.jmx.default-domain'的值初始化。</span><span class="token attr-name">endpoints.jmx.domain</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用所有端点的JMX导出。</span><span class="token attr-name">endpoints.jmx.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 附加静态属性以附加到表示端点的MBean的所有对象名称。</span><span class="token attr-name">endpoints.jmx.static-names</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 确保在发生冲突时修改ObjectNames。</span><span class="token attr-name">endpoints.jmx.unique-names</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># JOLOKIA  JOLOKIA 配置</span><span class="token comment" spellcheck="true"># 见Jolokia手册</span><span class="token attr-name">jolokia.config.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 管理HTTP服务器（管理服务器属性）</span><span class="token comment" spellcheck="true"># 在每个响应中添加“X-Application-Context”HTTP头。</span><span class="token attr-name">management.add-application-context-header</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 管理端点应绑定到的网络地址。</span><span class="token attr-name">management.address</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 管理端点上下文路径。 例如`/ actuator`</span><span class="token attr-name">management.context-path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 管理端点HTTP端口。 默认使用与应用程序相同的端口。</span><span class="token attr-name">management.port</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用安全性</span><span class="token attr-name">management.security.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 访问管理端点所需的角色。</span><span class="token attr-name">management.security.role</span><span class="token punctuation">=</span> <span class="token attr-value">ADMIN</span><span class="token comment" spellcheck="true"># 会话创建策略使用（always，never，if_required，stateless）（总是，永远，if_required，无状态）。</span><span class="token attr-name">management.security.sessions</span><span class="token punctuation">=</span> <span class="token attr-value">stateless</span><span class="token comment" spellcheck="true"># HEALTH INDICATORS (previously health.*)</span><span class="token comment" spellcheck="true"># 启用数据库运行状况检查</span><span class="token attr-name">management.health.db.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用默认的健康指标。</span><span class="token attr-name">management.health.defaults.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用磁盘空间运行状况检查。</span><span class="token attr-name">management.health.diskspace.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 用于计算可用磁盘空间的路径。</span><span class="token attr-name">management.health.diskspace.path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 应该可用的最小磁盘空间（以字节为单位）。</span><span class="token attr-name">management.health.diskspace.threshold</span><span class="token punctuation">=</span> <span class="token attr-value">0</span><span class="token comment" spellcheck="true"># 启用弹性搜索健康检查。</span><span class="token attr-name">management.health.elasticsearch.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 逗号分隔的索引名称。</span><span class="token attr-name">management.health.elasticsearch.indices</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 等待群集响应的时间（以毫秒为单位）。</span><span class="token attr-name">management.health.elasticsearch.response-timeout</span><span class="token punctuation">=</span> <span class="token attr-value">100</span><span class="token comment" spellcheck="true"># 启用JMS健康检查。</span><span class="token attr-name">management.health.jms.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用邮件运行状况检查。</span><span class="token attr-name">management.health.mail.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用MongoDB健康检查。</span><span class="token attr-name">management.health.mongo.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用RabbitMQ运行状况检查。</span><span class="token attr-name">management.health.rabbit.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用Redis健康检查。</span><span class="token attr-name">management.health.redis.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 启用Solr运行状况检查。</span><span class="token attr-name">management.health.solr.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 按照严重性的顺序，以逗号分隔的健康状态列表。</span><span class="token attr-name">management.health.status.order</span><span class="token punctuation">=</span> <span class="token attr-value">DOWN, OUT_OF_SERVICE, UNKNOWN, UP</span><span class="token comment" spellcheck="true"># TRACING ((TraceProperties) 跟踪性能</span><span class="token comment" spellcheck="true"># 跟踪中包含的项目。</span><span class="token attr-name">management.trace.include</span><span class="token punctuation">=</span> <span class="token attr-value">request-headers,response-headers,errors</span><span class="token comment" spellcheck="true"># 远程 shell配置</span><span class="token comment" spellcheck="true"># 验证类型。 根据环境自动检测。</span><span class="token attr-name">shell.auth</span><span class="token punctuation">=</span> <span class="token attr-value">simple</span><span class="token comment" spellcheck="true"># JAAS域。</span><span class="token attr-name">shell.auth.jaas.domain</span><span class="token punctuation">=</span> <span class="token attr-value">my-domain</span><span class="token comment" spellcheck="true"># 验证密钥的路径。 这应该指向一个有效的“.pem”文件。</span><span class="token attr-name">shell.auth.key.path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 登录用户。</span><span class="token attr-name">shell.auth.simple.user.name</span><span class="token punctuation">=</span> <span class="token attr-value">user</span><span class="token comment" spellcheck="true"># 登录用户的密码。</span><span class="token attr-name">shell.auth.simple.user.password</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 登录到CRaSH控制台的所需的角色，以逗号分隔列表。</span><span class="token attr-name">shell.auth.spring.roles</span><span class="token punctuation">=</span> <span class="token attr-value">ADMIN</span><span class="token comment" spellcheck="true"># 用于查找命令的模式。</span><span class="token attr-name">shell.command-path-patterns</span><span class="token punctuation">=</span> <span class="token attr-value">classpath*:/commands/**,classpath*:/crash/commands/**</span><span class="token comment" spellcheck="true"># 扫描更改并在必要时更新命令（以秒为单位）。</span><span class="token attr-name">shell.command-refresh-interval</span><span class="token punctuation">=</span> <span class="token attr-value">-1</span><span class="token comment" spellcheck="true"># 用于查找配置的模式。</span><span class="token attr-name">shell.config-path-patterns</span><span class="token punctuation">=</span> <span class="token attr-value">classpath*:/crash/*</span><span class="token comment" spellcheck="true"># 逗号分隔的要禁用的命令列表。</span><span class="token attr-name">shell.disabled-commands</span><span class="token punctuation">=</span> <span class="token attr-value">jpa*,jdbc*,jndi*</span><span class="token comment" spellcheck="true"># 禁用逗号分隔的插件列表。 默认情况下，根据环境禁用某些插件。</span><span class="token attr-name">shell.disabled-plugins</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用户被提示再次登录后的毫秒数。</span><span class="token attr-name">shell.ssh.auth-timeout</span> <span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用CRaSH SSH支持。</span><span class="token attr-name">shell.ssh.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 未使用的连接关闭之后的毫秒数。</span><span class="token attr-name">shell.ssh.idle-timeout</span> <span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SSH服务器密钥路径。</span><span class="token attr-name">shell.ssh.key-path</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># SSH端口。</span><span class="token attr-name">shell.ssh.port</span><span class="token punctuation">=</span> <span class="token attr-value">2000</span><span class="token comment" spellcheck="true"># 启用CRaSH telnet支持。 如果TelnetPlugin可用，默认情况下启用。</span><span class="token attr-name">shell.telnet.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">false</span><span class="token comment" spellcheck="true"># Telnet端口。</span><span class="token attr-name">shell.telnet.port</span><span class="token punctuation">=</span> <span class="token attr-value">5000</span><span class="token comment" spellcheck="true"># GIT 信息配置</span><span class="token comment" spellcheck="true"># 生成的git信息属性文件的资源引用。</span><span class="token attr-name">spring.git.properties</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 标准出口</span><span class="token comment" spellcheck="true"># 模式，告诉聚合器如何从源存储库中的键。</span><span class="token attr-name">spring.metrics.export.aggregate.key-pattern</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 全局存储库的前缀如果处于活动状态。</span><span class="token attr-name">spring.metrics.export.aggregate.prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 导出刻度之间以毫秒为单位的延迟。 按照这种延迟，指标将按计划导出到外部来源。</span><span class="token attr-name">spring.metrics.export.delay-millis</span><span class="token punctuation">=</span> <span class="token attr-value">5000</span><span class="token comment" spellcheck="true"># 标志以启用度量标准导出（假设MetricWriter可用）。</span><span class="token attr-name">spring.metrics.export.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 要排除的度量名称列表。 应用后包括。</span><span class="token attr-name">spring.metrics.export.excludes</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 要包含的度量名称的模式列表。</span><span class="token attr-name">spring.metrics.export.includes</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># redis存储库导出的密钥（如果活动）。</span><span class="token attr-name">spring.metrics.export.redis.key</span><span class="token punctuation">=</span> <span class="token attr-value">keys.spring.metrics</span><span class="token comment" spellcheck="true"># redis存储库的前缀 如果处于活动状态。</span><span class="token attr-name">spring.metrics.export.redis.prefix</span><span class="token punctuation">=</span> <span class="token attr-value">spring.metrics</span><span class="token comment" spellcheck="true"># 标志基于不导出不变的度量值来关闭任何可用的优化。</span><span class="token attr-name">spring.metrics.export.send-latest</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 主机的statsd服务器接收导出的指标。</span><span class="token attr-name">spring.metrics.export.statsd.host</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 接收导出指标的statsd服务器端口。</span><span class="token attr-name">spring.metrics.export.statsd.port</span><span class="token punctuation">=</span> <span class="token attr-value">8125</span><span class="token comment" spellcheck="true"># statsd导出指标的前缀。</span><span class="token attr-name">spring.metrics.export.statsd.prefix</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 每个MetricWriter bean名称具有特定的触发器属性。</span><span class="token attr-name">spring.metrics.export.triggers.*</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># DEVTOOLS属性</span><span class="token comment" spellcheck="true"># ----------------------------------------</span><span class="token comment" spellcheck="true"># DEVTOOLS（开发工具属性）</span><span class="token comment" spellcheck="true"># 启用一个livereload.com兼容的服务器。</span><span class="token attr-name">spring.devtools.livereload.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true">#  # Server port.</span><span class="token attr-name">spring.devtools.livereload.port</span><span class="token punctuation">=</span> <span class="token attr-value">35729</span><span class="token comment" spellcheck="true"># 应该排除的触发完全重新启动的其他模式。</span><span class="token attr-name">spring.devtools.restart.additional-exclude</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 观看更改的附加路径。</span><span class="token attr-name">spring.devtools.restart.additional-paths</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用自动重启功能。</span><span class="token attr-name">spring.devtools.restart.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 应该排除的模式触发完全重新启动。</span><span class="token attr-name">spring.devtools.restart.exclude</span><span class="token punctuation">=</span> <span class="token attr-value">META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties</span><span class="token comment" spellcheck="true"># 轮询类路径更改之间等待的时间量（以毫秒为单位）。</span><span class="token attr-name">spring.devtools.restart.poll-interval</span><span class="token punctuation">=</span> <span class="token attr-value">1000</span><span class="token comment" spellcheck="true"># 触发重新启动之前没有任何类路径更改所需的安静时间量（以毫秒为单位）。</span><span class="token attr-name">spring.devtools.restart.quiet-period</span><span class="token punctuation">=</span> <span class="token attr-value">400</span><span class="token comment" spellcheck="true"># 更改后的特定文件的名称将触发重新启动检查。 如果未指定任何类路径文件更改将触发重新启动。</span><span class="token attr-name">spring.devtools.restart.trigger-file</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 远程开发工具属性</span><span class="token comment" spellcheck="true"># 用于处理远程连接的上下文路径。</span><span class="token attr-name">spring.devtools.remote.context-path</span><span class="token punctuation">=</span> <span class="token attr-value">/.~~spring-boot!~</span><span class="token comment" spellcheck="true"># 启用远程调试支持。</span><span class="token attr-name">spring.devtools.remote.debug.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 本地远程调试服务器端口。</span><span class="token attr-name">spring.devtools.remote.debug.local-port</span><span class="token punctuation">=</span> <span class="token attr-value">8000</span><span class="token comment" spellcheck="true"># 用于连接到远程应用程序的代理主机。</span><span class="token attr-name">spring.devtools.remote.proxy.host</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 用于连接到远程应用程序的代理端口。</span><span class="token attr-name">spring.devtools.remote.proxy.port</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># 启用远程重启。</span><span class="token attr-name">spring.devtools.remote.restart.enabled</span><span class="token punctuation">=</span> <span class="token attr-value">true</span><span class="token comment" spellcheck="true"># 建立连接所需的共享密钥（需要启用远程支持）。</span><span class="token attr-name">spring.devtools.remote.secret</span><span class="token punctuation">=</span><span class="token attr-value"> </span><span class="token comment" spellcheck="true"># HTTP头用于传输共享密钥。</span><span class="token attr-name">spring.devtools.remote.secret-header-name</span><span class="token punctuation">=</span> <span class="token attr-value">X-AUTH-TOKEN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="yaml-wen-jian-pei-zhi"><code>yaml</code>文件配置</span><a href="#yaml-wen-jian-pei-zhi" class="header-anchor">.</a></h2><blockquote><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-external-config</a></p></blockquote><p><img src="/2020/09/12/4062/image-20200913003916036.png" alt></p><h3><span id="qiang-da-de-di-fang">强大的地方</span><a href="#qiang-da-de-di-fang" class="header-anchor">.</a></h3><blockquote><p>它可以直接给实体类赋值(注入)</p></blockquote><h4><span id="shu-xing-si-you-fu-zhi-de-fang-shi-chu-liao-zhi-jie-fan-she">属性（私有）赋值的方式（除了直接反射）</span><a href="#shu-xing-si-you-fu-zhi-de-fang-shi-chu-liao-zhi-jie-fan-she" class="header-anchor">.</a></h4><ul><li>setter方法 和  constructor</li><li>spring中<ul><li>配置文件中，bean中注入（setter 和 constructor</li><li>使用注解 <code>@Value</code></li></ul></li><li><strong>springboot中</strong><ul><li>使用<code>application.yaml</code>和注解 <code>@configurationProperties(prefix = &quot;类名(小写)&quot;)</code></li></ul></li></ul><h4><span id="configurationproperties-de-zuo-yong">@configurationProperties的作用</span><a href="#configurationproperties-de-zuo-yong" class="header-anchor">.</a></h4><p>​    将配置文件的每一个属性的值，映射到这个组件中；</p><p>​    告诉springboot将本类中的所有属性和配置文件中相关的配置进行绑定</p><p>​    参数 prefix = “” 将配置文件中的””下面的所有属性一一对应</p><p>​    需要导入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-configuration-processor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optional</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optional</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuyou<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>context<span class="token punctuation">.</span>properties<span class="token punctuation">.</span>ConfigurationProperties<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Date<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Map<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuminkai * @version 1.0 * @datetime 2020/9/13 9:45 * @decription **/</span><span class="token annotation punctuation">@Component</span><span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"person"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span>531165355267377822L<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Boolean isFemale<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> hobbies<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> card<span class="token punctuation">;</span>    <span class="token keyword">private</span> Dog dog<span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Boolean <span class="token function">getFemale</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> isFemale<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFemale</span><span class="token punctuation">(</span>Boolean female<span class="token punctuation">)</span> <span class="token punctuation">{</span>        isFemale <span class="token operator">=</span> female<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Date <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>Date birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> <span class="token function">getHobbies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> hobbies<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHobbies</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> hobbies<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>hobbies <span class="token operator">=</span> hobbies<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token function">getCard</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> card<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setCard</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> card<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>card <span class="token operator">=</span> card<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Dog <span class="token function">getDog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> dog<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDog</span><span class="token punctuation">(</span>Dog dog<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>dog <span class="token operator">=</span> dog<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Person{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", isFemale="</span> <span class="token operator">+</span> isFemale <span class="token operator">+</span>                <span class="token string">", birthday="</span> <span class="token operator">+</span> birthday <span class="token operator">+</span>                <span class="token string">", hobbies="</span> <span class="token operator">+</span> hobbies <span class="token operator">+</span>                <span class="token string">", card="</span> <span class="token operator">+</span> card <span class="token operator">+</span>                <span class="token string">", dog="</span> <span class="token operator">+</span> dog <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>liuyou<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Value<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>io<span class="token punctuation">.</span>Serializable<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * @author liuminkai * @version 1.0 * @datetime 2020/9/13 9:37 * @decription **/</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> 6427446484435308919L<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"阿黄"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Dog{"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">'}'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token function">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Integer <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">Springboot01ConfigApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token keyword">private</span> Person person<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml"><code class="language-yaml"><span class="token key atrule">person</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> liuyou  <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">10</span>  <span class="token key atrule">female</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">birthday</span><span class="token punctuation">:</span> 1999/2/14  <span class="token key atrule">hobbies</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token key atrule">l1</span><span class="token punctuation">:</span> <span class="token string">"你好"</span><span class="token punctuation">,</span><span class="token key atrule">l2</span><span class="token punctuation">:</span> <span class="token string">"不好"</span>  <span class="token punctuation">}</span>  <span class="token key atrule">card</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>    IDCard<span class="token punctuation">,</span> BandCard<span class="token punctuation">,</span> SchoolCard  <span class="token punctuation">]</span>  <span class="token key atrule">dag</span><span class="token punctuation">:</span>    <span class="token key atrule">name</span><span class="token punctuation">:</span> liu    <span class="token key atrule">age</span><span class="token punctuation">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/09/12/4062/image-20200913104813879.png" alt></p><h2><span id="duo-wen-jian-pei-zhi">多文件配置</span><a href="#duo-wen-jian-pei-zhi" class="header-anchor">.</a></h2><h3><span id="you-xian-ji-guan-xi-bu-che-fu-gai">优先级关系（不扯覆盖）</span><a href="#you-xian-ji-guan-xi-bu-che-fu-gai" class="header-anchor">.</a></h3><blockquote><p>./ 代表 在项目路径下</p><p>数字越小，优先使用 配置文件</p></blockquote><ol><li><code>file：./custom-config/application.yaml</code></li><li><code>classpath: custom-config/application.yaml</code></li><li><code>file: ./config/application.yaml</code></li><li><code>file: ./application.yaml</code></li><li><code>classpath: config/application.yaml</code></li><li><code>classpath: /application.yaml</code></li></ol><p><img src="/2020/09/12/4062/image-20200914105010249.png" alt></p><h2><span id="duo-huan-jing-pei-zhi">多环境配置</span><a href="#duo-huan-jing-pei-zhi" class="header-anchor">.</a></h2><h3><span id="ru-guo-shi-yong-properties-zuo-wei-pei-zhi-wen-jian">如果使用<code>properties</code>作为配置文件</span><a href="#ru-guo-shi-yong-properties-zuo-wei-pei-zhi-wen-jian" class="header-anchor">.</a></h3><blockquote><p>需要写多个配置文件</p></blockquote><p><img src="/2020/09/12/4062/image-20200914110344615.png" alt></p><h3><span id="ru-guo-shi-yong-yaml-zuo-wei-pei-zhi-wen-jian">如果使用<code>yaml</code>作为配置文件</span><a href="#ru-guo-shi-yong-yaml-zuo-wei-pei-zhi-wen-jian" class="header-anchor">.</a></h3><blockquote><p>使用 — 实现多文档 分块</p></blockquote><p><img src="/2020/09/12/4062/image-20200914111025176.png" alt></p><h1><span id="tuo-zhan">拓展</span><a href="#tuo-zhan" class="header-anchor">.</a></h1><h3><span id="1-bang-ding-qi-ta-de-pei-zhi-wen-jian">1、绑定其他的配置文件</span><a href="#1-bang-ding-qi-ta-de-pei-zhi-wen-jian" class="header-anchor">.</a></h3><p>使用 <code>@PropertySource(value = &quot;classpath:properties配置文件&quot;)</code>即可</p><h3><span id="2-yaml-de-qi-ta-yong-fa">2、yaml的其他用法</span><a href="#2-yaml-de-qi-ta-yong-fa" class="header-anchor">.</a></h3><blockquote><p>其他用法：<a href="https://www.jianshu.com/p/20c3cde0f189" target="_blank" rel="noopener">https://www.jianshu.com/p/20c3cde0f189</a></p></blockquote><p>EL表达式：</p><ul><li><code>${random.int}</code></li><li><code>${random.uuid}</code></li><li><code>${person.name:liuyou}_name</code> : 如果person的name存在，就有存在的值，不存在就用liuyou</li></ul><p><img src="/2020/09/12/4062/image-20200913110106233.png" alt></p><blockquote><p>松散绑定: 类似于 可以在 yaml配置文件中使用 下滑线等形式匹配 实体属性(驼峰命名)</p></blockquote><p><img src="/2020/09/12/4062/image-20200913231749854.png" alt></p><blockquote><p>JSR303数据校验具体看 相应的博客</p></blockquote><h3><span id="3-properties-yu-yaml-de-jia-zai-shun-xu">3、properties 与 yaml的加载顺序</span><a href="#3-properties-yu-yaml-de-jia-zai-shun-xu" class="header-anchor">.</a></h3><ul><li>先yaml</li><li>后properties</li></ul><blockquote><p><strong>即 properties的优先级要比 yaml的高</strong></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-04-SpringBoot自动装配原理</title>
      <link href="/2020/09/09/38986.html"/>
      <url>/2020/09/09/38986.html</url>
      
        <content type="html"><![CDATA[<h1><span id="zi-dong-zhuang-pei-yuan-li">自动装配原理</span><a href="#zi-dong-zhuang-pei-yuan-li" class="header-anchor">.</a></h1><h2><span id="pom-xml"><code>POM.xml</code></span><a href="#pom-xml" class="header-anchor">.</a></h2><blockquote><p>核心依赖 在父工程中（含有大量的依赖）</p></blockquote><ul><li>核心依赖：<code>spring-boot-dependencies</code><ul><li>其子依赖：<code>spring-boot-starter-parent</code><ul><li>项目依赖：<code>springbootstudy</code></li></ul></li></ul></li></ul><p><img src="/2020/09/09/38986/image-20200909132501824.png" alt></p><h2><span id="qi-dong-qi">启动器</span><a href="#qi-dong-qi" class="header-anchor">.</a></h2><blockquote><p>Spring Boot的启动场景</p><ul><li>需要什么功能，就使用相应的启动器<ul><li>如spring-boot-starter-web 会帮我们自动导入web环境所需要的所有依赖</li></ul></li></ul><p>更多：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter" target="_blank" rel="noopener">https://docs.spring.io/spring-boot/docs/current/reference/html/using-spring-boot.html#using-boot-starter</a></p></blockquote><p><img src="/2020/09/09/38986/image-20200909133856233.png" alt></p><blockquote></blockquote><h2><span id="zhu-cheng-xu">主程序</span><a href="#zhu-cheng-xu" class="header-anchor">.</a></h2><h4><span id="zhu-jie">注解：</span><a href="#zhu-jie" class="header-anchor">.</a></h4><p><strong>1、表面理解：</strong></p><blockquote><p><code>@SpringBootApplication</code> —— 启动类标志</p></blockquote><p><img src="/2020/09/09/38986/image-20201102145717707.png" alt></p><p><strong>2、接下来深入理解</strong></p><blockquote><p>进入<code>@SpringBootApplication注解内部</code> 可以看到其内部又包含了3个注解，与配置有关的就是 <code>@SpringBootConfiguration</code> 、<code>@EnableAutoConfiguration</code></p></blockquote><p><img src="/2020/09/09/38986/image-20201102150425525.png" alt></p><p><strong>3、这两注解内部结构基本如下：</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootConfiguration</span>    <span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">// 说明 这个类是一个配置类（类似于Spring中xml配置文件）</span>        <span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">// 说明 这个类也是一个组件 -- 因此 可以被上面@ComponentScan扫描到</span><span class="token annotation punctuation">@EnableAutoConfiguration</span> <span class="token comment" spellcheck="true">// 自动配置</span>    <span class="token annotation punctuation">@AutoConfigurationPackage</span>  <span class="token comment" spellcheck="true">//  自动配置包</span>        <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationPackages<span class="token punctuation">.</span>Registrar<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 自动配置包注册</span>    <span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span>AutoConfigurationImportSelector<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 自动配置导入选择：获取所有的配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>4、看到以上结构，我们知道SpringBoot的自动配置，目前只涉及到两个类</strong></p><p><code>AutoConfigurationPackages.Registrar</code> ： 包注册</p><p>Registrar.class 作用：将主启动类的所在包及包下面所有子包里面的所有组件扫描到Spring容器 </p><p><code>AutoConfigurationImportSelector</code> ：导入候选的配置类 （<strong>重点</strong>）</p><p><strong>一</strong></p><p><img src="/2020/09/09/38986/image-20201102161946259.png" alt></p><pre class="line-numbers language-java"><code class="language-java">AutoConfigurationEntry autoConfigurationEntry <span class="token operator">=</span> <span class="token function">getAutoConfigurationEntry</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>二</strong></p><p><img src="/2020/09/09/38986/image-20201102162431035.png" alt></p><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> <span class="token function">getCandidateConfigurations</span><span class="token punctuation">(</span>annotationMetadata<span class="token punctuation">,</span> attributes<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>三</strong></p><p><img src="/2020/09/09/38986/image-20201102160000217.png" alt></p><p><strong>四</strong></p><blockquote><p><strong>加载了 EnableAutoConfiguration 对应的配置类 – 详情看后面</strong> （META-INF/spring.facotories中对应的）</p></blockquote><p><img src="/2020/09/09/38986/image-20201102163452878.png" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 核心语句</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> configurations <span class="token operator">=</span> SpringFactoriesLoader<span class="token punctuation">.</span><span class="token function">loadFactoryNames</span><span class="token punctuation">(</span><span class="token function">getSpringFactoriesLoaderFactoryClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token function">getBeanClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/09/09/38986/image-20201102170552744.png" alt></p><p><img src="/2020/09/09/38986/image-20201102170627476.png" alt></p><p><strong>以下是可以被导入的配置类，如果没有，那么需要自定义配置</strong></p><p><img src="/2020/09/09/38986/image-20201102160219948.png" alt="spring.factories文件内容"></p><p><img src="/2020/09/09/38986/image-20201102160415922.png" alt="着重关注这个类"></p><p><strong>可以得出结论：</strong><mark><strong>所有的自动配置类</strong>都是在启动的时候被扫描并导入到容器（<code>spring.factories</code>中的自动配置类—— <strong>全限定名形式 xxxAutoConfiguration</strong>）</mark>，但是并不是都生效，看是否有对应的启动器（会涉及到新的注解）</p><p>①启动时，加载 <code>spring.factories</code>文件中的 自动配置类，导入到容器中</p><p>②当然，需要对应的启动器才生效</p><p>③<strong>xxxAutoConfIguration</strong>会导入其相关的组件（<code>@Bean</code>），并自动配置，免去我们手动编写的配置文件的工作</p><p><strong>5、从以上我们知道了自动加载的配置类有哪些，但是实际上，并没有全部有效，为什么呢？</strong></p><blockquote><p>那么就涉及到 新的注解 <code>@ConditionalXXX</code> 满足某些条件就加载，比如说有某个类（一般在启动器中）的时候生效</p></blockquote><h4><span id="yun-xing-run">运行 Run</span><a href="#yun-xing-run" class="header-anchor">.</a></h4><p><img src="/2020/09/09/38986/image-20201102173949123.png" alt></p><p><strong>查看构造器，SpringApplication做了如下4个事情：</strong></p><ul><li>推断应用的类型是普通还是Web</li><li>查找所有的应用程序监听器，设置到initializers属性中</li><li>找出所有的应用程序监听器，设置到listeners属性中</li><li>推断并设置main方法的定义类，找到运行的主类</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token function">SpringApplication</span><span class="token punctuation">(</span>ResourceLoader resourceLoader<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> primarySources<span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token operator">=</span> resourceLoader<span class="token punctuation">;</span>   Assert<span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">,</span> <span class="token string">"PrimarySources must not be null"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>primarySources <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>primarySources<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>webApplicationType <span class="token operator">=</span> WebApplicationType<span class="token punctuation">.</span><span class="token function">deduceFromClasspath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">setInitializers</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>ApplicationContextInitializer<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">setListeners</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Collection<span class="token punctuation">)</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>ApplicationListener<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass <span class="token operator">=</span> <span class="token function">deduceMainApplicationClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="run-fang-fa-liu-cheng-fen-xi">run方法流程分析</span><a href="#run-fang-fa-liu-cheng-fen-xi" class="header-anchor">.</a></h5><blockquote><p>该图来自狂神说Java，<a href="https://blog.csdn.net/qq_33369905/article/details/106647293" target="_blank" rel="noopener">https://blog.csdn.net/qq_33369905/article/details/106647293</a></p></blockquote><p><img src="/2020/09/09/38986/springboot%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> ConfigurableApplicationContext <span class="token function">run</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>   StopWatch stopWatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StopWatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   stopWatch<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   ConfigurableApplicationContext context <span class="token operator">=</span> null<span class="token punctuation">;</span>   Collection<span class="token operator">&lt;</span>SpringBootExceptionReporter<span class="token operator">></span> exceptionReporters <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token function">configureHeadlessProperty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   SpringApplicationRunListeners listeners <span class="token operator">=</span> <span class="token function">getRunListeners</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>   listeners<span class="token punctuation">.</span><span class="token function">starting</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      ApplicationArguments applicationArguments <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultApplicationArguments</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>      ConfigurableEnvironment environment <span class="token operator">=</span> <span class="token function">prepareEnvironment</span><span class="token punctuation">(</span>listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">configureIgnoreBeanInfo</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>      Banner printedBanner <span class="token operator">=</span> <span class="token function">printBanner</span><span class="token punctuation">(</span>environment<span class="token punctuation">)</span><span class="token punctuation">;</span>      context <span class="token operator">=</span> <span class="token function">createApplicationContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      exceptionReporters <span class="token operator">=</span> <span class="token function">getSpringFactoriesInstances</span><span class="token punctuation">(</span>SpringBootExceptionReporter<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>            <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> ConfigurableApplicationContext<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">prepareContext</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> environment<span class="token punctuation">,</span> listeners<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">,</span> printedBanner<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">refreshContext</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">afterRefresh</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>      stopWatch<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>logStartupInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">new</span> <span class="token class-name">StartupInfoLogger</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>mainApplicationClass<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logStarted</span><span class="token punctuation">(</span><span class="token function">getApplicationLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> stopWatch<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      listeners<span class="token punctuation">.</span><span class="token function">started</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">callRunners</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> applicationArguments<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> listeners<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">try</span> <span class="token punctuation">{</span>      listeners<span class="token punctuation">.</span><span class="token function">running</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">handleRunFailure</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> ex<span class="token punctuation">,</span> exceptionReporters<span class="token punctuation">,</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span>   <span class="token keyword">return</span> context<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-03-第一个SpringBoot程序</title>
      <link href="/2020/09/09/45329.html"/>
      <url>/2020/09/09/45329.html</url>
      
        <content type="html"><![CDATA[<h1><span id="chuang-jian-di-yi-ge-springboot-cheng-xu">创建第一个SpringBoot程序</span><a href="#chuang-jian-di-yi-ge-springboot-cheng-xu" class="header-anchor">.</a></h1><h2><span id="yi-chuang-jian-gong-cheng">一、创建工程</span><a href="#yi-chuang-jian-gong-cheng" class="header-anchor">.</a></h2><h3><span id="fang-shi-yi-spring-boot-guan-fang-wang-zhan">方式一（Spring Boot 官方网站）</span><a href="#fang-shi-yi-spring-boot-guan-fang-wang-zhan" class="header-anchor">.</a></h3><blockquote><p><a href="https://spring.io/projects/spring-boot/" target="_blank" rel="noopener">https://spring.io/projects/spring-boot/</a></p></blockquote><p><img src="/2020/09/09/45329/image-20200909110421132.png" alt="第一步"></p><p><img src="/2020/09/09/45329/image-20200909110829793.png" alt="第二步：根据自己的环境选择"></p><p>然后下载压缩包，解压，导入项目（maven）即可</p><h3><span id="fang-shi-er-idea">方式二（IDEA）</span><a href="#fang-shi-er-idea" class="header-anchor">.</a></h3><p><img src="/2020/09/09/45329/image-20200909112350063.png" alt="第一步"></p><p><img src="/2020/09/09/45329/image-20200909112614011.png" alt="第二步"></p><p><img src="/2020/09/09/45329/image-20200909112758922.png" alt="第三步"></p><h2><span id="er-bian-xie-di-yi-ge-springboot-cheng-xu">二、编写第一个springBoot程序</span><a href="#er-bian-xie-di-yi-ge-springboot-cheng-xu" class="header-anchor">.</a></h2><p><img src="/2020/09/09/45329/image-20200909123302671.png" alt="项目结构"></p><p><img src="/2020/09/09/45329/image-20200909130050240.png" alt="创建HelloController"></p><p><strong>HelloController内容</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello-world"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>程序入口运行</strong></p><p>得到结果</p><p><img src="/2020/09/09/45329/image-20200909131850119.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-02-微服务</title>
      <link href="/2020/09/08/53797.html"/>
      <url>/2020/09/08/53797.html</url>
      
        <content type="html"><![CDATA[<h1><span id="wei-fu-wu">微服务</span><a href="#wei-fu-wu" class="header-anchor">.</a></h1><h2><span id="1-shi-me-shi-wei-fu-wu">1、什么是微服务</span><a href="#1-shi-me-shi-wei-fu-wu" class="header-anchor">.</a></h2><blockquote><p>必看: <a href="https://www.cnblogs.com/liuning8023/p/4493156.html" target="_blank" rel="noopener">https://www.cnblogs.com/liuning8023/p/4493156.html</a></p></blockquote><blockquote><p>微服务框架：打破之前all in one 的架构方式，把每个功能元素独立出来，把独立出来的功能元素的动态组合，需要的功能元素才去拿来组合，需要多一些时，可以整合多个功能元素。所以微服务架构是对功能元素进行赋值，而没有对整个应用进行赋值。</p></blockquote><ul><li><p>好处：</p><ul><li>节省了调用资源</li><li>每个功能元素的服务都是一个可替换的、可独立升级的软件代码</li></ul></li><li><p>构建一个个功能独立的微服务服务单元，可以使用springboot，可以帮我们快速搭建一个应用</p></li><li><p>大型分布式网络服务的调用，这部分有spring cloud来完成，实现分布式</p></li><li><p>在分布式中间，进行流式数据计算，批处理，我们有spring cloud data flow</p></li><li><p>spring为我们想清楚了整个从开始构建应用到大型分布式应用全流程方案</p></li></ul><p><img src="/2020/09/08/53797/dubbo-architecture-roadmap.jpg" alt></p><h4><span id="dan-yi-ying-yong-jia-gou">单一应用架构</span><a href="#dan-yi-ying-yong-jia-gou" class="header-anchor">.</a></h4><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><ul><li>所有应用服务放在一个War包内</li><li>好处：<ul><li>易于开发和测试</li><li>部署方便，扩展方便（只需复制war包）</li></ul></li><li>缺点：<ul><li>修改繁琐（修改需要停掉整个服务，重新打包，部署war包）</li><li>如果项目比较大，维护上可能存在问题</li></ul></li></ul><h4><span id="chui-zhi-ying-yong-jia-gou">垂直应用架构</span><a href="#chui-zhi-ying-yong-jia-gou" class="header-anchor">.</a></h4><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><h4><span id="fen-bu-shi-fu-wu-jia-gou">分布式服务架构</span><a href="#fen-bu-shi-fu-wu-jia-gou" class="header-anchor">.</a></h4><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><h4><span id="liu-dong-ji-suan-jia-gou">流动计算架构</span><a href="#liu-dong-ji-suan-jia-gou" class="header-anchor">.</a></h4><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springBoot学习笔记-01-开篇</title>
      <link href="/2020/09/07/61901.html"/>
      <url>/2020/09/07/61901.html</url>
      
        <content type="html"><![CDATA[<h1><span id="springboot">SpringBoot</span><a href="#springboot" class="header-anchor">.</a></h1><ul><li>JavaSE ： oop</li><li>Html + CSS + js ==&gt; 前端三大件 ==&gt; 静态页面</li><li>JavaWeb ==&gt; 独立开发三层架构的网站</li><li>SSM（简化了开发流程，配置复杂）<ul><li>MyBatis ： 持久化</li><li>Spring :  IOC控制反转（依赖注入 – 反射）+ AOP面向切面编程（代理）</li><li>SpringMVC ：（架构）</li></ul></li><li>jQuery – js第三方库</li><li>Vue – 前端视图层框架</li><li>SpringBoot ： Spring的 简化<ul><li>war包：在tomcat上运行</li><li>SpringBoot-jar：内嵌tomcat </li></ul></li><li>SpringCloud：整理这些服务</li></ul><h2><span id="yi-shi-me-shi-springboot">一、什么是SpringBoot</span><a href="#yi-shi-me-shi-springboot" class="header-anchor">.</a></h2><ul><li>Spring Boot是由Pivotal团队提供的<strong>全新</strong>框架</li><li>其<strong>设计目的</strong>是用来<strong>简化新Spring应用的初始搭建以及开发过程</strong>。</li><li>该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。</li><li>通过这种方式，Spring Boot致力于在蓬勃发展的<strong>快速应用开发领域</strong>(rapid application development)成为领导者。</li></ul><blockquote><p>maven整合了所有的jar包，springBoot整合了所有的框架</p></blockquote><h3><span id="hui-gu-spring"><strong>回顾Spring</strong></span><a href="#hui-gu-spring" class="header-anchor">.</a></h3><ul><li><strong>为了解决解决企业应用开发的复杂性（简化开发）</strong></li><li><strong><mark>Spring：一个轻量级,非侵入式的控制反转(IoC)和面向切面(AOP)的免费开源容器框架</mark></strong></li></ul><p><strong>Spring如何简化java开发</strong></p><ul><li>基于POJO的轻量级和最小侵入性编程</li><li>通过IOC，依赖注入（DI） 和 面向接口实现松耦合</li><li>基于切面（AOP）和 惯例进行声明式编程</li><li>通过切面和模板减少样式代码</li></ul><h3><span id="zhu-yao-you-dian">主要优点</span><a href="#zhu-yao-you-dian" class="header-anchor">.</a></h3><ul><li>为所有Spring开发者更快的入门</li><li>开箱即用，提供各种默认配置来简化项目配置</li><li>内嵌式容器简化Web项目</li><li>没有冗余的代码生成和XML配置的要求</li></ul><h2><span id="er-pei-zhi-ru-he-bian-xie-yaml">二、配置如何变写<code>yaml</code></span><a href="#er-pei-zhi-ru-he-bian-xie-yaml" class="header-anchor">.</a></h2><h2><span id="san-zi-dong-zhuang-pei-yuan-li-chong-dian">三、自动装配原理（重点）</span><a href="#san-zi-dong-zhuang-pei-yuan-li-chong-dian" class="header-anchor">.</a></h2><h2><span id="si-ji-cheng-web-kai-fa">四、集成Web开发</span><a href="#si-ji-cheng-web-kai-fa" class="header-anchor">.</a></h2><h2><span id="wu-ji-cheng-shu-ju-ku-kai-fa">五、集成数据库开发</span><a href="#wu-ji-cheng-shu-ju-ku-kai-fa" class="header-anchor">.</a></h2><h2><span id="liu-fen-bu-shi-kai-fa-dubbo-rpc-zookeeper">六、分布式开发（Dubbo（RPC） + Zookeeper）</span><a href="#liu-fen-bu-shi-kai-fa-dubbo-rpc-zookeeper" class="header-anchor">.</a></h2><h2><span id="qi-swagger-jie-kou-wen-dang">七、Swagger接口文档</span><a href="#qi-swagger-jie-kou-wen-dang" class="header-anchor">.</a></h2><h2><span id="ba-ren-wu-diao-du">八、任务调度</span><a href="#ba-ren-wu-diao-du" class="header-anchor">.</a></h2><h2><span id="jiu-springsecurity-shiro">九、SpringSecurity、Shiro</span><a href="#jiu-springsecurity-shiro" class="header-anchor">.</a></h2><blockquote><p> 权限验证（AOP）</p></blockquote><h2><span id="shi-linux">十、Linux</span><a href="#shi-linux" class="header-anchor">.</a></h2><h2><span id="shi-yi-springcloud-restful-eureka-ribbon-feign-hystrix-zuul-lu-you-wang-guan-git">十一、SpringCloud（Restful + Eureka + Ribbon + Feign + HyStrix + Zuul路由网关 + git）</span><a href="#shi-yi-springcloud-restful-eureka-ribbon-feign-hystrix-zuul-lu-you-wang-guan-git" class="header-anchor">.</a></h2>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>序列化ID自动生成(IDEA)</title>
      <link href="/2020/08/22/55332.html"/>
      <url>/2020/08/22/55332.html</url>
      
        <content type="html"><![CDATA[<h2><span id="xu-lie-hua-id-zi-dong-sheng-cheng-idea">序列化ID自动生成(IDEA)</span><a href="#xu-lie-hua-id-zi-dong-sheng-cheng-idea" class="header-anchor">.</a></h2><h3><span id="1-she-zhi-zhong-zuo-ru-xia-cao-zuo">1、设置中做如下操作</span><a href="#1-she-zhi-zhong-zuo-ru-xia-cao-zuo" class="header-anchor">.</a></h3><p><img src="/2020/08/22/55332/image-20200822110945616.png" alt></p><h3><span id="2-shi-xian-serializable-jie-kou">2、实现 <code>Serializable</code> 接口</span><a href="#2-shi-xian-serializable-jie-kou" class="header-anchor">.</a></h3><p><img src="/2020/08/22/55332/image-20200822111124887.png" alt></p><h3><span id="3-sheng-cheng-serialversionuid">3、生成<code>serialVersionUID</code></span><a href="#3-sheng-cheng-serialversionuid" class="header-anchor">.</a></h3><p><img src="/2020/08/22/55332/image-20200822111323197.png" alt></p><p><img src="/2020/08/22/55332/image-20200822111340814.png" alt></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>vue开发-07-404、路由钩子</title>
      <link href="/2020/08/11/23918.html"/>
      <url>/2020/08/11/23918.html</url>
      
        <content type="html"><![CDATA[<p>路由模式有两种</p><ul><li>hash：路径带#符号</li><li>history：路径不带#</li></ul><pre><code>mode:&#39;history&#39;</code></pre><p><img src="/2020/08/11/23918/image-20200811131213044.png" alt></p><p><img src="/2020/08/11/23918/image-20200811131235369.png" alt></p><p>404</p><pre><code>notfound.vuepath: &#39;*&#39;</code></pre><p>路由钩子</p><p>beforeRouteEnter 进入路由之前执行</p><p>beforeRouteLeave：离开路由前执行</p><pre><code>beforeRouteEnter:(to,from,next)=&gt;{    //xxxx    next();}</code></pre><ul><li>to: 路由要跳转的路径信息</li><li>from：路经跳转前的路径信息</li><li>next：路由的控制参数<ul><li>next（）跳入下一个页面</li><li>next（’/path’）改变路由的跳转方向，使其条到另一个路由</li><li>next（false） 返回原来的页面</li><li>next（（vm）=&gt; {}）仅在beforeRouteEnter可用，vm是组件实例</li></ul></li></ul><p>安装axios</p><pre class="line-numbers language-java"><code class="language-java">npm install axios vue<span class="token operator">-</span>axios <span class="token operator">-</span>s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在main.js 中引入 组件</p><pre><code>import axios from &#39;axios&#39;import VueAxios from &#39;Vue-axios&#39;Vue.use(VueAxios, axios);</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue开发-06-参数传递、重定向</title>
      <link href="/2020/08/11/46643.html"/>
      <url>/2020/08/11/46643.html</url>
      
        <content type="html"><![CDATA[<h2><span id="1">1、</span><a href="#1" class="header-anchor">.</a></h2><p>传参</p><pre><code>:to=&quot;{name:&#39;UserList&#39;,params:{id:1}}&quot;</code></pre><pre><code>path:&#39;/ddd/dd/:id&#39;</code></pre><p><img src="/2020/08/11/46643/image-20200811124348164.png" alt></p><p><img src="/2020/08/11/46643/image-20200811124442883.png" alt></p><p>取参</p><pre><code>&lt;div&gt;    {{$route.params.id}}&lt;/div&gt;</code></pre><p><img src="/2020/08/11/46643/image-20200811124521905.png" alt></p><p><img src="/2020/08/11/46643/image-20200811130116280.png" alt></p><h2><span id="2">2、</span><a href="#2" class="header-anchor">.</a></h2><p>使用 <code>props</code>解耦</p><p>传参</p><pre><code>:to=&quot;{name:&#39;UserList&#39;,params:{content:&#39;内容显示&#39;}}&quot;</code></pre><pre><code>path: &#39;/user/list/:content&#39;,        name: &#39;UserList&#39;,        props:true,</code></pre><p><img src="/2020/08/11/46643/image-20200811125348784.png" alt></p><p><img src="/2020/08/11/46643/image-20200811125423003.png" alt></p><p>取参</p><pre><code>export default {        name: &quot;UserList&quot;,        props:[&#39;content&#39;]    }</code></pre><pre><code>{{content}}</code></pre><p><img src="/2020/08/11/46643/image-20200811125506334.png" alt></p><p>​    <img src="/2020/08/11/46643/image-20200811130157481.png" alt></p><h2><span id="3">3、</span><a href="#3" class="header-anchor">.</a></h2><p>重定向</p><pre><code>redirect:/Main</code></pre><p><img src="/2020/08/11/46643/image-20200811125938750.png" alt></p><p><img src="/2020/08/11/46643/image-20200811130009144.png" alt></p><p><img src="/2020/08/11/46643/image-20200811130223056.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue开发-05-嵌套路由</title>
      <link href="/2020/08/10/19629.html"/>
      <url>/2020/08/10/19629.html</url>
      
        <content type="html"><![CDATA[<h2><span id="qian-tao-lu-you">嵌套路由</span><a href="#qian-tao-lu-you" class="header-anchor">.</a></h2><h3><span id="1-shi-me-shi-qian-tao-lu-you">1、什么是嵌套路由</span><a href="#1-shi-me-shi-qian-tao-lu-you" class="header-anchor">.</a></h3><p>嵌套路由又称子路由，在实际应用中，通常由多层嵌套的组件组合而成。同样地，URL中各段动态路径也按某种结构对应嵌套的各层组件，列如：</p><p>通俗来讲，就一个组件中可以含有一个类似于iframe的窗口，这个窗口就是有子路由决定显示内容的</p><h3><span id="2-shi-xian">2、实现</span><a href="#2-shi-xian" class="header-anchor">.</a></h3><h4><span id="1-zai-yuan-you-hello-vue-xiang-mu-de-ji-chu-shang-zai-views-xia-chuang-jian-user-list-vue-he-user-profile-vue-liang-ge-zu-jian-zu-jian-nei-rong">1.在原有<code>hello-vue</code>项目的基础上，在views下创建 <code>user/List.vue</code>和 <code>user/Profile.vue</code>两个组件，组件内容：</span><a href="#1-zai-yuan-you-hello-vue-xiang-mu-de-ji-chu-shang-zai-views-xia-chuang-jian-user-list-vue-he-user-profile-vue-liang-ge-zu-jian-zu-jian-nei-rong" class="header-anchor">.</a></h4><p><code>user/List.vue</code></p><pre class="line-numbers language-vue"><code class="language-vue"><template>  <h1><span id="yong-hu-lie-biao">用户列表</span><a href="#yong-hu-lie-biao" class="header-anchor">.</a></h1></template><script>    export default {        name: "UserList"    }</script><style scoped></style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>user/Profile.vue</code></p><pre class="line-numbers language-vue"><code class="language-vue"><template>  <h1><span id="ge-ren-xin-xi">个人信息</span><a href="#ge-ren-xin-xi" class="header-anchor">.</a></h1></template><script>    export default {        name: "UserProfile"    }</script><style scoped></style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-she-zhi-zi-lu-you">2.设置子路由</span><a href="#2-she-zhi-zi-lu-you" class="header-anchor">.</a></h4><p><code>router/index.js</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//导入vue vue-router</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">//导入 自定义组件</span><span class="token keyword">import</span> Main <span class="token keyword">from</span> <span class="token string">'../views/Main'</span><span class="token keyword">import</span> Login <span class="token keyword">from</span> <span class="token string">"../views/Login"</span><span class="token punctuation">;</span><span class="token keyword">import</span> UserProfile <span class="token keyword">from</span> <span class="token string">"../views/user/Profile"</span><span class="token punctuation">;</span><span class="token keyword">import</span> UserList <span class="token keyword">from</span> <span class="token string">"../views/user/List"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//安装路由 显示声明使用路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置导出路由</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//路由路径</span>      path<span class="token punctuation">:</span> <span class="token string">'/main'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//跳转到的组件</span>      component<span class="token punctuation">:</span> Main<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//子路由  </span>      children<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/user/list'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> UserList      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">'/user/profile'</span><span class="token punctuation">,</span>        component<span class="token punctuation">:</span> UserProfile      <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//路由路径</span>      path<span class="token punctuation">:</span> <span class="token string">'/login'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//跳转到的组件</span>      component<span class="token punctuation">:</span> Login    <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="3-jiang-main-vue-geng-gai-wei-ru-xia-nei-rong">3.将Main.vue更改为如下内容</span><a href="#3-jiang-main-vue-geng-gai-wei-ru-xia-nei-rong" class="header-anchor">.</a></h4><pre class="line-numbers language-vue"><code class="language-vue"><template>  <el-container style="height: 500px; border: 1px solid #eee">    <el-aside width="200px" style="background-color: rgb(238, 241, 246)">      <el-menu :default-openeds="['1', '3']">        <el-submenu index="1">          <template slot="title">            <i class="el-icon-message"></i>用户管理          </template>          <el-menu-item-group>            <el-menu-item index="1-1">              <router-link to="/user/profile">个人信息</router-link>            </el-menu-item>            <el-menu-item index="1-2">              <router-link to="/user/list">用户列表</router-link>            </el-menu-item>          </el-menu-item-group>        </el-submenu>        <el-submenu index="2">          <template slot="title">            <i class="el-icon-menu"></i>内容管理          </template>          <el-menu-item-group>            <el-menu-item index="2-1">分类管理</el-menu-item>            <el-menu-item index="2-2">内容列表</el-menu-item>          </el-menu-item-group>        </el-submenu>      </el-menu>    </el-aside>    <el-container>      <el-header style="text-align: right; font-size: 12px">        <el-dropdown>          <i class="el-icon-setting" style="margin-right: 15px"></i>          <el-dropdown-menu slot="dropdown">            <el-dropdown-item>个人信息</el-dropdown-item>            <el-dropdown-item>退出登录</el-dropdown-item>          </el-dropdown-menu>        </el-dropdown>      </el-header>      <el-main>        <router-view></router-view>      </el-main>    </el-container>  </el-container></template><style>  .el-header {    background-color: #b3c0d1;    color: #333;    line-height: 60px;  }  .el-aside {    color: #333;  }</style><script>  export default {    name: "Main",    data() {      const item = {        date: "2016-05-02",        name: "王小虎",        address: "上海市普陀区金沙江路 1518 弄"      };      return {        tableData: Array(20).fill(item)      };    }  };</script><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-yun-xing-cha-kan-jie-guo">4.运行，查看结果</span><a href="#4-yun-xing-cha-kan-jie-guo" class="header-anchor">.</a></h4><p><img src="/2020/08/10/19629/image-20200811122809804.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue开发-04-结合elementUI</title>
      <link href="/2020/08/10/60020.html"/>
      <url>/2020/08/10/60020.html</url>
      
        <content type="html"><![CDATA[<h2><span id="jie-he-elementui">结合elementUI</span><a href="#jie-he-elementui" class="header-anchor">.</a></h2><p>elementUI官方网站：<a href="https://element.eleme.io/#/zh-CN" target="_blank" rel="noopener">https://element.eleme.io/#/zh-CN</a></p><p>1.创建一个新的<code>vue-cli</code>项目: <code>hello-vue</code></p><pre class="line-numbers language-sh"><code class="language-sh">vue init webpack hello-vue<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.安装依赖，我们需要安装 vue-router、</p><pre class="line-numbers language-sh"><code class="language-sh"># 进入工作目录cd hello-vue# 安装 vue-routernpm install vue-router --save-dev# 安装 elementUInpm i element-ui -S#安装依赖npm install# 安装 sass加载器cnpm install sass-loader node-sass --save-dev# 启动测试npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.Login.vue</p><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div>    <el-form ref="loginForm" :model="form" :rules="rules" label-width="80px" class="login-box">      <h3 class="login-title"><span id="huan-ying-deng-lu">欢迎登陆</span><a href="#huan-ying-deng-lu" class="header-anchor">.</a></h3>      <el-form-item label="账号" prop="username">        <el-input type="text" placeholder="请输入账号" autocomplete="off" v-model="form.username">      </el-input></el-form-item>      <el-form-item label="密码" prop="password">        <el-input type="password" placeholder="请输入密码" autocomplete="off" v-model="form.password">      </el-input></el-form-item>      <el-form-item>        <el-button type="primary" @click="onSubmit('loginForm')">登陆</el-button>      </el-form-item>    </el-form>    <el-dialog title="温馨提示" :visible.sync="dialogVisible" width="30%" :before-close="handleClose">      <span>请输入账号和密码</span>      <span slot="footer" class="dialog-footer">      <el-button type="primary" @click="dialogVisible = false">确定</el-button>    </span>    </el-dialog>  </div></template><script>  export default {    name: "Login",    data() {      return {        form: {          username: '',          password: ''        },        //表单验证，需要在el-form-item 元素中增加prop属性        rules: {          username: [            {required: true, message: '账号不可为空', trigger: 'blur'}          ],          password : [            {required: true, message: '账号不可为空', trigger: 'blur'}          ]        },        //对话框隐藏        dialogVisible: false,      }    },    methods: {      onSubmit(formName){        //为表单绑定验证功能        this.$refs[formName].validate((valid) => {          if(valid){            //使用 vue-router 路由到指定页面，该方法称之为编程式导航            this.$router.push("/main");          }else{            this.dialogVisible = true;            return false;          }        });      }    }  }</script><style lang="scss" scoped>  .login-box {    border: 1px solid #DCDFE6;    width: 350px;    margin: 180px auto;    padding: 35px 35px 15px 35px;    border-radius: 5px;    -webkit-border-radius: 5px;    -moz-border-radius: 5px;    box-shadow: 0 0 25px #909399;  }  .login-title {    text-align: center;    margin: 0 auto 40px auto;    color: #303133;  }</style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue开发-03-vue-router路由</title>
      <link href="/2020/08/10/30243.html"/>
      <url>/2020/08/10/30243.html</url>
      
        <content type="html"><![CDATA[<h2><span id="vue-router-lu-you">vue-router路由</span><a href="#vue-router-lu-you" class="header-anchor">.</a></h2><h3><span id="1-shi-me-shi-vue-router">1、什么是Vue Router</span><a href="#1-shi-me-shi-vue-router" class="header-anchor">.</a></h3><p>Vue Router 是 Vue.js 管方的路由管理器。它和 Vue.js 的核心深度集成，让构建单页面应用（SPA），变得易如反掌，包含的功能：</p><ul><li>嵌套的路由/视图表</li><li>模块化的、基于组件的路由配置</li><li>路由参数、查询、通配符</li><li>基于 Vue.js 过渡系统的视图过渡效果</li><li>细粒度的导航控制</li><li>带有自动激活的 CSS class 的链接</li><li>HTML5 历史模式或 hash 模式，在 IE9 中自动降级</li><li>自定义的滚动条行为</li></ul><p>中文文档：<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">https://router.vuejs.org/zh/</a></p><h3><span id="2-an-zhuang">2、安装</span><a href="#2-an-zhuang" class="header-anchor">.</a></h3><p>在一个 <code>vue-cli</code>项目中，查看 <code>node_modules</code>下是否已经存在，不存在可以使用npm/cnpm命令安装：</p><pre class="line-numbers language-sh"><code class="language-sh"># --save-dev 保存到开发的配置中npm install vue-router --save-dev<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/08/10/30243/image-20200810133310105.png" alt></p><p>如果在一个模块化工程中使用它，必须通过Vue.use()  明确地安装路由功能：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/08/10/30243/image-20200810165528178.png" alt></p><h3><span id="3-ce-shi">3、测试</span><a href="#3-ce-shi" class="header-anchor">.</a></h3><blockquote><p><strong>先启动 vue-cli 项目 <code>npm run dev</code></strong></p></blockquote><p><img src="/2020/08/10/30243/image-20200810141013963.png" alt></p><h4><span id="1-shan-chu-components-mu-lu-xia-suo-you-de-zu-jian-bing-xin-jian-yi-ge-vue-wen-jian-wen-jian-ming-content">1.删除<code>components</code>目录下所有的组件，并新建一个<code>vue</code>文件，文件名：<code>Content</code></span><a href="#1-shan-chu-components-mu-lu-xia-suo-you-de-zu-jian-bing-xin-jian-yi-ge-vue-wen-jian-wen-jian-ming-content" class="header-anchor">.</a></h4><p><img src="/2020/08/10/30243/image-20200810164458812.png" alt></p><h4><span id="2-xin-jian-yi-ge-router-wen-jian-jia-bing-zai-gai-wen-jian-jia-xia-xin-jian-yi-ge-index-js-wen-jian">2.新建一个<code>router</code>文件夹，并在该文件夹下新建一个<code>index.js</code>文件</span><a href="#2-xin-jian-yi-ge-router-wen-jian-jia-bing-zai-gai-wen-jian-jia-xia-xin-jian-yi-ge-index-js-wen-jian" class="header-anchor">.</a></h4><h4><span id="3-content-zu-jian-zhong-bian-xie-nei-rong-bing-qie-jiang-gai-zu-jian-dao-ru-dao-lu-you-pei-zhi-wen-jian-index-js-ji-pei-zhi-dao-chu-lu-you">3.<code>Content</code>组件中编写内容，并且将该组件导入到路由配置文件<code>index.js</code>，及配置导出路由</span><a href="#3-content-zu-jian-zhong-bian-xie-nei-rong-bing-qie-jiang-gai-zu-jian-dao-ru-dao-lu-you-pei-zhi-wen-jian-index-js-ji-pei-zhi-dao-chu-lu-you" class="header-anchor">.</a></h4><p><img src="/2020/08/10/30243/image-20200810165058337.png" alt></p><p><strong>Content.vue</strong></p><pre class="line-numbers language-vue"><code class="language-vue"><template>  <!-- 1.新建components/Content.vue,在这里写 内容 -->  <h2><span id="nei-rong-ye">内容页</span><a href="#nei-rong-ye" class="header-anchor">.</a></h2></template><script>    export default {        name: "Content"    }</script><!--加了scoped 表示当前样式模板 只在本组件有效--><style scoped></style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>index.js</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//2. 新建router目录，并在其下创建index.js文件 下面是文件内容</span><span class="token comment" spellcheck="true">//导入vue vue-router</span><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> VueRouter <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token comment" spellcheck="true">//导入 自定义组件</span><span class="token keyword">import</span> Content <span class="token keyword">from</span> <span class="token string">"../components/Content"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//安装路由 显示声明使用路由</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>VueRouter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//配置导出路由</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">VueRouter</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//路由路径</span>      path<span class="token punctuation">:</span> <span class="token string">'/content'</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//取个名</span>      name<span class="token punctuation">:</span> content<span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">//跳转到的组件</span>      component<span class="token punctuation">:</span> Content    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//如果还有其他组件 要导入路由 直接在下方加入 该组件 路由路径及跳转到的组件（首先导入组件）</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-zai-ru-kou-wen-jian-main-js-zhong-dao-ru-lu-you-pei-zhi-wen-jian-index-js-bing-pei-zhi-lu-you">4.在入口文件 <code>main.js</code> 中导入路由配置文件 <code>index.js</code>，并配置路由</span><a href="#4-zai-ru-kou-wen-jian-main-js-zhong-dao-ru-lu-you-pei-zhi-wen-jian-index-js-bing-pei-zhi-lu-you" class="header-anchor">.</a></h4><p><img src="/2020/08/10/30243/image-20200810165749880.png" alt></p><p><strong>main.js</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token comment" spellcheck="true">//3. 导入路由配置文件</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span> <span class="token comment" spellcheck="true">//会自定扫描，该目录下的index文件</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//4. 配置路由</span>  router<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="5-shi-yong-lu-you">5.使用路由</span><a href="#5-shi-yong-lu-you" class="header-anchor">.</a></h4><p><img src="/2020/08/10/30243/image-20200810170453969.png" alt></p><p><strong>App.vue</strong></p><pre class="line-numbers language-vue"><code class="language-vue"><template>  <div id="app">    <h1><span id="liu-you-bo-ke">流柚博客</span><a href="#liu-you-bo-ke" class="header-anchor">.</a></h1>    <!-- 5. 使用路由 -->    <!-- 路由链接：相当于a标签 -->    <router-link to="/content">内容页</router-link>    <!-- 视图展示 -->    <router-view></router-view>  </div></template><script>export default {  name: 'App',  components: {  }}</script><style>#app {  font-family: 'Avenir', Helvetica, Arial, sans-serif;  -webkit-font-smoothing: antialiased;  -moz-osx-font-smoothing: grayscale;  text-align: center;  color: #2c3e50;  margin-top: 60px;}</style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="6-jie-guo-zhan-shi">6.结果展示</span><a href="#6-jie-guo-zhan-shi" class="header-anchor">.</a></h4><p><img src="/2020/08/10/30243/image-20200810170722030.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue开发-02-webpack</title>
      <link href="/2020/08/10/7691.html"/>
      <url>/2020/08/10/7691.html</url>
      
        <content type="html"><![CDATA[<h2><span id="webpack">webpack</span><a href="#webpack" class="header-anchor">.</a></h2><h3><span id="1-shi-me-shi-webpack">1、什么是Webpack</span><a href="#1-shi-me-shi-webpack" class="header-anchor">.</a></h3><p>本质上，<em>webpack</em> 是一个<strong>现代 JavaScript 应用程序的静态模块打包器(module bundler)</strong>。当 webpack 处理应用程序时，它会递归地构建一个<em>依赖关系图(dependency graph)</em>，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个 <em>bundle</em>。</p><blockquote><p>中文文档：<a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">https://www.webpackjs.com/concepts/</a></p></blockquote><p>它是一款模块加载器兼打包工具，能把各种资源 都作为模块来处理和使用</p><p><img src="/2020/08/10/7691/image-20200810033948698.png" alt></p><h3><span id="2-an-zhuang-webpack">2、安装WebPack</span><a href="#2-an-zhuang-webpack" class="header-anchor">.</a></h3><pre class="line-numbers language-sh"><code class="language-sh">npm install webpack -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-SH"><code class="language-SH">npm install webpack-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>测试是否安装成功</strong></p><ul><li><code>webpack -v</code></li><li><code>webpack-cli -v</code></li></ul><p><img src="/2020/08/10/7691/image-20200810120214558.png" alt></p><h3><span id="3-pei-zhi-webpack">3、配置WebPack</span><a href="#3-pei-zhi-webpack" class="header-anchor">.</a></h3><p>创建 <code>webpack.config.js</code> 配置文件</p><ul><li>entry：入口文件，指定WebPack用哪个文件作为项目的入口</li><li>output：输出，指定WebPack把处理完成的文件放置到指定路径</li><li>module：模块，用于处理各种类型的文件</li><li>plugins：插件</li><li>resolve：设置路径指向</li><li>watch：监听，用于设置文件改动后直接打包‘</li></ul><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>        path<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        filename<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    module<span class="token punctuation">:</span><span class="token punctuation">{</span>        loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span> loader<span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">}</span>        <span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    plugins<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>    watch<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在项目目录下，使用命令行直接运行 <code>webpack&#39;</code> 命令打包</p></blockquote><h3><span id="4-shi-yong-webpack">4、使用WebPack</span><a href="#4-shi-yong-webpack" class="header-anchor">.</a></h3><h4><span id="1-chuang-jian-yi-ge-xiang-mu">1.创建一个项目</span><a href="#1-chuang-jian-yi-ge-xiang-mu" class="header-anchor">.</a></h4><ul><li><p><strong>新建一个 名为 webpack-study 的文件夹</strong></p><p><img src="/2020/08/10/7691/image-20200810122529044.png" alt></p></li><li><p><strong>使用IDEA打开这个文件夹</strong></p><p><img src="/2020/08/10/7691/image-20200810122616697.png" alt></p></li></ul><h4><span id="2-chuang-jian-yi-ge-ming-wei-modules-de-mu-lu-yong-yu-fang-zhi-js-mo-kuai-deng-zi-yuan">2.创建一个名为<code>modules</code>的目录，用于放置JS模块等资源</span><a href="#2-chuang-jian-yi-ge-ming-wei-modules-de-mu-lu-yong-yu-fang-zhi-js-mo-kuai-deng-zi-yuan" class="header-anchor">.</a></h4><h4><span id="3-zai-modules-xia-chuang-jian-mo-kuai-wen-jian-ru-hello-js-yong-yu-bian-xie-js-mo-kuai-xiang-guan-dai-ma">3.在<code>modules</code>下创建模块文件，如<code>hello.js</code>，用于遍写JS模块相关代码：</span><a href="#3-zai-modules-xia-chuang-jian-mo-kuai-wen-jian-ru-hello-js-yong-yu-bian-xie-js-mo-kuai-xiang-guan-dai-ma" class="header-anchor">.</a></h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//暴露一个方法：sayHi</span>exports<span class="token punctuation">.</span>sayHi <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token string">"&lt;div>Hello WebPack!&lt;/div>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-zai-module-xia-chuang-jian-yi-ge-ming-wei-main-js-de-ru-kou-wen-jian-yong-yu-da-bao-shi-she-zhi-entry-shu-xing">4.在<code>module</code>下创建一个名为<code>main.js</code> 的入口文件，用于打包时设置<code>entry</code>属性</span><a href="#4-zai-module-xia-chuang-jian-yi-ge-ming-wei-main-js-de-ru-kou-wen-jian-yong-yu-da-bao-shi-she-zhi-entry-shu-xing" class="header-anchor">.</a></h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//require 导入一个模块，就可以调用这个模块的方法</span><span class="token keyword">var</span> hello <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>hello<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4><span id="5-zai-xiang-mu-mu-lu-xia-chuang-jian-webpack-config-js-pei-zhi-wen-jian-shi-yong-webpack-ming-ling-da-bao">5.在项目目录下创建 <code>webpack.config.js</code> 配置文件，使用 <code>webpack</code> 命令打包</span><a href="#5-zai-xiang-mu-mu-lu-xia-chuang-jian-webpack-config-js-pei-zhi-wen-jian-shi-yong-webpack-ming-ling-da-bao" class="header-anchor">.</a></h4><pre class="line-numbers language-js"><code class="language-js">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>    entry<span class="token punctuation">:</span> <span class="token string">"./modules/main.js"</span><span class="token punctuation">,</span>    output<span class="token punctuation">:</span><span class="token punctuation">{</span>        filename<span class="token punctuation">:</span> <span class="token string">"./js/bundle.js"</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/08/10/7691/image-20200810125336800.png" alt="执行webpack命令,进行打包"></p><p><img src="/2020/08/10/7691/image-20200810125515424.png" alt="打包js成功"></p><p><img src="/2020/08/10/7691/image-20200810125926101.png" alt="测试打包的js"></p><h3><span id="5-re-bu-shu-ke-xuan">5、热部署（可选）</span><a href="#5-re-bu-shu-ke-xuan" class="header-anchor">.</a></h3><p>把正常的打包命令，换成 <code>webpack --watch</code></p><p><strong>只要你的 需要打包的文件发生变化，就会自动重新打包</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue开发-01-第一个vue-cli项目</title>
      <link href="/2020/08/10/32371.html"/>
      <url>/2020/08/10/32371.html</url>
      
        <content type="html"><![CDATA[<h2><span id="di-yi-ge-vue-cli-xiang-mu">第一个vue-cli项目</span><a href="#di-yi-ge-vue-cli-xiang-mu" class="header-anchor">.</a></h2><h3><span id="1-shi-me-shi-vue-cli">1、什么是vue-cli</span><a href="#1-shi-me-shi-vue-cli" class="header-anchor">.</a></h3><p><code>vue-cli</code>官方提供的一个脚手架，用于快速生成一个vue的项目模板。</p><p><strong>主要的功能：</strong></p><ul><li>统一的目录结构</li><li>本地调试</li><li>热部署</li><li>单元测试</li><li>集成打包上线</li></ul><h3><span id="2-xu-yao-de-huan-jing">2、需要的环境</span><a href="#2-xu-yao-de-huan-jing" class="header-anchor">.</a></h3><p>NodeJS：<a href="http://nodejs.cn/download" target="_blank" rel="noopener">http://nodejs.cn/download</a></p><p>Git：<a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p><p>镜像：<a href="https://npm.taobao.org/mirrors/git-for-windows" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/git-for-windows</a></p><h4><span id="nodejs-huan-jing-an-zhuang-yan-zheng"><strong>NodeJS环境安装验证</strong></span><a href="#nodejs-huan-jing-an-zhuang-yan-zheng" class="header-anchor">.</a></h4><ul><li><p><code>node -v</code></p></li><li><p><code>npm -v</code></p></li></ul><blockquote><p>npm，一个软件包管理工具</p></blockquote><h4><span id="an-zhuang-nodejs-tao-bao-jing-xiang-jia-su-qi-cnpm"><strong>安装NodeJS 淘宝镜像加速器（cnpm）</strong></span><a href="#an-zhuang-nodejs-tao-bao-jing-xiang-jia-su-qi-cnpm" class="header-anchor">.</a></h4><pre class="line-numbers language-sh"><code class="language-sh">npm install cnpm -g # -g 全局安装 安装的位置C:\Users\用户名\AppData\Roaming\npm<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sh"><code class="language-sh"># 或npm install --registry=http://r.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/08/10/32371/image-20200810024822066.png" alt></p><h4><span id="an-zhuang-vue-cli">安装vue-cli</span><a href="#an-zhuang-vue-cli" class="header-anchor">.</a></h4><pre class="line-numbers language-sh"><code class="language-sh">cnpm install vue-cli -g# 测试是否安装成功vue list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/08/10/32371/image-20200810025227858.png" alt="可用模板"></p><h3><span id="3-chuang-jian-yi-ge-vue-cli">3、创建一个vue-cli</span><a href="#3-chuang-jian-yi-ge-vue-cli" class="header-anchor">.</a></h3><h4><span id="1-chuang-jian-yi-ge-vue-de-mu-lu">1.创建一个vue的目录</span><a href="#1-chuang-jian-yi-ge-vue-de-mu-lu" class="header-anchor">.</a></h4><p>​        略</p><h4><span id="2-yi-guan-li-yuan-shen-fen-yun-xing-cmd-bing-cd-dao-gai-mu-lu">2.以管理员身份运行cmd，并cd到该目录</span><a href="#2-yi-guan-li-yuan-shen-fen-yun-xing-cmd-bing-cd-dao-gai-mu-lu" class="header-anchor">.</a></h4><p>​        <img src="/2020/08/10/32371/image-20200810030100546.png" alt></p><h4><span id="3-chu-shi-hua-vue-cli-xiang-mu">3.初始化vue-cli项目</span><a href="#3-chu-shi-hua-vue-cli-xiang-mu" class="header-anchor">.</a></h4><pre class="line-numbers language-sh"><code class="language-sh">#webpack:模板   myvue:项目名vue init webpack myvue<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/08/10/32371/image-20200810030832208.png" alt></p><p><img src="/2020/08/10/32371/image-20200810031337202.png" alt></p><h4><span id="4-yun-xing-xiang-mu">4.运行项目</span><a href="#4-yun-xing-xiang-mu" class="header-anchor">.</a></h4><pre class="line-numbers language-sh"><code class="language-sh">cd myvue# install dependenciesnpm install# serve with hot reload at localhost:8080 cd后,使用这个即可npm run dev <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>验证是否运行成功</strong></p><p><img src="/2020/08/10/32371/image-20200810032248610.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门笔记-11-入门小结</title>
      <link href="/2020/08/10/16524.html"/>
      <url>/2020/08/10/16524.html</url>
      
        <content type="html"><![CDATA[<h2><span id="vue-ru-men-xiao-jie">Vue入门小结</span><a href="#vue-ru-men-xiao-jie" class="header-anchor">.</a></h2><p><strong>核心</strong>：数据驱动，组件化</p><p><strong>优点</strong>：借鉴了AngularJS的模块化，和React的虚拟DOM，虚拟DOM就是把DOM操作放到内存中执行；</p><p><strong>常用的属性</strong>：</p><ul><li>v-if</li><li>v-else-if</li><li>v-else</li><li>v-for</li><li>v-on（简写 <code>@</code>）：事件绑定</li><li>v-model ：数据双向绑定</li><li>v-bind（简写 <code>:</code>）：组件绑定参数</li></ul><p><strong>组件化</strong>：</p><ul><li>组合组件slot插槽</li><li>组件内部绑定事件需要使用到 <code>this.$emit(&#39;自定义事件名&#39;,参数)</code></li><li>计算机的特色，缓存计算数据</li></ul><blockquote><p>Vue是纯粹的视图框架，并不包含通信</p><p>通信使用 Axios做异步通信</p><p><strong>Vue的开发</strong>是基于NodeJS的，实际开发采用<code>vue-cli脚手架开发</code>，<code>vue-router路由</code>，<code>vuex做动态管理</code>（cookie，session……），<code>Vue UI</code>，界面我们一般使用 ElementUI（饿了么），或者ICE（飞冰，阿里巴巴）来快速搭建前端项目。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门笔记-09-插槽slot</title>
      <link href="/2020/08/09/33430.html"/>
      <url>/2020/08/09/33430.html</url>
      
        <content type="html"><![CDATA[<h2><span id="cha-cao-slot">插槽slot</span><a href="#cha-cao-slot" class="header-anchor">.</a></h2><p>我的理解，可以把多个组件（甚至可以是普通标签，文本，模板数据）通过插槽添加到另一个组件中，但是这些要看插槽是否有name属性</p><blockquote><p>这个组件，也可看做是个自定义标签</p></blockquote><blockquote><p><strong>一个组件中，没有slot，就不能解析其标签内部的所有字符</strong></p></blockquote><h3><span id="duo-ge-zu-jian-cha-ru-yi-ge-zu-jian-zhong">多个组件插入一个组件中</span><a href="#duo-ge-zu-jian-cha-ru-yi-ge-zu-jian-zhong" class="header-anchor">.</a></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-title</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot1<span class="token punctuation">"</span></span> <span class="token attr-name">:title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-title</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>todo-item</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot2<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name">:item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo-item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>todo</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;div>'</span> <span class="token operator">+</span>            <span class="token string">'&lt;slot name="slot1">&lt;/slot>'</span><span class="token operator">+</span>            <span class="token string">'&lt;ul>'</span> <span class="token operator">+</span>            <span class="token string">'&lt;slot name="slot2">&lt;/slot>'</span> <span class="token operator">+</span>            <span class="token string">'&lt;/ul>'</span> <span class="token operator">+</span>            <span class="token string">'&lt;/div>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-title'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;p>{{title}}&lt;/p>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'todo-item'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'item'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;li>{{item}}&lt;/li>'</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span><span class="token punctuation">{</span>           title<span class="token punctuation">:</span><span class="token string">"前后端学习"</span><span class="token punctuation">,</span>           items<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'&lt;h1>java&lt;/h1>'</span><span class="token punctuation">,</span><span class="token string">'vue'</span><span class="token punctuation">,</span><span class="token string">'liuyou'</span><span class="token punctuation">]</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/08/09/33430/image-20200809195231686.png" alt></p><h3><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">.</a></h3><ul><li><p>demo1：slot有name属性</p><ul><li>使用槽接收(需要绑定槽)</li><li>①普通标签数据，②组件</li></ul></li><li><p>demo2：无name属性</p><ul><li>使用槽接收</li><li>①普通标签数据，②组件，③文本，④模板数据</li></ul></li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>demo1</span> <span class="token attr-name">:url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data_url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        {{ignore}}        12345        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>demo2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>demo2</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- 这个组件没有 绑定槽，会忽略 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>demo1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>demo2</span> <span class="token attr-name">:url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>data_url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        {{ignore}}        12345        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>demo1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">slot</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>slot<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>demo1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>demo2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//slot 有name</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'demo1'</span><span class="token comment" spellcheck="true">/* 自定义标签 */</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//自定义属性</span>        template<span class="token punctuation">:</span><span class="token string">'&lt;a :href="url">'</span> <span class="token operator">+</span>  <span class="token comment" spellcheck="true">//标签底层代码 使用 v-bind:href="url" 绑定内部属性</span>            <span class="token string">'&lt;slot name="slot">&lt;/slot>&lt;/a>'</span><span class="token comment" spellcheck="true">//使用槽接收(需要绑定槽)，①普通标签数据，②组件</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'demo2'</span><span class="token comment" spellcheck="true">/* 自定义标签 */</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//自定义属性</span>        template<span class="token punctuation">:</span><span class="token string">'&lt;a :href="url">'</span> <span class="token operator">+</span>  <span class="token comment" spellcheck="true">//标签底层代码 使用 v-bind:href="url" 绑定内部属性</span>            <span class="token string">'&lt;slot>&lt;/slot>&lt;/a>'</span><span class="token comment" spellcheck="true">//使用槽接收，①普通标签数据，②组件，③文本，④模板数据</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span><span class="token punctuation">{</span>           data_url<span class="token punctuation">:</span> <span class="token string">'http://www.baidu.com'</span><span class="token punctuation">,</span>           message<span class="token punctuation">:</span> <span class="token string">'百度'</span><span class="token punctuation">,</span>           ignore<span class="token punctuation">:</span> <span class="token string">'无关数据'</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果展示</strong></p><p><img src="/2020/08/09/33430/image-20200809195056761.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门笔记-05-Vue组件</title>
      <link href="/2020/08/09/64892.html"/>
      <url>/2020/08/09/64892.html</url>
      
        <content type="html"><![CDATA[<h2><span id="vue-zu-jian">Vue组件</span><a href="#vue-zu-jian" class="header-anchor">.</a></h2><h3><span id="1-shi-me-shi-zu-jian">1、什么是组件</span><a href="#1-shi-me-shi-zu-jian" class="header-anchor">.</a></h3><p>组件是可复用的 <code>Vue</code>实例，说白了就是一组可以重复使用的模板，跟JSTL的自定义标签、Thymeleaf的 <code>th:fragment</code>等框架有着异曲同工之妙，通常一个应用会以一颗嵌套的组件树的形式来组织：</p><p><img src="/2020/08/09/64892/components.png" alt="Component Tree"></p><blockquote><p>Vue.component(‘自定义标签名’,{</p><p>​    props: [‘自定义属性名1’, … , ‘自定义属性名n’ ],</p><p>​    template: ‘html代码’</p><p>})</p></blockquote><blockquote><p>自定义的属性名，不能使用驼峰命名</p></blockquote><blockquote><p>在HTML代码中可以包含自定义属性或其模板数据</p></blockquote><h3><span id="2-shi-yong">2、使用</span><a href="#2-shi-yong" class="header-anchor">.</a></h3><h4><span id="ding-yi-zu-jian">定义组件</span><a href="#ding-yi-zu-jian" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//定义 名字叫 lmk 的组件</span>    Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">'lmk'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>        props<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'liuyou'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//props接收从自定义标签(组件实例)传来的数据  liuyou是个名字，相当于形参</span>        template<span class="token punctuation">:</span> <span class="token string">'&lt;li>Hello,{{liuyou}}&lt;/li>'</span> <span class="token comment" spellcheck="true">//组件的内容 数据来自组件实例</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span><span class="token punctuation">{</span>           items<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'vue'</span><span class="token punctuation">,</span><span class="token string">'liuyou'</span><span class="token punctuation">]</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="zu-jian-shi-li">组件实例</span><a href="#zu-jian-shi-li" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  组件实例：传递给组件的值 v-bind将从items中遍历的数据传回给组件 item，相当于实参 liuyou,相当于形参 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lmk</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item in items<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">v-bind:</span>liuyou</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lmk</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 数据来自vm.data的items --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门笔记-06-Axios异步通信(含解决Vue闪烁问题)</title>
      <link href="/2020/08/09/54731.html"/>
      <url>/2020/08/09/54731.html</url>
      
        <content type="html"><![CDATA[<h2><span id="axios-yi-bu-tong-xin">Axios异步通信</span><a href="#axios-yi-bu-tong-xin" class="header-anchor">.</a></h2><h3><span id="1-shi-me-shi-axios">1、什么是Axios</span><a href="#1-shi-me-shi-axios" class="header-anchor">.</a></h3><p><code>Axios</code>是一个开源的可以用在浏览器端和<code>NodeJS</code>的异步通信框架，它的主要作用是<strong>实现AJAX异步通信</strong>，其功能特点如下：</p><ul><li>从浏览器中创建 <code>XMLHttpRequests</code></li><li>从node.js创建http请求</li><li>支持 <code>Promise API</code> 【js中链式编程】</li><li>拦截请求数据和响应数据</li><li>取消请求</li><li>自动转换<code>JSON</code>数据</li><li>客户端支持防御<code>XSRF</code>（跨站请求伪造）</li></ul><p><a href="http://www.axios-js.com/" target="_blank" rel="noopener">http://www.axios-js.com/</a></p><h3><span id="2-wei-shi-me-yao-shi-yong-axios">2、为什么要使用Axios</span><a href="#2-wei-shi-me-yao-shi-yong-axios" class="header-anchor">.</a></h3><p>由于 <code>Vue.js</code>是一个视图层框架，并且作者（尤雨溪）严格遵守Soc（关注度分离原则），所以 <code>Vue.js</code>并不包含AJAX的通信功能，为了解决通信问题，作者单独开发了一个名为 <code>vue-resource</code>的插件，不过在进入2.0版本以后停止了对该插件的维护并推荐了 <code>Axios</code>框架，少用jQuery，因为它操作DOM太复杂！</p><h3><span id="3-di-yi-ge-axios-ying-yong-cheng-xu">3、第一个Axios应用程序</span><a href="#3-di-yi-ge-axios-ying-yong-cheng-xu" class="header-anchor">.</a></h3><p><strong>在线CDN</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/axios@0.19.2/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>上代码</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/axios@0.19.2/dist/axios.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 解决闪烁问题：当网速很慢时，加载页面，会先显示模板{{name}}，再用vm的数据替换 --></span>    <span class="token comment" spellcheck="true">&lt;!-- 用白屏代替模板 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token attribute">[v-clock]</span></span><span class="token punctuation">{</span>            <span class="token property">display</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">v-clock</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{info.name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>{{info.address.city}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info.url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>       <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>           <span class="token keyword">return</span> <span class="token punctuation">{</span>              info<span class="token punctuation">:</span><span class="token punctuation">{</span>                  name<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>                  url<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>                  address<span class="token punctuation">:</span><span class="token punctuation">{</span>                      street<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>                      city<span class="token punctuation">:</span><span class="token keyword">null</span><span class="token punctuation">,</span>                      country<span class="token punctuation">:</span><span class="token keyword">null</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 钩子函数</span>           axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"data.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>resource<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> resource<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>data.json</strong></p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"狂神说java"</span><span class="token punctuation">,</span>  <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"http://baidu.com"</span><span class="token punctuation">,</span>  <span class="token property">"page"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"isNonProfit"</span><span class="token operator">:</span><span class="token string">"true"</span><span class="token punctuation">,</span>  <span class="token property">"address"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"street"</span><span class="token operator">:</span> <span class="token string">"含光门"</span><span class="token punctuation">,</span>    <span class="token property">"city"</span><span class="token operator">:</span><span class="token string">"陕西西安"</span><span class="token punctuation">,</span>    <span class="token property">"country"</span><span class="token operator">:</span> <span class="token string">"中国"</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"links"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"B站"</span><span class="token punctuation">,</span>      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.bilibili.com/"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"4399"</span><span class="token punctuation">,</span>      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.4399.com/"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"百度"</span><span class="token punctuation">,</span>      <span class="token property">"url"</span><span class="token operator">:</span> <span class="token string">"https://www.baidu.com/"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门笔记-07-Vue的生命周期</title>
      <link href="/2020/08/09/25016.html"/>
      <url>/2020/08/09/25016.html</url>
      
        <content type="html"><![CDATA[<h2><span id="vue-de-sheng-ming-zhou-qi">Vue的生命周期</span><a href="#vue-de-sheng-ming-zhou-qi" class="header-anchor">.</a></h2><p>此图来自<a href="https://www.jianshu.com/p/d61f55da98fb" target="_blank" rel="noopener">https://www.jianshu.com/p/d61f55da98fb</a></p><p><img src="/2020/08/09/25016/20200720221956367.png" alt></p><p><img src="/2020/08/09/25016/C:%5CUsers%5C14239%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200809163749145.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门笔记-08-计算属性</title>
      <link href="/2020/08/09/27997.html"/>
      <url>/2020/08/09/27997.html</url>
      
        <content type="html"><![CDATA[<h2><span id="ji-suan-shu-xing">计算属性</span><a href="#ji-suan-shu-xing" class="header-anchor">.</a></h2><p><code>computed</code></p><blockquote><p>如果<strong>computed</strong>和<strong>methods</strong>方法重名，只能用<strong>methods</strong>的方法</p></blockquote><h3><span id="shi-me-shi-ji-suan-shu-xing">什么是计算属性</span><a href="#shi-me-shi-ji-suan-shu-xing" class="header-anchor">.</a></h3><p><strong>一个能够将计算结果缓存起来的属性</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span> <span class="token attr-name">v-clock</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>methods : {{currentTime1()}} currentTime1是一个方法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>computed : {{currentTime2}} currentTime2是一个属性<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span> <span class="token string">"#app"</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span><span class="token punctuation">{</span>            message<span class="token punctuation">:</span><span class="token string">"hello"</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       methods<span class="token punctuation">:</span><span class="token punctuation">{</span>           currentTime1<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                   <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span>                <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       computed<span class="token punctuation">:</span><span class="token punctuation">{</span>           currentTime2<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">;</span>               <span class="token keyword">return</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>       <span class="token punctuation">}</span>   <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/08/09/27997/C:%5CUsers%5C14239%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200809173915587.png" alt></p><p><img src="/2020/08/09/27997/image-20200809174641216.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门笔记-03-Vue基本语法</title>
      <link href="/2020/08/09/57333.html"/>
      <url>/2020/08/09/57333.html</url>
      
        <content type="html"><![CDATA[<h2><span id="vue-ji-ben-yu-fa">Vue基本语法</span><a href="#vue-ji-ben-yu-fa" class="header-anchor">.</a></h2><blockquote><p>Vue.js 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 DOM 的系统</p></blockquote><h3><span id="1-xuan-ran-v-bind">1、渲染v-bind</span><a href="#1-xuan-ran-v-bind" class="header-anchor">.</a></h3><blockquote><p>除了文本插值<code></code>，我们还可以像这样来绑定元素 <code>attribute</code></p></blockquote><ul><li><code>v-bind</code> attribute 被称为<strong>指令</strong>。指令带有前缀 <code>v-</code>，以表示它们是 Vue 提供的特殊 attribute</li><li>它们会在渲染的 DOM 上应用特殊的响应式行为。</li><li>在这里，该指令的意思是：“将这个元素节点的 <code>title</code> attribute 和 Vue 实例的 <code>message</code> property 保持一致”。</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name"><span class="token namespace">v-bind:</span>title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    鼠标悬停几秒钟查看此处动态绑定的提示信息！  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span><span class="token punctuation">{</span>           message<span class="token punctuation">:</span> <span class="token string">'页面加载于 '</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/08/09/57333/image-20200809130224437.png" alt></p><h3><span id="2-tiao-jian-yu-xun-huan">2、条件与循环</span><a href="#2-tiao-jian-yu-xun-huan" class="header-anchor">.</a></h3><h4><span id="v-if-v-else-if-v-else">v-if (v-else-if,v-else)</span><a href="#v-if-v-else-if-v-else" class="header-anchor">.</a></h4><ul><li>如果ok = true ==&gt; Yes</li><li>否则 ==&gt; No</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ok<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Yes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>No<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span><span class="token punctuation">{</span>           ok<span class="token punctuation">:</span><span class="token boolean">true</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>如果 type === ‘A’ —&gt; A</li><li>如果 type === ‘B’ —&gt; B</li><li>否则 —&gt; C</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>A<span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>A<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else-if</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span> type <span class="token punctuation">=</span><span class="token punctuation">=</span><span class="token punctuation">=</span> <span class="token punctuation">'</span>B<span class="token punctuation">'</span> <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>B<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token attr-name">v-else</span><span class="token punctuation">></span></span>C<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span><span class="token punctuation">{</span>            type<span class="token punctuation">:</span> <span class="token string">'A'</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="v-for">v-for</span><a href="#v-for" class="header-anchor">.</a></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(item,index) in items<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        {{item.data}}--{{index}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//数组</span>            items<span class="token punctuation">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>data<span class="token punctuation">:</span><span class="token string">"java"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>data<span class="token punctuation">:</span><span class="token string">"js"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">{</span>data<span class="token punctuation">:</span><span class="token string">"vue"</span><span class="token punctuation">}</span>            <span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/08/09/57333/image-20200809133550997.png" alt></p><h3><span id="3-shi-jian">3、事件</span><a href="#3-shi-jian" class="header-anchor">.</a></h3><h4><span id="v-on">v-on</span><a href="#v-on" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name"><span class="token namespace">v-on:</span>click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sayHi<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>点击<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span><span class="token punctuation">{</span>           message<span class="token punctuation">:</span> <span class="token string">"hello,vue!"</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>       methods<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 方法必须定义在Vue的 Method对象中</span>            sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//this == vm这个对象</span>            <span class="token punctuation">}</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/08/09/57333/image-20200809134700383.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门笔记-04-Vue双向绑定</title>
      <link href="/2020/08/09/20622.html"/>
      <url>/2020/08/09/20622.html</url>
      
        <content type="html"><![CDATA[<h2><span id="vue-shuang-xiang-bang-ding">Vue双向绑定</span><a href="#vue-shuang-xiang-bang-ding" class="header-anchor">.</a></h2><h3><span id="1-shi-me-shi-shuang-xiang-bang-ding">1、什么是双向绑定？</span><a href="#1-shi-me-shi-shuang-xiang-bang-ding" class="header-anchor">.</a></h3><p>Vue.js是一个MVVM框架，即<strong>数据数据双向绑定</strong>，即<strong>当数据发生变化时，视图也就发生变化，当视图发生变化时，数据也会同步变化</strong>。</p><blockquote><p>我们说的数据双向绑定是相对于UI控件来说的，非UI控件不会涉及到数据双向绑定。</p></blockquote><blockquote><p>单向数据绑定是使用状态管理工具的前提。如果我们使用 <code>vuex</code>，那么数据流也是单向的，这时就会和双向数据绑定有冲突。</p></blockquote><h3><span id="2-wei-sha-yao-shi-xian-shu-ju-de-shuang-xiang-bang-ding">2、为啥要实现数据的双向绑定</span><a href="#2-wei-sha-yao-shi-xian-shu-ju-de-shuang-xiang-bang-ding" class="header-anchor">.</a></h3><p>在 <code>vue.js</code>中，如果使用 <code>vuex</code>，实际上数据还是单向的，之所以说是数据双向绑定，这是用的UI控件来说，对于我们处理表单，Vue.js的双向数据绑定<strong>用起来就特别舒服</strong>。即<strong>两者并不互斥，在全局性数据流使用单向，方便追踪；局部性数据流使用双向，简单易操作</strong></p><h3><span id="3-zai-biao-dan-zhong-shi-yong-shuang-xiang-bang-ding">3、在表单中使用双向绑定</span><a href="#3-zai-biao-dan-zhong-shi-yong-shuang-xiang-bang-ding" class="header-anchor">.</a></h3><p>可以使用<strong>v-model指令</strong>在表单 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code>元素上创建双向数据绑定。</p><p>它会根据控件类型自动选择正确的方法来更新元素。</p><p>它负责监听用户输入事件以更新数据，并对一些极端场景进行一些特殊处理。</p><blockquote><p><code>v-model</code>会<strong>忽略所有表单元素</strong>的<strong>value</strong>、<strong>checked</strong>、<strong>selected</strong>特性的初始值而<strong>总是将Vue实例的数据作为数据来源</strong>。<strong>我们应该通过JavaScript 在组件的data选项中声明初始值</strong></p></blockquote><h4><span id="v-model">v-model</span><a href="#v-model" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>message<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>{{message}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>num<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token punctuation">></span></span>---请选择---<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!--使用双向绑定后 下拉列表变为空 苹果第一项：如果是空就选不了了--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>first<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>second<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>third<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    选择的是：{{num}}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>       data<span class="token punctuation">:</span><span class="token punctuation">{</span>           message<span class="token punctuation">:</span> <span class="token string">"请输入文本，我会跟着文本变化！"</span><span class="token punctuation">,</span>           num<span class="token punctuation">:</span> <span class="token string">""</span>       <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果 <code>v-model</code>绑定的表单初始值未能匹配任何选项，<code>&lt;select&gt;</code>元素将被渲染为” 未选中 “ 状态。在IOS中，这会使用户无法选择第一个选项，因为在这种情况下，ios不会触发change事件。因此，更推荐像上面这样提供一个值为空的禁用选项。</p></blockquote><p><img src="/2020/08/09/20622/image-20200809144238138.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门笔记-02-第一个Vue程序</title>
      <link href="/2020/08/08/4346.html"/>
      <url>/2020/08/08/4346.html</url>
      
        <content type="html"><![CDATA[<h3><span id="di-yi-ge-vue-cheng-xu">第一个Vue程序</span><a href="#di-yi-ge-vue-cheng-xu" class="header-anchor">.</a></h3><blockquote><p><strong>IDEA必须安装Vue的插件</strong></p></blockquote><blockquote><p>Vue不支持IE8及以下版本，因为Vue使用了IE8无法模拟的ECMAScript 5特性，但它支持素有兼容ECMAScript 5的浏览器</p></blockquote><p><a href="https://github.com/vuejs/vue/releases/tag/v2.6.11" target="_blank" rel="noopener">下载地址</a></p><p>在线CDN</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>上代码</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  1.导入vue.js  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.jsdelivr.net/npm/vue@2.6.11/dist/vue.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- view层 模板 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>app<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{message}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">   <span class="token comment" spellcheck="true">//viewModel</span>   <span class="token keyword">var</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>       el<span class="token punctuation">:</span><span class="token string">"#app"</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">//model层 数据</span>       data<span class="token punctuation">:</span><span class="token punctuation">{</span>           message<span class="token punctuation">:</span> <span class="token string">"hello,vue!"</span>       <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><p><img src="/2020/08/08/4346/image-20200809125021328.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue入门笔记-01-</title>
      <link href="/2020/08/08/9992.html"/>
      <url>/2020/08/08/9992.html</url>
      
        <content type="html"><![CDATA[<h2><span id="vue-qian-duan-ti-xi-qian-hou-duan-fen-chi">Vue：前端体系、前后端分离</span><a href="#vue-qian-duan-ti-xi-qian-hou-duan-fen-chi" class="header-anchor">.</a></h2><h3><span id="1-gai-shu">1、概述</span><a href="#1-gai-shu" class="header-anchor">.</a></h3><p>Vue 是一套用于构建用户界面的<strong>渐进式框架</strong>(逐步实现新特性)，发布于2014年2月，与其它大型框架不同的是，Vue被设计为可以自底向上逐层应用。Vue的<strong>核心库只关注视图层</strong>（给用户看刷新后台数据），不仅易于上手，还便于与第三方库（如：<code>vue-router：跳转</code>，<code>vue-resource：通信</code>，<code>vuex：管理</code>）或既有项目整合</p><p>综合了Angular（模块化）和React（虚拟DOM）的优点；</p><p><code>Axios</code>：前端通信的框架</p><p>Soc原则：关注点分离原则</p><p>官网：<a href="https://cn.vuejs.org/" target="_blank" rel="noopener">https://cn.vuejs.org/</a></p><p>MVC（同步通信为主）：Model，View、Controller</p><p>MVP（异步通信为主）：Model、View、Presenter</p><p><strong>MVVM（异步通信为主）</strong>：Model、View、ViewModel</p><h3><span id="2-qian-duan-san-yao-su">2、前端三要素</span><a href="#2-qian-duan-san-yao-su" class="header-anchor">.</a></h3><ul><li>HTML（结构）：超文本标记语言（Hyper Text Markup Language），决定网页的结构和内容</li><li>CSS（表现）：层叠样式表（Cascading Style Sheets），设定网页的表现样式</li><li>JavaScript（行为）：一种弱类型的脚本语言，其源代码不需要经过编译，而是有浏览器解释运行，用于控制网页的行为</li></ul><h3><span id="3-css-yu-chu-li-qi">3、CSS预处理器</span><a href="#3-css-yu-chu-li-qi" class="header-anchor">.</a></h3><blockquote><p>css预处理器定义了一种新的语言，其基本思想是，用一种专门的编程语言，为CSS增加了一些编程的特性，将CSS作为目标生成文件，然后开发者就只要使用这种语言进行CSS编码工作。转化成通俗易懂的话来说就是“ <strong>用一种专门的编程语言，进行Web页面样式设计，再通过编译器转化为正常的CSS文件，以供项目使用</strong> ”</p></blockquote><h4><span id="chang-yong-de-css-yu-chu-li-qi"><strong>常用的CSS预处理器</strong></span><a href="#chang-yong-de-css-yu-chu-li-qi" class="header-anchor">.</a></h4><ul><li>SASS：基于Ruby，通过服务端处理，功能强大，解析效率高，需要学习Ruby语言，上手难度大高于LESS</li><li><a href="http://lesscss.cn/" target="_blank" rel="noopener"><strong>LESS</strong></a>：基于NodeJS，通过客户端处理，使用简单，功能比SASS简单，解析效率也低于SASS，但在实际的开发中足够了，所以我们后台人员如果需要的话，建议使用LESS</li></ul><h3><span id="4-javascript">4、JavaScript</span><a href="#4-javascript" class="header-anchor">.</a></h3><h4><span id="native-yuan-sheng-js-kai-fa"><strong>Native原生JS开发</strong></span><a href="#native-yuan-sheng-js-kai-fa" class="header-anchor">.</a></h4><blockquote><p>原生JS开发，也就是让我们按照【<strong>ECMAScript</strong>】标准的开发方式，简称<strong>ES</strong>，特点是所有浏览器都支持。</p></blockquote><ul><li>ES3</li><li>ES4（内部，未正式公布）</li><li>ES5（<strong>全浏览器支持</strong>）</li><li>ES6（<strong>常用，当前主流版本：webpack打包成为ES5支持</strong>）</li><li>ES7</li><li>ES8</li><li>ES9</li><li>ES10（<strong>2020</strong>）</li></ul><p>他们之间的区别就是逐步增加<a href="https://cloud.tencent.com/developer/article/1602432" target="_blank" rel="noopener">新特性</a></p><h4><span id="typescript-wei-ruan-de-biao-zhun"><strong><a href="https://www.tslang.cn/" target="_blank" rel="noopener">TypeScript</a> 微软的标准</strong></span><a href="#typescript-wei-ruan-de-biao-zhun" class="header-anchor">.</a></h4><ul><li><p>TypeScript是一种由微软开发的开源、跨平台的编程语言。</p></li><li><p>它是JavaScript的超集，支持 ECMAScript 6 标准，最终会被编译为JavaScript代码。</p></li><li><p>TypeScript添加了可选的静态类型系统、很多尚未正式发布的ECMAScript新特性。</p></li><li><p>TypeScript 设计目标是开发大型应用，它可以编译成纯 JavaScript，编译出来的 JavaScript 可以运行在任何浏览器上。</p></li></ul><p><strong>语言特性</strong></p><p>TypeScript 是一种给 JavaScript 添加特性的语言扩展。增加的功能包括：</p><ul><li>类型批注和编译时类型检查</li><li>类型推断</li><li>类型擦除</li><li>接口</li><li>枚举</li><li>Mixin</li><li>泛型编程</li><li>名字空间</li><li>元组</li><li>Await</li></ul><p>以下功能是从 ECMA 2015 反向移植而来：</p><ul><li>类</li><li>模块</li><li>lambda 函数的箭头语法</li></ul><h3><span id="5-ui-kuang-jia">5、UI框架</span><a href="#5-ui-kuang-jia" class="header-anchor">.</a></h3><ul><li><p><a href="https://ant.design/index-cn" target="_blank" rel="noopener">Ant-Design</a>，<a href="https://ice.work/" target="_blank" rel="noopener">ice</a>：阿里巴巴出品，基于React的UI框架</p></li><li><p><a href="https://element.eleme.io/#/zh-CN" target="_blank" rel="noopener">ElementUI</a>、<a href="https://pan.baidu.com/s/1c2dISwg" target="_blank" rel="noopener">iview</a>：饿了么出品，基于Vue的UI框架</p></li><li><p><a href="https://www.bootcss.com/" target="_blank" rel="noopener">Bootstrap</a>：推特推出的一个用于前端开发的开源工具包</p></li><li><p><a href="http://amazeui.shopxo.net/" target="_blank" rel="noopener">AmazeUI</a>：一款HTML5跨屏前端框架</p></li></ul><h3><span id="6-javascript-gou-jian-gong-ju">6、JavaScript构建工具</span><a href="#6-javascript-gou-jian-gong-ju" class="header-anchor">.</a></h3><ul><li>Babel：JS编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript</li><li>WebPack：模块打包器，主要作用是打包、压缩、合并及按序加载</li></ul><h3><span id="7-mvvm-mo-shi">7、MVVM模式</span><a href="#7-mvvm-mo-shi" class="header-anchor">.</a></h3><ul><li>Model：模型层，在这里表示JavaScript对象</li><li>View：视图层，在这里表示DOM（HTML操作的元素）</li><li>ViewModel：连接视图和数据的中间件，Vue.js就是MVVM中的ViewModel层的实现者<ul><li>能够观察到数据的变化，并对视图对应的内容进行修改</li><li>能过监听到视图的变化，并能够通知数据发生改变</li></ul></li></ul><h4><span id="shi-me-shi-mvvm">什么是MVVM？</span><a href="#shi-me-shi-mvvm" class="header-anchor">.</a></h4><p><strong>MVVM（Model-View-ViewModel）</strong>是一种<strong>软件架构设计模式</strong>，由微软WPF（用于替代WinForm，以前就是用这个技术开发桌面应用程序的）和Silverlight（类似于Java Applet，简单点说就是在浏览器上运行的 WPF）的架构师 Ken Cooper 和 Ted Peters 开发，是一种简化用户界面的<strong>事件驱动编程方式</strong>。</p><p>MVVM源自于经典的MVC（Model-View-Controller）模式，<strong>MVVM的核心是ViewModel层</strong>，<strong>负责转换Model中的数据对象来让数据变的更容易管理和使用</strong>，其作用如下：</p><ul><li>该层向上与视图层进行双向数据绑定</li><li>向下与Model层通过接口请求进行数据交互</li></ul><p><img src="/2020/08/08/9992/image-20200809122032908.png" alt></p><h4><span id="wei-sha-yao-shi-yong-mvvm">为啥要使用MVVM？</span><a href="#wei-sha-yao-shi-yong-mvvm" class="header-anchor">.</a></h4><blockquote><p>和MVC一样，为了将View和Model分离</p></blockquote><ul><li><strong>低耦合</strong>：视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的View上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变</li><li><strong>可复用</strong>：你可以把一些视图逻辑放在一个ViewModel里面，让很多View重用这段视图逻辑</li><li><strong>独立开发</strong>：开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面的设计（VIew）</li><li><strong>可测试</strong>：界面素来是比较难以测试的，而现在测试可以针对ViewModel来写。</li></ul><h3><span id="8-wei-shi-me-yao-shi-yong-vue-js">8、为什么要使用Vue.js</span><a href="#8-wei-shi-me-yao-shi-yong-vue-js" class="header-anchor">.</a></h3><ul><li>轻量级，体积小（Vue.js压缩后只有20多kb,Angular压缩后56kb+，React压缩后44kb+）</li><li>移动优先，更适合移动端</li><li>易上手，学习路线平稳</li><li>吸取了Angular（模块化）和React（虚拟DOM）的长处，并拥有自己独特的功能，如计算属性</li><li>开源</li><li>。。。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-13-整合Mybatis</title>
      <link href="/2020/08/04/16872.html"/>
      <url>/2020/08/04/16872.html</url>
      
        <content type="html"><![CDATA[<h2><span id="zheng-he-mybatis">整合Mybatis</span><a href="#zheng-he-mybatis" class="header-anchor">.</a></h2><h3><span id="yi-bu-zou">一、步骤：</span><a href="#yi-bu-zou" class="header-anchor">.</a></h3><h4><span id="1-dao-ru-xiang-guan-jar-bao">1.导入相关jar包</span><a href="#1-dao-ru-xiang-guan-jar-bao" class="header-anchor">.</a></h4><ul><li>junit</li><li>mybatis</li><li>mysql数据库</li><li>spring相关的</li><li>aop织入</li><li><a href="http://mybatis.org/spring/zh/index.html" target="_blank" rel="noopener">mybatis-spring</a>【new】</li><li>spring操作数据的包 ，spring-jdbc</li><li>可选<ul><li>lombok</li><li>log4j</li></ul></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- junit --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>junit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>4.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- mybatis --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- mysql-connector --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.1.47<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- spring相关 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 织入 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- mybatis-spring --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-spring<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- spring-jdbc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 可选 --></span><span class="token comment" spellcheck="true">&lt;!-- log4j mybatis.xml中需要配置开启 以及创建配置文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- lombok需要安装Lombok插件 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>解决资源文件无法导出</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--解决maven刷新后 jdk变为 jdk5的问题 方法二--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--在build中配置resources,来防止我们资源导出失败问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="er-mybatis-spring">二、Mybatis-Spring</span><a href="#er-mybatis-spring" class="header-anchor">.</a></h3><h4><span id="1-shi-me-shi-mybatis-spring">1、什么是 MyBatis-Spring？</span><a href="#1-shi-me-shi-mybatis-spring" class="header-anchor">.</a></h4><p>MyBatis-Spring 会帮助你将 MyBatis 代码无缝地整合到 Spring 中。它将允许 MyBatis 参与到 Spring 的事务管理之中，创建映射器 mapper 和 <code>SqlSession</code> 并注入到 bean 中，以及将 Mybatis 的异常转换为 Spring 的 <code>DataAccessException</code>。最终，可以做到应用代码不依赖于 MyBatis，Spring 或 MyBatis-Spring。</p><h4><span id="2-mybatis-de-liang-chong-zheng-he-fang-shi">2、Mybatis的两种整合方式</span><a href="#2-mybatis-de-liang-chong-zheng-he-fang-shi" class="header-anchor">.</a></h4><p>第一种</p><p>第二种</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-14-声明式事务</title>
      <link href="/2020/08/04/42721.html"/>
      <url>/2020/08/04/42721.html</url>
      
        <content type="html"><![CDATA[<h2><span id="sheng-ming-shi-shi-wu">声明式事务</span><a href="#sheng-ming-shi-shi-wu" class="header-anchor">.</a></h2><h3><span id="1-hui-gu-shi-wu">1、回顾事务</span><a href="#1-hui-gu-shi-wu" class="header-anchor">.</a></h3><ul><li>事务在开发中十分重要，涉及到数据的一致性问题，不能马虎</li><li>确保完整性和一致性</li><li>把一组业务当成一个业务来做：要么都成功，要么都失败</li></ul><h5><span id="shi-wu-acid-yuan-ze">事务ACID原则</span><a href="#shi-wu-acid-yuan-ze" class="header-anchor">.</a></h5><ul><li>原子性</li><li>一致性</li><li>隔离性<ul><li>多个业务可能操作同一个资源，防止数据损坏</li></ul></li><li>持久性<ul><li>事务一旦提交，无论系统发生什么问题，结果都不会再被影响，被持久化到存储器中</li></ul></li></ul><h3><span id="2-spring-zhong-de-shi-wu-guan-li">2、Spring中的事务管理</span><a href="#2-spring-zhong-de-shi-wu-guan-li" class="header-anchor">.</a></h3><ul><li>声明式事务：AOP</li><li>编程式事务：需要在原有代码中，进行事务管理（try-catch中含事务回滚）</li></ul><h3><span id="3-sheng-ming-shi-shi-wu-shi-xian">3、声明式事务实现</span><a href="#3-sheng-ming-shi-shi-wu-shi-xian" class="header-anchor">.</a></h3><ul><li><p>交由容器管理事务</p></li><li><p>推荐使用 </p></li></ul><h3><span id="4-bian-cheng-shi-shi-wu-guan-li">4、编程式事务管理</span><a href="#4-bian-cheng-shi-shi-wu-guan-li" class="header-anchor">.</a></h3><p>MyBatis 的 <code>SqlSession</code> 提供几个方法来在代码中处理事务。但是当使用 MyBatis-Spring 时，你的 bean 将会注入由 Spring 管理的 <code>SqlSession</code> 或映射器。也就是说，Spring 总是为你处理了事务。</p><p>你不能在 Spring 管理的 <code>SqlSession</code> 上调用 <code>SqlSession.commit()</code>，<code>SqlSession.rollback()</code> 或 <code>SqlSession.close()</code> 方法。如果这样做了，就会抛出 <code>UnsupportedOperationException</code> 异常。在使用注入的映射器时，这些方法也不会暴露出来。</p><p>无论 JDBC 连接是否设置为自动提交，调用 <code>SqlSession</code> 数据方法或在 Spring 事务之外调用任何在映射器中方法，事务都将会自动被提交。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-12-AOP</title>
      <link href="/2020/08/03/55999.html"/>
      <url>/2020/08/03/55999.html</url>
      
        <content type="html"><![CDATA[<h2><span id="aop">AOP</span><a href="#aop" class="header-anchor">.</a></h2><h3><span id="yi-shi-me-shi-aop">一、什么是AOP</span><a href="#yi-shi-me-shi-aop" class="header-anchor">.</a></h3><p><strong>AOP</strong>（面向切面编程）：Aspect Oriented Programming的缩写，意为：面向切面编程，通过<a href="https://baike.baidu.com/item/预编译/3191547" target="_blank" rel="noopener">预编译</a>方式和运行期间动态代理实现程序功能的统一维护的一种技术。AOP是<a href="https://baike.baidu.com/item/OOP" target="_blank" rel="noopener">OOP</a>的延续，是软件开发中的一个热点，也是<a href="https://baike.baidu.com/item/Spring" target="_blank" rel="noopener">Spring</a>框架中的一个重要内容，是<a href="https://baike.baidu.com/item/函数式编程/4035031" target="_blank" rel="noopener">函数式编程</a>的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的<a href="https://baike.baidu.com/item/耦合度/2603938" target="_blank" rel="noopener">耦合度</a>降低，提高程序的可重用性，同时提高了开发的效率。</p><h3><span id="er-aop-zai-spring-zhong-de-zuo-yong">二、AOP在Spring中的作用</span><a href="#er-aop-zai-spring-zhong-de-zuo-yong" class="header-anchor">.</a></h3><p><mark>提供声明式事务，允许用户自定义切面</mark></p><ul><li>横切关注点：跨越应用程序多个模块的方法或功能。即是，与我们业务无关的，但是我们需要关注的部分，就是横切关注点。如日志、安全、缓存、事务等等</li><li>切面（aspect）：横切关注点 被模块化的 特殊对象，即，它是一个类</li><li>通知（advice）：切面必须要完成的工作。即，它是类中的一个方法</li><li>目标（target）：被通知对象</li><li>代理（Proxy）：向目标对象应用通知之后创建的对象</li><li>切入点（pointCut）：切面通知执行的“地点”的定义</li><li>连接点（jointPoint）：与切入点匹配的执行点</li></ul><p><img src="/2020/08/03/55999/image-20200804001030983.png" alt="image-20200804001030983"></p><p>SpringAOP中，通过<strong>通知</strong>定义横切逻辑，Spring中支持5中类型的<strong>通知</strong>：</p><table><thead><tr><th>通知类型</th><th>连接点</th><th>实现接口</th></tr></thead><tbody><tr><td>前置通知</td><td>方法前</td><td><code>org.springframework.aop.MethodBeforeAdvice;</code></td></tr><tr><td>后置通知</td><td>方法后</td><td><code>org.springframework.aop.AfterReturningAdvice;</code></td></tr><tr><td>环绕通知</td><td>方法前后</td><td><code>org.aopalliance.intercept.MethodInterceptor;</code></td></tr><tr><td>异常抛出通知</td><td>方法抛出异常</td><td><code>org.springframework.aop.ThrowsAdvice;</code></td></tr><tr><td>引介通知</td><td>类中增加的新的方法属性</td><td><code>org.springframework.aop.IntroductionInterceptor;</code></td></tr></tbody></table><h3><span id="san-shi-yong-spring-shi-xian-aop">三、使用Spring实现AOP</span><a href="#san-shi-yong-spring-shi-xian-aop" class="header-anchor">.</a></h3><p><strong>引入织入依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.aspectj<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>aspectjweaver<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.9.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方式一： 使用Spring的接口（接口实现）</p><p>方式二：使用自定义的切面类（切面定义）</p><p>方式三：注解实现</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-10-JavaConfig实现配置</title>
      <link href="/2020/08/03/51940.html"/>
      <url>/2020/08/03/51940.html</url>
      
        <content type="html"><![CDATA[<h2><span id="javaconfig-shi-xian-pei-zhi">JavaConfig实现配置</span><a href="#javaconfig-shi-xian-pei-zhi" class="header-anchor">.</a></h2><p><strong>目录结构</strong></p><p><img src="/2020/08/03/51940/image-20200803172143766.png" alt></p><blockquote><p>JavaConfig，是在 Spring 3.0 开始从一个独立的项目并入到 Spring 中的。JavaConfig 可以看成一个用于完成 Bean 装配的 Spring 配置文件，即 Spring 容器，只不过该容器不是 XML文件，而是由程序员使用 Java 自己编写的 Java 类。</p></blockquote><blockquote><p>下面的AppConfig类相当于Spring容器，只不过从 .xml 文件 ==&gt; java类</p></blockquote><h3><span id="di-yi-chong">第一种</span><a href="#di-yi-chong" class="header-anchor">.</a></h3><h4><span id="shi-ti-lei">实体类</span><a href="#shi-ti-lei" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">// 这里说明 这个类被Spring接管了，注册到了容器中，但是需要被扫描ComponentScan 相当于bean标签 类名小写相当于id 该类相当于class</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"刘民锴"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="pei-zhi-lei">配置类</span><a href="#pei-zhi-lei" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span><span class="token string">"pojo"</span><span class="token punctuation">)</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//相当于 bean.xml</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">,</span> User<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 刘民锴</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="di-er-chong">第二种</span><a href="#di-er-chong" class="header-anchor">.</a></h3><h4><span id="shi-ti-lei">实体类</span><a href="#shi-ti-lei" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    String name <span class="token operator">=</span> <span class="token string">"流柚"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="pei-zhi-lei">配置类</span><a href="#pei-zhi-lei" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span> <span class="token comment" spellcheck="true">//这个也会被Spring容器托管，注册到容器中，因为他本来就是一个@Component</span><span class="token comment" spellcheck="true">//@import(AppConfig.class) // 导入其他配置类 相当于 import标签</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//相当于 beans.xml</span>    <span class="token comment" spellcheck="true">//注册一个bean ，相当于之前写一个  bean标签</span>    <span class="token comment" spellcheck="true">//方法名 相当于 id属性 可以通过 Bean更改</span>    <span class="token comment" spellcheck="true">//返回值 相当于 class属性</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Student <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 返回需要注入到bean的对象</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span>AppConfig<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 流柚</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-11-代理模式</title>
      <link href="/2020/08/03/50403.html"/>
      <url>/2020/08/03/50403.html</url>
      
        <content type="html"><![CDATA[<h2><span id="dai-li-mo-shi">代理模式</span><a href="#dai-li-mo-shi" class="header-anchor">.</a></h2><blockquote><p>SpringAOP的<strong>底层</strong></p></blockquote><h3><span id="1-jing-tai-dai-li">1、静态代理</span><a href="#1-jing-tai-dai-li" class="header-anchor">.</a></h3><p><img src="/2020/08/03/50403/image-20200803220220021.png" alt></p><p>角色分析：</p><ul><li>抽象角色：一般会使用<strong>接口</strong>或<strong>抽象类</strong>来解决</li><li>真实角色（<strong>类</strong>）：被代理的角色</li><li>代理角色（<strong>类</strong>）：代理真实角色，做一些附属操作</li><li>客户（<strong>类</strong>）：访问代理角色的人</li></ul><p><strong>抽象接口</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRent</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//租房</span>    <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>被代理类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//房东</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">IRent</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东出租房屋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代理类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//中介</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HostProxy</span> <span class="token keyword">implements</span> <span class="token class-name">IRent</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//房东对象</span>    <span class="token keyword">private</span> Host host<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HostProxy</span><span class="token punctuation">(</span>Host host<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>host <span class="token operator">=</span> host<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//中介带用户看房子</span>        <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//房东出租房屋</span>        host<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// ...</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中介带用户看房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Host h <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRent proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HostProxy</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>代理模式的好处：</strong></p><ul><li>可以使真实角色的操作更加纯粹，不用关注一些公共业务</li><li>公共业务就交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li></ul><p><strong>缺点：</strong></p><ul><li>一个真实角色就会产生一个代理角色；代码量会翻倍，开发效率会变低</li></ul><h3><span id="2-dong-tai-dai-li">2、动态代理</span><a href="#2-dong-tai-dai-li" class="header-anchor">.</a></h3><ul><li>动态代理和静态代理角色一样</li><li>动态代理的代理类是动态生成的，不是我们写好的</li><li>动态代理分为两大类：基于接口的动态代理，基于类的动态代理<ul><li>基于接口 JDK动态代理</li><li>基于类 cglib</li><li>java字节码实现 javasist</li></ul></li></ul><p>需要两个类</p><ul><li>Proxy：代理</li><li>InvocationHandler：调用处理程序</li></ul><p><strong>抽象接口</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRent</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>被代理类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Host</span> <span class="token keyword">implements</span> <span class="token class-name">IRent</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"房东出租房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>调用处理类：创建代理类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HostInvocationHandler</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Object target<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置被代理对象</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTarget</span><span class="token punctuation">(</span>Object target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>target <span class="token operator">=</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//获取代理对象</span>    <span class="token keyword">public</span> Object <span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//被代理对象的类加载器  实现的接口  调用处理对象</span>        <span class="token keyword">return</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//附加的操作</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">seeHouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"中介带客户看房子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>客户</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IRent host <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Host</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HostInvocationHandler hih <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HostInvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置被代理对象</span>        hih<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>host<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获得代理对象</span>        IRent proxy <span class="token operator">=</span> <span class="token punctuation">(</span>IRent<span class="token punctuation">)</span>hih<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//代理 执行方法</span>        proxy<span class="token punctuation">.</span><span class="token function">rent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>动态代理的好处</p><ul><li>可以使真实角色的操作更加纯粹，不用关注一些公共业务</li><li>公共业务就交给代理角色，实现了业务的分工</li><li>公共业务发生扩展的时候，方便集中管理</li><li>一个动态代理类代理的是一个接口，一般就是对应的一类业务</li><li>一个动态代理类可以代理多个类，只要是实现了同一个接口</li></ul><p><a href="https://www.cnblogs.com/cC-Zhou/p/9525638.html" target="_blank" rel="noopener">https://www.cnblogs.com/cC-Zhou/p/9525638.html</a></p><p><a href="https://www.cnblogs.com/joy99/p/10865391.html" target="_blank" rel="noopener">https://www.cnblogs.com/joy99/p/10865391.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-9-使用注解开发</title>
      <link href="/2020/08/03/43972.html"/>
      <url>/2020/08/03/43972.html</url>
      
        <content type="html"><![CDATA[<h2><span id="shi-yong-zhu-jie-kai-fa">使用注解开发</span><a href="#shi-yong-zhu-jie-kai-fa" class="header-anchor">.</a></h2><p>在spring4之后，必选导入aop的包才能使用注解</p><p><strong>xml中开启注解</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 指定要扫描的包，这个包下的注解就会生效 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>1、bean</p><p>2、属性如何注入</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//等价于 &lt;bean id="user" class="com.kuang.pojo.User"/></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"liuyou"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等价于 &lt;property name="name" value="liuyou"/>  该注解也可以放在set方法上</span>    String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、衍生的注解</p><ul><li><p><code>@Component</code>有几个衍生注解，MVC</p><ul><li>dao 中：<code>@Repository</code></li><li>service中：<code>@service</code></li><li>controller中：<code>@Controller</code></li></ul><blockquote><p>这四个注解功能是相同的，都是把该类在spring容器中注册，并装配Bean</p></blockquote></li></ul><p>4、自动装配</p><p>详情看上一篇spring的笔记</p><p>5、作用域</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Scope</span><span class="token punctuation">(</span><span class="token string">"sigleton"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Bean的范围</span><span class="token annotation punctuation">@Component</span> <span class="token comment" spellcheck="true">//等价于 &lt;bean id="user" class="com.kuang.pojo.User"/></span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"liuyou"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 等价于 &lt;property name="name" value="liuyou"/></span>    String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6、小结</p><p> xml与注解</p><ul><li>xml更加万能，适用于任何场合，维护简单方便</li><li>注解 不是自己的类使用不了，维护相对复杂</li></ul><p>xml 与 注解的最佳实现</p><ul><li>xml用于管理bean</li><li>注解只负责完成属性的注入</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 代码块</title>
      <link href="/2020/07/30/18708.html"/>
      <url>/2020/07/30/18708.html</url>
      
        <content type="html"><![CDATA[<h2><span id="dai-ma-kuai">代码块</span><a href="#dai-ma-kuai" class="header-anchor">.</a></h2><blockquote><p>用于初始化类或对象</p></blockquote><h3><span id="fen-lei">分类</span><a href="#fen-lei" class="header-anchor">.</a></h3><ul><li>静态代码块<ul><li>内部可以有输出语句</li><li>随着类的加载而执行</li><li>只会执行一次</li><li>作用：初始化类信息</li><li>如果定义了多个代码块，则按照声明的先后顺序执行</li><li>只能调用静态属性或静态方法</li></ul></li><li>非静态代码块<ul><li>内部可以输出语句</li><li>随着对象的加载而执行</li><li>每创建一个对象，就执行一次</li><li>作用：在创建对象时，可以初始化对象的属性</li><li>如果定义了多个代码块，则按照声明的先后顺序执行</li><li>可以调用静态属性或静态方法，非静态属性或非静态方法</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- static关键字</title>
      <link href="/2020/07/30/4927.html"/>
      <url>/2020/07/30/4927.html</url>
      
        <content type="html"><![CDATA[<h2><span id="static">static</span><a href="#static" class="header-anchor">.</a></h2><blockquote><p>静态的</p></blockquote><ul><li>可以用于修饰属性、方法、代码块、内部类</li></ul><h3><span id="static-xiu-shi-shu-xing-jing-tai-bian-liang-lei-bian-liang">static修饰属性：<code>静态变量(类变量)</code></span><a href="#static-xiu-shi-shu-xing-jing-tai-bian-liang-lei-bian-liang" class="header-anchor">.</a></h3><ul><li><p>属性除了<strong>静态变量</strong>，就是<strong>实例变量</strong></p></li><li><p><strong>一个类的多个对象共享同一个静态变量</strong></p></li><li><p><strong>随着类的加载而加载</strong></p></li><li><p>静态变量的加载早于对象的创建</p></li><li><p>由于类的加载只会加载一次，则静态变量在内存中也只会存在一份：<strong>方法区的静态域中</strong></p></li></ul><h4><span id="bian-liang-de-diao-yong">变量的调用</span><a href="#bian-liang-de-diao-yong" class="header-anchor">.</a></h4><table><thead><tr><th></th><th>类变量</th><th>实例变量</th></tr></thead><tbody><tr><td>类调用</td><td>可以（推荐）</td><td>不行</td></tr><tr><td>对象调用</td><td>可以</td><td>可以</td></tr></tbody></table><h4><span id="kai-fa-zhong-shi-me-shi-hou-shi-yong-jing-tai-bian-liang">开发中，什么时候使用静态变量</span><a href="#kai-fa-zhong-shi-me-shi-hou-shi-yong-jing-tai-bian-liang" class="header-anchor">.</a></h4><ul><li>属性是可以被多个对象所共享，不会随着对象的不同而不同</li></ul><h3><span id="static-xiu-shi-fang-fa-jing-tai-fang-fa">static修饰方法：<code>静态方法</code></span><a href="#static-xiu-shi-fang-fa-jing-tai-fang-fa" class="header-anchor">.</a></h3><ul><li><strong>随着类的加载而加载</strong></li><li><code>静态方法中，只能调用静态的方法或属性</code></li><li>非静态方法中，都可以调用（不管是static还是非static）</li><li>在静态方法类，不能使用 <strong>this</strong>和<strong>super</strong>关键字：因为这两个关键字表示的都是对象，生命周期与静态方法不同（即静态的会先加载，无法调用后加载的结构，当类销毁时，静态结构才跟着销毁）</li></ul><h4><span id="fang-fa-de-diao-yong">方法的调用</span><a href="#fang-fa-de-diao-yong" class="header-anchor">.</a></h4><table><thead><tr><th></th><th>静态方法</th><th>非静态方法</th></tr></thead><tbody><tr><td>类调用</td><td>可以（推荐）</td><td>不行</td></tr><tr><td>对象调用</td><td>可以</td><td>可以</td></tr></tbody></table><h4><span id="kai-fa-zhong-shi-me-shi-hou-shi-yong-jing-tai-fang-fa">开发中，什么时候使用静态方法</span><a href="#kai-fa-zhong-shi-me-shi-hou-shi-yong-jing-tai-fang-fa" class="header-anchor">.</a></h4><ul><li>操作静态属性的方法，通常设置为static的</li><li>工具类中的方法</li></ul><h3><span id="static-xiu-shi-dai-ma-kuai-jing-tai-dai-ma-kuai">static修饰代码块：<code>静态代码块</code></span><a href="#static-xiu-shi-dai-ma-kuai-jing-tai-dai-ma-kuai" class="header-anchor">.</a></h3><blockquote><p>代码块作用: 用于初始化类、对象</p></blockquote><ul><li>随着类的加载而加载</li></ul><h3><span id="static-xiu-shi-nei-bu-lei-jing-tai-nei-bu-lei">static修饰内部类：<code>静态内部类</code></span><a href="#static-xiu-shi-nei-bu-lei-jing-tai-nei-bu-lei" class="header-anchor">.</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 包装类</title>
      <link href="/2020/07/29/64485.html"/>
      <url>/2020/07/29/64485.html</url>
      
        <content type="html"><![CDATA[<h2><span id="bao-zhuang-lei-wrapper">包装类（Wrapper）</span><a href="#bao-zhuang-lei-wrapper" class="header-anchor">.</a></h2><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">boolean</td><td align="center">Boolean</td></tr></tbody></table><p><code>Byte,Short,Integer,Long,Float,Double --&gt; 父类：Number</code></p><h4><span id="ji-ben-shu-ju-lei-xing-bao-zhuang-lei-he-string-lei-xing-zhi-jian-de-zhuang-huan">基本数据类型、包装类和String类型之间的装换</span><a href="#ji-ben-shu-ju-lei-xing-bao-zhuang-lei-he-string-lei-xing-zhi-jian-de-zhuang-huan" class="header-anchor">.</a></h4><p><strong>基本类型</strong> &lt;==&gt; <strong>包装类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 基本 ==> 包装</span><span class="token comment" spellcheck="true">//1. 构造器</span>Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. Integer.valueOf</span>Integer j <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//----------------- 自动装箱默认调用</span><span class="token comment" spellcheck="true">//2. 自动装箱</span>Integer k <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包装 ==> 基本</span><span class="token comment" spellcheck="true">//1. intValue()</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ----------- 自动拆箱默认调用</span><span class="token comment" spellcheck="true">//2. 自动拆箱</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>基本类型</strong> &lt;==&gt; <strong>String类型</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//基本 ==> String</span><span class="token comment" spellcheck="true">//1. String.valueOf();</span>String str1 <span class="token operator">=</span> String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ----------</span><span class="token comment" spellcheck="true">//2. String 连接运算符 +</span>String str2 <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ------------</span><span class="token comment" spellcheck="true">//3. Integer.toString</span>String str3 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//String ==> 基本类型</span><span class="token comment" spellcheck="true">//1. Integer.parseInt()</span><span class="token keyword">int</span> i <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// -------------</span><span class="token comment" spellcheck="true">//2. 通过包装类构造器 --> 自动拆箱</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>包装类</strong> &lt;==&gt; <strong>String类型</strong></p><pre class="line-numbers language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包装 ==> String</span><span class="token comment" spellcheck="true">//1. 对象.toString</span>String str1 <span class="token operator">=</span> i<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// --------------------</span><span class="token comment" spellcheck="true">//2. Integer.toString</span>String str2 <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//String ==> 包装</span><span class="token comment" spellcheck="true">//1. 构造器</span>Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//2. Integer.valueOf();</span>Integer j <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Integer特有</strong>：<code>Integer k = Integer.getInstance(&quot;100&quot;);</code></p><h4><span id="zi-dong-chai-xiang-he-zi-dong-zhuang-xiang">自动拆箱 和 自动装箱</span><a href="#zi-dong-chai-xiang-he-zi-dong-zhuang-xiang" class="header-anchor">.</a></h4><p><code>JDK1.5</code></p><p>自动装箱：</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Integer j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动装箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>自动拆箱：</p><pre class="line-numbers language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//自动拆箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="mian-shi-ti">面试题</span><a href="#mian-shi-ti" class="header-anchor">.</a></h3><h4><span id="1">1.</span><a href="#1" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java">Object o <span class="token operator">=</span> <span class="token boolean">true</span> <span class="token operator">?</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//? == 1.0 因为 int 与 double 一起运算 类型会别提升</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Object o<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>    o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>    o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Double</span><span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//? == 1 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2">2.</span><a href="#2" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Integer j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>Integer j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">Integer i <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于new了一个对象</span>Integer j <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//相当于new了一个对象</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><p>为什么第二个为true、第三个却为false</p><p>因为在<code>Integer</code>类里面存在<code>IntegerCache</code>这么一个内部类，它用于缓存<code>-128~127</code>的整型数值，自动装箱时，会先到这个缓存中找 这个范围的数值，不在范围内才new</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">IntegerCache</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> low <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">128</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> high<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> Integer cache<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// high value may be configured by property</span>        <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">;</span>        String integerCacheHighPropValue <span class="token operator">=</span>            sun<span class="token punctuation">.</span>misc<span class="token punctuation">.</span>VM<span class="token punctuation">.</span><span class="token function">getSavedProperty</span><span class="token punctuation">(</span><span class="token string">"java.lang.Integer.IntegerCache.high"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>integerCacheHighPropValue <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>integerCacheHighPropValue<span class="token punctuation">)</span><span class="token punctuation">;</span>                i <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// Maximum array size is Integer.MAX_VALUE</span>                h <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token operator">-</span>low<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span> NumberFormatException nfe<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// If the property cannot be parsed into an int, ignore it.</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        high <span class="token operator">=</span> h<span class="token punctuation">;</span>        cache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">(</span>high <span class="token operator">-</span> low<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> low<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> cache<span class="token punctuation">.</span>length<span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>            cache<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// range [-128, 127] must be interned (JLS7 5.1.7)</span>        <span class="token keyword">assert</span> IntegerCache<span class="token punctuation">.</span>high <span class="token operator">>=</span> <span class="token number">127</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">IntegerCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 向下转型</title>
      <link href="/2020/07/29/53935.html"/>
      <url>/2020/07/29/53935.html</url>
      
        <content type="html"><![CDATA[<h3><span id="xiang-shang-zhuan-xing-duo-tai-xing">向上转型（多态性）</span><a href="#xiang-shang-zhuan-xing-duo-tai-xing" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java">Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Men</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="xiang-xia-zhuan-xing-qiang-zhi-zhuan-huan">向下转型（强制转换）</span><a href="#xiang-xia-zhuan-xing-qiang-zhi-zhuan-huan" class="header-anchor">.</a></h3><blockquote><p><strong>注意对象p 本质上仍然是 Men</strong></p></blockquote><pre class="line-numbers language-java"><code class="language-java">Men m <span class="token operator">=</span> <span class="token punctuation">(</span>Men<span class="token punctuation">)</span>p<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="cuo-wu-shi-fan">错误示范</span><a href="#cuo-wu-shi-fan" class="header-anchor">.</a></h3><p><strong>示范一： 兄弟类型</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Woman 和 Men 直接父类都是 Person</span>Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Men</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 向上转型</span>Women w <span class="token operator">=</span> <span class="token punctuation">(</span>Women<span class="token punctuation">)</span> p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向下转型，报错ClassCastException，p本质是Men类型，不能转为Women</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>示范二：父子类型</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//Men 是 Person的子类</span>Person p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Person对象的实例化</span>Men m <span class="token operator">=</span> <span class="token punctuation">(</span>Men<span class="token punctuation">)</span> p<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 向下转型，报错ClassCastException，p本质是Person，不能转为Men</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="xiao-jie">小结</span><a href="#xiao-jie" class="header-anchor">.</a></h3><ul><li><p>向下转型</p><ul><li>必须 <strong>先向上转型，再向下转型</strong></li><li>向下转型的<strong>对象（被强转的对象）</strong>，本质上必须是<strong>对象引用（变量）</strong>的<strong>同类型</strong>或者<strong>其子类</strong></li></ul><p><img src="/2020/07/29/53935/image-20200808172413356.png" alt></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 对象的引用</title>
      <link href="/2020/07/29/15015.html"/>
      <url>/2020/07/29/15015.html</url>
      
        <content type="html"><![CDATA[<p>JAVA:”对象的引用“意思是定义一个变量，这个变量指向的是一个对象，所以叫对象的引用。</p><pre class="line-numbers language-java"><code class="language-java">Object obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//obj：对象的引用</span><span class="token comment" spellcheck="true">//new Object():对象</span><span class="token comment" spellcheck="true">//Object：类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- Object类</title>
      <link href="/2020/07/29/26334.html"/>
      <url>/2020/07/29/26334.html</url>
      
        <content type="html"><![CDATA[<h2><span id="object">Object</span><a href="#object" class="header-anchor">.</a></h2><blockquote><p>是所有java类的根父类</p></blockquote><ul><li>Object只有一个 无参构造器</li></ul><h3><span id="object-lei-zhong-de-gong-neng">Object类中的功能</span><a href="#object-lei-zhong-de-gong-neng" class="header-anchor">.</a></h3><h3><span id="1-clone">1、clone</span><a href="#1-clone" class="header-anchor">.</a></h3><h4><span id="protected-native-object-clone"><code>protected native Object clone()</code></span><a href="#protected-native-object-clone" class="header-anchor">.</a></h4><ul><li>创建并返回一个对象的副本(新的对象：包含旧对象的状态)</li><li><strong>要想对象能被克隆 必须遵守的规则</strong><ul><li>1.该类 必须 实现 Cloneable 这个接口（标记接口：没有方法的接口）</li><li>2.重写 clone() 方法 ,但是在方法内无需任何操作  至于访问修饰符 可以 改为 public</li><li>3.新建对象，调用clone() 即可</li></ul></li><li>像那些 类（已经被定义好的类：不是自定义的）；如何实现clone方法<ul><li>间接实现<ul><li>继承这个类，通过子类，实现Cloneable接口，重写clone方法，然后生成子类对象是，利用向上转型（多态性），通过父类引用调取子类clone方法</li><li>但是，如果一个类 (已定义好的类) 既没有实现Cloneable接口，也没有实现clone方法，最重要的是它还被final修饰，那么将无法实现clone方法</li></ul></li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        B b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        B b_clone <span class="token operator">=</span> <span class="token punctuation">(</span>B<span class="token punctuation">)</span>b<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"两对象是否是同一对象："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> b_clone<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// false 克隆出来不是同一对象</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"克隆对象的属性值："</span> <span class="token operator">+</span> b_clone<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2 克隆不仅仅是创建新对象，还包含内容旧对象的状态</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * 要想对象能被克隆 必须遵守的规则 *  1.该类 必须 实现 Cloneable 这个接口（标记接口：没有方法的接口） *  2.重写 clone() 方法 ,但是在方法内无需任何操作 ： 至于访问修饰符 可以 改为 public *  3.新建对象，调用clone() 即可 */</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="java-zhong-clone-fang-fa-de-shi-yong-han-shen-qian-ke-long"></span><a href="#java-zhong-clone-fang-fa-de-shi-yong-han-shen-qian-ke-long" class="header-anchor">.</a></h4><p><strong>浅克隆： 克隆的对象 和 原始对象的引用类型引用同一个对象</strong></p><p><strong>深克隆： 克隆的对象 和 原始对象的引用类型引用不同对象</strong></p><p>最好不要使用clone方法</p><h3><span id="2-finalize-la-ji-hui-shou">2、finalize（垃圾回收）</span><a href="#2-finalize-la-ji-hui-shou" class="header-anchor">.</a></h3><h4><span id="protected-void-finalize"><code>protected void finalize()</code></span><a href="#protected-void-finalize" class="header-anchor">.</a></h4><blockquote><p><code>@Deprecated(since=&quot;9&quot;)</code></p></blockquote><blockquote><p>当垃圾回收器（garbage collector，GC）发现一个对象没有引用指向时，就会回收这个对象</p><p>而对象回收之前，（该对象）调用该方法</p></blockquote><ul><li>自动被调用</li><li>垃圾回收机制的关键点<ul><li>垃圾回收机制<strong>只回收 JVM堆内存里的对象空间</strong></li><li>对其他物理连接，比如数据库连接。输入输出流、Socket连接   无能为力</li><li>现有的JVM有多种垃圾回实现算法，表现各异</li><li>垃圾回收发生具有不可预知性，程序无法精确控制垃圾回收机制执行</li><li>可以将对象的引用设置为null，暗示垃圾回收机制可以回收该对象</li><li>程序员可以通过<code>System.gc()</code>或则<code>Runtime.getRuntime.gc()</code>来通知系统进行垃圾回收，会有一些效果，但是系统是否进行垃圾回收依然不确定</li><li><strong>垃圾回收机制回收任何对象之前，总会先调用它的<code>finalize</code>方法（如果覆盖该方法，让一个新的引用变量重新引用该对象，则会重新激活对象）</strong></li><li>永远不要手动调用某个对象的<code>finalize</code>方法，应该交给垃圾回收机制调用</li></ul></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> CloneNotSupportedException <span class="token punctuation">{</span>        A a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//此时对象实体是垃圾对象，等待被回收，但时间不确定</span>        System<span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//强制回收释放</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对象回收之前，会调用该方法</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对象释放"</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">finalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"A [a="</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"]"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-getclass-fan-she">3、getClass （反射）</span><a href="#3-getclass-fan-she" class="header-anchor">.</a></h3><h4><span id="public-final-native-class-lt-gt-getclass"><code>public final native Class&lt;?&gt; getClass()</code></span><a href="#public-final-native-class-lt-gt-getclass" class="header-anchor">.</a></h4><blockquote><p>获取当前类型的所属类</p></blockquote><ul><li><p>获取 当前对象的创建类</p><pre class="line-numbers language-java"><code class="language-java">String a <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// class java.lang.String</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3><span id="4-hashcode-ji-he">4、hashCode（集合）</span><a href="#4-hashcode-ji-he" class="header-anchor">.</a></h3><h4><span id="public-native-int-hashcode"><code>public native int hashCode()</code></span><a href="#public-native-int-hashcode" class="header-anchor">.</a></h4><blockquote><p>返回对象的哈希值</p></blockquote><h3><span id="5-notify-xian-cheng-tong-xin">5、notify（线程通信）</span><a href="#5-notify-xian-cheng-tong-xin" class="header-anchor">.</a></h3><h4><span id="public-final-native-void-notify"><code>public final native void notify()</code></span><a href="#public-final-native-void-notify" class="header-anchor">.</a></h4><blockquote><p>用在同步代码块或同步方法中，释放优先级最高的线程的wait</p></blockquote><h3><span id="6-notifyall-xian-cheng-tong-xin">6、notifyAll（线程通信）</span><a href="#6-notifyall-xian-cheng-tong-xin" class="header-anchor">.</a></h3><h4><span id="public-final-native-void-notifyall"><code>public final native void notifyAll()</code></span><a href="#public-final-native-void-notifyall" class="header-anchor">.</a></h4><blockquote><p>用在同步代码块或同步方法中，释放所有的线程的wait</p></blockquote><h3><span id="7-wait-xian-cheng-tong-xin">7、wait（线程通信）</span><a href="#7-wait-xian-cheng-tong-xin" class="header-anchor">.</a></h3><h4><span id="public-final-void-wait"><code>public final void wait()</code></span><a href="#public-final-void-wait" class="header-anchor">.</a></h4><blockquote><p>用在同步代码块或同步方法中，阻塞当前线程，并释放锁</p></blockquote><ul><li><code>public final native void wait(long timeoutMillis)</code></li><li><code>public final void wait(long timeoutMillis, int nanos)</code> 等待时间 ms ； 额外时间 ns</li></ul><h3><span id="8-equals">8、equals</span><a href="#8-equals" class="header-anchor">.</a></h3><h4><span id="public-boolean-equals-object-obj"><code>public boolean equals(Object obj)</code></span><a href="#public-boolean-equals-object-obj" class="header-anchor">.</a></h4><blockquote><p>比较两个对象是否相等，是否是同一对象  </p></blockquote><p><code>==</code> &amp;<code>equals</code></p><ul><li><p><code>==</code></p><ul><li><strong>比较运算符</strong></li><li>使用在基本类型变量和引用类型变量中<ul><li>如果比较的是<strong>基本类型</strong> ：比较两个变量的<strong>保存数据是否相等</strong>（<mark>类型可以不同</mark>（类型自动提升:除了boolean类型））</li><li>如果比较的是<strong>引用类型</strong> ：比较两个对象的<strong>地址值是否相等</strong>（两个对象引用是指向堆里同一个对象实体）</li></ul></li></ul></li><li><p><code>equals</code></p></li><li><p><strong>方法</strong></p></li><li><p>只用于引用数据类型</p><ul><li><p>如果equals方法没有被重写：作用相当于<code>==</code>比较引用类型时</p><pre class="line-numbers language-java"><code class="language-java">  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>如果equals方法被重写：按重写的来，一般是比较实体内容是否相同<strong>（比较属性值是否相等）</strong></p><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// IDEA 自动生成的重写方法</span>  <span class="token comment" spellcheck="true">//class A </span>  <span class="token comment" spellcheck="true">//field int a String b </span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      A other <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> other<span class="token punctuation">.</span>a<span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">if</span> <span class="token punctuation">(</span>other<span class="token punctuation">.</span>b <span class="token operator">!=</span> null<span class="token punctuation">)</span>              <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">  <span class="token comment" spellcheck="true">//class A </span>  <span class="token comment" spellcheck="true">//field int a String b </span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>         <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">// 可以不要</span>          <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">A</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          A o <span class="token operator">=</span> <span class="token punctuation">(</span>A<span class="token punctuation">)</span>obj<span class="token punctuation">;</span>          <span class="token keyword">return</span> o<span class="token punctuation">.</span>a <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span>b <span class="token operator">==</span> null <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">==</span> null <span class="token operator">:</span> o<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h5><span id="equals-de-chong-xie-xu-yao-man-zu-yi-xia-wu-ge-tiao-jian">equals的重写需要满足以下五个条件</span><a href="#equals-de-chong-xie-xu-yao-man-zu-yi-xia-wu-ge-tiao-jian" class="header-anchor">.</a></h5><ul><li>自反性</li></ul><pre class="line-numbers language-java"><code class="language-java">x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ture</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>对称性</li></ul><pre class="line-numbers language-java"><code class="language-java">x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ture </span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>传递性</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> y<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>    x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>一致性</li></ul><p>多次调用 equals() 方法结果不变</p><pre class="line-numbers language-java"><code class="language-java">x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>与null的比较，返回永远是false</li></ul><pre class="line-numbers language-java"><code class="language-java">x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// false;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="9-tostring">9、toString</span><a href="#9-tostring" class="header-anchor">.</a></h3><h4><span id="public-string-tostring"><code>public String toString()</code></span><a href="#public-string-tostring" class="header-anchor">.</a></h4><ul><li><p>当我们输出对象的引用时，实际上是输出对象的<code>toString()</code></p></li><li><p><code>String</code>、<code>Date</code>、<code>File</code>、<code>包装类</code>都重写了<code>Object</code>类里的<code>toString()</code>方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"@"</span> <span class="token operator">+</span> Integer<span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3><span id="zhu-yi">注意</span><a href="#zhu-yi" class="header-anchor">.</a></h3><ul><li>在重写equals()方法是应当总是重写hashCode()方法，保证等价的两个对象的哈希值也相等</li><li>HashSet 和 HashMap 等集合类使用了 hashCode() 方法来计算对象应该存储的位置，因此要将对象添加到这些集合类中，需要让对应的类实现 hashCode() 方法。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- instanceof关键字</title>
      <link href="/2020/07/29/37283.html"/>
      <url>/2020/07/29/37283.html</url>
      
        <content type="html"><![CDATA[<h2><span id="instanceof">instanceof</span><a href="#instanceof" class="header-anchor">.</a></h2><blockquote><p>为了避免在向下转型是出现<code>ClassCastException</code>异常，我们在向下转型之前，先使用instanceof进行判断</p></blockquote><p><code>对象 instanceof 类或接口</code>：对象 是否是 类或接口 的一个实例（该类的对象或子对象）</p><p>​</p>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 多态性的表现</title>
      <link href="/2020/07/29/63735.html"/>
      <url>/2020/07/29/63735.html</url>
      
        <content type="html"><![CDATA[<h2><span id="duo-tai-xing">多态性</span><a href="#duo-tai-xing" class="header-anchor">.</a></h2><blockquote><p>可理解为一个事物的多种形态</p></blockquote><ul><li>父类的引用指向子类对象（或子类的对象赋给父类的引用）</li></ul><h3><span id="duo-tai-de-shi-yong">多态的使用</span><a href="#duo-tai-de-shi-yong" class="header-anchor">.</a></h3><h4><span id="xu-ni-fang-fa-diao-yong">虚拟方法调用</span><a href="#xu-ni-fang-fa-diao-yong" class="header-anchor">.</a></h4><blockquote><p>当调用子父类同名的方法时，实际执行的是子类重写父类的方法</p><p>父类根据子类更据赋给它的不同子类对象，动态调用属于子类的方法</p><p>这样的方法调用在编译期是无法确定的</p><p><code>多态性是运行时行为</code></p></blockquote><ul><li>有了对象的多态性以后，我们在编译期，只能调用父类中声明的方法，但在运行期，我们实际执行的是子类重写父类的方法(<code>编译看左边，运行看右边</code>)</li><li>多态性只适用于方法，不适用与属性(<code>编译运行都看左边</code>)</li><li>不能调用子类中特有的方法</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> field <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"父类方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> field <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"子类重写父类的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//对象的多态性</span>        B a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//多态的使用：当调用子父类同名的方法时，实际执行的是子类重写父类的方法  ---- 虚拟方法调用</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>field<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1 </span>        a<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//调用的方法是子类重写父类后的方法  </span>        <span class="token comment" spellcheck="true">//如果你 Ctrl + 鼠标左键点击这个方法它会跳到，父类的method,但是执行的内容是子类的method方法</span>        <span class="token comment" spellcheck="true">//所以说 编译看左边（父类对象里的方法）  执行看右边（子类重写的方法）</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="duo-tai-xing-de-shi-yong-qian-ti">多态性的使用前提</span><a href="#duo-tai-xing-de-shi-yong-qian-ti" class="header-anchor">.</a></h3><ul><li>继承</li><li>方法重写</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- super关键字</title>
      <link href="/2020/07/29/11779.html"/>
      <url>/2020/07/29/11779.html</url>
      
        <content type="html"><![CDATA[<h2><span id="super">super</span><a href="#super" class="header-anchor">.</a></h2><blockquote><p>父类</p></blockquote><ul><li>使用super可以在构造器或方法中调用父类的属性（<code>super.属性名</code>）、构造器（<code>super(形参列表)</code>）、方法（<code>super.方法名</code>）</li><li>通常情况下，我们习惯省略super</li><li>但，父类，与子类存在同名的方法或属性时，如果你要调用父类属性或方法，不可省略super</li></ul><h3><span id="super-diao-yong-gou-zao-qi">Super调用构造器</span><a href="#super-diao-yong-gou-zao-qi" class="header-anchor">.</a></h3><ul><li><code>super(形参列表)</code>只能放在子类构造中的首行</li><li><code>this()</code>与<code>super()</code>在构造器中只能存在一个</li><li>在类的多个构造器中，至少有一个构造器使用<code>super(形参列表)</code></li><li>在构造器中如果没有显示定义<code>this()</code>或<code>super()</code>,默认生成一个<code>super()</code>父类无参构造器</li><li>如果父类不存在无参构造器，子类的构造器会爆红</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//未定义隐式超构造函数 A（）。必须显式调用另一个构造函数</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="zi-lei-dui-xiang-shi-li-hua-de-quan-guo-cheng">子类对象实例化的全过程</span><a href="#zi-lei-dui-xiang-shi-li-hua-de-quan-guo-cheng" class="header-anchor">.</a></h3><ul><li>从结果上看<ul><li>子类继承父类以后，就获得了父类中声明的属性或方法</li><li>创建子类的对象，在堆上，会加载所有父类中声明的属性。</li></ul></li><li>从过程上看<ul><li>当我们通过子类的构造器创建子类对象时，一定会直接或间接的调用父类的构造器，进而调用父类的构造器，直到调用到Object父类</li><li>正是因为加载过所有的父类的结构，所以才可以看到内存中有父类的结构，子类对象才可以考虑进行调用</li></ul></li></ul><blockquote><p>只是调用父类的构造器，并没有创建父类对象，自始至终，只创建了该类的一个对象</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 方法重写</title>
      <link href="/2020/07/28/59850.html"/>
      <url>/2020/07/28/59850.html</url>
      
        <content type="html"><![CDATA[<h2><span id="fang-fa-chong-xie">方法重写</span><a href="#fang-fa-chong-xie" class="header-anchor">.</a></h2><blockquote><p>在子类中可以根据需要对从父类中继承的同名、同参数的方法进行改造 – 重写，也称为方法<strong>重置</strong>、<strong>覆盖</strong></p></blockquote><ul><li>重写之后，当创建子类对象以后，通过子类对象调用子类中的同名同参数方法时，实际执行的是子类重写父类的方法</li></ul><h3><span id="yao-qiu">要求</span><a href="#yao-qiu" class="header-anchor">.</a></h3><ul><li>子类重写的方法名和形参列表与父类别重写的方法名和形参列表相同</li><li><strong>重写的方法的访问修饰符 不小于 被重写方法</strong><ul><li><strong>子类不能重写父类中private或final修饰的方法</strong><ul><li>其中private，可以写同名，通常，但是不会认为对父类方法的重写</li><li>final修饰是根本不能重写，会爆红</li></ul></li></ul></li><li><strong>返回值类型</strong><ul><li>如果父类被重写方法是返回值类型是void, 那么子类也必须是void</li><li>如果父类被重写方法是返回值类型是一个类, 那么子类也必须是<strong>这个类或其子类</strong></li><li>如果父类被重写方法是返回值类型是基本类型 那么子类也必须是相同的基本类型</li></ul></li><li><strong>重写的方法抛出的<mark>异常类型</mark> 不大于 被重写方法</strong><ul><li><strong>若父类没有抛出异常，子类也不能抛出异常</strong></li></ul></li></ul><blockquote><p>子类和父类中的同名同参数要么都声明为<code>非static</code>的（考虑重写）</p><p>要么声明为<code>static</code>的（不是重写）</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- this关键字</title>
      <link href="/2020/07/28/20018.html"/>
      <url>/2020/07/28/20018.html</url>
      
        <content type="html"><![CDATA[<h2><span id="this-de-shi-yong">this的使用</span><a href="#this-de-shi-yong" class="header-anchor">.</a></h2><blockquote><p>this表示 当前对象 或 当前正在创建的对象（构造器中的this）</p></blockquote><ul><li><p>可以用于修饰：属性（<code>this.属性名</code>）、方法（<code>this.方法名(有参|无参)</code>）、构造器（<code>this(有参|无参)</code>）</p></li><li><p>如果一个类中有n个构造器，则最多有n-1个构造器中使用<code>this(形参列表)</code></p></li><li><p><code>this(形参列表)</code>必须是<mark>首行</mark>，且<mark>每个构造器只能引用一个<code>this(形参列表)</code></mark></p></li><li><p>通常情况下，可以省略<code>this</code></p></li><li><p>但是属性与形参同名，必须加上this，用于区分形参和属性</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 区分形参和属性</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>this(形参列表)</code>可以调用其他构造器， 但<mark>不能自己调自己</mark></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- javaBean</title>
      <link href="/2020/07/28/42056.html"/>
      <url>/2020/07/28/42056.html</url>
      
        <content type="html"><![CDATA[<h2><span id="javabean">JavaBean</span><a href="#javabean" class="header-anchor">.</a></h2><ul><li>javaBean 是一种java语言写成的可重用组件</li><li>所谓javaBean，是指符合如下标准的java类：<ul><li>类是公共的</li><li>有一个无参构造器</li><li>有私有属性，且有对应的get、set方法</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 构造器</title>
      <link href="/2020/07/28/2384.html"/>
      <url>/2020/07/28/2384.html</url>
      
        <content type="html"><![CDATA[<h2><span id="gou-zao-qi-constructor">构造器（constructor）</span><a href="#gou-zao-qi-constructor" class="header-anchor">.</a></h2><p><code>权限修饰符 类名(形参列表){}</code></p><ul><li>如果没有显式定义构造器，会默认生成一个无参构造器</li><li>一个类可以存在多个构造器（构造器的重载）</li><li>一个类如果显式定义了有参构造器，就不会默认生成无参构造器，如果需要有参构造器，必须手动定义</li><li>没有返回值返回类型</li></ul><h3><span id="zuo-yong">作用</span><a href="#zuo-yong" class="header-anchor">.</a></h3><ul><li>创建对象</li><li>属性的初始化</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 访问修饰符</title>
      <link href="/2020/07/28/37058.html"/>
      <url>/2020/07/28/37058.html</url>
      
        <content type="html"><![CDATA[<h2><span id="fang-wen-xiu-shi-fu">访问修饰符</span><a href="#fang-wen-xiu-shi-fu" class="header-anchor">.</a></h2><h3><span id="fang-wen-xiu-shi-fu-ke-yong-fan-wei">访问修饰符可用范围</span><a href="#fang-wen-xiu-shi-fu-ke-yong-fan-wei" class="header-anchor">.</a></h3><table><thead><tr><th></th><th>同一类</th><th>同一包</th><th>不同包的子类</th><th>同一项目（工程）</th></tr></thead><tbody><tr><td><strong>public</strong></td><td>√</td><td>√</td><td>√</td><td>√</td></tr><tr><td><strong>protected</strong></td><td>√</td><td>√</td><td>√</td><td></td></tr><tr><td><strong>默认（缺省）</strong></td><td>√</td><td>√</td><td></td><td></td></tr><tr><td><strong>private</strong></td><td>√</td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>访问修饰符可以用于修饰<strong>类</strong>和其<strong>内部结构</strong></p></blockquote><blockquote><p><strong>类</strong> 只能使用 public 和 缺省</p></blockquote><h3><span id="ke-xiu-shi-de-lei-de-nei-bu-jie-gou">可修饰的类的内部结构</span><a href="#ke-xiu-shi-de-lei-de-nei-bu-jie-gou" class="header-anchor">.</a></h3><ul><li><strong>属性</strong></li><li><strong>方法</strong></li><li><strong>构造器</strong></li><li><strong><mark>内部类</mark></strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 封装性的体现</title>
      <link href="/2020/07/28/20108.html"/>
      <url>/2020/07/28/20108.html</url>
      
        <content type="html"><![CDATA[<p>设计良好的模块会隐藏所有的实现细节，把它的 API 与它的实现清晰地隔离开来。模块之间只通过它们的 API 进行通信，一个模块不需要知道其他模块的内部工作情况，这个概念被称为信息隐藏或封装。因此访问权限应当尽可能地使每个类或者成员不被外界访问。</p><p><strong>封装性的体现</strong></p><ul><li>属性私有化，同时提供相应的get和set方法</li><li>私有化的方法，只供内部使用</li><li>私有化构造器，典型例子 – 单例模式</li></ul><blockquote><p>封装性思想，掩藏对象内部的复杂性，只对外部公开简单的接口</p></blockquote><blockquote><p>封装性的体现，需要访问修饰符的配合</p></blockquote><ul><li>private ： 同一类可用</li><li>默认：同一包可用</li><li>protected：同一包或不同包子类</li><li>public：一个工程（项目）内可用</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 继承性的体现</title>
      <link href="/2020/07/28/43580.html"/>
      <url>/2020/07/28/43580.html</url>
      
        <content type="html"><![CDATA[<h2><span id="ji-cheng-xing">继承性</span><a href="#ji-cheng-xing" class="header-anchor">.</a></h2><p><code>class subclass extends superclass{}</code></p><ul><li>subclass: 子类、派生类</li><li>superclass：父类、基类、超类</li></ul><h3><span id="ji-cheng-xing-de-hao-chu">继承性的好处</span><a href="#ji-cheng-xing-de-hao-chu" class="header-anchor">.</a></h3><ul><li>减少代码的冗余，提高了代码的复用性</li><li>便于功能的扩展</li><li>为之后多态性的使用，提供了前提</li></ul><blockquote><p>体现: 一旦子类继承父类，子类就可以获取父类中声明的结构：属性、方法，但是由于封装性的影响，被private修饰的属性或方法，不可见（不可直接调用）</p></blockquote><h3><span id="gui-ding">规定</span><a href="#gui-ding" class="header-anchor">.</a></h3><ul><li>一个类可以被多个子类继承</li><li>一个类只能由一个父类（单继承）</li><li>子父类是一个相对的概念</li><li>Object的最终父类是Object类</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 值传递和引用传递</title>
      <link href="/2020/07/28/5687.html"/>
      <url>/2020/07/28/5687.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>实际上，java方法参数传递只有值传递，只不过我们所说的引用传递 传递的是 对象的引用（地址值）</p><p><a href="https://www.cnblogs.com/xiaoxiaoyihan/p/4883770.html" target="_blank" rel="noopener">这个博客很详细</a></p></blockquote><p>值传递（pass by value）是指在调用函数时将<strong>实际参数复制一份传递到函数</strong>中，这样在函数中如果对参数进行修改，将不会影响到实际参数。</p><p>引用传递（pass by reference）是指在调用函数时将<strong>实际参数</strong>的<strong>地址</strong>直接<strong>传递到函数</strong>中，那么在函数中对参数所进行的修改，将影响到实际参数。</p><table><thead><tr><th></th><th>值传递</th><th>引用传递</th></tr></thead><tbody><tr><td>根本区别</td><td>拷贝值</td><td>拷贝对象（对象引用改变，但指向的是同一对象）</td></tr><tr><td>所以</td><td>方法中无法改变原来的对象</td><td>方法中可以改变原来的对象（对象的属性…）</td></tr></tbody></table><blockquote><p>对象的属性(普通成员变量)：不包含静态成员变量（这个是属于类的），不包含常量（final修饰，因为不是变量，不可改变）</p></blockquote><p><strong>值传递</strong>(参数是基本类型)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 参数是基本类型 </span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    1 2    1 2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>引用传递</strong>（参数是引用类型）：类、数组</p><ul><li>引用类型 两值交换 也只能是 <code>内部元素或变量进行交换</code>，不是对象进行交换（这个是错误的，相当于赋值操作）</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Arg</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Data data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        data<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>a<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>data<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token function">swap</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>           System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>a<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>data<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 参数是引用类型</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Data data<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">int</span> tmp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>          tmp <span class="token operator">=</span> data<span class="token punctuation">.</span>a<span class="token punctuation">;</span>          data<span class="token punctuation">.</span>a <span class="token operator">=</span> data<span class="token punctuation">.</span>b<span class="token punctuation">;</span>          data<span class="token punctuation">.</span>b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">class</span> <span class="token class-name">Data</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    1 2    2 1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> str<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    str<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    1 2    2 1*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>两值交换 引用传递错误示例</strong></p><blockquote><p>错误示例1</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String a <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    String b <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    1 2    1 2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>错误示例2  <code>传入的是String类型 引用类型，但仍然不是内部元素或属性的值交换</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">;</span>    strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span>strs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>String a<span class="token punctuation">,</span> String b<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String tmp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>    a <span class="token operator">=</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    1 2    1 2*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 可变形参</title>
      <link href="/2020/07/28/3080.html"/>
      <url>/2020/07/28/3080.html</url>
      
        <content type="html"><![CDATA[<h3><span id="ke-bian-xing-can-varargs">可变形参（varargs）</span><a href="#ke-bian-xing-can-varargs" class="header-anchor">.</a></h3><p><code>JDK1.5</code></p><p>编译器认为：<code>String[] arr   ==   String ... arr</code> </p><ul><li><code>String[]</code> 做形参只能传入 数组</li><li><code>String...</code>做形参可以传入数组，无参，有个数变化的参数，但是只能有一个，且在参数列表的末尾</li><li>参数传递很多时或者个数不固定，但参数类型一致时，可以使用可变参数</li><li>提倡尽量不用可变参数编程</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    String<span class="token punctuation">[</span><span class="token punctuation">]</span> strs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"测试"</span><span class="token punctuation">,</span><span class="token string">"可变形参"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token function">printArg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以不传参 strs.length = 0</span>    <span class="token function">printArg</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可以传数组</span>    <span class="token function">printArg</span><span class="token punctuation">(</span><span class="token string">"String ... "</span><span class="token punctuation">,</span><span class="token string">"测试"</span><span class="token punctuation">,</span><span class="token string">"可变形参"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可传多个参数</span>    <span class="token function">printArg</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// strs = null</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">printArg</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>strs<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>strs <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> strs<span class="token punctuation">.</span>length <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>strs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"有传入参数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有传入参数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>                                                                           <span class="token punctuation">}</span><span class="token comment" spellcheck="true">/*    没有传入参数    [测试, 可变形参]    有传入参数    [String ... , 测试, 可变形参]    有传入参数    没有传入参数*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- jvm中内存存储的数据</title>
      <link href="/2020/07/27/54168.html"/>
      <url>/2020/07/27/54168.html</url>
      
        <content type="html"><![CDATA[<p><strong>堆heap :</strong> 将new出来的结构(对象和数组)都放在堆空间里，包含对象里面的属性（非static）</p><p><strong>方法区：</strong>类的加载信息、常量池、静态域</p><p><strong>栈stack（java中提到的栈）：</strong>JVM中的虚拟机栈，局部变量都在这里面</p>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 面向对象</title>
      <link href="/2020/07/27/20336.html"/>
      <url>/2020/07/27/20336.html</url>
      
        <content type="html"><![CDATA[<h2><span id="mian-xiang-dui-xiang">面向对象</span><a href="#mian-xiang-dui-xiang" class="header-anchor">.</a></h2><h3><span id="yi-mian-xiang-guo-cheng-pop-yu-mian-xiang-dui-xiang-oop">一、面向过程（POP）与 面向对象（OOP）</span><a href="#yi-mian-xiang-guo-cheng-pop-yu-mian-xiang-dui-xiang-oop" class="header-anchor">.</a></h3><ul><li>面向过程<ul><li>强调的是 功能行为</li><li>以函数为最小单位</li><li>考虑怎么做</li></ul></li><li>面向对象<ul><li>强调的是 具备了功能的对象</li><li>以类/对象为最小单位</li><li>考虑谁来做（知道怎么做）</li></ul></li></ul><h3><span id="er-mian-xiang-dui-xiang-de-san-da-te-zheng">二、面向对象的三大特征</span><a href="#er-mian-xiang-dui-xiang-de-san-da-te-zheng" class="header-anchor">.</a></h3><h4><span id="1-feng-zhuang">1、封装</span><a href="#1-feng-zhuang" class="header-anchor">.</a></h4><h4><span id="2-ji-cheng">2、继承</span><a href="#2-ji-cheng" class="header-anchor">.</a></h4><h4><span id="3-duo-tai">3、多态</span><a href="#3-duo-tai" class="header-anchor">.</a></h4><h3><span id="san-lei-he-dui-xiang">三、类和对象</span><a href="#san-lei-he-dui-xiang" class="header-anchor">.</a></h3><ul><li><strong>类</strong>是一类事物的描述，是抽象的、概念上的定义（如 人）</li><li><strong>对象</strong>是实际存在的该类事物的每个个体，也称<strong>实例</strong>（如 某个具体的人，比如马云）</li><li>万物接对象</li></ul><h4><span id="1-lei-de-she-ji">1、类的设计</span><a href="#1-lei-de-she-ji" class="header-anchor">.</a></h4><ul><li>设计类，就是设计类的成员</li><li>成员：成员变量（属性），成员方法（行为）</li><li><strong>成员变量 = 属性 = field = 域 = 字段</strong></li><li><strong>方法 = 成员方法 = 函数 = method</strong></li></ul><h4><span id="2-shu-xing-amp-ju-bu-bian-liang">2、属性 &amp; 局部变量</span><a href="#2-shu-xing-amp-ju-bu-bian-liang" class="header-anchor">.</a></h4><h5><span id="xiang-tong-dian"><strong>相同点</strong></span><a href="#xiang-tong-dian" class="header-anchor">.</a></h5><ul><li>定义变量格式相同</li><li>先声明，后使用</li><li>变量都有对应的作用域</li></ul><h5><span id="bu-tong-dian"><strong>不同点</strong></span><a href="#bu-tong-dian" class="header-anchor">.</a></h5><ul><li>在类中声明位置不同<ul><li>属性直接定义在class{}里，不在方法中</li><li>局部变量声明在方法内，方法形参，构造器形参，构造器中的局部变量</li></ul></li><li>属性可以有权限修饰符，局部变量不同使用</li><li>默认初始化值<ul><li>属性有初始化值</li><li>局部变量没有，需要显式赋值<ul><li>形参在调用时赋值</li></ul></li></ul></li></ul><h4><span id="3-fang-fa">3、方法</span><a href="#3-fang-fa" class="header-anchor">.</a></h4><ul><li>方法中不能定义方法</li></ul><h3><span id="si-zu-cheng-lei-de-wu-ge-jie-gou">四、组成类的五个结构</span><a href="#si-zu-cheng-lei-de-wu-ge-jie-gou" class="header-anchor">.</a></h3><ul><li>属性</li><li>方法</li><li>构造器</li><li>代码块</li><li>内部类</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- Arrays工具类</title>
      <link href="/2020/07/27/46990.html"/>
      <url>/2020/07/27/46990.html</url>
      
        <content type="html"><![CDATA[<h2><span id="arrays-gong-ju-lei">Arrays工具类</span><a href="#arrays-gong-ju-lei" class="header-anchor">.</a></h2><p><code>java.util.Arrays</code></p><h3><span id="1-equals-arr1-arr2">1、<code>equals(arr1,arr2)</code></span><a href="#1-equals-arr1-arr2" class="header-anchor">.</a></h3><blockquote><p>判断两个数组内容是否相等</p></blockquote><h4><span id="di-ceng-yuan-ma">底层源码</span><a href="#di-ceng-yuan-ma" class="header-anchor">.</a></h4><p>（以参数类型int,Object为例）</p><pre class="line-numbers language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">==</span>a2<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">==</span>null <span class="token operator">||</span> a2<span class="token operator">==</span>null<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token keyword">int</span> length <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>a2<span class="token punctuation">.</span>length <span class="token operator">!=</span> length<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> a2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">==</span>a2<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">==</span>null <span class="token operator">||</span> a2<span class="token operator">==</span>null<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a2<span class="token punctuation">.</span>length <span class="token operator">!=</span> length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Object o1 <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        Object o2 <span class="token operator">=</span> a2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>o1<span class="token operator">==</span>null <span class="token operator">?</span> o2<span class="token operator">==</span>null <span class="token operator">:</span> o1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>o2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-fill-arr-value-and-tostring">2、<code>fill(arr,value)</code>and <code>toString()</code></span><a href="#2-fill-arr-value-and-tostring" class="header-anchor">.</a></h3><blockquote><p>将指定值填充到数组之中</p></blockquote><blockquote><p>按<code>[ 元素1+ ... + 元素n]</code>  格式打印数组 </p></blockquote><h4><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java">String<span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [value, value, value]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-sort-arr">3、<code>sort(arr)</code></span><a href="#3-sort-arr" class="header-anchor">.</a></h3><blockquote><p>对数组排序：快速排序</p></blockquote><h4><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//[1, 2, 3, 5]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-binarysearch-arr-key">4、<code>binarySearch(arr,key)</code></span><a href="#4-binarysearch-arr-key" class="header-anchor">.</a></h3><blockquote><p>二分查找</p></blockquote><h4><span id="ce-shi">测试</span><a href="#ce-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到了 返回值 为索引 3</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到了 返回值 为索引 1</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//找到了 返回值 为索引 0</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//没找到 返回值 &lt; 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id>………</span><a href="#" class="header-anchor">.</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-8-Bean的自动装配</title>
      <link href="/2020/07/27/31905.html"/>
      <url>/2020/07/27/31905.html</url>
      
        <content type="html"><![CDATA[<h2><span id="bean-de-zi-dong-zhuang-pei">Bean的自动装配</span><a href="#bean-de-zi-dong-zhuang-pei" class="header-anchor">.</a></h2><ul><li>自动装配是Spring满足bean依赖一种方式</li><li>Spring会在上下文中自动寻找，并自动给bean装配属性</li></ul><h4><span id="zai-spring-zhong-you-san-chong-zhuang-pei-fang-shi">在Spring中有三种装配方式</span><a href="#zai-spring-zhong-you-san-chong-zhuang-pei-fang-shi" class="header-anchor">.</a></h4><ul><li>在xml中装配</li><li>在java中装配</li><li><strong>隐式的自动装配（autowired）</strong>：将Bean<strong>自动</strong>注入到另一个Bean中</li></ul><p><strong>目录结构</strong></p><p><img src="/2020/07/27/31905/image-20200803105549729.png" alt></p><h3><span id="huan-jing-da-jian">环境搭建</span><a href="#huan-jing-da-jian" class="header-anchor">.</a></h3><h4><span id="1-shi-ti-lei">1、实体类</span><a href="#1-shi-ti-lei" class="header-anchor">.</a></h4><p><strong>Cat</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"miao~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Dog</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wang~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>People</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    Cat cat<span class="token punctuation">;</span>    Dog dog<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        cat<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-beans-xml">2、<code>beans.xml</code></span><a href="#2-beans-xml" class="header-anchor">.</a></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--    &lt;bean id="people" class="pojo.People">--></span><span class="token comment" spellcheck="true">&lt;!--        &lt;property name="name" value="小伙子"/>--></span><span class="token comment" spellcheck="true">&lt;!--        &amp;lt;!&amp;ndash; 手动加载bean &amp;ndash;&amp;gt;--></span><span class="token comment" spellcheck="true">&lt;!--        &lt;property name="cat" ref="cat"/>--></span><span class="token comment" spellcheck="true">&lt;!--        &lt;property name="dog" ref="dog"/>--></span><span class="token comment" spellcheck="true">&lt;!--    &lt;/bean>--></span>    <span class="token comment" spellcheck="true">&lt;!--  自动装载  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.People<span class="token punctuation">"</span></span> <span class="token attr-name">autowire</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>byName<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>小伙子<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--            byName == 会自动在容器上下文中扫描,和自己对象set方法名中set后的单词匹配的 bean的id,要保证 id唯一, id是全小写的,然后自动加载            byType == 会自动在容器上下文中扫描,和自己对象属性的类型匹配的 bean的class,要保证 class的唯一,需要对应的set方法,然后自动加载        --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>byName == 会自动在容器上下文中扫描,和自己对象set方法名中set后的单词匹配的 bean的id,要保证 <strong>id唯一</strong>, <strong>id是全小写的</strong>,然后自动加载（<strong>bean中的id 和 class 都要存在</strong>）</li><li>byType == 会自动在容器上下文中扫描,和自己对象属性的类型匹配的 bean的class,要保证 <strong>class的唯一</strong>,需要对应的set方法,然后自动加载 （<strong>bean中的class要存在</strong>）</li></ul><h4><span id="3-ce-shi-lei">3、测试类</span><a href="#3-ce-shi-lei" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        People people <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"people"</span><span class="token punctuation">,</span> People<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        people<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-ce-shi-jie-guo">4、测试结果</span><a href="#4-ce-shi-jie-guo" class="header-anchor">.</a></h4><p><img src="/2020/07/27/31905/image-20200803105954914.png" alt></p><h3><span id="zhu-jie-shi-xian-zi-dong-jia-zai">注解实现自动加载</span><a href="#zhu-jie-shi-xian-zi-dong-jia-zai" class="header-anchor">.</a></h3><p><code>JDK1.5</code> 支持注解</p><p><code>spring2.5</code>支持注解</p><h4><span id="kai-qi-zhu-jie-beans-xml">开启注解（beans.xml）</span><a href="#kai-qi-zhu-jie-beans-xml" class="header-anchor">.</a></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 自动装载注解支持 开启 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>annotation-config</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cat<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Cat<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dog<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Dog<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>people<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.People<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="shi-yong-zhu-jie-autowired">使用注解 <code>@Autowired</code></span><a href="#shi-yong-zhu-jie-autowired" class="header-anchor">.</a></h4><ul><li>在需要装载的属性前 添加 <code>@Autowired</code>，也可以放在set方法前</li><li>使用了这个注解，可以不用编写set方法，前提是你这个自动装载的ioc容器中存在，且<strong>符合byType</strong>，和<strong>符合byName</strong></li><li><code>@Autowired</code><ul><li>先去容器中找 是否存在 与属性 类型一致的<strong>所有</strong> <code>Bean</code>，即<strong><code>Bean</code>的<code>class</code> 与 复杂属性的类型相同（byType）</strong>；</li><li>如果<strong>只存在一个 这样的<code>Bean</code></strong>，<strong>就不管<code>Bean</code>的<code>id</code>是啥，就可以直接匹配；</strong></li><li>否则，就会在<strong>这些</strong><code>Bean</code>中找与属性名相同的 <code>Bean</code>，即<strong><code>Bean</code>的<code>id</code>与 复杂属性的名字相同（byName）</strong></li><li><mark><strong>为啥说是先 byType：如果你在bean中只保留一个class属性，可以正常运行，但是，只保留一个id属性，则会报错</strong></mark></li></ul></li></ul><p><img src="/2020/07/27/31905/image-20200803111245640.png" alt></p><h4><span id="tuo-zhan">拓展</span><a href="#tuo-zhan" class="header-anchor">.</a></h4><h5><span id="1-nullable">1、<code>@Nullable</code></span><a href="#1-nullable" class="header-anchor">.</a></h5><p> 字段标记这个注解，可以为空</p><h5><span id="2-autowired-required-false">2、<code>@Autowired(required = false)</code></span><a href="#2-autowired-required-false" class="header-anchor">.</a></h5><p> 表示允许该<code>bean</code>在容器中不存在</p><p><img src="/2020/07/27/31905/image-20200803120704143.png" alt></p><p><img src="/2020/07/27/31905/image-20200803120936812.png" alt></p><h5><span id="3-qualifier-value-quot-quot">3、<code>@Qualifier(value=&quot;&quot;)</code></span><a href="#3-qualifier-value-quot-quot" class="header-anchor">.</a></h5><p>我们知道 <code>@Autowired</code> 是通过 在 容器中寻找 （先byType后byName）相应的<code>bean</code>的，但是<strong>如果多个<code>bean</code>的<code>class</code>属性存在相同的，且<code>id</code>与属性名不同，就会报错</strong>，那么我们就可以使用<code>@Qualifier(value=&quot;&quot;)</code>配合 <code>@Autowired</code> 的使用 ；在让<code>value</code> = “<code>bean</code>中<code>id</code>的值”</p><p><img src="/2020/07/27/31905/image-20200803123614838.png" alt></p><p><img src="/2020/07/27/31905/image-20200803123749095.png" alt></p><h5><span id="4-resource">4、<code>@Resource</code></span><a href="#4-resource" class="header-anchor">.</a></h5><p>与 <code>@Autowired</code>相同，都是用于自动装载<code>Bean</code>的（将Bean<strong>自动</strong>注入到另一个Bean中）</p><ul><li><p>只不过</p><ul><li><code>@Resource</code>默认是按<strong>byName</strong>注入，如果没有找到，就按类型找，<code>@Autowired</code>是按byType注入</li><li><code>@Resource(name=&quot;&quot;)</code> = <code>@Autowired</code> + <code>@Qualifier(value=&quot;&quot;)</code> </li></ul></li><li><p>在 <code>jdk11</code>之后由于移除了<code>javax的扩展</code>所以不能使用<code>@Resource</code>，但是可以导入依赖</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>javax.annotation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>javax.annotation-api<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.3.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><a href="https://blog.csdn.net/xsp_happyboy/article/details/78985300?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param" target="_blank" rel="noopener">https://blog.csdn.net/xsp_happyboy/article/details/78985300?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.channel_param</a></p></blockquote></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-7-Bean作用域</title>
      <link href="/2020/07/27/53545.html"/>
      <url>/2020/07/27/53545.html</url>
      
        <content type="html"><![CDATA[<h2><span id="bean-zuo-yong-yu">Bean作用域</span><a href="#bean-zuo-yong-yu" class="header-anchor">.</a></h2><table><thead><tr><th align="left">Scope</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-singleton" target="_blank" rel="noopener">singleton</a></td><td align="left">(Default) Scopes a single bean definition to a single object instance for each Spring IoC container. (默认情况下)将每个Spring IoC容器的单个bean定义定位到单个对象实例。</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-prototype" target="_blank" rel="noopener">prototype</a></td><td align="left">Scopes a single bean definition to any number of object instances.将单个bean定义作用于任意数量的对象实例。</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-request" target="_blank" rel="noopener">request</a></td><td align="left">Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.将单个bean定义定位到单个HTTP请求的生命周期。也就是说，每个HTTP请求都有它自己的bean实例，该实例是在单个bean定义的背面创建的。仅在感知web的Spring“ApplicationContext”上下文中有效。</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-session" target="_blank" rel="noopener">session</a></td><td align="left">Scopes a single bean definition to the lifecycle of an HTTP <code>Session</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.将单个bean定义作用于HTTP“会话”的生命周期。仅在感知web的Spring“ApplicationContext”上下文中有效。</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/core.html#beans-factory-scopes-application" target="_blank" rel="noopener">application</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>ServletContext</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.将单个bean定义作用于“ServletContext”的生命周期。仅在感知web的Spring“ApplicationContext”上下文中有效。</td></tr><tr><td align="left"><a href="https://docs.spring.io/spring/docs/5.2.8.RELEASE/spring-framework-reference/web.html#websocket-stomp-websocket-scope" target="_blank" rel="noopener">websocket</a></td><td align="left">Scopes a single bean definition to the lifecycle of a <code>WebSocket</code>. Only valid in the context of a web-aware Spring <code>ApplicationContext</code>.将单个bean定义作用于“WebSocket”的生命周期。仅在感知web的Spring“ApplicationContext”上下文中有效。</td></tr></tbody></table><p>1、单例模式(<code>singleton</code> ：默认)</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2、原型模式(<code>prototype</code>)：每次从容器中getBean，获取的都是一个新对象</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3、其余的request，session，application只能在web开发中使用到</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-6-依赖注入</title>
      <link href="/2020/07/27/28026.html"/>
      <url>/2020/07/27/28026.html</url>
      
        <content type="html"><![CDATA[<h2><span id="yi-lai-zhu-ru">依赖注入</span><a href="#yi-lai-zhu-ru" class="header-anchor">.</a></h2><p><strong>目录结构</strong></p><p><img src="/2020/07/27/28026/image-20200802211405453.png" alt></p><h3><span id="1-gou-zao-qi-zhu-ru">1、构造器注入</span><a href="#1-gou-zao-qi-zhu-ru" class="header-anchor">.</a></h3><h4><span id="zhi-jie-tong-guo-can-shu-ming-tui-jian-huan-you-liang-chong-suo-yin-he-lei-xing">直接通过参数名(推荐) 还有两种（索引，和类型）</span><a href="#zhi-jie-tong-guo-can-shu-ming-tui-jian-huan-you-liang-chong-suo-yin-he-lei-xing" class="header-anchor">.</a></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--按名字 beans.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>liuyou<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-setter-zhu-ru-chong-dian">2、setter注入（重点）</span><a href="#2-setter-zhu-ru-chong-dian" class="header-anchor">.</a></h3><ul><li><strong>依赖注入：set注入</strong><ul><li><strong>依赖</strong>：bean对象的创建依赖容器</li><li><strong>注入</strong>：bean对象中所有属性，由容器来注入</li></ul></li></ul><h4><span id="huan-jing-da-jian">环境搭建</span><a href="#huan-jing-da-jian" class="header-anchor">.</a></h4><h5><span id="1-beans-xml">1.<code>beans.xml</code></span><a href="#1-beans-xml" class="header-anchor">.</a></h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="2-shi-ti-lei">2.实体类</span><a href="#2-shi-ti-lei" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//value</span>    <span class="token keyword">private</span> Address address<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ref 复杂类型</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> books<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//array</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> hobbies<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//list</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> card<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//map</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> games<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//set</span>    <span class="token keyword">private</span> Properties info<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//properties</span>    <span class="token keyword">private</span> String wife<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Data</span><span class="token keyword">class</span> <span class="token class-name">Address</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String address<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="3-setter-zhu-ru-fang-shi-beans-xml-zhong-beans-biao-qian-xia">3.<code>setter</code>注入方式（beans.xml中beans标签下）</span><a href="#3-setter-zhu-ru-fang-shi-beans-xml-zhong-beans-biao-qian-xia" class="header-anchor">.</a></h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- setter注入方式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.普通值value --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>刘民锴<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.bean注入 ref --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.array注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>计算机网络<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>计算机操作系统<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>数据结构与算法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.list注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hobbies<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>爱编程<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>爱漫画<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 5.map注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>card<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>身份证<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1919199191919<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>银行卡<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1919199191919<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 6.Set注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>games<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>欢乐斗地主<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>王者荣耀<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>中国象棋<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 7.prop注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>info<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>性别<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 8.null注入 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wife<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>null</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Address<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>address<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>武汉文华学院<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="4-ce-shi-lei">4.测试类</span><a href="#4-ce-shi-lei" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Student student <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"student"</span><span class="token punctuation">,</span> Student<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="5-ce-shi-jie-guo">5.测试结果</span><a href="#5-ce-shi-jie-guo" class="header-anchor">.</a></h5><p><img src="/2020/07/27/28026/image-20200803011542743.png" alt></p><h3><span id="3-qi-ta-fang-shi-zhu-ru">3、其他方式注入</span><a href="#3-qi-ta-fang-shi-zhu-ru" class="header-anchor">.</a></h3><ul><li><p>p-namespace（p命名空间注入）</p><ul><li><p>p（property，可直接注入属性的值）</p></li><li><pre><code>xmlns:p=&quot;http://www.springframework.org/schema/p&quot;</code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Student<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">p:</span>name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>刘民锴<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul><ul><li><p>c-namespace（c命名空间注入）</p><ul><li><p>c（constructor，可直接对<strong>有参构造器</strong>进行注入）</p></li><li><pre><code>xmlns:c=&quot;http://www.springframework.org/schema/c&quot;</code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>student<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Student<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">c:</span>constructorParam</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-5-Spring配置</title>
      <link href="/2020/07/27/20674.html"/>
      <url>/2020/07/27/20674.html</url>
      
        <content type="html"><![CDATA[<h2><span id="spring-pei-zhi">Spring配置</span><a href="#spring-pei-zhi" class="header-anchor">.</a></h2><h3><span id="1-bie-ming-alias">1、别名（Alias）</span><a href="#1-bie-ming-alias" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>alias</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变量名<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>别名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>变量名<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>类的全限定名<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3><span id="2-bean-pei-zhi">2、Bean配置</span><a href="#2-bean-pei-zhi" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--Bean属性：    id：bean的唯一标识符，也就是相当于我们学的对象名    class：bean对象对应的全限定名，包名 + 类名    name：别名，但是可以同时取多个别名 空格逗号分号都可作为分隔符    scope：实现方式（默认单例）    ...--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>u user1,user2;user3<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>singleton<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-import">3、import</span><a href="#3-import" class="header-anchor">.</a></h3><blockquote><p>把多个<code>bean.xml</code>导入一个总的<code>applicationContext.xml</code>中，在加载配置文件时，只用加载<code>applicationContext.xml</code>即可</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--bean1.xml--></span><span class="token comment" spellcheck="true">&lt;!--bean2.xml--></span><span class="token comment" spellcheck="true">&lt;!--applicationContext.xml 中导入两个xml文件--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bean1.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bean2.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-4-IOC创建对象方式</title>
      <link href="/2020/07/27/49083.html"/>
      <url>/2020/07/27/49083.html</url>
      
        <content type="html"><![CDATA[<h2><span id="ioc-chuang-jian-dui-xiang-fang-shi">IOC创建对象方式</span><a href="#ioc-chuang-jian-dui-xiang-fang-shi" class="header-anchor">.</a></h2><p><strong>目录结构</strong></p><p><img src="/2020/07/27/49083/image-20200802200404260.png" alt></p><h3><span id="1-shi-yong-wu-can-gou-zao-chuang-jian-dui-xiang-mo-ren">1、使用无参构造创建对象（默认）</span><a href="#1-shi-yong-wu-can-gou-zao-chuang-jian-dui-xiang-mo-ren" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--默认无参 beans.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-shi-yong-you-can-gou-zao-chuang-jian-dui-xiang-gou-zao-qi-zhu-ru">2、使用有参构造创建对象(构造器注入)</span><a href="#2-shi-yong-you-can-gou-zao-chuang-jian-dui-xiang-gou-zao-qi-zhu-ru" class="header-anchor">.</a></h3><h4><span id="1-suo-yin-fu-zhi">1、索引赋值</span><a href="#1-suo-yin-fu-zhi" class="header-anchor">.</a></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--按索引 beans.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lmk<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">index</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-lei-xing-pi-pei-bu-jian-yi-ru-guo-duo-ge-can-shu-lei-xing-xiang-tong-dan-shi-ta-hui-gen-ju-shun-xu-qu-jin-xing-pi-pei">2、类型匹配（不建议，如果多个参数类型相同？但是他会根据顺序去进行匹配）</span><a href="#2-lei-xing-pi-pei-bu-jian-yi-ru-guo-duo-ge-can-shu-lei-xing-xiang-tong-dan-shi-ta-hui-gen-ju-shun-xu-qu-jin-xing-pi-pei" class="header-anchor">.</a></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--按类型 beans.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>liuminkai<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.lang.String<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mima<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="3-zhi-jie-tong-guo-can-shu-ming-tui-jian">3、直接通过参数名(推荐)</span><a href="#3-zhi-jie-tong-guo-can-shu-ming-tui-jian" class="header-anchor">.</a></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--按名字 beans.xml--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>3<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>liuyou<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="zong-jie">总结：</span><a href="#zong-jie" class="header-anchor">.</a></h3><ul><li><p><strong>在配置文件加载的时候，容器中管理的对象就已经初始化了</strong></p><p><img src="/2020/07/27/49083/image-20200802201143432.png" alt="1"></p><p><img src="/2020/07/27/49083/image-20200802201255177.png" alt="2"></p><p><img src="/2020/07/27/49083/image-20200802201623252.png" alt="3"></p></li><li><p>使用<strong><code>context.getBean()</code></strong>只是从容器中获取已经创建好的对象</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-3-第一个Spring程序</title>
      <link href="/2020/07/27/16975.html"/>
      <url>/2020/07/27/16975.html</url>
      
        <content type="html"><![CDATA[<h2><span id="hellospring">HelloSpring</span><a href="#hellospring" class="header-anchor">.</a></h2><p><strong>目录结构</strong></p><p><img src="/2020/07/27/16975/image-20200727105835826.png" alt></p><h3><span id="huan-jing-da-jian-ji-shi-xian">环境搭建及实现</span><a href="#huan-jing-da-jian-ji-shi-xian" class="header-anchor">.</a></h3><ol><li>导入依赖</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.新建实体类 <code>Hello</code></p><p>(这里使用<strong>Lombok</strong>构建实体类)</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>新建<code>beans.xml</code>文件</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        https://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--使用Spring来创建对象，在Spring这些都成为Bean        java new 对象写法            类型 变量名 = new 类型();        Spring new 对象写法            id = 变量名            class = new的对象类型            property 为属性设置一个值 name是属性名 value是基本类型、String类型的具体值 ref是引用Spring容器中已经创建好的对象(id对应的值)     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Hello<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Hello,Spring!<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>编写测试</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//获取spring的上下文对象</span>        ApplicationContext context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClassPathXmlApplicationContext</span><span class="token punctuation">(</span><span class="token string">"beans.xml"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//从上下文中获取Hello对象</span>        Hello hello <span class="token operator">=</span> <span class="token punctuation">(</span>Hello<span class="token punctuation">)</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>结果展示</li></ol><p><img src="/2020/07/27/16975/image-20200727111719999.png" alt></p><h3><span id="xiao-jie">小结</span><a href="#xiao-jie" class="header-anchor">.</a></h3><ul><li>我们并没有去手动new对象</li><li>对象是Spring创建的，其属性也是有Spring容器设置的</li><li>Spring就是那个第三方</li></ul><p><strong>控制</strong>：谁来控制对象的创建，传统应用程序的对象是由程序本身控制创建的，使用Spring后，对象是由Spring创建的</p><p><strong>反转</strong>：程序本身不创建对象，而变成被动的接收对象。</p><p><strong>依赖注入</strong>：就是利用set方法来进行注入的</p><p>IOC是一种编程思想，由主动的编程变成被动的接收</p><p><mark>对象由Spring创建，管理，装配</mark></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-2-IOC</title>
      <link href="/2020/07/26/20592.html"/>
      <url>/2020/07/26/20592.html</url>
      
        <content type="html"><![CDATA[<h2><span id="ioc-kong-zhi-fan-zhuan">IOC 控制反转</span><a href="#ioc-kong-zhi-fan-zhuan" class="header-anchor">.</a></h2><p><strong>目录结构</strong></p><p><img src="/2020/07/26/20592/image-20200726221521084.png" alt></p><h3><span id="1-ioc-li-lun-tui-dao">1、IOC理论推导</span><a href="#1-ioc-li-lun-tui-dao" class="header-anchor">.</a></h3><h4><span id="yuan-lai-ye-wu-dao-xie-fa"><strong>原来业务Dao写法</strong></span><a href="#yuan-lai-ye-wu-dao-xie-fa" class="header-anchor">.</a></h4><ol><li><p>UserDao接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserDao</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>UserDaoImpl接口实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserDaoImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserDao</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始UserDao"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>UserService业务接口</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>UserServiceImpl业务实现</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>如果是原来的编写方式，在<code>UserServiceImpl</code>写死<code>UserDao</code>的实例化，你会发现</p><p>在用户想要更改业务需求时，我们就必须在<code>UserSericeImpl</code>中做响应的修改,导致需要频繁的更改原代码,当向这样的类很多时，就要改动很多源代码</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    UserDao userDao = new UserDaoImpl();</span>    <span class="token comment" spellcheck="true">// 有业务需求变化 必须 要修改原代码</span>    <span class="token keyword">private</span> UserDao userDaoMysql <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserDaoMySQLImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        userDao.getUser();</span>        userDaoMysql<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="shi-yong-ioc-de-si-xiang">使用IOC的思想</span><a href="#shi-yong-ioc-de-si-xiang" class="header-anchor">.</a></h4><p>：我们在<code>UserServiceImpl</code>中设置一个set方法，用于接收外界（用户…）传来的<code>UserDao</code>对象，对<code>userDao</code>进行初始化，这样即使业务有所修改，也不会对<code>UserServiceImpl</code>进行修改</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> UserDao userDao<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        userDao<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUserDao</span><span class="token punctuation">(</span>UserDao userDao<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>userDao <span class="token operator">=</span> userDao<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="dui-bi">对比</span><a href="#dui-bi" class="header-anchor">.</a></h4><ul><li>之前，程序是<strong>主动</strong>创建对象(实例化写死)，控制权在<strong>程序员</strong>手上（<strong>程序员</strong>需要根据业务需求变化更改代码）<ul><li>修改业务需要改动原代码（代码量大，不易维护）</li></ul></li><li>使用功能Set注入之后，程序不再有主动性，而是<strong>被动</strong>的接收对象，控制权在<strong>用户</strong>手上（给<strong>用户</strong>一个接口，用户可以自己调用相应的业务功能）<ul><li>提供set方法接收外界对象，无需改动原代码</li></ul></li></ul><blockquote><p>这种思想，从本质上解决了问题，我们程序员<strong>不用再去管理对象的创建</strong>了。<strong>系统耦合性大大降低</strong>，可以更加专注的在业务的实现上，这是<mark><strong>IOC的原型</strong></mark></p></blockquote><h3><span id="2-ioc-ben-zhi">2、IOC本质</span><a href="#2-ioc-ben-zhi" class="header-anchor">.</a></h3><blockquote><p>控制反转IoC（Inversion of Control），是一种设计思想，DI（依赖注入）是实现IoC的一种方法，也有人认为DI是IOC的另一种说法。没有Ioc的程序中，我们使用面向对象编程，对象的创建与对象间的依赖关系完全硬编码在程序中，对象的创建有程序自己控制，控制反转后将对象的创建转移给第三方。获取依赖对象的方式反转了。</p></blockquote><ul><li><strong>IoC 是Spring框架的核心内容</strong></li><li>采用XML方式配置Bean的时候，Bean的定义信息是和实现分离的，而采用注解的方式可以把两者合为一体，Bean的定义信息直接以注解的形式定义在实现类中，从而达到了零配置的目的。</li><li><strong>控制反转是一种通过描述（XML或注解）并通过第三方去生产或获取特定对象的方式。在Spring中实现控制反转的是IOC容器，其实现方法是依赖注入（Dependency Injection，DI）</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记-1-简介</title>
      <link href="/2020/07/26/45718.html"/>
      <url>/2020/07/26/45718.html</url>
      
        <content type="html"><![CDATA[<h2><span id="spring-jian-jie">Spring简介</span><a href="#spring-jian-jie" class="header-anchor">.</a></h2><ul><li><p><a href="https://baike.baidu.com/item/spring%E6%A1%86%E6%9E%B6/2853288?fr=aladdin" target="_blank" rel="noopener">Spring</a> ：春天 </p></li><li><p>Spring雏形：<a href="https://www.interface21.io/" target="_blank" rel="noopener">interface21框架</a></p></li><li><p>Spring框架 以 interface框架为基础，经过重新设计，并不断丰富其内涵，于2004年3月24日发布了1.0正式版</p></li><li><p>Rod Johnson – 创始人 – 音乐学博士</p></li><li><p><strong>为了解决解决企业应用开发的复杂性</strong></p></li><li><p><strong>一个轻量级控制反转(IoC)和面向切面(AOP)的容器框架</strong></p></li></ul><p><strong>SSH &amp; SSM</strong></p><table><thead><tr><th>SSH</th><th>SSM</th></tr></thead><tbody><tr><td>Strut2</td><td>SpringMVC</td></tr><tr><td>Spring</td><td>Spring</td></tr><tr><td>Hibernate（全自动）</td><td>MyBatis（半自动）</td></tr></tbody></table><blockquote><p>官网：<a href="https://spring.io/" target="_blank" rel="noopener">https://spring.io/</a></p></blockquote><p><strong>maven依赖</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-webmvc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-webmvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.springframework/spring-jdbc --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>5.2.7.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="you-dian">优点</span><a href="#you-dian" class="header-anchor">.</a></h3><ul><li>Spring是一个开源的免费的框架（容器）</li><li>Spring是一个轻量级，非入侵式（加入不会影响原来的程序）的框架</li><li><strong>控制反转（IOC）</strong></li><li><strong>面向切面编程（AOP）</strong></li><li>支持事务处理</li><li>对框架整合的支持</li></ul><p><strong><mark>Spring：一个轻量级,非侵入式的控制反转(IoC)和面向切面(AOP)的免费开源容器框架</mark></strong></p><h3><span id="ru-he-jian-hua-java-kai-fa">如何简化java开发</span><a href="#ru-he-jian-hua-java-kai-fa" class="header-anchor">.</a></h3><ul><li>基于POJO的轻量级和最小侵入性编程</li><li>通过IOC，依赖注入（DI） 和 面向接口实现松耦合</li><li>基于切面（AOP）和 惯例进行声明式编程</li><li>通过切面和模板减少样式代码</li></ul><h3><span id="zu-cheng">组成</span><a href="#zu-cheng" class="header-anchor">.</a></h3><blockquote><p>Spring 框架是一个分层架构，由 7 个定义良好的模块组成。Spring 模块构建在核心容器之上，核心容器定义了创建、配置和管理 bean 的方式</p></blockquote><p><img src="/2020/07/26/45718/spring_framework.gif" alt="Spring 框架图示"></p><p>组成 Spring 框架的每个模块（或组件）都可以单独存在，或者与其他一个或多个模块联合实现。每个模块的功能如下：</p><ul><li><strong>核心容器</strong> ：核心容器提供 Spring 框架的基本功能。核心容器的主要组件是 <code>BeanFactory</code>，它是工厂模式的实现。 <code>BeanFactory</code> 使用 <strong>控制反转</strong> （IOC） 模式将应用程序的配置和依赖性规范与实际的应用程序代码分开。</li><li><strong>Spring 上下文</strong> ：Spring 上下文是一个配置文件，向 Spring 框架提供上下文信息。Spring 上下文包括企业服务，例如 JNDI、EJB、电子邮件、国际化、校验和调度功能。</li><li><strong>Spring AOP</strong> ：通过配置管理特性，Spring AOP 模块直接将面向方面的编程功能集成到了 Spring 框架中。所以，可以很容易地使 Spring 框架管理的任何对象支持 AOP。Spring AOP 模块为基于 Spring 的应用程序中的对象提供了事务管理服务。通过使用 Spring AOP，不用依赖 EJB 组件，就可以将声明性事务管理集成到应用程序中。</li><li><strong>Spring DAO</strong> ：JDBC DAO 抽象层提供了有意义的异常层次结构，可用该结构来管理异常处理和不同数据库供应商抛出的错误消息。异常层次结构简化了错误处理，并且极大地降低了需要编写的异常代码数量（例如打开和关闭连接）。Spring DAO 的面向 JDBC 的异常遵从通用的 DAO 异常层次结构。</li><li><strong>Spring ORM</strong> ：Spring 框架插入了若干个 ORM 框架，从而提供了 ORM 的对象关系工具，其中包括 JDO、Hibernate 和 iBatis SQL Map。所有这些都遵从 Spring 的通用事务和 DAO 异常层次结构。</li><li><strong>Spring Web 模块</strong> ：Web 上下文模块建立在应用程序上下文模块之上，为基于 Web 的应用程序提供了上下文。所以，Spring 框架支持与 Jakarta Struts 的集成。Web 模块还简化了处理多部分请求以及将请求参数绑定到域对象的工作。</li><li><strong>Spring MVC 框架</strong> ：MVC 框架是一个全功能的构建 Web 应用程序的 MVC 实现。通过策略接口，MVC 框架变成为高度可配置的，MVC 容纳了大量视图技术，其中包括 JSP、Velocity、Tiles、iText 和 POI。</li></ul><p>Spring 框架的功能可以用在任何 J2EE 服务器中，大多数功能也适用于不受管理的环境。Spring 的核心要点是：支持不绑定到特定 J2EE 服务的可重用业务和数据访问对象。毫无疑问，这样的对象可以在不同 J2EE 环境 （Web 或 EJB）、独立应用程序、测试环境之间重用。</p><h3><span id="tuo-zhan">拓展</span><a href="#tuo-zhan" class="header-anchor">.</a></h3><ul><li>Spring Boot<ul><li>一个快速开发的脚手架</li><li>基于SpringBoot可以快速开发单个微服务</li><li>约定大于配置</li></ul></li><li>Spring Cloud<ul><li>基于SpringBoot实现</li></ul></li></ul><h3><span id="bi-duan">弊端</span><a href="#bi-duan" class="header-anchor">.</a></h3><ul><li>配置十分繁琐</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> ssm </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-13-缓存</title>
      <link href="/2020/07/26/46749.html"/>
      <url>/2020/07/26/46749.html</url>
      
        <content type="html"><![CDATA[<h2><span id="huan-cun">缓存</span><a href="#huan-cun" class="header-anchor">.</a></h2><blockquote><p>狂神笔记：没有做任何更改</p></blockquote><h3><span id="yi-jian-jie">一、简介</span><a href="#yi-jian-jie" class="header-anchor">.</a></h3><blockquote><p>查询  ：  连接数据库 ，耗资源！<br>                一次查询的结果，给他暂存在一个可以直接取到的地方！–&gt; 内存 ： 缓存</p><p>我们再次查询相同数据的时候，直接走缓存，就不用走数据库了</p></blockquote><ol><li><p>什么是缓存 [ Cache ]？</p><ul><li>存在内存中的临时数据。</li><li>将用户经常查询的数据放在缓存（内存）中，用户去查询数据就不用从磁盘上(关系型数据库数据文件)查询，从缓存中查询，从而提高查询效率，解决了高并发系统的性能问题。</li></ul></li><li><p>为什么使用缓存？</p><ul><li>减少和数据库的交互次数，减少系统开销，提高系统效率。</li></ul></li><li><p>什么样的数据能使用缓存？</p><ul><li><strong>经常查询并且不经常改变的数据</strong>。【可以使用缓存】</li></ul></li></ol><h3><span id="er-mybatis-huan-cun">二、Mybatis缓存</span><a href="#er-mybatis-huan-cun" class="header-anchor">.</a></h3><ul><li><p>MyBatis包含一个非常强大的查询缓存特性，它可以非常方便地定制和配置缓存。缓存可以极大的提升查询效率。</p></li><li><p>MyBatis系统中默认定义了两级缓存：<strong>一级缓存</strong>和<strong>二级缓存</strong></p><ul><li><p><strong>默认情况下，只有一级缓存开启</strong>。（SqlSession级别的缓存，也称为本地缓存）</p></li><li><p>二级缓存需要手动开启和配置，他是基于namespace级别的缓存。</p></li><li><p>为了提高扩展性，MyBatis定义了缓存接口Cache。我们可以通过实现Cache接口来自定义二级缓存</p></li></ul></li></ul><h3><span id="san-yi-ji-huan-cun">三、一级缓存</span><a href="#san-yi-ji-huan-cun" class="header-anchor">.</a></h3><ul><li>一级缓存也叫本地缓存：  SqlSession<ul><li>与数据库同一次会话期间查询到的数据会放在本地缓存中。</li><li>以后如果需要获取相同的数据，直接从缓存中拿，没必须再去查询数据库；</li></ul></li></ul><p>测试步骤：</p><ol><li>开启日志！</li><li>测试在一个Sesion中查询两次相同记录</li><li>查看日志输出</li></ol><p><img src="/2020/07/26/46749/1569983650437.png" alt="1569983650437"></p><p>缓存失效的情况：</p><ol><li><p>查询不同的东西</p></li><li><p>增删改操作，可能会改变原来的数据，所以必定会刷新缓存！</p><p><img src="/2020/07/26/46749/1569983952321.png" alt="1569983952321"></p></li><li><p>查询不同的Mapper.xml</p></li><li><p>手动清理缓存！</p><p><img src="/2020/07/26/46749/1569984008824.png" alt="1569984008824"></p></li></ol><p>小结：一级缓存默认是开启的，只在一次SqlSession中有效，也就是拿到连接到关闭连接这个区间段！</p><p>一级缓存就是一个Map。</p><h3><span id="si-er-ji-huan-cun">四、二级缓存</span><a href="#si-er-ji-huan-cun" class="header-anchor">.</a></h3><ul><li>二级缓存也叫全局缓存，一级缓存作用域太低了，所以诞生了二级缓存</li><li>基于namespace级别的缓存，一个名称空间，对应一个二级缓存；</li><li>工作机制<ul><li>一个会话查询一条数据，这个数据就会被放在当前会话的一级缓存中；</li><li>如果当前会话关闭了，这个会话对应的一级缓存就没了；但是我们想要的是，会话关闭了，一级缓存中的数据被保存到二级缓存中；</li><li>新的会话查询信息，就可以从二级缓存中获取内容；</li><li>不同的mapper查出的数据会放在自己对应的缓存（map）中；</li></ul></li></ul><p>步骤：</p><ol><li><p>开启全局缓存</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--显示的开启全局缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在要使用二级缓存的Mapper中开启</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在当前Mapper.xml中使用二级缓存 不写参数报错--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>也可以自定义参数</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在当前Mapper.xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>  <span class="token attr-name">eviction</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FIFO<span class="token punctuation">"</span></span>       <span class="token attr-name">flushInterval</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>60000<span class="token punctuation">"</span></span>       <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>512<span class="token punctuation">"</span></span>       <span class="token attr-name">readOnly</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><ol><li><p>问题:我们需要将<strong>实体类序列化</strong>！否则就会报错！</p><pre><code>Caused by: java.io.NotSerializableException: com.kuang.pojo.User</code></pre></li></ol></li></ol><p>小结：</p><ul><li><strong>只要开启了二级缓存，在同一个Mapper下就有效</strong></li><li><strong>所有的数据都会先放在一级缓存中；</strong></li><li><strong>只有当会话提交，或者关闭的时候，才会提交到二级缓冲中！</strong></li></ul><h3><span id="13-5-huan-cun-yuan-li">13.5、缓存原理</span><a href="#13-5-huan-cun-yuan-li" class="header-anchor">.</a></h3><p><img src="/2020/07/26/46749/1569985541106.png" alt="1569985541106"></p><h3><span id="13-6-zi-ding-yi-huan-cun-ehcache">13.6、自定义缓存-ehcache</span><a href="#13-6-zi-ding-yi-huan-cun-ehcache" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml">Ehcache是一种广泛使用的开源Java分布式缓存。主要面向通用缓存<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>要在程序中使用ehcache，先要导包！</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.mybatis.caches/mybatis-ehcache --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.mybatis.caches<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-ehcache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在mapper中指定使用我们的ehcache缓存实现！</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--在当前Mapper.xml中使用二级缓存--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.caches.ehcache.EhcacheCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>ehcache.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ehcache</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>noNamespaceSchemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://ehcache.org/ehcache.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">updateCheck</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--       diskStore：为缓存路径，ehcache分为内存和磁盘两级，此属性定义磁盘的缓存位置。参数解释如下：       user.home – 用户主目录       user.dir  – 用户当前工作目录       java.io.tmpdir – 默认临时文件路径     --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>diskStore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./tmpdir/Tmp_EhCache<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defaultCache</span>            <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span>            <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>259200<span class="token punctuation">"</span></span>            <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>cache</span>            <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cloud_user<span class="token punctuation">"</span></span>            <span class="token attr-name">eternal</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">maxElementsInMemory</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>5000<span class="token punctuation">"</span></span>            <span class="token attr-name">overflowToDisk</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">diskPersistent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToIdleSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>            <span class="token attr-name">timeToLiveSeconds</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1800<span class="token punctuation">"</span></span>            <span class="token attr-name">memoryStoreEvictionPolicy</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LRU<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--       defaultCache：默认缓存策略，当ehcache找不到定义的缓存时，则使用这个缓存策略。只能定义一个。     --></span>    <span class="token comment" spellcheck="true">&lt;!--      name:缓存名称。      maxElementsInMemory:缓存最大数目      maxElementsOnDisk：硬盘最大缓存个数。      eternal:对象是否永久有效，一但设置了，timeout将不起作用。      overflowToDisk:是否保存到磁盘，当系统当机时      timeToIdleSeconds:设置对象在失效前的允许闲置时间（单位：秒）。仅当eternal=false对象不是永久有效时使用，可选属性，默认值是0，也就是可闲置时间无穷大。      timeToLiveSeconds:设置对象在失效前允许存活时间（单位：秒）。最大时间介于创建时间和失效时间之间。仅当eternal=false对象不是永久有效时使用，默认是0.，也就是对象存活时间无穷大。      diskPersistent：是否缓存虚拟机重启期数据 Whether the disk store persists between restarts of the Virtual Machine. The default value is false.      diskSpoolBufferSizeMB：这个参数设置DiskStore（磁盘缓存）的缓存区大小。默认是30MB。每个Cache都应该有自己的一个缓冲区。      diskExpiryThreadIntervalSeconds：磁盘失效线程运行时间间隔，默认是120秒。      memoryStoreEvictionPolicy：当达到maxElementsInMemory限制时，Ehcache将会根据指定的策略去清理内存。默认策略是LRU（最近最少使用）。你可以设置为FIFO（先进先出）或是LFU（较少使用）。      clearOnFlush：内存数量最大时是否清除。      memoryStoreEvictionPolicy:可选策略有：LRU（最近最少使用，默认策略）、FIFO（先进先出）、LFU（最少访问次数）。      FIFO，first in first out，这个是大家最熟的，先进先出。      LFU， Less Frequently Used，就是上面例子中使用的策略，直白一点就是讲一直以来最少被使用的。如上面所讲，缓存的元素有一个hit属性，hit值最小的将会被清出缓存。      LRU，Least Recently Used，最近最少使用的，缓存的元素有一个时间戳，当缓存容量满了，而又需要腾出地方来缓存新的元素的时候，那么现有缓存元素中时间戳离当前时间最远的元素将被清出缓存。   --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ehcache</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Redis数据库来做缓存！  K-V</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-12-动态SQL</title>
      <link href="/2020/07/26/62100.html"/>
      <url>/2020/07/26/62100.html</url>
      
        <content type="html"><![CDATA[<h2><span id="dong-tai-sql">动态SQL</span><a href="#dong-tai-sql" class="header-anchor">.</a></h2><blockquote><p>简单理解，根据不同的条件生成不同的SQL语句</p></blockquote><ul><li><p>如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保<strong>不能忘记添加必要的空格</strong>，还要注意<strong>去掉列表最后一个列名的逗号</strong>。<strong>利用动态 SQL，可以彻底摆脱这种痛苦</strong></p></li><li><p>借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p></li><li><p>标签元素</p><ul><li>1<code>if</code></li><li>2<code>choose(when,otherwise)</code></li><li>3<code>trim(where,set)</code></li><li>4<code>foreach</code></li></ul></li></ul><h3><span id="1-da-jian-huan-jing">1、搭建环境</span><a href="#1-da-jian-huan-jing" class="header-anchor">.</a></h3><p>（已配置好mybatis-config.xml配置文件，写好MybatisUtils.java工具类）</p><p><strong>1.新建数据表</strong></p><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `blog`(    `id` VARCHAR(50) NOT NULL COMMENT '博客id',    `title` VARCHAR(100) NOT NULL COMMENT '博客标题',    `author` VARCHAR(30) NOT NULL COMMENT '博客作者',    `create_time` DATETIME NOT NULL COMMENT '创建时间',    `views` int(30) NOT NULL COMMENT '浏览量') ENGINE=INNODB DEFAULT CHARSET=UTF8;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.创建实体类</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Blog</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String title<span class="token punctuation">;</span>    <span class="token keyword">private</span> String author<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date createTime<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> views<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>3.创建<code>Mapper</code>接口</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BlogMapper</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>4.创建<code>Mapper.xml</code>文件</strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.BlogMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>5.绑定<code>Mapper</code>到<code>mybatis-config.xml</code></strong></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--开启驼峰和下滑线的转换--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environments</span> <span class="token attr-name">default</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>oracle<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MENAGED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>development<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JDBC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dataSource</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POOLED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driver<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mysql.jdbc.Driver<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbc:mysql://localhost:3306/mybatis?useSSL<span class="token punctuation">=</span>false&amp;amp;useUnicode<span class="token punctuation">=</span>true&amp;amp;characterEncoding<span class="token punctuation">=</span>UTF-8&amp;amp;serverTimezone<span class="token punctuation">=</span>UTC<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>root<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mysql<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dataSource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environments</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao/BlogMapper.xml<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-biao-qian-yuan-su">2、标签元素</span><a href="#2-biao-qian-yuan-su" class="header-anchor">.</a></h3><h4><span id="1-if">1. if</span><a href="#1-if" class="header-anchor">.</a></h4><h5><span id="jie-kou-fang-fa-tian-jia">接口方法添加</span><a href="#jie-kou-fang-fa-tian-jia" class="header-anchor">.</a></h5><pre class="line-numbers language-xml"><code class="language-xml">List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Blog</span><span class="token punctuation">></span></span> getBlogByIF(Map<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>String,</span> <span class="token attr-name">Object</span><span class="token punctuation">></span></span> map);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5><span id="blogmapper-xml-tian-jia-sql-yu-ju-shi-yong-if-biao-qian"><code>BlogMapper.xml</code>添加SQL语句，使用 if 标签</span><a href="#blogmapper-xml-tian-jia-sql-yu-ju-shi-yong-if-biao-qian" class="header-anchor">.</a></h5><pre class="line-numbers language-XML"><code class="language-XML"><select id="getBlogByIF" resulttype="pojo.Blog">    -- 使用1=1 是避免 没有条件是的 where不能单独存在    select * from mybatis.blog where 1=1    -- if 标签 当满足执行条件时，才添加 需要的SQL语句    -- test : 执行条件       <if test="title != null">        and title = #{title}    </if>    <if test="author != null">        and author = #{author}    </if></select><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="ce-shi-fang-fa">测试方法</span><a href="#ce-shi-fang-fa" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBlogByIf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession  <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BlogMapper userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//map.put("title","如何学好mybatis");</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"author"</span><span class="token punctuation">,</span> <span class="token string">"lmk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> list <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">getBlogByIF</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>printlWn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="jie-guo-zhan-shi">结果展示</span><a href="#jie-guo-zhan-shi" class="header-anchor">.</a></h5><p><img src="/2020/07/26/62100/image-20200731215449060.png" alt></p><h4><span id="2-choose-when-otherwise">2.choose （when，otherwise）</span><a href="#2-choose-when-otherwise" class="header-anchor">.</a></h4><h5><span id="jie-kou-fang-fa-tian-jia">接口方法添加</span><a href="#jie-kou-fang-fa-tian-jia" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">getBlogByChoose</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5><span id="blogmapper-xml-tian-jia-sql-yu-ju-shi-yong-choose-biao-qian-choose-xiang-dang-yu-switch-when-xiang-dang-yu-case-otherwise-xiang-dang-yu-default"><code>BlogMapper.xml</code>添加SQL语句，使用choose标签 （choose 相当于 switch ，when 相当于 case ，otherwise相当于 default）</span><a href="#blogmapper-xml-tian-jia-sql-yu-ju-shi-yong-choose-biao-qian-choose-xiang-dang-yu-switch-when-xiang-dang-yu-case-otherwise-xiang-dang-yu-default" class="header-anchor">.</a></h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- choose 标签的使用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getBlogByChoose<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    -- choose 只能添加一条sql语句 默认 是 otherwise    select * from mybatis.blog  where 1=1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>choose</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and title=#{title}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>when</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and author=#{author}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>when</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>otherwise</span><span class="token punctuation">></span></span>            and views=#{views}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>otherwise</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>choose</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="ce-shi-fang-fa">测试方法</span><a href="#ce-shi-fang-fa" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBlogByChoose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession  <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BlogMapper blogDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"views"</span><span class="token punctuation">,</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> list <span class="token operator">=</span> blogDao<span class="token punctuation">.</span><span class="token function">getBlogByChoose</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="jie-guo-xian-shi">结果显示</span><a href="#jie-guo-xian-shi" class="header-anchor">.</a></h5><p><img src="/2020/07/26/62100/image-20200731222511079.png" alt></p><h4><span id="3-where">3.where</span><a href="#3-where" class="header-anchor">.</a></h4><blockquote><p><em>where</em> 元素只会在子元素返回任何内容的情况下才插入 “WHERE” 子句。而且，若子句的开头为 “AND” 或 “OR”，<em>where</em> 元素也会将它们去除</p></blockquote><h5><span id="jie-kou-fang-fa-tian-jia">接口方法添加</span><a href="#jie-kou-fang-fa-tian-jia" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">getBlogByWhere</span><span class="token punctuation">(</span>String author<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5><span id="blogmapper-xml-tian-jia-sql-yu-ju-shi-yong-where-biao-qian"><code>BlogMapper.xml</code>添加SQL语句，使用where标签</span><a href="#blogmapper-xml-tian-jia-sql-yu-ju-shi-yong-where-biao-qian" class="header-anchor">.</a></h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getBlogByWhere<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    -- 使用where 标签后 如果没有连接的sql语句，则where不做任何变化；    -- 如果有连接的sql语句，且第一个语句是以and开头，则他会自动添加where，并删掉第一个语句的and    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            and author=#{author}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="ce-shi-fang-fa">测试方法</span><a href="#ce-shi-fang-fa" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBlogByWhere</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession  <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        BlogMapper blogDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String author <span class="token operator">=</span> <span class="token string">"lmk"</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> list <span class="token operator">=</span> blogDao<span class="token punctuation">.</span><span class="token function">getBlogByWhere</span><span class="token punctuation">(</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="jie-guo-xian-shi">结果显示</span><a href="#jie-guo-xian-shi" class="header-anchor">.</a></h5><p><img src="/2020/07/26/62100/image-20200731223843983.png" alt></p><h4><span id="4-set-yong-yu-update">4.set（用于update）</span><a href="#4-set-yong-yu-update" class="header-anchor">.</a></h4><blockquote><p><em>set</em> 元素会动态地在行首插入 SET 关键字，并会删掉额外的逗号</p></blockquote><h5><span id="jie-kou-fang-fa-tian-jia">接口方法添加</span><a href="#jie-kou-fang-fa-tian-jia" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> <span class="token function">updateViewsBySet</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5><span id="blogmapper-xml-tian-jia-sql-yu-ju-shi-yong-set-biao-qian"><code>BlogMapper.xml</code>添加SQL语句，使用set标签</span><a href="#blogmapper-xml-tian-jia-sql-yu-ju-shi-yong-set-biao-qian" class="header-anchor">.</a></h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateViewsBySet<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    -- 如果有连接语句 set标签会自动添加set ,去掉最后的连接语句的逗号    update mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            title=#{title},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            author=#{author},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>views!<span class="token punctuation">=</span>null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            views=#{views},        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>    where id=#{id}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="ce-shi-fang-fa">测试方法</span><a href="#ce-shi-fang-fa" class="header-anchor">.</a></h5><pre class="line-numbers language-JAVA"><code class="language-JAVA">@Testpublic void getBlogBySet(){    try(SqlSession sqlSession  = MybatisUtils.getSqlSession();) {        BlogMapper blogDao = sqlSession.getMapper(BlogMapper.class);        Map<string, object> map = new HashMap<>();        map.put("views","300");        map.put("id","1");        int i = blogDao.updateViewsBySet(map);        //提交事务        sqlSession.commit();        if(i == 0){            System.out.println("失败");        }else{            System.out.println("成功");        }    }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></string,></code></pre><h5><span id="jie-guo-xian-shi">结果显示</span><a href="#jie-guo-xian-shi" class="header-anchor">.</a></h5><p><img src="/2020/07/26/62100/image-20200801014835584.png" alt></p><h4><span id="5-trim-ding-zhi-hua-where-set">5.trim（定制化 where 、set …）</span><a href="#5-trim-ding-zhi-hua-where-set" class="header-anchor">.</a></h4><blockquote><p><code>prefix</code>表示 需要动态添加的 关键字 </p><p><code>prefixOverrides</code>表示 去掉符合其值的连接语句的前缀</p><p><code>suffixOverrides</code>表示 去掉符合其值的连接语句的后缀</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>where<span class="token punctuation">"</span></span> <span class="token attr-name">prefixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>AND |OR <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--等价于--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>trim</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SET<span class="token punctuation">"</span></span> <span class="token attr-name">suffixOverrides</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>trim</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--等价于--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>    ...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="6-foreach">6.foreach</span><a href="#6-foreach" class="header-anchor">.</a></h4><blockquote><p>用于对集合的遍历（尤其是在构建IN条件语句的时候）</p><p><a href="https://www.cnblogs.com/man-tou/p/11343800.html" target="_blank" rel="noopener">https://www.cnblogs.com/man-tou/p/11343800.html</a></p></blockquote><h5><span id="jie-kou-fang-fa-tian-jia">接口方法添加</span><a href="#jie-kou-fang-fa-tian-jia" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java">List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> <span class="token function">getBlogByForeach</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5><span id="blogmapper-xml-tian-jia-sql-yu-ju-shi-yong-foreach-biao-qian"><code>BlogMapper.xml</code>添加SQL语句，使用foreach标签</span><a href="#blogmapper-xml-tian-jia-sql-yu-ju-shi-yong-foreach-biao-qian" class="header-anchor">.</a></h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getBlogByForeach<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    where id in    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span>  <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span>             <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{id}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span>    -- item: 本次迭代获取的对象 值(Map)    -- index: 键（Map）    -- collection 集合 （类型可以是 list，set，map ，array）    -- open:左边字符 close:右边字符 separator:分隔符<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    注意：parameterType 与 collection 需要对应(不管你传入的是是什么名字    以本次foreach为例，传入的类型是 List 变量名是 ids，根据对应关系，List === list，那么collection = list)    list  ====== list    map  ====== map的key    Object[] ====== array   item:对象 item.属性名    对象 ====== 对象里面的集合字段名（List类型）--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="ce-shi-fang-fa">测试方法</span><a href="#ce-shi-fang-fa" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getBlogByForeach</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        BlogMapper blogDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>BlogMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Integer<span class="token operator">></span> ids <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ids<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Blog<span class="token operator">></span> list <span class="token operator">=</span> blogDao<span class="token punctuation">.</span><span class="token function">getBlogByForeach</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="jie-guo-xian-shi">结果显示</span><a href="#jie-guo-xian-shi" class="header-anchor">.</a></h5><p><img src="/2020/07/26/62100/image-20200802175453313.png" alt></p><h3><span id="3-sql-pian-duan">3、SQL片段</span><a href="#3-sql-pian-duan" class="header-anchor">.</a></h3><blockquote><p>有的时候，我们可能会将一些功能的部分抽取出来，方便复用！</p></blockquote><h4><span id="1-shi-yong-sql-biao-qian-chou-qu-gong-gong-de-bu-fen">1、使用SQL标签抽取公共的部分</span><a href="#1-shi-yong-sql-biao-qian-chou-qu-gong-gong-de-bu-fen" class="header-anchor">.</a></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>sql</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>title !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        title = #{title}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if</span> <span class="token attr-name">test</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>author !<span class="token punctuation">=</span> null<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        and author = #{author}    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>sql</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-zai-xu-yao-shi-yong-de-di-fang-shi-yong-include-biao-qian-yin-yong-ji-ke">2、在需要使用的地方使用Include标签引用即可</span><a href="#2-zai-xu-yao-shi-yong-de-di-fang-shi-yong-include-biao-qian-yin-yong-ji-ke" class="header-anchor">.</a></h4><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBlogIF<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>map<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>blog<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.blog    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>where</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span> <span class="token attr-name">refid</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>if-title-author<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>where</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意事项：</p><ul><li>最好<strong>基于单表</strong>来定义SQL片段！</li><li><strong>不要存在where、set标签</strong></li></ul><p><strong>所谓的动态sql，本质还是SQL语句，只是我们可以在SQL层面，去执行一个逻辑代码</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>对象关系(重点)</title>
      <link href="/2020/07/25/30593.html"/>
      <url>/2020/07/25/30593.html</url>
      
        <content type="html"><![CDATA[<h2><span id="dui-xiang-guan-xi">对象关系</span><a href="#dui-xiang-guan-xi" class="header-anchor">.</a></h2><ul><li>泛化</li><li>实现</li><li>依赖</li><li><strong>关联</strong>：<ul><li>单向 一对一</li><li>单向 多对一</li><li>单向 一对多</li><li>单向 多对多</li></ul></li><li>聚合</li><li>组合</li></ul><h3><span id="yi-fan-hua-guan-xi-generalization">一、泛化关系（generalization）</span><a href="#yi-fan-hua-guan-xi-generalization" class="header-anchor">.</a></h3><blockquote><p>就是继承关系 （类和类之间–<strong>单继承</strong>，接口和接口之间–<strong>多继承</strong>） 关键字 ： <code>extends</code></p></blockquote><p>UML中，使用<strong>空心三角</strong>和<strong>实线</strong>表示</p><p><img src="/2020/07/25/30593/image-20200725203812091.png" alt></p><h4><span id="shu-ju-biao-de-she-ji">数据表的设计</span><a href="#shu-ju-biao-de-she-ji" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//普通用户</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户id</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用户名</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//vip用户</span><span class="token keyword">class</span> <span class="token class-name">VIPUser</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String point<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会员积分</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//Super用户</span><span class="token keyword">class</span> <span class="token class-name">SuperUser</span> <span class="token keyword">extends</span> <span class="token class-name">User</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> String earning<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//收益</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="1-gong-yong-yi-zhang-biao">1.共用一张表</span><a href="#1-gong-yong-yi-zhang-biao" class="header-anchor">.</a></h5><ul><li>需要添加一列作为鉴别器，区分不同的类型</li><li>不能给一些字段做约束，如非空约束</li><li>查询效率最高</li></ul><table><thead><tr><th>id</th><th>name</th><th>point</th><th>earning</th><th>type</th></tr></thead><tbody><tr><td>1</td><td>admin</td><td>null</td><td>1</td><td>2</td></tr><tr><td>2</td><td>小王</td><td>100</td><td>null</td><td>1</td></tr><tr><td>3</td><td>老王</td><td>null</td><td>null</td><td>0</td></tr><tr><td>4</td><td>大漂亮</td><td>1000</td><td>null</td><td>1</td></tr></tbody></table><h5><span id="2-mei-ge-zi-lei-yi-zhang-biao">2.每个子类一张表</span><a href="#2-mei-ge-zi-lei-yi-zhang-biao" class="header-anchor">.</a></h5><ul><li>把子类共同字段数据，存在User表内</li><li>子类只存自己独有的字段数据</li><li>查询所有信息：<strong>横向查询</strong>（<code>join</code>通过外键关联）</li></ul><p><strong>User</strong></p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>admin</td></tr><tr><td>2</td><td>小王</td></tr><tr><td>3</td><td>老王</td></tr><tr><td>4</td><td>大漂亮</td></tr></tbody></table><p><strong>SuperUser</strong></p><table><thead><tr><th>id(外键)</th><th>earning</th></tr></thead><tbody><tr><td>1</td><td>1</td></tr></tbody></table><p><strong>VIPUser</strong></p><table><thead><tr><th>id（外键）</th><th>point</th></tr></thead><tbody><tr><td>2</td><td>100</td></tr><tr><td>4</td><td>1000</td></tr></tbody></table><h5><span id="3-mei-ge-lei-yi-zhang-biao">3.每个类一张表</span><a href="#3-mei-ge-lei-yi-zhang-biao" class="header-anchor">.</a></h5><ul><li>查询所有信息：<strong>纵向查询</strong>（<code>union</code>要保证各表间主键不能存在相同的）</li></ul><p><strong>User</strong></p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>老王</td></tr></tbody></table><p><strong>SuperUser</strong></p><table><thead><tr><th>id</th><th>name</th><th>earning</th></tr></thead><tbody><tr><td>2</td><td>admin</td><td>1</td></tr></tbody></table><p><strong>VIPUser</strong></p><table><thead><tr><th>id</th><th>name</th><th>point</th></tr></thead><tbody><tr><td>3</td><td>小王</td><td>100</td></tr><tr><td>4</td><td>大漂亮</td><td>1000</td></tr></tbody></table><h3><span id="er-shi-xian-guan-xi-realizaton">二、实现关系（realizaton）</span><a href="#er-shi-xian-guan-xi-realizaton" class="header-anchor">.</a></h3><blockquote><p>类和接口之间   关键字 ：<code>implements</code></p></blockquote><p>UML中，使用<strong>空心三角</strong>和<strong>虚线</strong>表示</p><p><img src="/2020/07/25/30593/image-20200725203450600.png" alt></p><h3><span id="san-yi-lai-guan-xi-dependent">三、依赖关系（dependent）</span><a href="#san-yi-lai-guan-xi-dependent" class="header-anchor">.</a></h3><blockquote><p>有两个类，A类，B类；对象 ： 类实例化</p><p>A对象依赖B对象的定义（即A类中使用B）</p><p>A对象没了B对象，就无法通过编译</p></blockquote><p>UML中，使用<strong>虚线</strong>和<strong>箭头</strong>表示</p><p><img src="/2020/07/25/30593/image-20200725204556025.png" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> B<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> A<span class="token punctuation">{</span>    <span class="token keyword">public</span> B b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1  使用到了B</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span>B b<span class="token comment" spellcheck="true">/*2. 使用到了B*/</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        B b<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3  使用到了B</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="si-guan-lian-guan-xi-association">四、关联关系（association）</span><a href="#si-guan-lian-guan-xi-association" class="header-anchor">.</a></h3><blockquote><p>是一种特殊的依赖关系</p><p>A依赖于B，并且把B作为A的一个成员变量，那么A与B存在关联关系</p></blockquote><p>UML中，使用<strong>实线</strong>和<strong>箭头</strong>表示</p><p><strong>按多重性</strong></p><ul><li>一对一，一个A对象属于一个B对象，一个B对象属于一个A对象</li><li>一对多，一个A对象包含多个B对象</li><li>多对一，多个A对象属于一个B对象，且每个A对象只能属于一个B对象</li><li>多对多，一个A对象属于多个B对象，一个B对象属于多个A对象</li></ul><p><strong>按导航性</strong></p><ul><li>单向：只能通过A对象中的某一个属性可以访问到B对象，则A可以导航到B</li><li>双向：A可以通过属性导航到B，B也可以通过属性导航的A</li></ul><p><img src="/2020/07/25/30593/image-20200726012855456.png" alt="单向一对一箭头反了"></p><h4><span id="shu-ju-biao-she-ji">数据表设计</span><a href="#shu-ju-biao-she-ji" class="header-anchor">.</a></h4><h5><span id="1-yi-dui-yi">1.一对一</span><a href="#1-yi-dui-yi" class="header-anchor">.</a></h5><ul><li>共享主键</li></ul><p><strong>qqZone</strong></p><table><thead><tr><th>id（与num的id对应）</th><th>address</th></tr></thead><tbody><tr><td>1</td><td>addr1</td></tr><tr><td>2</td><td>addr2</td></tr></tbody></table><p><strong>qqNumber</strong></p><table><thead><tr><th>id</th><th>number</th></tr></thead><tbody><tr><td>1</td><td>111111</td></tr><tr><td>2</td><td>222222</td></tr></tbody></table><ul><li>外键（推荐：外键在哪个表都可以，看实际情况）</li></ul><p><strong>qqZone</strong></p><table><thead><tr><th>id</th><th>address</th><th>number_id（外键）</th></tr></thead><tbody><tr><td>1</td><td>addr1</td><td>10</td></tr><tr><td>2</td><td>addr2</td><td>20</td></tr></tbody></table><p><strong>qqNumber</strong></p><table><thead><tr><th>id</th><th>number</th></tr></thead><tbody><tr><td>10</td><td>111111</td></tr><tr><td>20</td><td>222222</td></tr></tbody></table><h5><span id="2-yi-dui-duo-duo-dui-yi">2.一对多，多对一</span><a href="#2-yi-dui-duo-duo-dui-yi" class="header-anchor">.</a></h5><ul><li>先保存少的一方，即先存入数据到父表（只有主键的表，子表依赖父表），再存子表（含有主键和外键的表）</li></ul><p><strong>student</strong>学生</p><table><thead><tr><th>id</th><th>name</th><th>cls_id</th></tr></thead><tbody><tr><td>1</td><td>张三</td><td>2</td></tr><tr><td>2</td><td>李四</td><td>1</td></tr><tr><td>3</td><td>王五</td><td>2</td></tr></tbody></table><p><strong>class</strong>班级</p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>1班</td></tr><tr><td>2</td><td>2班</td></tr></tbody></table><h5><span id="3-duo-dui-duo">3.多对多</span><a href="#3-duo-dui-duo" class="header-anchor">.</a></h5><p><strong>student</strong></p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>小明</td></tr><tr><td>2</td><td>小红</td></tr></tbody></table><p><strong>teacher</strong></p><table><thead><tr><th>id</th><th>name</th></tr></thead><tbody><tr><td>1</td><td>老师1</td></tr><tr><td>2</td><td>老师2</td></tr></tbody></table><p><strong>student_teacher</strong>（中间表）（联合主键：sid和tid ）</p><table><thead><tr><th>sid（外键）</th><th>tid（外键）</th></tr></thead><tbody><tr><td>1</td><td>2</td></tr><tr><td>2</td><td>1</td></tr><tr><td>2</td><td>2</td></tr></tbody></table><h3><span id="wu-ju-he-guan-xi-aggregation">五、聚合关系（aggregation）</span><a href="#wu-ju-he-guan-xi-aggregation" class="header-anchor">.</a></h3><blockquote><p>一种 “ 弱拥有 ” 关系，表示为has-a</p><p>也是一种依赖</p><p>整体与个体之间可以相互独立存在，一定是有两个模块分别管理整体和个体</p><p>如果A和B是聚合关系，他们并不是一个独立的整体，A和 B的生命周期是不同的，通常一方会做为另一方的局部变量存在</p></blockquote><p>UML中，使用<strong>空心菱形</strong>和<strong>实线</strong>表示</p><p><img src="/2020/07/25/30593/image-20200726004554203.png" alt="箭头方向反了"></p><h3><span id="liu-zu-he-guan-xi-composition">六、组合关系（composition）</span><a href="#liu-zu-he-guan-xi-composition" class="header-anchor">.</a></h3><blockquote><p>一种强聚合关系，“ 强拥有 ”，表示为contains-a</p><p>也是一种依赖</p><p>整体和个体不能独立存在，一定是在一个模块中同时管理整体和个体，生命周期必须相同（级联）</p><p>级联（cascade）：把主对象的操作遍历的在每一个从对象上面执行相同的操作（主表中关键字被修改或者删除，那么从表对应的关键字相同的记录也会被修改或删除）</p></blockquote><p>UML中，使用<strong>实心菱形</strong>和<strong>实线</strong>表示</p><p><img src="/2020/07/25/30593/image-20200726005718032.png" alt="箭头方向反了,组合"></p><h3><span id="xiao-jie">小结</span><a href="#xiao-jie" class="header-anchor">.</a></h3><ul><li><p>泛化和实现，主要体现 类和类、接口和接口 间的纵向关系</p></li><li><p>其他四种，体现 类与类，或者 类与接口间的引用、横向关系，语义级别（从代码层次，无法完全区分各种关系）</p></li><li><p>后4种强弱程度：组合 &gt; 聚合 &gt; 关联 &gt; 依赖</p></li><li><p>在面向对象中，能使用强度大的，就不要使用强度小的</p></li><li><p>为什么多对多一定要一个中间表</p><ul><li>如果两表多对多关联，就会产生笛卡尔积，这时两表都是大表，那<strong>效率就特别低</strong>。有可能睡一觉回来都没跑完。</li><li>可以通过中间表拆成两个一对多</li></ul></li><li><p><strong>一个 多对多关系 可以转换成两个 一对多关系</strong><br>下面举例说明:<br>有 学生表 与 选修课程表 多对多关系<br>一个学生可以选择多门课程, 一门课程可以被多个学生选修.<br>需要新增加一个 学生选修课程情况表,2个字段(学生编号, 课程编号)<br>然后<br>学生表 与 学生选修课程情况表 为 一对多关系.<br>选修课程表 与 学生选修课程情况表 为 一对多关系.</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据表的设计 </tag>
            
            <tag> 对象关系 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-11-复杂查询-resultMap</title>
      <link href="/2020/07/25/51659.html"/>
      <url>/2020/07/25/51659.html</url>
      
        <content type="html"><![CDATA[<h2><span id="fu-za-cha-xun-crud">复杂查询CRUD</span><a href="#fu-za-cha-xun-crud" class="header-anchor">.</a></h2><p><strong>目录结构</strong></p><p><img src="/2020/07/25/51659/image-20200726113452084.png" alt></p><h3><span id="duo-dui-yi-jia-she-duo-ge-xue-sheng-bei-yi-ge-lao-shi-jiao">多对一（假设多个学生被一个老师教）</span><a href="#duo-dui-yi-jia-she-duo-ge-xue-sheng-bei-yi-ge-lao-shi-jiao" class="header-anchor">.</a></h3><blockquote><p>一个Student实体里面有一个Teacher类型属性，学生与老师对应关系是多对一</p></blockquote><h4><span id="ce-shi-huan-jing-da-jian">测试环境搭建</span><a href="#ce-shi-huan-jing-da-jian" class="header-anchor">.</a></h4><p>（已配置好mybatis-config.xml配置文件，写好MybatisUtils.java工具类）</p><h5><span id="1-dao-ru-lombok"><strong>1.导入lombok</strong></span><a href="#1-dao-ru-lombok" class="header-anchor">.</a></h5><h5><span id="2-xin-jian-shu-ju-ku-xie-ru-shu-ju"><strong>2.新建数据库 写入数据</strong></span><a href="#2-xin-jian-shu-ju-ku-xie-ru-shu-ju" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql">CREATE TABLE `teacher`(                          `id` INT(10) NOT NULL,                          `name` VARCHAR(30) DEFAULT NULL,                          PRIMARY KEY(`id`))ENGINE=INNODB DEFAULT CHARSET=UTF8;INSERT INTO teacher(`id`,`name`) VALUES (1, '老师1');CREATE TABLE `student`(                          `id` INT(10) NOT NULL,                          `name` VARCHAR(30) DEFAULT NULL,                          `tid` INT(10) DEFAULT NULL,                          PRIMARY KEY(`id`),                          KEY `fktid` (`tid`),                          CONSTRAINT `fktid` FOREIGN KEY(`tid`) REFERENCES `teacher`(`id`))ENGINE=INNODB DEFAULT CHARSET=utf8;INSERT INTO `student`(`id`,`name`,`tid`) VALUES('1','学生1','1'),('2','学生2','1'),('3','学生3','1'),('4','学生4','1'),('5','学生5','1');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="3-xin-jian-shi-ti-lei-chong-dian"><strong>3.新建实体类</strong>(<mark>重点</mark>)</span><a href="#3-xin-jian-shi-ti-lei-chong-dian" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Teacher teacher<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 一个学生实例 里面有 一个老师</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Teacher</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    String name<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="4-xin-jian-mapper-jie-kou"><strong>4.新建Mapper接口</strong></span><a href="#4-xin-jian-mapper-jie-kou" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TeacherMapper</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5><span id="5-jian-li-mapper-xml-wen-jian"><strong>5.建立Mapper.xml文件</strong></span><a href="#5-jian-li-mapper-xml-wen-jian" class="header-anchor">.</a></h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.TeacherMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="6-bang-ding-mapper-dao-mybatis-config-xml"><strong>6.绑定Mapper到<code>mybatis-config.xml</code></strong></span><a href="#6-bang-ding-mapper-dao-mybatis-config-xml" class="header-anchor">.</a></h5><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao/StudentMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao/TeacherMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="an-zhao-cha-xun-qian-tao-chu-li">按照查询嵌套处理</span><a href="#an-zhao-cha-xun-qian-tao-chu-li" class="header-anchor">.</a></h4><ul><li>创建两个查询语句，一个查询套着另一个查询（通过一个表的外键，查出对应另一个表的内容，然后将这些内容，与前表关联合并）</li></ul><blockquote><p>接口方法</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StudentMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//查询所有的学生信息以及对应老师的信息</span>    List<span class="token operator">&lt;</span>Student<span class="token operator">></span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><code>StudentMapper.xml</code> SQL语句编写</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    这种方式相当于 子查询    select id,name,tid from mybatis.student  ==> tid--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.student;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Teacher<span class="token punctuation">"</span></span> <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select * from mybatis.teacher where id=#{tid};    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><blockquote><p>上面的 association 中的 column ： tid 是指①在getStudent中 结果列中 某一个值对应的别名或名字 （tid）②同样也是即将传入getTheacher的 #{对应名字的参数}</p></blockquote><p>无论sql是否在同一个mapper.xml文件中，都可以使用 association 的select属性（需要全限定名）去加载sql，获取其返回结果(多对一：单个结果–对象，一对多：多个结果-List&lt;对象&gt;)</p></blockquote><blockquote><p>测试</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        StudentMapper studentMapper <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>StudentMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>Student<span class="token operator">></span> list <span class="token operator">=</span> studentMapper<span class="token punctuation">.</span><span class="token function">getStudent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果展示</p></blockquote><p><img src="/2020/07/25/51659/image-20200725160241292.png" alt></p><h4><span id="an-zhao-jie-guo-qian-tao-chu-li">按照结果嵌套处理</span><a href="#an-zhao-jie-guo-qian-tao-chu-li" class="header-anchor">.</a></h4><ul><li>一条查询语句，需要在resultMap中进行处理，对sql编写能力要求高</li></ul><blockquote><p>与查询嵌套处理一致，除了<code>StudentMapper.xml</code>文件内容不一样</p></blockquote><blockquote><p><code>StudentMapper.xml</code>编写Sql</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.StudentMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getStudent<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        select s.id sid,s.name sname,t.id tid, t.name tname        from student s, teacher t        where s.tid = t.id;    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>StudentTeacher<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Student<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>association</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>teacher<span class="token punctuation">"</span></span> <span class="token attr-name">javaType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.Teacher<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tid<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>tname<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>association</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果展示</p></blockquote><p><img src="/2020/07/25/51659/image-20200725162451085.png" alt></p><h3><span id="yi-dui-duo-jia-she-yi-ge-lao-shi-jiao-duo-ge-xue-sheng">一对多（假设一个老师教多个学生）</span><a href="#yi-dui-duo-jia-she-yi-ge-lao-shi-jiao-duo-ge-xue-sheng" class="header-anchor">.</a></h3><ul><li>教师表的一条记录对应学生表的多条记录</li></ul><blockquote><p>一个Teacher实体中有一个 List&lt;Student&gt;类型的属性</p></blockquote><p><strong>对于多对多的情况，就需要一个中间实体（包含两个实体的主键）</strong></p><blockquote><p>一个Teacher实体中有一个List&lt;Student&gt;类型的属性</p><p>一个Student实体中有一个List&lt;Teacher&gt;类型的属性</p><p>一个Teacher_Student实体 包含 Teacher和Student两个实体的主键 作为外键 当然可以把这个两个属性作为联合主键</p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//实体类</span><span class="token keyword">class</span> <span class="token class-name">Teacher</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">int</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">int</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Studnet</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> tid<span class="token punctuation">;</span>    <span class="token keyword">int</span> sid<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/*        tid,sid 联合为主键 （tid 不是主键，sid不是主键，两个合起来才叫主键）        tid : 作为外键（Teacher）（Student）    */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="duo-dui-duo">多对多</span><a href="#duo-dui-duo" class="header-anchor">.</a></h3><blockquote><p>就是两个一对多</p></blockquote><h2><span id="xiao-jie">小结</span><a href="#xiao-jie" class="header-anchor">.</a></h2><h3><span id="liang-chong-cha-xun-fang-shi-bi-jiao">两种查询方式比较</span><a href="#liang-chong-cha-xun-fang-shi-bi-jiao" class="header-anchor">.</a></h3><ul><li>嵌套查询的查询语句写起来简单，但是执行的sql语句多，性能要低一点</li><li>嵌套结果的查询语句写起来难一点，而且sql语句只执行一条，性能相对较高</li></ul><h3><span id="fu-za-de-shu-xing-wo-men-xu-yao-dan-du-chu-li-ji-chu-liao-ji-ben-lei-xing">复杂的属性，我们需要单独处理  – 即除了基本类型</span><a href="#fu-za-de-shu-xing-wo-men-xu-yao-dan-du-chu-li-ji-chu-liao-ji-ben-lei-xing" class="header-anchor">.</a></h3><ul><li>对象：association – 多对一</li><li>集合：collection – 一对多</li></ul><h3><span id="javatype-he-oftype">javaType 和 ofType</span><a href="#javatype-he-oftype" class="header-anchor">.</a></h3><p><strong>javaType:</strong>指定实体类中属性的类型  但是如果是类型是集合 就使用ofType<br><strong>ofType:</strong>用于指定集合中的泛型的约束类型</p><h3><span id="yi-dui-yi">一对一</span><a href="#yi-dui-yi" class="header-anchor">.</a></h3><blockquote><p>比如qq账号 和 qq空间 </p><p>一个账号对应一个空间，一个空间对应一个账号</p><p>外键可以在任意一个表上</p></blockquote><h3><span id="yi-dui-duo-he-duo-dui-yi">一对多和多对一</span><a href="#yi-dui-duo-he-duo-dui-yi" class="header-anchor">.</a></h3><blockquote><p>假设 所有学生只有一个老师教     用班级和学生好</p></blockquote><ul><li>多个学生被一个老师教，且每个学生只有一个老师</li><li>一个老师教多个学生 (一个老师有多个学生)</li><li>学生依赖于老师，学生表为子表（存在主键和外键），老师表为父表（只有主键）</li></ul><h3><span id="duo-dui-duo">多对多</span><a href="#duo-dui-duo" class="header-anchor">.</a></h3><blockquote><p>假设 所有学生有多个老师教     其实老师和学生符合多对多</p></blockquote><ul><li>一个学生被多个老师教（每个学生有多个老师）</li><li>一个老师教多个学生（每个老师有多个学生）</li><li>此时比较复杂，必须要一个中间表</li></ul><p>这位老哥写的很好：<a href="https://www.cnblogs.com/jimisun/p/9414148.html" target="_blank" rel="noopener">https://www.cnblogs.com/jimisun/p/9414148.html</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-10-Mybatis执行流程</title>
      <link href="/2020/07/24/34869.html"/>
      <url>/2020/07/24/34869.html</url>
      
        <content type="html"><![CDATA[<p><strong>Mybatis执行流程</strong></p><p><img src="/2020/07/24/34869/mybatis%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.png" alt></p><h3><span id="sqlsessionfactory-new-sqlsessionfactorybuilder-build-in-fen-xi"><code>sqlSessionFactory = new SqlSessionFactoryBuilder().build(in);</code>分析</span><a href="#sqlsessionfactory-new-sqlsessionfactorybuilder-build-in-fen-xi" class="header-anchor">.</a></h3><p><img src="/2020/07/24/34869/image-20200725125952372.png" alt></p><p>1.第一步,实例化SqlSessionFactoryBuilder调用方法build</p><p><img src="/2020/07/24/34869/image-20200725120323371.png" alt="第一步,实例化SqlSessionFactoryBuilder调用方法build"></p><p>2.XMlConfigBuilder读输入流</p><p><img src="/2020/07/24/34869/image-20200725120659658.png" alt="XMLConfigBuilder解析传入的输入流，并实例化"></p><p><img src="/2020/07/24/34869/image-20200725124035307.png" alt="通过XPathParser获取输入流的文档信息,调用this对象构造器"></p><p><img src="/2020/07/24/34869/image-20200725124525989.png" alt="初始化XMLConfigBuilder对象"></p><p>3.</p><p><img src="/2020/07/24/34869/image-20200725125033336.png" alt="调用parse()方法,解析文档中"></p><p><img src="/2020/07/24/34869/image-20200725122314145.png" alt="解析文档中，configuration结点内的信息,并且以Configuration返回"></p><p>4.</p><p><img src="/2020/07/24/34869/image-20200725124758596.png" alt="传入Configuration调用build方法"></p><p><img src="/2020/07/24/34869/image-20200725122523142.png" alt="通过build创建DefaultSqlSessionFactory"></p><p><img src="/2020/07/24/34869/image-20200725122627587.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-09-注解开发(含CRUD)</title>
      <link href="/2020/07/24/554.html"/>
      <url>/2020/07/24/554.html</url>
      
        <content type="html"><![CDATA[<h2><span id="zhu-jie-kai-fa">注解开发</span><a href="#zhu-jie-kai-fa" class="header-anchor">.</a></h2><h3><span id="1-mian-xiang-jie-kou-bian-cheng">1、面向接口编程</span><a href="#1-mian-xiang-jie-kou-bian-cheng" class="header-anchor">.</a></h3><ul><li><p>根本原因: </p><ul><li><strong>解耦</strong>，可扩展，提高代码复用，分层开发中、上层不用管具体实现，大家都遵守的共同标准，使得开发变的更容易，规范性更好</li><li>理想的系统设计规范：定义与实现分离</li></ul></li><li><p>关于接口的理解</p><ul><li><p>接口从更深层次的理解，应是定义（规范，约束）与实现（名实分离的原则）的分离。</p></li><li><p>接口的本身反映了系统设计人员对系统的抽象理解。</p></li><li><p>接口应有两类：</p><ul><li>第一类是对一个个体的抽象，它可对应为一个抽象体(abstract class)；</li><li>第二类是对一个个体某一方面的抽象，即形成一个抽象面（interface）；</li></ul></li></ul><blockquote><p>一个体有可能有多个抽象面。抽象体与抽象面是有区别的。</p></blockquote></li></ul><h3><span id="2-zhu-jie-shi-yong-crud">2、注解使用（CRUD）</span><a href="#2-zhu-jie-shi-yong-crud" class="header-anchor">.</a></h3><p><strong>目录结构</strong></p><p><img src="/2020/07/24/554/image-20200724180607349.png" alt></p><blockquote><p>可以在工具类中设置自动提交事务</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//MyBatisUtils.java 中新增</span><span class="token comment" spellcheck="true">//返回 sqlsession对象 参数为true 自动提交</span><span class="token keyword">public</span> <span class="token keyword">static</span> SqlSession  <span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token keyword">boolean</span> autoCommit<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span>autoCommit<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><ol><li><p>编写接口，及注解</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//获取 用户列表</span>    <span class="token annotation punctuation">@Select</span><span class="token punctuation">(</span><span class="token string">"select * from mybatis.user"</span><span class="token punctuation">)</span>    List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//增加用户</span>    <span class="token annotation punctuation">@Insert</span><span class="token punctuation">(</span><span class="token string">"insert into mybatis.user(id,name,pwd) value(#{id},#{name},#{pwd})"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">addUser</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改用户密码</span>    <span class="token annotation punctuation">@Update</span><span class="token punctuation">(</span><span class="token string">"update mybatis.user set pwd=#{password} where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">updateUserPwd</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">,</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span> String pwd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//删除用户</span>    <span class="token annotation punctuation">@Delete</span><span class="token punctuation">(</span><span class="token string">"delete from mybatis.user where id=#{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">int</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>需要在核心配置文件中绑定接口</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>测试</p><pre class="line-numbers language-java"><code class="language-java">代码省略 与之前相同<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p><strong>本质</strong>：反射机制实现</p><p><strong>底层</strong>：动态代理</p><h3><span id="3-guan-yu-param">3、关于@Param()</span><a href="#3-guan-yu-param" class="header-anchor">.</a></h3><ul><li>基本类型的参数或者String类型，需要加上</li><li>引用类型不用加</li><li>如果只有一个基本类型，可以忽略，推荐加上</li><li>在Sql中引用的是@Param()中自定义的参数名</li></ul><h3><span id="4-lombok-tuan-dui-kai-fa-bu-jian-yi">4、Lombok（团队开发不建议）</span><a href="#4-lombok-tuan-dui-kai-fa-bu-jian-yi" class="header-anchor">.</a></h3><ul><li><p>一个Java库，它会自动插入编辑器和构建工具中，Lombok提供了一组有用的注释，用来消除Java类中的大量样板代码</p></li><li><p>加上这个插件，就不用写getter和setter。。。 – 用于偷懒</p></li><li><p>使用</p><ol><li>引入相应的maven包</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/org.projectlombok/lombok --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.18.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">></span></span>provided<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li><p>安装插件（IDEA）</p><p><img src="/2020/07/24/554/image-20200724173623081.png" alt></p></li><li><p><strong>了解常用注解：</strong><br>@Setter ：注解在类或字段，注解在类时为所有字段生成setter方法，注解在字段上时只为该字段生成setter方法。<br>@Getter ：使用方法同上，区别在于生成的是getter方法。<br>@ToString ：注解在类，添加toString方法。<br>@EqualsAndHashCode： 注解在类，生成hashCode和equals方法。<br>@NoArgsConstructor： 注解在类，生成无参的构造方法。<br>@RequiredArgsConstructor： 注解在类，为类中需要特殊处理的字段生成构造方法，比如final和被@NonNull注解的字段。<br>@AllArgsConstructor： 注解在类，生成包含类中所有字段的构造方法。<br><strong>@Data</strong>： 注解在类，生成setter/getter、equals、canEqual、hashCode、toString方法，如为final属性，则不会为该属性生成setter方法。<br>@Slf4j： 注解在类，生成log变量，严格意义来说是常量。</p></li><li><p>使用注解</p></li></ol><p><img src="/2020/07/24/554/image-20200724180137460.png" alt></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-08-分页</title>
      <link href="/2020/07/24/41312.html"/>
      <url>/2020/07/24/41312.html</url>
      
        <content type="html"><![CDATA[<h2><span id="fen-ye">分页</span><a href="#fen-ye" class="header-anchor">.</a></h2><ul><li>减少数据的处理量</li><li>数据太多在页面上也不好展示</li></ul><blockquote><p>下面只是简单的展示,分页查询，并不是，面向对象的分页</p></blockquote><h3><span id="limit-fen-ye">Limit分页</span><a href="#limit-fen-ye" class="header-anchor">.</a></h3><p>使用Mybatis实现分页，核心是sql</p><ol><li>接口方法</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//limit 分页</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByLimit</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  2.mapper.xml</p><pre class="line-numbers language-XML"><code class="language-XML"><select id="getUserByLimit" resulttype="pojo.User" parametertype="map">    select * from mybatis.user limit #{pageIndex},#{pageSize};</select><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ol start="3"><li>测试</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByLimit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserMapper userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageIndex"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"pageSize"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">getUserByLimit</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>结果</li></ol><p><img src="/2020/07/24/41312/image-20200724152938256.png" alt></p><h3><span id="rowbounds-fen-ye">RowBounds分页</span><a href="#rowbounds-fen-ye" class="header-anchor">.</a></h3><blockquote><p>不依赖limit 需要 使用 SqlSession.selectX</p></blockquote><ol><li>接口方法</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//rowBounds 分页 这里不需要参数 参数 会在 selectList的rowbounds中添加</span>List<span class="token operator">&lt;</span>User<span class="token operator">></span> <span class="token function">getUserByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  2.mapper.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserByRowBounds<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 不依赖limit --></span>    select * from mybatis.user;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>测试</li></ol><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByRowBounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        RowBounds rowBounds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RowBounds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//不依赖 limit 但是  依赖 selectList</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> list <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token string">"dao.UserMapper.getUserByRowBounds"</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> rowBounds<span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="4"><li>结果</li></ol><p><img src="/2020/07/24/41312/image-20200724154045107.png" alt></p><h3><span id="fen-ye-cha-jian-pagehelper">分页插件PageHelper</span><a href="#fen-ye-cha-jian-pagehelper" class="header-anchor">.</a></h3><p><a href="https://pagehelper.github.io/docs/" target="_blank" rel="noopener">https://pagehelper.github.io/docs/</a></p><p>##</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-08-日志工厂(LOG4J STDOUT_LOGGING)</title>
      <link href="/2020/07/24/10823.html"/>
      <url>/2020/07/24/10823.html</url>
      
        <content type="html"><![CDATA[<h2><span id="ri-zhi">日志</span><a href="#ri-zhi" class="header-anchor">.</a></h2><h3><span id="1-ri-zhi-gong-han">1、日志工厂</span><a href="#1-ri-zhi-gong-han" class="header-anchor">.</a></h3><p>如果一个数据库操作,出现了异常，我们需要排错，日志就是很好的助手</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>未设置</td></tr></tbody></table><ul><li><p>SLF4J </p></li><li><p><strong>LOG4J</strong>  需要掌握</p></li><li><p>LOG4J2 </p></li><li><p>JDK_LOGGING </p></li><li><p>COMMONS_LOGGING </p></li><li><p><strong>STDOUT_LOGGING</strong> 需要掌握</p></li><li><p>NO_LOGGING        </p></li></ul><h3><span id="2-stdou-logging">2、STDOU_LOGGING</span><a href="#2-stdou-logging" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 在mybatis-config.xml 的 configuration中配置 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>STDOUT_LOGGING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/24/10823/image-20200724083929437.png" alt></p><h3><span id="3-log4j">3、LOG4J</span><a href="#3-log4j" class="header-anchor">.</a></h3><ul><li>通过使用Log4j，我们可以控制日志信息输送的目的地是<a href="https://baike.baidu.com/item/控制台/2438626" target="_blank" rel="noopener">控制台</a>、文件、<a href="https://baike.baidu.com/item/GUI" target="_blank" rel="noopener">GUI</a>组件，甚至是套接口服务器、<a href="https://baike.baidu.com/item/NT/3443842" target="_blank" rel="noopener">NT</a>的事件记录器、<a href="https://baike.baidu.com/item/UNIX" target="_blank" rel="noopener">UNIX</a> <a href="https://baike.baidu.com/item/Syslog" target="_blank" rel="noopener">Syslog</a><a href="https://baike.baidu.com/item/守护进程/966835" target="_blank" rel="noopener">守护进程</a>等</li><li>可以控制每一条日志的输出格式</li><li>通过定义每一条日志信息的级别，我们能够更加细致地控制日志的生成过程</li><li>通过一个<a href="https://baike.baidu.com/item/配置文件/286550" target="_blank" rel="noopener">配置文件</a>来灵活地进行配置，而不需要修改应用的代码</li></ul><p>使用步骤</p><ol><li>导包</li></ol><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>log4j<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>配置<code>log4j.properties</code></li></ol><pre class="line-numbers language-properties"><code class="language-properties"><span class="token comment" spellcheck="true">#将等级为DEBUG的日志信息输出到console和file这两个目的地，console和file的定义在下面的代码</span><span class="token attr-name">log4j.rootLogger</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG,console,file</span><span class="token comment" spellcheck="true">#控制台输出的相关配置</span><span class="token attr-name">log4j.appender.console</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.ConsoleAppender</span><span class="token attr-name">log4j.appender.console.Target</span><span class="token punctuation">=</span><span class="token attr-value">System.out</span><span class="token attr-name">log4j.appender.console.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.console.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.console.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%p]-[%c]-%m%n</span><span class="token comment" spellcheck="true">#文件输出的相关设置</span><span class="token attr-name">log4j.appender.file</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.RollingFileAppender</span><span class="token attr-name">log4j.appender.file.File</span><span class="token punctuation">=</span><span class="token attr-value">./log/liuyou.log</span><span class="token attr-name">log4j.appender.file.MaxFileSize</span><span class="token punctuation">=</span><span class="token attr-value">10mb</span><span class="token attr-name">log4j.appender.file.Threshold</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.appender.file.layout</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.log4j.PatternLayout</span><span class="token attr-name">log4j.appender.file.layout.ConversionPattern</span><span class="token punctuation">=</span><span class="token attr-value">[%p][%d{yy-MM-dd}][%c]-%m%n</span><span class="token comment" spellcheck="true">#日志输出类型</span><span class="token attr-name">log4j.logger.org.mybatis</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.Statement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.ResultSet</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span class="token attr-name">log4j.logger.java.sql.PreparedStatement</span><span class="token punctuation">=</span><span class="token attr-value">DEBUG</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.配置log4j配置的实现</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logImpl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOG4J<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.测试使用</p><p><img src="/2020/07/24/10823/image-20200724133822041.png" alt></p><h2><span id="log4j-de-jian-dan-shi-yong">log4j的简单使用</span><a href="#log4j-de-jian-dan-shi-yong" class="header-anchor">.</a></h2><p>百度里面讲的很清楚：<a href="https://baike.baidu.com/item/log4j/480673?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/log4j/480673?fr=aladdin</a></p><p>1.导包</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">import</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>log4j<span class="token punctuation">.</span>Logger<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 在需要使用log4j的类中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2.定义属性</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">static</span> Logger logger <span class="token operator">=</span> Logger<span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span>UserMapperTest<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3.在方法中使用</p><pre class="line-numbers language-java"><code class="language-java">在相应的方法中：<span class="token keyword">if</span> <span class="token punctuation">(</span>logger<span class="token punctuation">.</span><span class="token function">isDebugEnabled</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    logger<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span>“System …<span class="token punctuation">.</span><span class="token punctuation">.</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.日志级别</p><ul><li>info</li><li>debug</li><li>error</li><li></li></ul><h2><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h2><h2><span id="chang-jian-pattern-pei-zhi-ge-shi">常见<code>Pattern</code>配置格式</span><a href="#chang-jian-pattern-pei-zhi-ge-shi" class="header-anchor">.</a></h2><p>c：category的名称，可使用｛n}限制输出的精度。例如：logger名为”a.b.c”，%c{2}将输出”b.c”。</p><p>C：产生log事件的java完全限定类名。可使用｛n}限制输出的精度。例如：“org.apache.xyz.SomeClass”,%C{2}将输出“SomeClass”。</p><p>d：时间和日期的输出格式，例如：%d{yyyy MM dd HH:mm:ss,SS}，可不带后面的日期格式字符。</p><p>F：产生log事件的java源文件名，带“.java”后缀及包名称。</p><p>l：log发生位置的详细描述，包括方法名、文件名及行号。</p><p>L：log发生在源文件中的位置。</p><p>m：log事件的消息内容。</p><p>M：log发生时所在的方法名称。</p><p>n：根据所运行的平台输出相应的行分隔字符。</p><p>p：log事件的级别，即DEBUG，<a href="https://baike.baidu.com/item/INFO" target="_blank" rel="noopener">INFO</a>，WARN，ERROR，FATAL。</p><p>r：自程序运行至log事件产生所经过的时间（毫秒数）。</p><p>t：  产生log的线程名称。</p><p><a href="https://www.jianshu.com/p/d17485fd2a7f" target="_blank" rel="noopener">此处来自简书</a></p><p>log4j.appender.stdout.layout.ConversionPattern= [QC] %p [%t] %C.%M(%L) | %m%n</p><p>如果使用pattern布局就要指定的打印信息的具体格式ConversionPattern，打印参数如下：</p><p>%M 输出打印该条日志的方法名；</p><p>%p 输出优先级，即DEBUG，<a href="https://baike.baidu.com/item/INFO" target="_blank" rel="noopener">INFO</a>，WARN，ERROR，FATAL；</p><p>%r 输出自应用启动到输出该log信息耗费的毫秒数；</p><p>%c 输出所属的类目，通常就是所在类的全名；</p><p>[QC]是log信息的开头，可以为任意字符，一般为项目简称。</p><p>输出的信息</p><p>[TS] DEBUG [main] AbstractBeanFactory.getBean(189) | Returning cached instance of singleton bean ‘MyAutoProxy’</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-06-生命周期和作用域</title>
      <link href="/2020/07/24/37967.html"/>
      <url>/2020/07/24/37967.html</url>
      
        <content type="html"><![CDATA[<h3><span id="zuo-yong-yu-scope-he-sheng-ming-zhou-qi">作用域（Scope）和生命周期</span><a href="#zuo-yong-yu-scope-he-sheng-ming-zhou-qi" class="header-anchor">.</a></h3><p>理解不同作用域和生命周期类别是至关重要的，因为错误的使用会导致非常严重的并发问题。</p><p>提示        <strong>对象生命周期和依赖注入框架</strong>      </p><p> 依赖注入框架可以创建线程安全的、基于事务的 SqlSession和映射器，并将它们直接注入到你的 bean 中，因此可以直接忽略它们的生命周期。        如果对如何通过依赖注入框架使用 MyBatis 感兴趣，可以研究一下 MyBatis-Spring        或 MyBatis-Guice 两个子项目。</p><h4><span id="sqlsessionfactorybuilder">SqlSessionFactoryBuilder</span><a href="#sqlsessionfactorybuilder" class="header-anchor">.</a></h4><ul><li><p><strong>一旦创建了 SqlSessionFactory，就不再需要它了</strong></p></li><li><p><strong>最佳作用域是方法作用域（也就是局部方法变量）</strong>。</p></li></ul><h4><span id="sqlsessionfactory">SqlSessionFactory</span><a href="#sqlsessionfactory" class="header-anchor">.</a></h4><ul><li><p>相当于连接池</p></li><li><p>SqlSessionFactory 一旦被创建就应该在<strong>应用的运行期间一直存在</strong>，没有任何理由丢弃它或重新创建另一个实例。</p></li><li><p>使用 SqlSessionFactory 的最佳实践是在应用运行期间不要重复创建多次，多次重建          SqlSessionFactory 被视为一种代码“坏习惯”。</p></li><li><p><strong>最佳作用域是&lt;&gt;应用作用域。</strong></p></li><li><p>有很多方法可以做到，最简单的就是使用单例模式或者静态单例模式。        </p></li></ul><h4><span id="sqlsession">SqlSession</span><a href="#sqlsession" class="header-anchor">.</a></h4><ul><li><p>相当于连接池里的一个请求（线程），每一个请求可以用于多个Mapper（多个业务）</p></li><li><p><strong>每个线程都应该有它自己的 SqlSession 实例。</strong></p></li><li><p><strong>SqlSession的实例不是线程安全的，因此是不能被共享的，所以它的最佳的作用域是<mark>请求或方法作用域</mark></strong></p></li><li><p>绝对不能将 SqlSession 实例的引用放在一个类的静态域，甚至一个类的实例变量也不行。 也绝不能将 SqlSession 实例的引用放在任何类型的托管作用域中，比如 Servlet 框架中的 HttpSession。  如果你现在正在使用一种 Web 框架，考虑将 SqlSession 放在一个和 HTTP 请求相似的作用域中。换句话说，每次收到 HTTP 请求，就可以打开一个 SqlSession，返回一个响应后，就关闭它。这个关闭操作很重要，为了确保每次都能执行关闭操作，你应该把这个关闭操作放到 finally 块中。下面的示例就是一个确保 SqlSession 关闭的标准模式：        </p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">(</span>SqlSession session <span class="token operator">=</span> sqlSessionFactory<span class="token punctuation">.</span><span class="token function">openSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 你的应用逻辑代码</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在所有代码中都遵循这种使用模式，可以保证所有数据库资源都能被正确地关闭。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-07-ResultMap</title>
      <link href="/2020/07/24/24709.html"/>
      <url>/2020/07/24/24709.html</url>
      
        <content type="html"><![CDATA[<h2><span id="jie-jue-shu-ju-ku-shu-xing-ming-he-he-shi-ti-lei-zi-duan-ming-de-bu-yi-zhi-wen-ti">解决数据库属性名和和实体类字段名的不一致问题</span><a href="#jie-jue-shu-ju-ku-shu-xing-ming-he-he-shi-ti-lei-zi-duan-ming-de-bu-yi-zhi-wen-ti" class="header-anchor">.</a></h2><blockquote><p>在之前，第一篇笔记的注意中 <strong>获取到的结果里变为 null</strong>是由于数据库属性名和和实体类字段名的不一致，接下来使其具体的解决办法</p></blockquote><p><strong>首先，数据表展示</strong></p><p><img src="/2020/07/24/24709/image-20200724062637393.png" alt></p><p><strong>实体类</strong>（此时用户名、密码与数据表中对应属性不同）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//相应的方法省略</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>若不一致导致的结果，展示</strong>（调用getUserList方法）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserMapper userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//            return userList;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user;    <span class="token comment" spellcheck="true">&lt;!-- select id,name,pwd from mybatis.user; --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/24/24709/image-20200724063603147.png" alt></p><blockquote><p>结果发现，username 和 password 值都为null</p><p>原因：在执行<code>select id,name,pwd from mybatis.user;</code>语句后的确是 返回正确的数据 （name，pwd都有对应的值（不是null）），但是在映射回User类是 在类中没有找到 pwd和name这两个字段，无法使用 相应的setter方法赋值，由于private String username，password； 默认值 为 null，在我们获取（getter）User类字段时 相应的username，password就为空</p></blockquote><p>为了验证猜想，把初始值改为</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> String username <span class="token operator">=</span> <span class="token string">"username"</span><span class="token punctuation">;</span><span class="token keyword">private</span> String password <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/07/24/24709/image-20200724072309346.png" alt></p><p>说了原因，接下来就是解决方法了</p><h2><span id="jie-jue-fang-fa">解决方法</span><a href="#jie-jue-fang-fa" class="header-anchor">.</a></h2><h3><span id="1-gei-sql-zi-duan-qi-bie-ming">1.给sql字段起别名</span><a href="#1-gei-sql-zi-duan-qi-bie-ming" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select id,name as username,pwd as password from mybatis.user;    <span class="token comment" spellcheck="true">&lt;!-- select * from mybatis.user; --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/24/24709/image-20200724072850001.png" alt></p><h3><span id="2-shi-yong-resultmap">2.使用ResultMap</span><a href="#2-shi-yong-resultmap" class="header-anchor">.</a></h3><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- id 对应ResultMap type对应 映射返回类型 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seletAllUser<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- property:实体类字段  column:数据表属性  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>result</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>seletAllUser<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/24/24709/image-20200724073818368.png" alt></p><h2><span id="jie-guo-ying-she-resultmap">结果映射(ResultMap)</span><a href="#jie-guo-ying-she-resultmap" class="header-anchor">.</a></h2><p><code>resultMap</code> 元素是 MyBatis 中最重要最强大的元素。</p><p><code>ResultMap</code>的设计思想是，对简单的语句做到零配置，对于复杂一点的语句，只需要描述语句之间的关系就行了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-05-配置解析</title>
      <link href="/2020/07/24/39821.html"/>
      <url>/2020/07/24/39821.html</url>
      
        <content type="html"><![CDATA[<h2><span id="pei-zhi-jie-xi">配置解析</span><a href="#pei-zhi-jie-xi" class="header-anchor">.</a></h2><h3><span id="1-he-xin-pei-zhi-wen-jian">1、核心配置文件</span><a href="#1-he-xin-pei-zhi-wen-jian" class="header-anchor">.</a></h3><ul><li>mybatis-config.xml（文件名：可以更改，官方推荐这个）</li></ul><p><strong>配置文档的顶层结构如下</strong>：</p><ul><li><strong>configuration</strong>（配置）          <ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties" target="_blank" rel="noopener">properties（属性）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" target="_blank" rel="noopener">settings（设置）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" target="_blank" rel="noopener">typeAliases（类型别名）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" target="_blank" rel="noopener">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory" target="_blank" rel="noopener">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins" target="_blank" rel="noopener">plugins（插件）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#environments" target="_blank" rel="noopener">environments（环境配置）</a><ul><li>environment（环境变量）                  <ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider" target="_blank" rel="noopener">databaseIdProvider（数据库厂商标识）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers" target="_blank" rel="noopener">mappers（映射器）</a></li></ul></li></ul><h3><span id="2-huan-jing-you-hua-environments">2、环境优化（environments）</span><a href="#2-huan-jing-you-hua-environments" class="header-anchor">.</a></h3><ul><li><p>MyBatis 可以配置成适应多种环境 – 便于多数据库中转换，以及开发环境，测试环境等。。。</p></li><li><p><strong>不过要记住：尽管可以配置多个环境，但每个 <code>SqlSessionFactory</code>实例只能选择一种环境</strong></p><p><img src="/2020/07/24/39821/image-20200724014348819.png" alt></p></li><li><p><strong>事务管理器（transactionManager）</strong></p><ul><li><p><mark>JDBC </mark>– 这个配置直接使用了 JDBC 的<strong>提交</strong>和<strong>回滚设施</strong>，它<strong>依赖从数据源获得的连接来管理事务作用域</strong>。          </p></li><li><p><mark>MANAGED </mark>– 这个配置几乎没做什么。它从不提交或回滚一个连接，而是让容器来管理事务的整个生命周期（比如 JEE 应用服务器的上下文）。            默认情况下它会关闭连接。</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>transactionManager</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>MANAGED<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>closeConnection<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--阻止自动关闭连接--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>transactionManager</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用 Spring + MyBatis，则没有必要配置事务管理器，因为Spring 模块会使用自带的管理器来覆盖前面的配置。</p></li></ul></li><li><p><strong>数据源（dataSource）</strong></p><ul><li><p><strong>UNPOOLED</strong><mark>不用连接池</mark>– 这个数据源的实现会每次请求时打开和关闭连接。虽然有点慢，但对那些数据库连接可用性要求不高的简单应用程序来说，是一个很好的选择。          </p></li><li><p><strong>POOLED</strong><mark>使用连接池</mark> – 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间</p></li><li><p><strong>JNDI</strong> – 为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的数据源引用</p><blockquote><p>池：用完可以回收</p></blockquote></li></ul></li></ul><h3><span id="3-shu-xing-you-hua-properties">3、属性优化（properties）</span><a href="#3-shu-xing-you-hua-properties" class="header-anchor">.</a></h3><ul><li><p>可以配置外部的属性文件</p><p><strong><code>db.properties</code>文件</strong></p><pre class="line-numbers language-xml"><code class="language-xml">driver=com.mysql.jdbc.Driverurl=jdbc:mysql://localhost:3306/mybatis?userSSL=false&amp;useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=UTCusername=rootpassword=mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>mybatis-config.xml</code>文件<code>&lt;properties&gt;</code>引入外部配置的属性文件</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>db.properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>123456<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2020/07/24/39821/image-20200724020944958.png" alt></p><ul><li><p><strong>MyBatis 将按照下面的顺序来加载</strong>：</p><ul><li>首先读取在 <code>properties</code> 元素体内指定的属性。          </li><li>然后根据 <code>properties</code>元素中的 <code>resource</code> 属性读取类路径下属性文件，或根据 url 属性指定的路径读取属性文件，并覆盖之前读取过的同名属性。          </li><li>最后读取作为方法参数传递的属性，并覆盖之前读取过的同名属性</li></ul><blockquote><p>通过<strong>方法参数传递的属性</strong>具有最高优先级，<code>resource/url</code> 属性中指定的<strong>配置文件</strong>次之，最低优先级的则是 <strong><code>properties</code> 元素中指定的属性</strong>。</p></blockquote></li></ul><h3><span id="4-she-zhi-you-hua-settings">4、设置优化（settings）</span><a href="#4-she-zhi-you-hua-settings" class="header-anchor">.</a></h3><blockquote><p>列出常用 | 可能有用</p></blockquote><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。                特定关联关系中可通过设置 <code>fetchType</code>                属性来覆盖该项的开关状态。</td><td>true | false</td><td>false</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名                A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td>true | false</td><td>False</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>未设置</td></tr></tbody></table><ul><li><p><strong>一个配置完整的 <code>settings</code>元素的示例如下</strong>：        </p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>cacheEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadingEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipleResultSetsEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useColumnLabel<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>useGeneratedKeys<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoMappingBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PARTIAL<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoMappingUnknownColumnBehavior<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>WARNING<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultExecutorType<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SIMPLE<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultStatementTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>25<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>defaultFetchSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>safeRowBoundsEnabled<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mapUnderscoreToCamelCase<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localCacheScope<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>SESSION<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcTypeForNull<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>OTHER<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>setting</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>lazyLoadTriggerMethods<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>equals,clone,hashCode,toString<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3><span id="5-lei-xing-bie-ming-typealiases">5、类型别名（typeAliases）</span><a href="#5-lei-xing-bie-ming-typealiases" class="header-anchor">.</a></h3><ul><li><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在<strong>降低冗余的全限定类名书写</strong></p></li><li><p>针对每一个实体类，添加一个别名</p></li><li><p>配置方式</p><ul><li><p>1.直接在<code>mybatis-config.xml</code>中配置</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAlias</span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/24/39821/image-20200724024919520.png" alt></p></li><li><p>2.指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean</p><blockquote><p>在<strong>没有注解</strong>的情况下，会使用Bean 的首字母小写的非限定类名来作为它的别名 </p><p>如 User =&gt; user 当然使用User也可以，推荐user</p></blockquote><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.liuyou.pojo<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>3.注解（直接在实体类中加）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Alias</span><span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3><span id="6-ying-she-qi-mappers">6、映射器（mappers）</span><a href="#6-ying-she-qi-mappers" class="header-anchor">.</a></h3><blockquote><p>告诉mybatis从哪里获取sql语句</p></blockquote><p>下面是所有写法</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 使用相对于类路径的资源引用 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/builder/AuthorMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/builder/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org/mybatis/builder/PostMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用完全限定资源定位符（URL） --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///var/mappers/AuthorMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///var/mappers/BlogMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">url</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file:///var/mappers/PostMapper.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 使用映射器接口实现类的完全限定类名 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.builder.AuthorMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.builder.BlogMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.builder.PostMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 将包内的映射器接口实现全部注册为映射器 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.builder<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>注意：<ul><li>除了第一个，要保证<ul><li>接口和他的Mapper配置文件必须同名</li><li>接口和他的Mapper配置文件必须在同一包下<ul><li>当然可以分离，只不过要在<code>resources</code>文件夹下,建立与Mapper接口对应的包去存放Mapper.xml,这样才能保证，编译时，Mapper.xml与对应接口在同一包下</li></ul></li></ul></li></ul></li></ul><h2><span id="zhu-yi">注意</span><a href="#zhu-yi" class="header-anchor">.</a></h2><p><code>mybatis-config.xml</code>文件中在<code>&lt;configuration&gt;</code>中的标签的顺序是被写死了的</p><p><img src="/2020/07/24/39821/image-20200724012859050.png" alt></p><pre><code>properties =&gt; settings=&gt; typeAliases =&gt; typeHandlers=&gt; objectFactory =&gt; objectWrapperFactory=&gt; reflectorFactory =&gt; plugins=&gt; environments =&gt; databaseldProvider=&gt; mappers</code></pre><h2><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h2><h3><span id="1-wan-zheng-settings-can-shu-biao">1.完整settings参数表</span><a href="#1-wan-zheng-settings-can-shu-biao" class="header-anchor">.</a></h3><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。                特定关联关系中可通过设置 <code>fetchType</code>                属性来覆盖该项的开关状态。</td><td>true | false</td><td>false</td></tr><tr><td>aggressiveLazyLoading</td><td>开启时，任一方法的调用都会加载该对象的所有延迟加载属性。                否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td><td>true | false</td><td>false （在 3.4.1 及之前的版本中默认为 true）</td></tr><tr><td>multipleResultSetsEnabled</td><td>是否允许单个语句返回多结果集（需要数据库驱动支持）。</td><td>true | false</td><td>true</td></tr><tr><td>useColumnLabel</td><td>使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td><td>true | false</td><td>true</td></tr><tr><td>useGeneratedKeys</td><td>允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为                true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td>true | false</td><td>False</td></tr><tr><td>autoMappingBehavior</td><td>指定 MyBatis 应如何自动映射列到字段或属性。                NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。                FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td><td>NONE, PARTIAL, FULL</td><td>PARTIAL</td></tr><tr><td>autoMappingUnknownColumnBehavior</td><td>指定发现自动映射目标未知列（或未知属性类型）的行为。                                    <code>NONE</code>: 不做任何反应                   <code>WARNING</code>:                  输出警告日志（<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code>                  的日志等级必须设置为 <code>WARN</code>）                   <code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td><td>NONE, WARNING, FAILING</td><td>NONE</td></tr><tr><td>defaultExecutorType</td><td>配置默认的执行器。SIMPLE 就是普通的执行器；REUSE 执行器会重用预处理语句（PreparedStatement）；                BATCH 执行器不仅重用语句还会执行批量更新。</td><td>SIMPLE                REUSE                BATCH</td><td>SIMPLE</td></tr><tr><td>defaultStatementTimeout</td><td>设置超时时间，它决定数据库驱动等待数据库响应的秒数。</td><td>任意正整数</td><td>未设置 (null)</td></tr><tr><td>defaultFetchSize</td><td>为驱动的结果集获取数量（fetchSize）设置一个建议值。此参数只可以在查询设置中被覆盖。</td><td>任意正整数</td><td>未设置 (null)</td></tr><tr><td>defaultResultSetType</td><td>指定语句默认的滚动策略。（新增于 3.5.2）</td><td>FORWARD_ONLY | SCROLL_SENSITIVE | SCROLL_INSENSITIVE | DEFAULT（等同于未设置）</td><td>未设置 (null)</td></tr><tr><td>safeRowBoundsEnabled</td><td>是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td><td>true | false</td><td>False</td></tr><tr><td>safeResultHandlerEnabled</td><td>是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td><td>true | false</td><td>True</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名                A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td>true | false</td><td>False</td></tr><tr><td>localCacheScope</td><td>MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。                默认值为 SESSION，会缓存一个会话中执行的所有查询。                若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td><td>SESSION | STATEMENT</td><td>SESSION</td></tr><tr><td>jdbcTypeForNull</td><td>当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。                某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td><td>JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td><td>OTHER</td></tr><tr><td>lazyLoadTriggerMethods</td><td>指定对象的哪些方法触发一次延迟加载。</td><td>用逗号分隔的方法列表。</td><td>equals,clone,hashCode,toString</td></tr><tr><td>defaultScriptingLanguage</td><td>指定动态 SQL 生成使用的默认脚本语言。</td><td>一个类型别名或全限定类名。</td><td>org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td></tr><tr><td>defaultEnumTypeHandler</td><td>指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td><td>一个类型别名或全限定类名。</td><td>org.apache.ibatis.type.EnumTypeHandler</td></tr><tr><td>callSettersOnNulls</td><td>指定当结果集中值为 null 的时候是否调用映射对象的 setter（map                对象时为 put）方法，这在依赖于 Map.keySet() 或 null                值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td><td>true | false</td><td>false</td></tr><tr><td>returnInstanceForEmptyRow</td><td>当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。             当开启这个设置时，MyBatis会返回一个空实例。             请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td><td>true | false</td><td>false</td></tr><tr><td>logPrefix</td><td>指定 MyBatis 增加到日志名称的前缀。</td><td>任何字符串</td><td>未设置</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>未设置</td></tr><tr><td>proxyFactory</td><td>指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td><td>CGLIB | JAVASSIST</td><td>JAVASSIST （MyBatis 3.3 以上）</td></tr><tr><td>vfsImpl</td><td>指定 VFS 的实现</td><td>自定义 VFS 的实现的类全限定名，以逗号分隔。</td><td>未设置</td></tr><tr><td>useActualParamName</td><td>允许使用方法签名中的名称作为语句参数名称。             为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td><td>true | false</td><td>true</td></tr><tr><td>configurationFactory</td><td>指定一个提供 <code>Configuration</code> 实例的类。                 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。                 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td><td>一个类型别名或完全限定类名。</td><td>未设置</td></tr><tr><td>shrinkWhitespacesInSql</td><td>Removes extra whitespace characters from the SQL. Note  that this also affects literal strings in SQL. (Since 3.5.5)</td><td>true | false</td><td>false</td></tr></tbody></table><h3><span id="2-chang-jian-de-java-lei-xing-nei-jian-de-lei-xing-bie-ming">2.常见的 Java 类型内建的类型别名</span><a href="#2-chang-jian-de-java-lei-xing-nei-jian-de-lei-xing-bie-ming" class="header-anchor">.</a></h3><table><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>decimal</td><td>BigDecimal</td></tr><tr><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>object</td><td>Object</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashmap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr><tr><td>collection</td><td>Collection</td></tr><tr><td>iterator</td><td>Iterator</td></tr></tbody></table>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库</title>
      <link href="/2020/07/23/63394.html"/>
      <url>/2020/07/23/63394.html</url>
      
        <content type="html"><![CDATA[<h2><span id="wei-shi-me-xu-yao-shu-ju-ku">为什么需要数据库？</span><a href="#wei-shi-me-xu-yao-shu-ju-ku" class="header-anchor">.</a></h2><p>有人会说为什么需要用数据库去存数据，用文件存储不香吗？</p><p>的确文件存储数据是很方便的，但是当数据量比较大的情况下，如何管理这些数据就成了大问题</p><ul><li>读写文件并解析出数据需要大量重复代码</li><li>从成千上万的数据中快速查询出指定数据需要复杂的逻辑。</li></ul><p>如果每个应用程序都各自写自己的读写数据的代码，一方面<strong>效率低</strong>，<strong>容易出错</strong>，另一方面，每个应用程序访问数据的接口都不相同，<strong>数据难以复用</strong>。</p><p>所以，数据库作为一种专门管理数据的软件就出现了。应用程序不需要自己管理数据，而是通过数据库软件提供的接口来读写数据。至于数据本身如何存储到文件，那是数据库软件的事情，应用程序自己并不关心</p><pre class="line-numbers language-ascii"><code class="language-ascii">┌──────────────┐│ application  │└──────────────┘       ▲│       ││   read││write       ││       │▼┌──────────────┐│   database   │└──────────────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="shu-ju-mo-xing">数据模型</span><a href="#shu-ju-mo-xing" class="header-anchor">.</a></h3><p>数据库按照数据结构来组织、存储和管理数据，实际上，数据库一共有三种模型：</p><ul><li>层次模型</li><li>网状模型</li><li>关系模型</li></ul><p>层次模型就是以“上下级”的层次关系来组织数据的一种方式，层次模型的数据结构看起来就像一颗树：</p><pre class="line-numbers language-ascii"><code class="language-ascii">            ┌─────┐            │     │            └─────┘               │       ┌───────┴───────┐       │               │    ┌─────┐         ┌─────┐    │     │         │     │    └─────┘         └─────┘       │               │   ┌───┴───┐       ┌───┴───┐   │       │       │       │┌─────┐ ┌─────┐ ┌─────┐ ┌─────┐│     │ │     │ │     │ │     │└─────┘ └─────┘ └─────┘ └─────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网状模型把每个数据节点和其他很多节点都连接起来，它的数据结构看起来就像很多城市之间的路网：</p><pre class="line-numbers language-ascii"><code class="language-ascii">     ┌─────┐      ┌─────┐   ┌─│     │──────│     │──┐   │ └─────┘      └─────┘  │   │    │            │     │   │    └──────┬─────┘     │   │           │           │┌─────┐     ┌─────┐     ┌─────┐│     │─────│     │─────│     │└─────┘     └─────┘     └─────┘   │           │           │   │     ┌─────┴─────┐     │   │     │           │     │   │  ┌─────┐     ┌─────┐  │   └──│     │─────│     │──┘      └─────┘     └─────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关系模型把数据看作是一个二维表格，任何数据都可以通过行号+列号来唯一确定，它的数据模型看起来就是一个Excel表：</p><pre class="line-numbers language-ascii"><code class="language-ascii">┌─────┬─────┬─────┬─────┬─────┐│     │     │     │     │     │├─────┼─────┼─────┼─────┼─────┤│     │     │     │     │     │├─────┼─────┼─────┼─────┼─────┤│     │     │     │     │     │├─────┼─────┼─────┼─────┼─────┤│     │     │     │     │     │└─────┴─────┴─────┴─────┴─────┘<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>选取主键的一个基本原则</strong>是：不使用任何业务相关的字段作为主键。</p><p>因此，身份证号、手机号、邮箱地址这些看上去可以唯一的字段，均<em>不可</em>用作主键。</p><p>主键一般选用：</p><blockquote><ol><li>自增整数类型(auto_increment)：数据库会在插入数据时自动为每一条记录分配一个自增整数，这样我们就完全不用担心主键重复，也不用自己预先生成主键；</li><li>全局唯一GUID类型：使用一种全局唯一的字符串作为主键，类似<code>8f55d96b-8acc-4636-8cb8-76bf8abc2f57</code>。GUID算法通过网卡MAC地址、时间戳和随机数保证任意计算机在任意时间生成的字符串都是不同的，大部分编程语言都内置了GUID算法，可以自己预算出主键。</li></ol></blockquote><h2><span id="shu-ju-ku-ji-ben-cao-zuo">数据库基本操作</span><a href="#shu-ju-ku-ji-ben-cao-zuo" class="header-anchor">.</a></h2><h3><span id="chuang-jian-shu-ju-ku-ddl">创建数据库(DDL)</span><a href="#chuang-jian-shu-ju-ku-ddl" class="header-anchor">.</a></h3><pre class="line-numbers language-mysql"><code class="language-mysql">create database 数据库名称;-- 1create database studentdb;-- 2  为了避免用户自定义的名称与系统命令冲突，最好使用反引号（` `）包裹数据库名称、字段名称和数据表名称create database `studentdb`;-- 3 如果库已存在 可使用 if not existscreate database if not exists `studentdb`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200605211303019.png" alt="create database"></p><h3><span id="cha-kan-shu-ju-ku-ddl">查看数据库(DDL)</span><a href="#cha-kan-shu-ju-ku-ddl" class="header-anchor">.</a></h3><pre class="line-numbers language-mysql"><code class="language-mysql">-- 在完成创建数据库后，若要查看该数据库的信息show create database 数据库名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200605211513314.png" alt="show database1"></p><pre class="line-numbers language-mysql"><code class="language-mysql">-- 查看MySQL数据库服务器中已经存在的数据库show databases;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200605211631770.png" alt="show databases"></p><h3><span id="xuan-ze-shu-ju-ku-ddl">选择数据库(DDL)</span><a href="#xuan-ze-shu-ju-ku-ddl" class="header-anchor">.</a></h3><pre class="line-numbers language-mysql"><code class="language-mysql">use 数据库名称;use `studentdb`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="shan-chu-shu-ju-ku-ddl">删除数据库(DDL)</span><a href="#shan-chu-shu-ju-ku-ddl" class="header-anchor">.</a></h3><pre class="line-numbers language-mysql"><code class="language-mysql">-- 数据库的删除操作不仅会删除里面的数据，还会回收原来分配的存储空间。drop database 数据库名称;-- 1drop database `studentdb`;-- 2 若待删除数据库不存在 可使用 if existsdrop database if exists `studb`;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200605212238196.png" alt="drop database"></p><h3><span id="shu-ju-lei-xing">数据类型</span><a href="#shu-ju-lei-xing" class="header-anchor">.</a></h3><ul><li><p>数值类型</p><ul><li><p>整型</p><ul><li>tinyint</li><li>smallint</li><li>mediumint</li><li>int</li><li>bigint</li></ul></li><li><p>浮点型</p><ul><li>float</li><li>double</li><li>decimal</li></ul></li></ul></li><li><p>布尔类型</p></li><li><p>字符串类型</p></li><li><p>日期与时间类型</p></li></ul><p><strong>数值 – 整数类型</strong></p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>字节数</strong></th><th><strong>取值范围</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>TINYINT</strong></td><td>1</td><td>有符号：-128~127 <br>无符号：0~255</td><td>最小的整数</td></tr><tr><td><strong>SMALLINT</strong></td><td>2</td><td>有符号：-32 768<del>32 767<br>无符号：0</del>65 535</td><td>小型整数</td></tr><tr><td><strong>MEDIUMINT</strong></td><td>3</td><td>有符号：-8 388 608<del>8 388 607<br>无符号：0</del>16 777 215</td><td>中型整数</td></tr><tr><td><strong>INT</strong></td><td>4</td><td>有符号：-2 147 483 648<del>2 147 483 647<br>无符号：0</del>4 294 967 295</td><td>常规整数</td></tr><tr><td><strong>BIGINT</strong></td><td>8</td><td>有符号：-9 223 372 036 854 775 808<del>9 223 372 036854 775 807<br>无符号：0</del>18 446 744 073 709 551 615</td><td>较大的整数</td></tr></tbody></table><p><strong>数值 – 浮点类型</strong></p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>字节数</strong></th><th><strong>取值范围</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>FLOAT</strong></td><td>4</td><td>有符号：-3.402 823 466E+38<del>-1.175 494 351E-38<br>无符号：0/1.175 494 351E-38</del>3.402 823 466E+38</td><td>单精度</td></tr><tr><td><strong>DOUBLE</strong></td><td>8</td><td>有符号：-1.797 693 134 862 315 7E+308~2.225 073 858 507 201 4E-308<br>无符号：0/2.225 073 858 507 201 4E-308 ~1.797 693 134 862 315 7E+308</td><td>双精度</td></tr><tr><td><strong>DECIMAL(M,D)</strong></td><td>M+2</td><td>有符号：-1.797 693 134 862 315 7E+308~2.225 073 858 507 201 4E-308<br>无符号：0/2.225 073 858 507 201 4E-308 ~1.797 693 134 862 315 7E+308</td><td>定点数</td></tr></tbody></table><blockquote><p>M : 数据长度    D : 小数点后的长度</p></blockquote><p><strong>字符串类型</strong></p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>取值范围</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>CHAR</strong></td><td>0~2^8-1(字符)</td><td>用于表示固定长度的字符串</td></tr><tr><td><strong>VARCHAR</strong></td><td>0~2^8-1(字符)</td><td>用于表示可变长度的字符串</td></tr><tr><td><strong>ENUM</strong></td><td>0~2^16-1(字节数)</td><td>表示枚举类型，只能存储一个枚举字符串值</td></tr><tr><td><strong>BLOB</strong></td><td>0~2^16-1(字节数)</td><td>用于表示二进制大数据（常规的）</td></tr><tr><td><strong>TEXT</strong></td><td>0~2^16-1(字节数)</td><td>用于表示大文本数据（常规的）</td></tr><tr><td><strong>TINYBLOB</strong></td><td>0~2^8-1(字节数)</td><td>用于表示二进制大数据（较小的）</td></tr><tr><td><strong>TINYTEXT</strong></td><td>0~2^8-1(字节数)</td><td>用于表示大文本数据（较小的）</td></tr><tr><td><strong>MEDIUMBLOB</strong></td><td>0~2^24-1(字节数)</td><td>用于表示二进制大数据（中等的）</td></tr><tr><td><strong>MEDIUMTEXT</strong></td><td>0~2^24-1(字节数)</td><td>用于表示大文本数据（中等的）</td></tr><tr><td><strong>LONGBLOB</strong></td><td>0~2^32-1(字节数)</td><td>用于表示二进制大数据（较大的）</td></tr><tr><td><strong>LONGTEXT</strong></td><td>0~2^32-1(字节数)</td><td>用于表示大文本数据（较大的）</td></tr></tbody></table><blockquote><p>BLOB和TEXT都是用于存储大量数据的，但二者的区别在于，对于存储的数据进行排序和比较时，BLOB是区分大小写的，而TEXT是不区分大小写的。</p></blockquote><p><strong>日期与时间类型</strong></p><table><thead><tr><th><strong>数据类型</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td><strong>DATA</strong></td><td>用于存储日期，存储格式为YYYY-MM-DD 例如：2008-12-24</td></tr><tr><td><strong>TIME</strong></td><td>用于存储时间，存储格式为HH:MM:SS 例如：14:25:10</td></tr><tr><td><strong>DATETIME</strong></td><td>用于存储日期和时间，存储格式为YYYY-MM-DD HH:MM:SS</td></tr><tr><td><strong>TIMESTAMP</strong></td><td>用于存储时间戳，存储格式为YYYYMMDDHHMMSS</td></tr><tr><td><strong>YEAR(M)</strong></td><td>用于存储年份，M用于指定年份的长度，其值为2或4中的一种</td></tr></tbody></table><h3><span id="cun-chu-yin-qing">存储引擎</span><a href="#cun-chu-yin-qing" class="header-anchor">.</a></h3><ul><li><p>InnoDB 存储引擎</p><ul><li>默认的存储引擎</li><li>用于完成事务、回滚、崩溃修复和多版本并发控制的事务安全处理</li><li>提供了良好的事务管理、崩溃修复能力和并发控制</li></ul></li><li><p>MyISAM 存储引擎</p><blockquote><p>MyISAM 存储引擎是基于 ISAM 存储引擎发展起来的，它不仅解决了 ISAM的很多不足，还增加了很多有用的扩展。<br>其中，对于使用 MyISAM 存储引擎的数据表，会被存储成3个文件，文件名与表名相同，文件扩展名分别为 frm、myd 和 myi。</p><table><thead><tr><th><strong>扩展名</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td><strong>Frm</strong></td><td>用于存储表的结构</td></tr><tr><td><strong>Myd</strong></td><td>用于存储数据，是MYData的缩写</td></tr><tr><td><strong>Myi</strong></td><td>用于存储索引，是MYIndex的缩写</td></tr></tbody></table><p>相比 InnoDB ，MyISAM 的优点是处理速度快；缺点是不支持事务处理等</p></blockquote></li><li><p>MEMORY 存储引擎</p><blockquote><p>MEMORY存储引擎，是MySQL中的一类特殊的存储引擎。在MEMORY存储引擎的表中，所有数据都保存在内存中，因此数据的处理速度快，但不能持久保存（程序出错或关机时会丢失数据），而且不能存储太大的数据。对于需要很快的读写速度，但数据量小、不需要持久保存的数据来说，MEMORY存储引擎是一个理想的选择。</p></blockquote></li><li><p>ARCHIVE 存储引擎</p><blockquote><p>ARCHIVE 存储引擎适合保存数量庞大、长期维护但很少被访问的数据。对于使用 ARCHIVE 存储引擎的数据表，数据存储时会利用 zlib 压缩库进行压缩，在记录被请求时会实时进行解压。需要注意的是，ARCHIVE 存储引擎仅仅支持查询和插入操作，且由于不支持数据索引，查询效率比较低。</p></blockquote></li></ul><h4><span id="cha-kan-cun-chu-yin-qing-ddl">查看存储引擎(DDL)</span><a href="#cha-kan-cun-chu-yin-qing-ddl" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql">show engines;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200605215034612.png" alt="show engines"></p><h3><span id="shu-ju-biao-cao-zuo">数据表操作</span><a href="#shu-ju-biao-cao-zuo" class="header-anchor">.</a></h3><h4><span id="chuang-jian-shu-ju-biao-ddl">创建数据表(DDL)</span><a href="#chuang-jian-shu-ju-biao-ddl" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql">create [temporary] table [if not exists] 数据表名[(    col_name type [完整性约束条件],    ...)][table_options][select_statement];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[]中的内容是可选项 </p><p>完整性约束条件 : 字段的某些特殊约束条件</p><table><thead><tr><th><strong>参数名称</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td><strong>TEMPORARY</strong></td><td>如果使用该关键字，表示创建一个临时表</td></tr><tr><td><strong>IF NOT EXISTS</strong></td><td>如果表已经存在则不执行创建操作</td></tr><tr><td><strong>col_name</strong></td><td>字段名</td></tr><tr><td><strong>Type</strong></td><td>字段类型</td></tr><tr><td><strong>table_options</strong></td><td>表的一些特性参数</td></tr><tr><td><strong>select_statement</strong></td><td>用于根据SELECT语句的查询结果创建表</td></tr></tbody></table></blockquote><p><img src="/2020/07/23/63394/image-20200605221903473.png" alt="create table"></p><blockquote><p>comment 表示 注释内容</p></blockquote><h6><span id="zhu-yi">注意</span><a href="#zhu-yi" class="header-anchor">.</a></h6><blockquote><p>数据名的最大长度64字节<br>表名的最大长度64字节<br>列名的最大长度64字节<br>索引名的最大长度64字节<br>别名的最大长度255字节</p></blockquote><h4><span id="cha-kan-shu-ju-ku-zhong-de-biao-ddl">查看数据库中的表(DDL)</span><a href="#cha-kan-shu-ju-ku-zhong-de-biao-ddl" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql">-- 前提 use 数据库show tables;-- 无需 useshow tables from 数据库名称;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200605222459277.png" alt="show tables"></p><h4><span id="cha-kan-biao-jie-gou-ddl">查看表结构(DDL)</span><a href="#cha-kan-biao-jie-gou-ddl" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql">三种方案-- 1 此种方式可以查看数据表的创建语句和表的字符编码show create table `stu` \G# \G 用于显示结果纵向排列-- 2 此种方式用于查看表的字段信息describe `stu`;# 简写desc `stu`;# 可指定查看某一列desc `stu` `sno`;-- 3 # show [full] columns from 数据表名 [from 数据库名]# show [full] columns from 数据库名.数据表名show columns from `stu`<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200605222946108.png" alt="show create table"></p><p><img src="/2020/07/23/63394/image-20200605223522731.png" alt="desc"></p><p><img src="/2020/07/23/63394/image-20200605224208732.png" alt="show columns"></p><h4><span id="xiu-gai-biao-jie-gou-ddl">修改表结构(DDL)</span><a href="#xiu-gai-biao-jie-gou-ddl" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql">alter [ignore] table 数据表名add [column] create_definition [first | after column_name] # 添加新字段| change [column] old_col_name new_col_name type #修改字段名称及类型| modify [column] create_definition # 修改子句定义字段| drop [column] col_name # 删除字段| rename [as] new_tbl_name # 更改表名-- ------------------------------# create_definition : 包含 col_name type# type : 数据类型,约束条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上述语法中， 当指定 IGNORE 时，如果出现重复关键的行，则只执行一行，其他重复的行被删除。其中，ALTER TABLE 语句允许指定多个动作，动作间使用英文逗号（,）分隔，每个动作表示对表的一个修改。</p></blockquote><h5><span id="tian-jia-xin-zi-duan">添加新字段</span><a href="#tian-jia-xin-zi-duan" class="header-anchor">.</a></h5><p><img src="/2020/07/23/63394/image-20200606001029385.png" alt="alter table add"></p><h5><span id="xiu-gai-zi-duan-ming-ji-lei-xing">修改字段名及类型</span><a href="#xiu-gai-zi-duan-ming-ji-lei-xing" class="header-anchor">.</a></h5><p><img src="/2020/07/23/63394/image-20200606001456196.png" alt="alter table change"></p><p><img src="/2020/07/23/63394/image-20200606003843127.png" alt></p><blockquote><p>需要注意的是，在使用“CHANGE”时，必须为新字段名称设置数据类型，即使与原来的数据类型相同，也必须进行重新设置。此外，当修改后的数据类型无法容纳原有数据时，修改将会失败。</p></blockquote><h5><span id="xiu-gai-zi-duan-shu-ju-lei-xing">修改字段数据类型</span><a href="#xiu-gai-zi-duan-shu-ju-lei-xing" class="header-anchor">.</a></h5><p><img src="/2020/07/23/63394/image-20200606012000480.png" alt="alter table modify"></p><p><img src="/2020/07/23/63394/image-20200606012132672.png" alt></p><h5><span id="shan-chu-zi-duan">删除字段</span><a href="#shan-chu-zi-duan" class="header-anchor">.</a></h5><h5><span id><img src="/2020/07/23/63394/image-20200606012620193.png" alt="alter table drop"></span><a href="#" class="header-anchor">.</a></h5><p><img src="/2020/07/23/63394/image-20200606012758631.png" alt></p><h5><span id="geng-gai-biao-ming-cheng">更改表名称</span><a href="#geng-gai-biao-ming-cheng" class="header-anchor">.</a></h5><p><img src="/2020/07/23/63394/image-20200606013106138.png" alt="alter table rename"></p><h4><span id="chong-ming-ming-biao-duo-ge-shu-ju-biao">重命名表 （多个数据表）</span><a href="#chong-ming-ming-biao-duo-ge-shu-ju-biao" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql">rename table 源数据表名 to 新数据表名# 该语句可以同时对多个数据表进行重命名，多个表之间以逗号“,”分隔<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200606013742726.png" alt="rename table to"></p><h4><span id="shan-chu-biao-ddl">删除表(DDL)</span><a href="#shan-chu-biao-ddl" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql">drop table [if exists] 数据表名;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>在开发时，应谨慎使用数据表删除操作，因为数据表一旦删除，表中的所有数据都将被清除</p></blockquote><p>演示： 略</p><h3><span id="shu-ju-yue-shu">数据约束</span><a href="#shu-ju-yue-shu" class="header-anchor">.</a></h3><blockquote><p>在 MySQL 中，为了减少输入错误和保证数据的完整性，可以对字段设置约束。所谓约束就是一种命名规则和机制，通过对数据的增、删、改操作进行一些限制，以保证数据库中数据的完整性。</p></blockquote><h4><span id="chang-jian-de-biao-yue-shu-5-chong">常见的表约束（5种）</span><a href="#chang-jian-de-biao-yue-shu-5-chong" class="header-anchor">.</a></h4><ul><li>主键约束</li><li>非空约束</li><li>默认约束</li><li>唯一键约束</li><li>外键约束</li></ul><blockquote><p>MySQL 提供了两种定义约束的方式：</p><p>列约束和表约束。列约束定义在一个列上，只能对该列起约束作用</p><p>表约束一般定义在一个表的多个列上，要求被约束的列满足一定的关系。</p></blockquote><h5><span id="fei-kong-yue-shu-not-null">非空约束 not null</span><a href="#fei-kong-yue-shu-not-null" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql"># 被约束的当前字段的值不能为空值 NULL字段名 数据类型 NOT NULL;# 如sno varchar(12) not null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在 MySQL 中，所有数据类型的值都可以是 NULL，包括 INT、FLOAT 等数据类型。</p><p>需要注意的是，空字符串和 0 皆不属于空值 NULL。</p></blockquote><h5><span id="wei-yi-yue-shu-unique">唯一约束 unique</span><a href="#wei-yi-yue-shu-unique" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql"># 唯一约束用于保证数据表中字段的唯一性，即表中字段的值不能重复出现# 列级约束字段名 数据类型 UNIQUE# 表级约束UNIQUE(字段名1, 字段名2, ……);# 虽然不允许出现重复的值，但是可以出现多个空值 NULL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="zhu-jian-yue-shu-primary-key">主键约束 primary key</span><a href="#zhu-jian-yue-shu-primary-key" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql"># 主键约束相当于唯一约束和非空约束的组合# 每个表最多只允许含有一个主键，建立主键约束可以在列级别创建，也可以在表级别上创建#主键约束可以由一个字段构成单字段主键，也可以由多个字段组合而成# 列级约束字段名 数据类型  PRIMARY KEY# 表级约束PRIMARY KEY (字段名1,字段名2,……)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="mo-ren-yue-shu-default">默认约束 default</span><a href="#mo-ren-yue-shu-default" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql"># 默认约束用于指定数据表中字段的默认值字段名 数据类型 DEFAULT 默认值;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5><span id="wai-jian-yue-shu-foreign-key">外键约束  foreign key</span><a href="#wai-jian-yue-shu-foreign-key" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql"># 外键并不是通过列名实现的，而是通过定义外键约束实现的FOREIGN KEY (外键) REFERENCES 其他表(其他表主键);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="shu-ju-de-cao-zuo">数据的操作</span><a href="#shu-ju-de-cao-zuo" class="header-anchor">.</a></h3><h4><span id="cha-ru-ji-lu-dml">插入记录(DML)</span><a href="#cha-ru-ji-lu-dml" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql"># 字段列表的字段 位置顺序可以随意更改的insert into 表名(字段1,字段2,...) values(值1,值2,...);# 省略字段列表 数据必须按照数据表定义字段时的顺序insert into 表名 values(值1,值2,...);# 指定字段insert into 表名(字段1,字段2) values(值1,值2);insert into 表名 set 字段1=值1,...;# 同时添加多条记录insert into 表名(字段1,字段2,...) values(值1,值2,...),(值1,值2,...),...(值1,值2,...);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200606090607830.png" alt="insert into 带字段列表"></p><p><img src="/2020/07/23/63394/image-20200606091702499.png" alt="省略字段列表"></p><p><img src="/2020/07/23/63394/image-20200606095611370.png" alt="多条记录"></p><p><img src="/2020/07/23/63394/image-20200606095706478.png" alt="查看表中记录"></p><h4><span id="xiu-gai-ji-lu-dml">修改记录(DML)</span><a href="#xiu-gai-ji-lu-dml" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql">update 表名 set 字段1=值1,...[where 条件表达式];# “WHERE条件表达式”是可选的，用于指定哪些记录需要被更新。否则，数据表中的所有记录都将被更新<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4><span id="shan-chu-ji-lu-dml">删除记录(DML)</span><a href="#shan-chu-ji-lu-dml" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql">delete from 表名 [where 条件表达式];# “表名”指的是待执行删除操作的表，WHERE 子句为可选参数，用于指定删除的条件，满足条件的记录才会被删除# 若没有 条件表达式 代表 清空该表 除上述表达之外# 清空表truncate [table] 表名;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6><span id="truncate-yu-delete-de-qu-bie">truncate 与 delete的区别</span><a href="#truncate-yu-delete-de-qu-bie" class="header-anchor">.</a></h6><blockquote><p>1.DELETE语句是DML语句，TRUNCATE语句通常被认为是DDL语句。<br>2.DELETE语句后面可以跟WHERE子句，通过指定WHERE子句中的条件表达式只删除满足条件的部分记录，而TRUNCATE语句只能用于清空表中的所有记录。<br>3.使用TRUNCATE语句删除表中的数据后，再次向表中添加记录时，自动增加字段(auto_increment)的默认初始值重新由1开始，而使用DELETE语句删除表中的记录时，不影响自动增长值。</p></blockquote><h4><span id="cha-xun-yu-ju-dql">查询语句(DQL)</span><a href="#cha-xun-yu-ju-dql" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql"># 基本语法SELECT  [DISTINCT] *|{字段名1, 字段名2, 字段名3,……}FROM 表名    [WHERE 条件表达式1]    [GROUP BY 字段名 [HAVING 条件表达式2]]    [ORDER BY 字段名 [ASC|DESC]]    [LIMIT [OFFSET] 记录数]# AS子句 添加别名SELECT 字段名称 [AS] 别名, 字段名2 [AS] 别名,... FROM 表名;# 若别名是纯数字，或含有空格等特殊字符时，必须使用反引号“`”包裹。且在为字段定义别名时，AS可以省略使用空格代替。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th><strong>组成部分</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td><strong>DISTINCT</strong></td><td>可选参数，用于剔除查询结果中重复的数据</td></tr><tr><td><strong>*</strong></td><td>“*”是通配符，表示表中所有字段</td></tr><tr><td><strong>{字段名1,……}</strong></td><td>指定查询列表，与“*”为互斥关系，两者任选其一</td></tr><tr><td><strong>FROM</strong></td><td>用于指定待查询的数据表</td></tr><tr><td><strong>WHERE</strong></td><td>可选参数，用于指定查询条件</td></tr><tr><td><strong>GROUP BY</strong></td><td>可选参数，用于将查询结果按照指定字段进行分组，“HAVING”也是可选参数，用于对分组后的结果进行过滤</td></tr><tr><td><strong>ORDER BY</strong></td><td>可选参数，用于将查询结果按照指定字段进行排序。ASC表示升序，DESC表示降序</td></tr><tr><td><strong>LIMIT</strong></td><td>是可选参数，用于限制查询结果的数量。第1个参数表示偏移量，第2个参数设置返回查询记录的条数</td></tr></tbody></table><h4><span id="dan-biao-cha-xun-dql">单表查询(DQL)</span><a href="#dan-biao-cha-xun-dql" class="header-anchor">.</a></h4><h5><span id="tiao-jian-cha-xun">条件查询</span><a href="#tiao-jian-cha-xun" class="header-anchor">.</a></h5><p><img src="/2020/07/23/63394/image-20200606102411321.png" alt></p><h6><span id="zhu-yi-mysql-zai-cha-xun-shi-bu-qu-fen-ying-wen-da-xiao-xie">注意 mysql在查询时 不区分英文大小写</span><a href="#zhu-yi-mysql-zai-cha-xun-shi-bu-qu-fen-ying-wen-da-xiao-xie" class="header-anchor">.</a></h6><p><img src="/2020/07/23/63394/image-20200606105139864.png" alt></p><p><img src="/2020/07/23/63394/image-20200606105220291.png" alt></p><h5><span id="duo-tiao-jian-cha-xun">多条件查询</span><a href="#duo-tiao-jian-cha-xun" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql">select * from 表名 where (字段1，字段2) = (值1,值2);# orselect * from 表名 where 字段1 = 值1and    字段2 = 值2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="bi-jiao-da-xiao">比较大小</span><a href="#bi-jiao-da-xiao" class="header-anchor">.</a></h5><pre class="line-numbers language-sql"><code class="language-sql"><span class="token operator">=</span>  <span class="token operator">></span>  <span class="token operator">&lt;</span>  <span class="token operator">>=</span>  <span class="token operator">&lt;=</span>  <span class="token operator">&lt;></span>  <span class="token operator">!=</span>  <span class="token operator">!</span><span class="token operator">></span>  <span class="token operator">!</span><span class="token operator">&lt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5><span id="dai-in-guan-jian-zi-cha-xun">带IN关键字查询</span><a href="#dai-in-guan-jian-zi-cha-xun" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql"># IN 关键字，用于判断某个字段的值是否在指定集合中SELECT  *|{字段名1, 字段名2, 字段名3,...} FROM 表名WHERE 字段名 [NOT] IN(元素1, 元素2, ...)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200606103921472.png" alt></p><h5><span id="dai-between-and-fan-wei-cha-xun">带BETWEEN AND 范围查询</span><a href="#dai-between-and-fan-wei-cha-xun" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT *|{字段名1, 字段名2, ……}FROM 表名WHERE 字段名 [NOT] BETWEEN 值1 AND 值2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200606104229114.png" alt></p><h5><span id="dai-like-de-zi-fu-pi-pei-cha-xun-mo-hu-cha-xun">带LIKE的字符匹配查询（模糊查询）</span><a href="#dai-like-de-zi-fu-pi-pei-cha-xun-mo-hu-cha-xun" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql"># 模糊查询SELECT *|{字段名1, 字段名2, ……}FROM 表名WHERE 字段名 [NOT] LIKE '匹配字符串';<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6><span id="tong-pei-fu">通配符</span><a href="#tong-pei-fu" class="header-anchor">.</a></h6><table><thead><tr><th><strong>通配符</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>%</strong></td><td>可以匹配一个字符或多个字符，可代表任意长度的字符串，长度可以为0。例如，“书%”表示以“书”开头的字符串。</td></tr><tr><td><strong>_</strong></td><td>仅可以匹配一个字符。例如，“书_”表示匹配字符串长度为2，以书开始的字符串。</td></tr></tbody></table><blockquote><p>百分号(%)适用于不定长的模糊查询</p><p>下划线(_)适用于定长的查询。</p></blockquote><h6><span id="zhuan-yi-zi-fu">转义字符</span><a href="#zhuan-yi-zi-fu" class="header-anchor">.</a></h6><blockquote><p>有时存在字符串中本身就含有 _ 或 %，那么我们就需要转义字符</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> <span class="token keyword">USER</span> <span class="token keyword">WHERE</span> name <span class="token operator">like</span> <span class="token operator">%</span>n\__1<span class="token operator">%</span> <span class="token keyword">ESCAPE</span> <span class="token string">'\'</span> <span class="token comment" spellcheck="true">-- 第一个_ 被转义</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5><span id="dai-and-de-duo-tiao-jian-cha-xun">带AND的多条件查询</span><a href="#dai-and-de-duo-tiao-jian-cha-xun" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT *|{字段名1, 字段名2, ...}FROM 表名WHERE 条件表达式1 AND 条件表达式2 [... AND 条件表达式n];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5><span id="dai-or-de-tiao-jian-cha-xun">带OR的条件查询</span><a href="#dai-or-de-tiao-jian-cha-xun" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT *|{字段名1, 字段名2, ...}FROM 表名WHERE 条件表达式1 OR 条件表达式2 [... OR 条件表达式n];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5><span id="dai-not-shao">带NOT (少)</span><a href="#dai-not-shao" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT *|{字段名1, 字段名2, 字段名3,...} FROM 表名 WHERE NOT 字段 = 值;# 相当于 WHERE 字段 <> 值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="pai-xu-yu-xian-liang-dan-biao-cha-xun-dql">排序与限量 (单表查询)(DQL)</span><a href="#pai-xu-yu-xian-liang-dan-biao-cha-xun-dql" class="header-anchor">.</a></h4><h5><span id="order-by-pai-xu-cha-xun">ORDER BY排序查询</span><a href="#order-by-pai-xu-cha-xun" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT 字段名1, 字段名2, ...FROM 表名ORDER BY 字段名1 [ASC | DESC] [, 字段名2 [ASC | DESC...];# ASC 升序# DESC 降序# 当有多个字段进行排序时，首先按照字段名 1 进行排序，当遇到字段 1值相同时，再按照字段 2 进行排序<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果要实现<strong>分组结果</strong>的排序，ORDER BY 子句中必须使用 聚集函数或GROUP BY 子句的分组列</p></blockquote><h5><span id="limit-xian-liang-cha-xun-fen-ye-cha-xun">LIMIT限量查询(分页查询)</span><a href="#limit-xian-liang-cha-xun-fen-ye-cha-xun" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql"># 对于一次性查询出的大量记录，不仅不便于阅读查看，还会浪费系统效率# 指定查询结果从哪一条记录开始，以及每次查询出的记录数量SELECT 字段名1, 字段名2, ……FROM 表名LIMIT [OFFSET, ] 记录数;# OFFSET 默认从0开始 表示 第一条记录 开始#如LIMIT 3 OFFSET 2; # 从第三条记录开始 最多 3条记录LIMIT 2, 3;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>分页查询</p><p>LIMIT 和 OFFSET对应关系</p><p>LIMIT pageSize</p><p>对应的 OFFSET  pageSize*i   （i  从 0 开始的整数）</p></blockquote><h4><span id="ju-he-han-shu-yu-fen-zu-dan-biao-cha-xun-dql">聚合函数与分组(单表查询）(DQL)</span><a href="#ju-he-han-shu-yu-fen-zu-dan-biao-cha-xun-dql" class="header-anchor">.</a></h4><h5><span id="ju-he-han-shu">聚合函数</span><a href="#ju-he-han-shu" class="header-anchor">.</a></h5><blockquote><p>聚合函数就是把数据聚合起来的函数</p></blockquote><table><thead><tr><th><strong>函数名</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td><strong>COUNT()</strong></td><td>计算表中记录的个数或者列中值的个数。</td></tr><tr><td><strong>SUM()</strong></td><td>获取符合条件所有结果的和。</td></tr><tr><td><strong>AVG()</strong></td><td>计算一列中数据值的平均值。</td></tr><tr><td><strong>MAX()</strong></td><td>获取查询数据中的最大值。</td></tr><tr><td><strong>MIN()</strong></td><td>获取查询数据中的最小值。</td></tr></tbody></table><h5><span id="group-by-fen-zu-cha-xun">GROUP BY 分组查询</span><a href="#group-by-fen-zu-cha-xun" class="header-anchor">.</a></h5><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT 字段名1, 字段名2, ...FROM 表名GROUP BY 字段名1 [, 字段名2, ... [HAVING 条件表达式]];# HAVING 关键字指定条件表达式对分组后的内容进行过滤# HAVING 与 WHERE 虽然作用相同，但是它们还是有一定的区别，HAVING 关键字后可以跟聚合函数，而 WHERE 则不可以<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，使用 GROUP BY 直接进行分组查询后，<code>显示的结果是分组后的第一条记录的值</code>。因此，搭配 COUNT() 或 GROUP_CONCAT() 等聚合函数一起使用，才能获得每个组的查询结果。</p></blockquote><p><img src="/2020/07/23/63394/image-20200606112102315.png" alt></p><p><img src="/2020/07/23/63394/image-20200606112822165.png" alt></p><h4><span id="duo-biao-cha-xun-dql">多表查询 (DQL)</span><a href="#duo-biao-cha-xun-dql" class="header-anchor">.</a></h4><pre class="line-numbers language-mysql"><code class="language-mysql"># 笛卡尔积SELECT * FROM 表1,表2;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5><span id="he-bing-cha-xun">合并查询</span><a href="#he-bing-cha-xun" class="header-anchor">.</a></h5><blockquote><p>将多个 SELECT 语句的查询结果合并到一起</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT  ...UNION [ALL | DISTINCT]SELECT  ...[UNION [ALL | DISTINCT]SELECT  ......];# 默认 DISTINCT<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>查询结果集中的字段名称总是与第一个 SELECT 语句中的字段名称相同。<br>每个SELECT语句必须<code>拥有相同数量的字段</code>，和<code>相似的数据类型(如unsigned int, int)</code>。另外，每条 SELECT 语句中相同数据类型的字段顺序也必须相同。</p><p>SELECT <code>cid</code>, <code>name</code> FROM <code>article</code> WHERE <code>cid</code> = 1<br>UNION<br>SELECT <code>cid</code>, <code>cname</code> FROM <code>category</code> WHERE <code>cid</code> = 1;</p><p>当使用 UNION 连接的多个查询结果中存在相同的记录时，会自动合并成一条记录。如果不需要合并可以使用 UNION ALL 进行合并查询。</p></blockquote><h5><span id="lian-jie-cha-xun">连接查询</span><a href="#lian-jie-cha-xun" class="header-anchor">.</a></h5><ul><li>交叉连接查询</li><li>内连接查询</li><li>外连接查询</li></ul><h6><span id="jiao-cha-lian-jie">交叉连接</span><a href="#jiao-cha-lian-jie" class="header-anchor">.</a></h6><blockquote><p>交叉连接（CROSS JOIN）: 被连接的两个表中所有数据行的笛卡尔积</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT 查询字段 FROM 表1 CROSS JOIN 表2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6><span id="nei-lian-jie">内连接</span><a href="#nei-lian-jie" class="header-anchor">.</a></h6><blockquote><p>内连接（INNER JOIN）又称简单连接或自然连接 </p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT 查询字段 FROM 表1 [INNER] JOIN 表2 ON 表1.关系字段 = 表2.关系字段 WHERE 条件;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>ON 与 WHERE 虽然都是用于连接查询条件，但是它们的使用是有区别的</p><p>ON 用于过滤两表连接的条件</p><p>WHERE 用于过滤中间表的记录数据</p><p>由于内连接查询是<strong>默认</strong>的连接方式，因此可以省略INNER 关键字</p></blockquote><p><strong>在内连接查询中还有一种特殊的查询</strong>：</p><p>​        自连接查询。它是指相互连接的表在物理上为同一个表，但逻辑上分为两个表</p><h6><span id="wai-lian-jie">外连接</span><a href="#wai-lian-jie" class="header-anchor">.</a></h6><blockquote><p>与内连接不同的是，外连接（OUTER JOIN）生成的结果集不仅可以包括符合连接条件的数据记录，</p><p>而且还可以包括左表、右表或两表中所有的数据记录。</p><p>根据使用需求不同，外连接可以分为：左连接“LEFT (OUTER) JOIN”、右连接查询“RIGHT (OUTER) JOIN”</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT 所查字段 FROM 表1 LEFT|RIGHT|FULL [OUTER] JOIN 表2ON 表1.关系字段 = 表2.关系字段 WHERE 条件# 关键字“LEFT|RIGHT [OUTER] JOIN”左边的表被称为左表，关键字右边的表被称为右表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>①左连接</strong></p><blockquote><p>左连接查询用于返回左表中的所有记录，以及右表中符合连接条件的记录。</p><p>当左表的某行记录在右表中没有匹配的记录时，右表中相关的记录将设为空值。</p></blockquote><p><strong>②右连接</strong></p><blockquote><p>右连接查询用于返回右表中的所有记录，以及左表中符合连接条件的记录</p><p>当右表的某行记录在左表中没有匹配的记录时，左表中相关的记录将设为空值。</p></blockquote><p><strong>③全连接</strong></p><blockquote><p>把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为NULL</p></blockquote><h6><span id="qu-bie">区别</span><a href="#qu-bie" class="header-anchor">.</a></h6><ul><li><p>INNER JOIN只返回同时存在于两张表的行数据</p></li><li><p>RIGHT OUTER JOIN返回右表都存在的行。如果某一行仅在右表存在，那么结果集就会以<code>NULL</code>填充剩下的字段</p></li><li><p>LEFT OUTER JOIN则返回左表都存在的行</p></li><li><p>FULL OUTER JOIN，它会把两张表的所有记录全部选择出来，并且，自动把对方不存在的列填充为NULL</p></li></ul><h5><span id="zi-cha-xun">子查询</span><a href="#zi-cha-xun" class="header-anchor">.</a></h5><blockquote><p>包含在一条 SQL 语句中的 SELECT 语句</p><p>子查询必须书写在括号内</p><p>使用子查询时，外层语句的 WHERE 后面除了比较运算符外，还可以使用 IN、EXISTS、ANY、ALL 等操作符。</p></blockquote><h6><span id="dan-xing-zi-cha-xun">单行子查询</span><a href="#dan-xing-zi-cha-xun" class="header-anchor">.</a></h6><pre class="line-numbers language-mysql"><code class="language-mysql"># 将一个 SELECT 查询语句的结果作为另一个查询语句的 WHERE 条件SELECT * FROM `article` WHERE `cid`=(SELECT `cid` FROM `category` WHERE `cname`='生活');<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6><span id="dai-in-guan-jian-zi-de-zi-cha-xun">带IN关键字的子查询</span><a href="#dai-in-guan-jian-zi-de-zi-cha-xun" class="header-anchor">.</a></h6><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM `article` WHERE `cid` IN(SELECT `cid` FROM `category` WHERE `cname` IN('科技', '生活'));<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h6><span id="dai-exists-guan-jian-zi-de-zi-cha-xun">带EXISTS关键字的子查询</span><a href="#dai-exists-guan-jian-zi-de-zi-cha-xun" class="header-anchor">.</a></h6><pre class="line-numbers language-mysql"><code class="language-mysql"># EXISTS 关键字后面连接的子查询语句不返回查询记录，而是返回一个真假值# 当子查询语句查询到满足条件的记录时，就返回 TRUE，执行外层SQL 语句；否则返回 FALSE，不执行外层的 SQL 语句UPDATE `article` SET `name`='修改标题' WHERE `cid`=999 ANDEXISTS (SELECT 1 FROM `category` WHERE `cid`=999);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6><span id="dai-any-guan-jian-zi-de-zi-cha-xun">带ANY关键字的子查询</span><a href="#dai-any-guan-jian-zi-de-zi-cha-xun" class="header-anchor">.</a></h6><blockquote><p>使用 ANY 关键字时，只要其后的子查询满足其中任意一个判断条件，就返回结果作为外层 SQL 语句的执行条件</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM `article` WHERE `cid` = ANY (SELECT `cid` FROM `category`);#上述 SQL 语句执行后，查询出了在栏目表中有相应记录的文章信息。如果文章表中有一些文章的 cid 在栏目表中不存在相应记录，则不会被查询出来。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6><span id="dai-all-guan-jian-zi-de-zi-cha-xun">带ALL关键字的子查询</span><a href="#dai-all-guan-jian-zi-de-zi-cha-xun" class="header-anchor">.</a></h6><blockquote><p>ALL 关键字在使用时，只有满足内层查询语句返回的所有结果，才可以执行外层查询语句</p></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql">SELECT * FROM `article`WHERE `cid` <> ALL (SELECT `cid` FROM `category`);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>子查询返回单值的时候可用比较运算符，但返回多值的时候要用ANY或ALL，使用ANY和ALL时必须同时使用比较运算符</p><h6><span id="yu-any-he-all-xiang-guan-de-bi-jiao-yun-suan-fu">与ANY和ALL相关的比较运算符</span><a href="#yu-any-he-all-xiang-guan-de-bi-jiao-yun-suan-fu" class="header-anchor">.</a></h6><table><thead><tr><th>运算符</th><th>等效功能</th><th>功能含义</th></tr></thead><tbody><tr><td>&gt; ANY</td><td>&gt; 最小值（MIN）</td><td>大于子查询结果中的某个值</td></tr><tr><td>&gt; ALL</td><td>&gt; 最大值（MAX）</td><td>大于子查询结果中的所有值</td></tr><tr><td>&lt; ANY</td><td>&lt; 最小值（MIN）</td><td>小于子查询结果中的某个值</td></tr><tr><td>&lt; ALL</td><td>&lt; 最小值（MIN）</td><td>小于子查询结果中的所有值</td></tr><tr><td>&gt;= ANY</td><td>&gt;= 最小值（MIN）</td><td>大于等于子查询结果中的某个值</td></tr><tr><td>&gt;= ALL</td><td>&gt;= 最大值（MAX）</td><td>大于等于子查询结果中的所有值</td></tr><tr><td>&lt;= ANY</td><td>&lt;= 最小值（MIN）</td><td>小于等于子查询结果中的某个值</td></tr><tr><td>&lt;= ALL</td><td>&lt;= 最小值（MIN）</td><td>小于等于子查询结果中的所有值</td></tr><tr><td>= ANY</td><td>IN</td><td>等于子查询结果中的某个值</td></tr><tr><td>= ALL</td><td></td><td>等于子查询结果中的所有值（无意义）</td></tr><tr><td>!=ANY 或 &lt;&gt;ANY</td><td></td><td>不等于子查询结果中的某个值</td></tr><tr><td>!=ALL 或 &lt;&gt;ALL</td><td>NOT IN</td><td>不等于子查询结果中的任何一个值</td></tr></tbody></table><h3><span id="shi-wu">事务</span><a href="#shi-wu" class="header-anchor">.</a></h3><p><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1179611198786848" target="_blank" rel="noopener">廖雪峰事务</a></p><h4><span id="shu-ju-ku-shi-wu">数据库事务</span><a href="#shu-ju-ku-shi-wu" class="header-anchor">.</a></h4><blockquote><p>把多条语句作为一个整体进行操作的功能</p><p>数据库事务可以确保该事务范围内的所有操作都可以全部成功或者全部失败。</p><p>如果事务失败，那么效果就和没有执行这些SQL一样，不会对数据库数据有任何改动。</p></blockquote><h5><span id="shi-wu-de-4-ge-te-xing-yong-yu-bao-zheng-duo-tiao-sql-de-quan-bu-zhi-xing">事务的4个特性 : 用于保证多条SQL的全部执行</span><a href="#shi-wu-de-4-ge-te-xing-yong-yu-bao-zheng-duo-tiao-sql-de-quan-bu-zhi-xing" class="header-anchor">.</a></h5><ul><li>A：Atomic，原子性，将所有SQL作为原子工作单元执行，要么全部执行，要么全部不执行；</li><li>C：Consistent，一致性，事务完成后，所有数据的状态都是一致的，即A账户只要减去了100，B账户则必定加上了100；</li><li>I：Isolation，隔离性，如果有多个事务并发执行，每个事务作出的修改必须与其他事务隔离；</li><li>D：Duration，持久性，即事务完成后，对数据库数据的修改被持久化存储。</li></ul><h4><span id="yin-shi-shi-wu">隐式事务</span><a href="#yin-shi-shi-wu" class="header-anchor">.</a></h4><blockquote><p>对于单条SQL语句，数据库系统自动将其作为一个事务执行</p></blockquote><h4><span id="xian-shi-shi-wu">显式事务</span><a href="#xian-shi-shi-wu" class="header-anchor">.</a></h4><blockquote><p>要手动把多条SQL语句作为一个事务执行，使用<code>BEGIN</code>开启一个事务，使用<code>COMMIT</code>提交一个事务</p><blockquote><p><code>COMMIT</code>是指提交事务，即试图把事务内的所有SQL所做的修改永久保存。</p><p>如果<code>COMMIT</code>语句执行失败了，整个事务也会失败。</p></blockquote><blockquote><p>有时希望主动让事务失败，这时，可以用<code>ROLLBACK</code>回滚事务，整个事务会失败</p></blockquote><blockquote><p>数据库事务是由数据库系统保证的，我们只需要根据业务逻辑使用它就可以</p></blockquote></blockquote><pre class="line-numbers language-mysql"><code class="language-mysql"># 显式事务BEGIN;    SQL语句1;    ...COMMIT;# 回滚BEGIN;    SQL语句1;    ...ROLLBACK;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="ge-chi-ji-bie">隔离级别</span><a href="#ge-chi-ji-bie" class="header-anchor">.</a></h4><p>对于两个并发执行的事务，如果涉及到操作同一条记录的时候，可能会发生问题。因为并发操作会带来数据的不一致性，包括脏读、不可重复读、幻读等。数据库系统提供了隔离级别来让我们有针对性地选择事务的隔离级别，避免数据不一致的问题。</p><p>SQL标准定义了4种隔离级别，分别对应可能出现的数据不一致的情况：</p><table><thead><tr><th align="left">Isolation Level</th><th align="left">脏读（Dirty Read）</th><th align="left">不可重复读（Non Repeatable Read）</th><th align="left">幻读（Phantom Read）</th></tr></thead><tbody><tr><td align="left">Read Uncommitted</td><td align="left">Yes</td><td align="left">Yes</td><td align="left">Yes</td></tr><tr><td align="left">Read Committed</td><td align="left">-</td><td align="left">Yes</td><td align="left">Yes</td></tr><tr><td align="left">Repeatable Read</td><td align="left">-</td><td align="left">-</td><td align="left">Yes</td></tr><tr><td align="left">Serializable</td><td align="left">-</td><td align="left">-</td><td align="left">-</td></tr></tbody></table><p><strong>students表数据</strong></p><pre class="line-numbers language-mysql"><code class="language-mysql">select * from students;+----+-------+| id | name  |+----+-------+|  1 | Alice |+----+-------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p><strong>Read Uncommitted</strong>是隔离级别最低的一种事务级别。在这种隔离级别下，一个事务会读到另一个事务更新后但未提交的数据，如果另一个事务回滚，那么当前事务读到的数据就是脏数据，这就是脏读（Dirty Read）</p><blockquote><p><strong>脏数据</strong>:从目标中取出的数据已经过期、错误或者没有意义 ，即，与数据库中内容不一致的数据</p></blockquote></li></ul><table><thead><tr><th align="left">时刻</th><th align="left">事务A</th><th align="left">事务B</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td><td align="left">SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;</td></tr><tr><td align="left">2</td><td align="left">BEGIN;</td><td align="left">BEGIN;</td></tr><tr><td align="left">3</td><td align="left">UPDATE students SET name = ‘Bob’ WHERE id = 1;</td><td align="left"></td></tr><tr><td align="left">4</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 1;</td></tr><tr><td align="left">5</td><td align="left">ROLLBACK;</td><td align="left"></td></tr><tr><td align="left">6</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 1;</td></tr><tr><td align="left">7</td><td align="left"></td><td align="left">COMMIT;</td></tr></tbody></table><ul><li><p>在<strong>Read Committed</strong>隔离级别下，一个事务可能会遇到不可重复读（Non Repeatable Read）的问题。</p><p>不可重复读是指，在一个事务内，多次读同一数据，在这个事务还没有结束时，如果另一个事务恰好修改了这个数据，那么，在第一个事务中，两次读取的数据就可能不一致。</p></li></ul><table><thead><tr><th align="left">时刻</th><th align="left">事务A</th><th align="left">事务B</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</td><td align="left">SET TRANSACTION ISOLATION LEVEL READ COMMITTED;</td></tr><tr><td align="left">2</td><td align="left">BEGIN;</td><td align="left">BEGIN;</td></tr><tr><td align="left">3</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 1;</td></tr><tr><td align="left">4</td><td align="left">UPDATE students SET name = ‘Bob’ WHERE id = 1;</td><td align="left"></td></tr><tr><td align="left">5</td><td align="left">COMMIT;</td><td align="left"></td></tr><tr><td align="left">6</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 1;</td></tr><tr><td align="left">7</td><td align="left"></td><td align="left">COMMIT;</td></tr></tbody></table><ul><li><p>在<strong>Repeatable Read</strong>隔离级别下，一个事务可能会遇到幻读（Phantom Read）的问题。</p><p>幻读是指，在一个事务中，第一次查询某条记录，发现没有，但是，当试图更新这条不存在的记录时，竟然能成功，并且，再次读取同一条记录，它就神奇地出现了。</p><table><thead><tr><th align="left">时刻</th><th align="left">事务A</th><th align="left">事务B</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</td><td align="left">SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;</td></tr><tr><td align="left">2</td><td align="left">BEGIN;</td><td align="left">BEGIN;</td></tr><tr><td align="left">3</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 99;</td></tr><tr><td align="left">4</td><td align="left">INSERT INTO students (id, name) VALUES (99, ‘Bob’);</td><td align="left"></td></tr><tr><td align="left">5</td><td align="left">COMMIT;</td><td align="left"></td></tr><tr><td align="left">6</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 99;</td></tr><tr><td align="left">7</td><td align="left"></td><td align="left">UPDATE students SET name = ‘Alice’ WHERE id = 99;</td></tr><tr><td align="left">8</td><td align="left"></td><td align="left">SELECT * FROM students WHERE id = 99;</td></tr><tr><td align="left">9</td><td align="left"></td><td align="left">COMMIT;</td></tr></tbody></table></li><li><p><strong>Serializable</strong>(可串行化)是最严格的隔离级别。在Serializable隔离级别下，所有事务按照次序依次执行，因此，脏读、不可重复读、幻读都不会出现。</p><p>虽然Serializable隔离级别下的事务具有最高的安全性，但是，由于事务是串行执行，所以效率会大大下降，应用程序的性能会急剧降低。如果没有特别重要的情景，一般都不会使用Serializable隔离级别</p></li></ul><h4><span id="mo-ren-ge-chi-ji-bie">默认隔离级别</span><a href="#mo-ren-ge-chi-ji-bie" class="header-anchor">.</a></h4><p>​    如果没有指定隔离级别，数据库就会使用默认的隔离级别。在MySQL中，如果使用InnoDB，默认的隔离级别是Repeatable Read</p><h2><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h2><h3><span id="1-select-ke-yong-yu-ji-suan">1.select可用于计算</span><a href="#1-select-ke-yong-yu-ji-suan" class="header-anchor">.</a></h3><pre class="line-numbers language-mysql"><code class="language-mysql">select 100 + 100; //结果 200# 这个主要用来判断当前到数据库的连接是否有效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/23/63394/image-20200607144156716.png" alt></p><h3><span id="2-na-me-duo-lian-jie-cha-xun-ru-he-he-li-shi-yong">2.那么多连接查询，如何合理使用？</span><a href="#2-na-me-duo-lian-jie-cha-xun-ru-he-he-li-shi-yong" class="header-anchor">.</a></h3><p>我们把tableA看作左表，把tableB看成右表，那么INNER JOIN是选出两张表都存在的记录：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/1246892164662976/l" alt="inner-join"></p><p>LEFT OUTER JOIN是选出左表存在的记录：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/1246893588481376/l" alt="left-outer-join"></p><p>RIGHT OUTER JOIN是选出右表存在的记录：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/1246893609222688/l" alt="right-outer-join"></p><p>FULL OUTER JOIN则是选出左右表都存在的记录：</p><p><img src="https://www.liaoxuefeng.com/files/attachments/1246893632359424/l" alt="full-outer-join"></p><h3><span id="3-guan-xi-shu-ju-ku-de-ji-ben-cao-zuo-jiu-shi-zeng-shan-gai-cha-ji-crud-create-retrieve-update-delete-qi-zhong-dui-yu-cha-xun-wo-men-yi-jing-xiang-xi-jiang-shu-liao-select-yu-ju-de-xiang-xi-yong-fa">3.关系数据库的基本操作就是增删改查，即CRUD：Create、Retrieve、Update、Delete。其中，对于查询，我们已经详细讲述了<code>SELECT</code>语句的详细用法。</span><a href="#3-guan-xi-shu-ju-ku-de-ji-ben-cao-zuo-jiu-shi-zeng-shan-gai-cha-ji-crud-create-retrieve-update-delete-qi-zhong-dui-yu-cha-xun-wo-men-yi-jing-xiang-xi-jiang-shu-liao-select-yu-ju-de-xiang-xi-yong-fa" class="header-anchor">.</a></h3><h3><span id="4-cha-ru-huo-ti-huan">4.插入或替换</span><a href="#4-cha-ru-huo-ti-huan" class="header-anchor">.</a></h3><pre class="line-numbers language-mysql"><code class="language-mysql"># 添加新记录是 但是 记录已存在时，如果不想先删除已存在记录,再插入新记录 可使用REPLACE INTO 表名(字段1,字段2,...) VALUES(值1,值2,...);#当记录是不存在的时候,replace 作用 与 insert 一致<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="5-cha-ru-huo-geng-xin">5.插入或更新</span><a href="#5-cha-ru-huo-geng-xin" class="header-anchor">.</a></h3><pre class="line-numbers language-mysql"><code class="language-mysql"># 同样与replace 应用在 添加新纪录 ，但已存在的情况下INSERT INTO 表名(字段1,字段2,...) VALUES(值1,值2,...)ON DUPLICATE KEY UPDATE 字段1=新值1 [,字段2=新值2, ...];# 当记录不存在的时候, 添加时 只使用 insert 的字段 及 值# 当记录存在的时候, 添加时 使用 update 的字段 及 值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="6-cha-ru-huo-hu-lue">6.插入或忽略</span><a href="#6-cha-ru-huo-hu-lue" class="header-anchor">.</a></h3><pre class="line-numbers language-mysql"><code class="language-mysql"># 如果我们希望插入一条新记录（INSERT），但如果记录已经存在，就啥事也不干直接忽略INSERT IGNORE INTO 表名(字段1,字段2,...) VALUES(值1,值2,...);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="7-kuai-zhao-cha-xun-jie-guo-ji-jian-li-xin-biao">7.快照 （查询结果集建立新表）</span><a href="#7-kuai-zhao-cha-xun-jie-guo-ji-jian-li-xin-biao" class="header-anchor">.</a></h3><pre class="line-numbers language-mysql"><code class="language-mysql"># 如果想要对一个表进行快照，即复制一份当前表的数据到一个新表CREATE TABLE 新表 SELECT * FROM  旧表 [WHERE 条件表达式];<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="8-xie-ru-cha-xun-jie-guo-ji">8.写入查询结果集</span><a href="#8-xie-ru-cha-xun-jie-guo-ji" class="header-anchor">.</a></h3><pre class="line-numbers language-mysql"><code class="language-mysql"># 如果查询结果集需要写入到表中，可以结合INSERT和SELECT，将SELECT语句的结果集直接插入到指定表中。# 创建一个统计成绩的表statistics，记录各班的平均成绩：CREATE TABLE statistics (    id BIGINT NOT NULL AUTO_INCREMENT,    class_id BIGINT NOT NULL,    average DOUBLE NOT NULL,    PRIMARY KEY (id));# 我们就可以用一条语句写入各班的平均成绩INSERT INTO statistics (class_id, average) SELECT class_id, AVG(score) FROM students GROUP BY class_id;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>确保<code>INSERT</code>语句的列和<code>SELECT</code>语句的列能一一对应</p></blockquote><h3><span id="9-qiang-zhi-shi-yong-zhi-ding-suo-yin">9.强制使用指定索引</span><a href="#9-qiang-zhi-shi-yong-zhi-ding-suo-yin" class="header-anchor">.</a></h3><pre class="line-numbers language-mysql"><code class="language-mysql"># 在查询的时候，数据库系统会自动分析查询语句，并选择一个最合适的索引。但是很多时候，数据库系统的查询优化器并不一定总是能使用最优索引。如果我们知道如何选择索引，可以使用FORCE INDEX强制查询使用指定的索引SELECT * FROM students FORCE INDEX (idx_class_id) WHERE class_id = 1 ORDER BY id DESC;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>指定索引的前提是索引<code>idx_class_id</code>必须存在。</p></blockquote><h3><span id="10-mo-shi-de-chuang-jian-yu-shan-chu">10. 模式的创建与删除</span><a href="#10-mo-shi-de-chuang-jian-yu-shan-chu" class="header-anchor">.</a></h3><blockquote><p>创建一个模式相当于创建一个<strong>命名空间</strong>，我们可以在这个命名空间创建数据库对象，如表，视图，索引。。。</p></blockquote><p><strong>创建：</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">SCHEMA</span> <span class="token punctuation">[</span>模式名<span class="token punctuation">]</span> <span class="token keyword">AUTHORIZATION</span> 用户名 <span class="token comment" spellcheck="true">-- 如果没有定义模式名，默认使用用户名充当</span>    <span class="token punctuation">[</span>表定义语句<span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span>视图定义语句<span class="token punctuation">]</span><span class="token operator">|</span><span class="token punctuation">[</span>授权定义子句<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>删除：</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">SCHEMA</span> 模式名 <span class="token keyword">CASCADE</span> <span class="token operator">|</span> <span class="token keyword">RESTRICT</span> <span class="token comment" spellcheck="true">-- 级联：删除模式下的所有数据库对象；限制：若存在数据库对象，不删除模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="11-suo-yin-de-chuang-jian-yu-shan-chu">11.索引的创建与删除</span><a href="#11-suo-yin-de-chuang-jian-yu-shan-chu" class="header-anchor">.</a></h3><blockquote><p>索引是基本表的目录</p></blockquote><p><strong>作用：</strong></p><ul><li>加快数据查询速度<ul><li>数据量大时，数据文件很大，不使用索引，每次查询，会将数据文件分块读到内存中，查找</li><li>如果使用索引，那么先加载索引文件（比数据文件小很多），根据索引找到元祖数据的位置，然后加载元祖数据所在的块，加载到内存查找；</li></ul></li><li>保证数据的唯一性<ul><li>定义索引，需要定义数据的唯一性</li></ul></li><li>加快连接速度<ul><li>两个表的连接操作，（连接字段建立索引）</li></ul></li></ul><p><strong>建立原则：</strong></p><ul><li>大表建索引</li><li>基本表，不要创建过多索引</li><li>更具查询条件要求建立索引（查询频度高的）</li></ul><p><strong>创建索引：</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> CLUSTER <span class="token operator">|</span> <span class="token keyword">UNIQUE</span> <span class="token keyword">INDEX</span> IX_xxx <span class="token keyword">ON</span> 表名<span class="token punctuation">(</span>列名 <span class="token punctuation">[</span><span class="token keyword">DESC</span> <span class="token operator">|</span> <span class="token keyword">ASC</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">,</span>列名。。。<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">-- CLUSTER 聚簇索引：索引项的排序顺序与基本表的物理顺序一致</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>删除索引：</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">INDEX</span> IX_xxx <span class="token comment" spellcheck="true">-- 增删改频繁的，系统会花费大量时间维护索引，查询效率变低，因此需要删除这些不必要的索引</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="12-shi-tu-de-chuang-jian-yu-shan-chu">12.视图的创建与删除</span><a href="#12-shi-tu-de-chuang-jian-yu-shan-chu" class="header-anchor">.</a></h3><blockquote><p>视图是从一个表或几个基本表(或视图)中选定某些记录或列而导出的特殊类型的<strong>表</strong>。</p><p>视图本身并不存储数据，数据仍存储在原来的基本表上，试图数据是虚拟的，视图只是提供了一种访问基本表中数据的方法。</p><p>视图是一个虚表，数据库只存放视图的定义，但是视图视图创建后，用户可以像基本表一样对视图进行查询，在特殊情况下甚至可以增删改</p></blockquote><p><strong>优点：</strong></p><ul><li>增加数据安全性<ul><li>可以限制用户直接存取基本表的某些列或记录</li></ul></li><li>屏蔽数据的复杂性<ul><li>通过视图可得到多个基本表经过计算后的数据</li></ul></li></ul><p><strong>视图创建：</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">VIEW</span> 视图名 <span class="token punctuation">[</span><span class="token punctuation">(</span>列名<span class="token punctuation">[</span><span class="token punctuation">,</span>列名<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">-- 指定列</span><span class="token keyword">AS</span> SQL子查询语句<span class="token punctuation">[</span><span class="token keyword">WITH</span> <span class="token keyword">CHECK</span> <span class="token keyword">OPTION</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">-- 这一行表示 对视图进行增删改操作是要保证，操作的行，要满足子查询语句的条件表达式中的条件，即会自定添加 子查询的条件，如下</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> view_1 <span class="token keyword">as</span>     <span class="token keyword">select</span> sno<span class="token punctuation">,</span>sname    <span class="token keyword">from</span> student    <span class="token keyword">where</span> sno <span class="token operator">></span> <span class="token number">20</span>    <span class="token keyword">with</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span class="token operator">=</span><span class="token operator">=</span><span class="token operator">></span> 对视图进行增删改操作时，需要满足 sno <span class="token operator">></span> <span class="token number">20</span> 的条件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>删除视图：</strong></p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">DROP</span> <span class="token keyword">VIEW</span> 视图名 <span class="token punctuation">[</span><span class="token keyword">CASCADE</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">-- 级联：删除本视图和导出引用的所有视图</span><span class="token comment" spellcheck="true">-- 删除视图，只是删除视图的定义，数据还在(只有数据库管理员才能删除)</span><span class="token comment" spellcheck="true">-- 视图对对应的 基本表删除后，视图将无意义，因此我们也需要删除视图</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4><span id="shi-tu-de-cha-xun-yu-geng-xin">视图的查询与更新</span><a href="#shi-tu-de-cha-xun-yu-geng-xin" class="header-anchor">.</a></h4><p><strong>试图查询：</strong></p><blockquote><p>使用与基本表一致</p></blockquote><p><strong>视图更新：</strong></p><blockquote><p>实际上是 基本表的更新; <strong>但是</strong><code>只能在一个基本表上进行增删改的操作</code>，增删改时为了避免对不属于视图的部分进行操作，定义视图都需要加上 <code>with check option</code></p></blockquote><blockquote><p>使用与基本表一致</p></blockquote><p><strong>其他注意点：</strong></p><ul><li><p>如果视图定义中 <code>SELECT</code>语句中含有 <code>GROUP BY</code>、<code>DISTINCT</code> 或 <strong>聚集函数</strong> 等，可进行删除操作，不能进行插入、修改操作</p></li><li><p>如果视图中包含由表达式计算的列，那么也不允许进行 修改操作</p></li><li><p><strong>如果视图中没有包含基本表的所有非空列，则不能 进行插入操作</strong></p></li><li><p>如果视图定义中含有嵌套语句，且内层查询的from子句中涉及的表也是导出的视图的基本表，则不允许更新</p></li></ul><blockquote><p> 总之，使用视图，就别想着增删改</p></blockquote><h3><span id="13-fang-fa">13.方法</span><a href="#13-fang-fa" class="header-anchor">.</a></h3><p><code>DATEPART</code> : <code>SQLServer</code>中 获取日期部分</p><pre class="line-numbers language-sql"><code class="language-sql">DATAPART<span class="token punctuation">(</span>year<span class="token punctuation">,</span>getdate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>getdate</code>：获取当前时间</p><p><code>LOWER</code>：字符串小写</p><h3><span id="14-xiao-ti-shi">14. 小提示</span><a href="#14-xiao-ti-shi" class="header-anchor">.</a></h3><ul><li><code>WHERE</code> 和 <code>GROUP</code> 子句中都不能出现 <strong>聚集函数</strong>，其他的可以</li><li>如果要实现<strong>分组结果</strong>的排序，ORDER BY 子句中必须使用 聚集函数或GROUP BY 子句的分组列 </li></ul><h3><span id="15-san-fan-shi">15. 三范式</span><a href="#15-san-fan-shi" class="header-anchor">.</a></h3><p><strong>第一范式 1NF</strong></p><p><code>为了解决高层项导致的更新困难，如 经理 分为 正副 ==&gt; 直接 正经理和副经理</code></p><blockquote><p>属性是不可再分的原子值</p></blockquote><p><strong>第二范式 2NF</strong></p><p><code>为了解决存在的大量冗余数据和操作异常问题</code></p><blockquote><p>非主键完全依赖于主键，主键值可以确定唯一非主键值，一个主键确定唯一一行</p></blockquote><p><strong>第三范式 3NF</strong></p><blockquote><p>所有字段只能依赖于主属性，不能依赖其他字段。消除依赖传递</p></blockquote><h3><span id="16-bing-fa-cao-zuo-wen-ti">16.并发操作问题</span><a href="#16-bing-fa-cao-zuo-wen-ti" class="header-anchor">.</a></h3><blockquote><p>影响数据一致性</p></blockquote><ol><li><p>丢失修改</p><p>两个事务T1和T2读入同一个数据并修改<strong>，事务T2提交的修改结果覆盖了事务T1提交的修改结果</strong>，导致提交的修改结果，导致事务T1的修改结果丢失。</p></li><li><p>脏读</p><p>事务T1更改某一数据，并写入数据库，事务T2读取同一数据，但事<strong>务T1由于某种原因被撤销</strong>，此时事务T1更改过的数据恢复到原来的值，使事务T2读取到的值与数据库中的值不同，只是操作过程中的一个过渡性的、不需要的、脏的数据。</p></li><li><p>不可重复读</p><p><strong>事务T1读取数据后，事务T2执行更改操作，使事务T1无法在现前一次读取的结果</strong></p><ul><li>事务T1读取某一数据之后，事务T2对其修改，T1再次读取时，结果与上次不一致</li><li>事务T1按一定条件读取某些数据记录以后，事务T2删除了其中的部分记录，使事务T1按相同条件再次读取记录时，发现某些记录不存在了。（幻读的一种格式）</li><li>事务T1按一定条件读取某些数据记录以后，事务T2插入了一些记录，使事务T1按相同的条件再次读取记录时，发现增加了记录。（幻读的一种格式，普遍）</li></ul></li><li><p>幻读</p><p>事务T1插入数据提交前，事务T2获取数据；T1事务提交后，T2获取数据（结果多了新纪录）– repeatable read隔离之前</p><p>使用 repeatable read隔离之后：</p><p>​    T2获取的数据，是不会有任何变化的，但是当我们更新数据后，在查询，就会发现原本没有的记录，就有了记录（细节看之前的事务）</p></li></ol><h3><span id="17-suo">17.锁</span><a href="#17-suo" class="header-anchor">.</a></h3><ol><li><p>排他锁（行级）</p><blockquote><p>写锁，X锁</p></blockquote><ul><li>如果事务T对数据库对象加X锁，只允许事务T读取和更改操作，其他事务无法加锁 —— 保证数据不被同时读写</li></ul></li><li><p>共享锁（表级）</p><blockquote><p>读锁，S锁</p></blockquote><ul><li><p>如果事务T对数据库对象加S锁，只允许事务T读取，其他事务可以加S锁，但不能加X锁 ——</p><p>保证数据不被同时写，可以读</p></li></ul></li></ol><p><strong>锁定机制：</strong></p><ol><li><p>一级锁定协议：</p><ol><li><p>事务T在修改数据对象之前，必须先对其加X锁，并直到事务结束时才释放X锁；<strong>如果事务T只是读取，就不加锁</strong>； —— 只能防止丢失修改，但不能防止脏读、不可重复读。</p><blockquote><p>事务T 在修改数据之前 加了X锁，直到修改完毕T事务提交，此时数据已经修改完毕，不会被其他事务覆盖 —— 无丢失修改</p></blockquote><blockquote><p>事务T 在查数据，由于没有加锁，事务T之前其他事务更新数据，事务T查到数据，接着其他事务回滚，事务T在查，发现该结果，与数据库中不一致 —— 存在脏读</p></blockquote></li></ol></li><li><p>二级锁定协议：</p><ol><li><p>在一级的基础上，加上事务T在读取之前必须加S锁，读完后立刻释放S锁 —— 进一步防止脏读，但是不防不可重复读</p><blockquote><p>事务T 在查数据之前加S锁，在事务T读的过程中，其他事务只能读，不能写（不可能存在回滚），所以事务T读完后，读取的数据是一直在数据库中存在的 —— 没有脏读</p></blockquote><blockquote><p>事务T 在读取数据加S锁，但是这个S锁，在读后就释放了，因此在事务T释放S锁后，进行更新操作，事务T再次读取数加S锁，此时读到的数据和之前的数据不一致 —— 不可重复读</p></blockquote></li></ol></li><li><p>三级锁定协：</p><ol><li><p>在一级的基础上，加上事务T在读取之前必须加S锁，直到事务T结束后才释放S锁 </p><blockquote><p>查询等到事务T结束，才会释放S锁，即在整个事务T中间，其他的事务只能读，不能写，因此读取的数据始终是相同的 —— 没有不可重复读</p></blockquote></li></ol></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sql注入</title>
      <link href="/2020/07/23/31899.html"/>
      <url>/2020/07/23/31899.html</url>
      
        <content type="html"><![CDATA[<h2><span id="sql-zhu-ru">Sql注入</span><a href="#sql-zhu-ru" class="header-anchor">.</a></h2><h3><span id="1-sql-zhu-ru-yuan-li">1、SQL注入原理</span><a href="#1-sql-zhu-ru-yuan-li" class="header-anchor">.</a></h3><ol><li>攻击者在页面<strong>提交恶意代码</strong></li><li>服务器未对提交参数进行<strong>过滤或过滤不足</strong></li><li>攻击者利用<strong>拼接sql语句</strong>方式获取数据库敏感信息</li></ol><h3><span id="2-jian-dan-sql-zhu-ru-yan-shi">2、简单sql注入演示</span><a href="#2-jian-dan-sql-zhu-ru-yan-shi" class="header-anchor">.</a></h3><p>服务器 执行的SQL语句 ： <code>select * from user where  id = &#39;$id&#39;</code>($id 是一个输入参数)（原效果：获取单个用户的信息）</p><p>攻击者输入 <code>$id = &quot; &#39; or 1 = 1 --&quot;</code></p><p>最终服务器解析的 sql语句： <code>select * from user where id = &#39; &#39;  or  1 = 1  --</code>(注入效果：获取了数据表user的全部信息)</p><h3><span id="3-sql-zhu-ru-shi-xian-fang-shi">3、Sql注入实现方式</span><a href="#3-sql-zhu-ru-shi-xian-fang-shi" class="header-anchor">.</a></h3><ul><li>手动<ul><li>查找：注入点</li><li>输入：SQL常用注入组合语法，进行注入</li></ul></li><li>自动（工具）<ul><li>工具：扫描注入点</li><li>输入：自动产生各种组合语法</li></ul></li></ul><h3><span id="4-sql-zhu-ru-wei-hai">4、SQL注入危害</span><a href="#4-sql-zhu-ru-wei-hai" class="header-anchor">.</a></h3><ul><li>获取数据库信息，或被可以的修改数据库</li><li>非法买卖用户信息</li><li>危害web应用安全</li></ul><h3><span id="5-te-shu-ku-jie-shao">5、特殊库介绍</span><a href="#5-te-shu-ku-jie-shao" class="header-anchor">.</a></h3><h4><span id="information-schema"><code>information_schema</code></span><a href="#information-schema" class="header-anchor">.</a></h4><ul><li><p>作用：存储mysql中所有库名，表名，列名，是mysql数据的字典</p></li><li><p>应用：sql注入中经常从此表中获取需要的库名，表名，字段名</p></li><li><p>关注：</p><ul><li>tables表：记录mysql库中所有的库名和表名</li><li>columns表：记录mysql中所有的库名，表名和列名</li></ul></li></ul><h5><span id="cao-zuo">操作:</span><a href="#cao-zuo" class="header-anchor">.</a></h5><ul><li><p>查看表：</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span>\G<span class="token punctuation">;</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span>\G<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>需关注的字段</p><ul><li><code>TABLE_SCHEMA</code>：数据库名</li><li><code>TABLE_NAME</code>：表名</li><li><code>COLUMN_NAME</code>：列名</li></ul></li></ul><h3><span id="6-zhu-shi">6、注释</span><a href="#6-zhu-shi" class="header-anchor">.</a></h3><blockquote><p>在Sql注入中可以将查询条件注释掉</p></blockquote><pre class="line-numbers language-sql"><code class="language-sql"><span class="token comment" spellcheck="true"># 单行注释</span><span class="token comment" spellcheck="true">-- 单行注释</span><span class="token comment" spellcheck="true">/* 多行注释 */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="7-zhu-ru-liu-cheng">7、注入流程</span><a href="#7-zhu-ru-liu-cheng" class="header-anchor">.</a></h3><ul><li>收集项目信息（操作系统，数据库类型，web服务器类型）</li><li>查找注入点（单引号，#，转义字符\ 。。。。）</li><li>注入sql语句</li><li>获取数据库信息</li><li>破解管理员的账号密码</li><li>使用sql-shell等工具登录并获取数据</li></ul><h3><span id="8-shou-dong-zhu-ru">8、手动注入</span><a href="#8-shou-dong-zhu-ru" class="header-anchor">.</a></h3><h4><span id="1-cha-zhao-zhu-ru-dian">1.查找注入点</span><a href="#1-cha-zhao-zhu-ru-dian" class="header-anchor">.</a></h4><ul><li>主要是使用 单引号 <code>&#39;</code>;</li><li>提交用户信息或?id=处使用单引号测试</li></ul><h4><span id="2-zhu-ru-sql-yu-ju">2.注入SQL语句</span><a href="#2-zhu-ru-sql-yu-ju" class="header-anchor">.</a></h4><ul><li><p>逻辑或</p><ul><li>说明：常用于获取当前表的所有信息</li><li>如：<code>&#39; or 1 = 1 #</code><ul><li><code>&#39;</code>用于闭合前面的条件</li><li><code>#</code>注释后面的条件</li></ul></li></ul></li><li><p>案例</p><ul><li><p>获取user表中所有的用户名和密码</p></li><li><p>方案使用union联合查询所有用户表的语句</p></li><li><p>步骤</p><ul><li><p>猜测字段数</p><pre class="line-numbers language-mysql"><code class="language-mysql"># 第一次猜测' union select 1#'# 第二次猜测' union select 1,2#'# 结果: 直到不报语法错误，确认结果几个字段<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><pre><code>- 获取数据库名  ```mysql  # 获取数据表 如果字段只有三个  &#39; union select 1,2,database()#  &#39;# database() 用于显示 当前数据库   ```  |      |      |                               |  | ---- | ---- | ----------------------------- |  | 1    | 2    | 当前数据库的名字（假如是 db） |- 获取数据库下所有的表  ```sql  &#39; union select table_name,2,3 from information_schema.tables where table_schema = &#39;db&#39;#   ```- 获取数据表下所有的列  ```mysql  &#39; union select column_name,2,3 from information_schema.columns where table_name = &#39;user&#39;#   ```- 获取表中所有数据  ```mysql  # 1. 获取单个字段  &#39; union select name,1,2 from user#  &#39;# 2. 获取两个字段  &#39; union select name,pwd,1 from user#  ```- 获取大于union字段数的字段 （concat函数使用）  ```MYSQL  &#39; union select 1,2,concat(&#39;username:&#39;, name,&#39;password:&#39;,pwd) from user#  ```</code></pre><h3><span id="9-zi-dong-zhu-ru">9.自动注入</span><a href="#9-zi-dong-zhu-ru" class="header-anchor">.</a></h3><h4><span id="1-gong-ju">1.工具</span><a href="#1-gong-ju" class="header-anchor">.</a></h4><ul><li><p>sqlmap</p><ul><li>一款开源渗透测试工具</li><li>自动检测和利用sql注入漏洞并接管数据库服务器</li><li>搭建<ul><li>1.官网下载：<a href="http://sqlmap.org" target="_blank" rel="noopener">http://sqlmap.org</a></li><li>2.渗透机 kali自带<ul><li>使用步骤：<ul><li>1.启动kali虚拟机</li><li>终端命令：sqlmap -h</li></ul></li></ul></li></ul></li></ul></li><li><p>常用参数</p><ul><li>-u ：扫描目标url</li><li>–batch：自动处理提示信息</li><li>–cookie：附加cookie参数</li><li></li><li>–current-db 获取数据库名 -D应用 <code>-D db</code></li><li>–tables 获取表名，-T应用 <code>-T user</code></li><li>–columns 获取列名，-C应用 <code>-C &quot;name,pwd&quot;</code></li><li>–dump 下载数据</li><li></li></ul></li><li><pre class="line-numbers language-shell"><code class="language-shell">sqlmap --batch --cookie "登录时保存的cookie" -u "http://...../login.php" -D db -T user -C "name,pwd" --dump# 前提是 必须通过 --current-db 等操作获取相应的 库 表 列 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2><span id="ba-ji-yu-shen-tou-ji">靶机与渗透机</span><a href="#ba-ji-yu-shen-tou-ji" class="header-anchor">.</a></h2><p>靶机 – dvwa</p><p>渗透机 – kali</p>]]></content>
      
      
      
        <tags>
            
            <tag> web安全 </tag>
            
            <tag> SQL注入 </tag>
            
            <tag> 数据库安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-04-模糊查询</title>
      <link href="/2020/07/23/7288.html"/>
      <url>/2020/07/23/7288.html</url>
      
        <content type="html"><![CDATA[<h2><span id="mo-hu-cha-xun-de-ji-chong-fang-shi">模糊查询的几种方式</span><a href="#mo-hu-cha-xun-de-ji-chong-fang-shi" class="header-anchor">.</a></h2><ul><li><p>java代码执行的时候，传递通配符%%</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserByLike</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserMapper userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//java中传递 通配符</span>        List<span class="token operator">&lt;</span>User<span class="token operator">></span> users <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">getUserByLike</span><span class="token punctuation">(</span><span class="token string">"%liu%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>        users<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getUserByLike"</span> parameterType<span class="token operator">=</span><span class="token string">"String"</span>  resultType<span class="token operator">=</span><span class="token string">"pojo.User"</span><span class="token operator">></span>    select <span class="token operator">*</span> from mybatis<span class="token punctuation">.</span>user where name like #<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>在Sql中拼接通配符</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getUserByLike"</span> parameterType<span class="token operator">=</span><span class="token string">"String"</span>  resultType<span class="token operator">=</span><span class="token string">"pojo.User"</span><span class="token operator">></span>    <span class="token comment" spellcheck="true">//sql中 拼接</span>    select <span class="token operator">*</span> from mybatis<span class="token punctuation">.</span>user where name like <span class="token string">"%"</span>#<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token string">"%"</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用concat连接</p><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">&lt;</span>select id<span class="token operator">=</span><span class="token string">"getUserByLike"</span> parameterType<span class="token operator">=</span><span class="token string">"String"</span>  resultType<span class="token operator">=</span><span class="token string">"pojo.User"</span><span class="token operator">></span>    select <span class="token operator">*</span> from mybatis<span class="token punctuation">.</span>user where name like <span class="token function">concat</span><span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">,</span>#<span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>select<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h2><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h2><h3><span id="yu-qu-bie"><code>${}</code>与<code>#{}</code>区别</span><a href="#yu-qu-bie" class="header-anchor">.</a></h3><p>id = 1</p><p>#{id} ==&gt; “1”  可以防止SQL注入</p><p>${id} ==&gt;  1     不能防止SQL注入    一般用于传入数据库对象，例如传入表名，字段名。。。 </p><p>这个博客总结的很好：<a href="https://blog.csdn.net/u013552450/article/details/72528498/" target="_blank" rel="noopener">https://blog.csdn.net/u013552450/article/details/72528498/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-03-万能Map</title>
      <link href="/2020/07/22/15105.html"/>
      <url>/2020/07/22/15105.html</url>
      
        <content type="html"><![CDATA[<h2><span id="wan-neng-map">万能Map</span><a href="#wan-neng-map" class="header-anchor">.</a></h2><blockquote><p>假设，我们的实体类 或者 数据库中的表，字段或者参数过多，可以考虑使用Map</p></blockquote><ul><li>很像构造器 （带参，但是参数数量，类型，可以变化）</li><li>给字段起别名</li><li>其实可以在实体类中 生成所有带参的构造器，但是事先写好，使用Map按需求写就行</li></ul><p><strong>数据表</strong></p><p><img src="/2020/07/22/15105/image-20200723161052405.png" alt></p><h3><span id="1-bian-xie-liu-cheng">1、编写流程</span><a href="#1-bian-xie-liu-cheng" class="header-anchor">.</a></h3><ol><li><p>编写Mapper接口中响应的抽象方法</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//map的使用 通过map修改用户密码</span><span class="token keyword">int</span> <span class="token function">modifyUserPwd</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>编写相应的SQL语句</p><pre class="line-numbers language-XML"><code class="language-XML"><update id="modifyUserPwd" parametertype="map">    update mybatis.user set pwd=#{password} where id=#{UserId};    <!--此时注意 标签名 以及 parameterType="map"            #{password} 名字是 map中 pwd对应的Key            不再是原来的实体类中或者数据表中的属性名pwd            相当于别名            但是 无需new 一个带参的User对象 传入                需传入一个 map        --></update><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><ol start="3"><li><p>编写具体测试代码（or 业务代码）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">modifyUserPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        UserMapper userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> Object<span class="token operator">></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"UserId"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> <span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">modifyUserPwd</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><strong>结果显示</strong></p><p><img src="/2020/07/22/15105/image-20200723162358514.png" alt></p><h3><span id="2-qu-bie">2、区别</span><a href="#2-qu-bie" class="header-anchor">.</a></h3><ul><li>Map传递参数，直接在Sql（Mapper.xml）中取出属性对应的Key即可 <code>parameterType=&quot;map&quot;</code></li><li>对象传递参数，直接在Sql中取出对象的字段名即可<code>parameterType=&quot;Object&quot;</code></li><li>只有一个基本类型参数的情况下，可以直接在Sql中获取<code>parameterType=&quot;int&quot;</code></li><li>多个参数用Map ，索引，或者 <strong>注解</strong></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记-02-CRUD</title>
      <link href="/2020/07/22/41539.html"/>
      <url>/2020/07/22/41539.html</url>
      
        <content type="html"><![CDATA[<h2><span id="crud">CRUD</span><a href="#crud" class="header-anchor">.</a></h2><p><strong>目录结构</strong></p><p><img src="/2020/07/22/41539/image-20200722223544175.png" alt></p><h3><span id="1-namespace">1、namespace</span><a href="#1-namespace" class="header-anchor">.</a></h3><ul><li><code>UserMapper.xml</code>的<code>namespace</code>中的包名与<code>Dao/mapper接口</code>的包名一致</li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dao.UserMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="2-select">2、select</span><a href="#2-select" class="header-anchor">.</a></h3><blockquote><p>选择，查询语句</p></blockquote><ul><li><code>id</code>：对应方法名</li><li><code>resultType</code>：sql语句执行的返回值</li><li><code>parameterType</code>：参数类型</li><li>对应标签：<code>select</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserList<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getUserById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from mybatis.user where id = #{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-insert">3、insert</span><a href="#3-insert" class="header-anchor">.</a></h3><blockquote><p>插入</p></blockquote><ul><li><code>id</code>：对应方法名</li><li><code>parameterType</code>：参数类型</li><li>对应标签：<code>insert</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- #{name}需要与User.java字段名一致,同时与数据库属性名一致 --></span>    insert into mybatis.user(name,pwd) values (#{name},#{pwd});<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-update">4、update</span><a href="#4-update" class="header-anchor">.</a></h3><blockquote><p>更新</p></blockquote><ul><li><code>id</code>：对应方法名</li><li><code>parameterType</code>：参数类型</li><li>对应标签：<code>update</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateUserPwd<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pojo.User<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    update mybatis.user set pwd=#{pwd} where id=#{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="5-delete">5、delete</span><a href="#5-delete" class="header-anchor">.</a></h3><blockquote><p>删除</p></blockquote><ul><li><code>id</code>：对应方法名</li><li><code>parameterType</code>：参数类型</li><li>对应标签：<code>delete</code></li></ul><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteUser<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    delete from mybatis.user where id=#{id};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="6-bian-xie-liu-cheng">6、编写流程</span><a href="#6-bian-xie-liu-cheng" class="header-anchor">.</a></h3><ol><li><p>在<code>UserMapper.java</code>添加相应的方法</p></li><li><p>在<code>UserMapper.xml</code>添加相应的标签以及SQL语句（注意<code>namespace</code>）</p></li><li><p>在<code>mybatis-config.xml</code>中绑定<code>UserMapper.xml</code></p></li><li><p>在<code>test/java</code>中编写<code>UserMapperTest</code>测试类</p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//测试类内容</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserMapperTest</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UserMapper userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            List<span class="token operator">&lt;</span>User<span class="token operator">></span> userList <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">getUserList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            userList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            return userList;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token comment" spellcheck="true">/*int id*/</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UserMapper userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            User user <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//            return user;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UserMapper userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"流柚"</span><span class="token punctuation">,</span><span class="token string">"liuyou"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">addUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//增删改一定要提交 不然 虽然 num > 0 但是 数据库中的数剧不会有任何变化</span>            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">updateUserPwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UserMapper userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token string">"lmk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">updateUserPwd</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">try</span><span class="token punctuation">(</span>SqlSession sqlSession <span class="token operator">=</span> MybatisUtils<span class="token punctuation">.</span><span class="token function">getSqlSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            UserMapper userDao <span class="token operator">=</span> sqlSession<span class="token punctuation">.</span><span class="token function">getMapper</span><span class="token punctuation">(</span>UserMapper<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> userDao<span class="token punctuation">.</span><span class="token function">deleteUser</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sqlSession<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3><span id="7-zhu-yi">7、注意</span><a href="#7-zhu-yi" class="header-anchor">.</a></h3><ul><li><p>增删改操作是需要 <code>SqlSession.commit();</code>提交的，不然无法对数据库进行修改（尽管返回的影响记录数大于0）</p></li><li><p>标签不要匹配错</p></li><li><p>排错，需从下往上读</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> mybatis </tag>
            
            <tag> ssm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven项目pom.xml文件配置</title>
      <link href="/2020/07/22/41916.html"/>
      <url>/2020/07/22/41916.html</url>
      
        <content type="html"><![CDATA[<p>pom.xml</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--解决maven刷新后 jdk变为 jdk5的问题 方法一--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.maven.plugins<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>maven-compiler-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>source</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>target</span><span class="token punctuation">></span></span>1.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>target</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--在build中配置resources,来防止我们资源导出失败问题--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--解决maven刷新后 jdk变为 jdk5的问题 方法二&lt;properties>    &lt;maven.compiler.source>1.8&lt;/maven.compiler.source>    &lt;maven.compiler.target>1.8&lt;/maven.compiler.target>&lt;/properties>--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven远程仓库镜像更改为阿里云镜像</title>
      <link href="/2020/07/21/12421.html"/>
      <url>/2020/07/21/12421.html</url>
      
        <content type="html"><![CDATA[<h4><span id="maven-yuan-cheng-cang-ku-jing-xiang-geng-gai-wei-a-li-yun-jing-xiang">maven远程仓库镜像更改为阿里云镜像</span><a href="#maven-yuan-cheng-cang-ku-jing-xiang-geng-gai-wei-a-li-yun-jing-xiang" class="header-anchor">.</a></h4><h5><span id="1-zhao-dao-maven-xia-de-conf-mu-lu-zhong-de-config-xml-wen-jian">1.找到maven下的conf目录中的config.xml文件</span><a href="#1-zhao-dao-maven-xia-de-conf-mu-lu-zhong-de-config-xml-wen-jian" class="header-anchor">.</a></h5><p>在&lt;mirrors&gt;标签中添加 如下内容</p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>nexus-aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>Nexus aliyun<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 镜像 </tag>
            
            <tag> maven </tag>
            
            <tag> aliyun </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 多维数组</title>
      <link href="/2020/07/20/3378.html"/>
      <url>/2020/07/20/3378.html</url>
      
        <content type="html"><![CDATA[<h3><span id="duo-wei-shu-zu">多维数组</span><a href="#duo-wei-shu-zu" class="header-anchor">.</a></h3><blockquote><p>数组的元素也是数组</p></blockquote><ul><li><blockquote><p><strong>数组的元素是数组</strong></p></blockquote></li></ul><h4><span id="1-sheng-ming-he-chu-shi-hua">1、声明和初始化</span><a href="#1-sheng-ming-he-chu-shi-hua" class="header-anchor">.</a></h4><ul><li>数组一旦初始化长度，就确定了</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//静态初始化</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// int[] arr[]</span><span class="token comment" spellcheck="true">//动态初始化 1</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 二维数组长度固定 int[] arr[]</span><span class="token comment" spellcheck="true">//动态初始化 2</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 二维数组长度不固定 int[] arr[]</span><span class="token comment" spellcheck="true">//初始化代码省略</span><span class="token comment" spellcheck="true">//特殊 类型推断</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-huo-qu-zhi-ding-wei-zhi-de-yuan-su"><mark>2、获取指定位值的元素</mark></span><a href="#2-huo-qu-zhi-ding-wei-zhi-de-yuan-su" class="header-anchor">.</a></h4><ul><li>通过索引获取</li><li>索引从 0 开始</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 默认值为 1</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抛出NullPointerException异常 因为外层数组元素没有分配空间(即外层数组arr2[0] = null;)</span><span class="token comment" spellcheck="true">//处理</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="3-huo-qu-shu-zu-chang-du">3、获取数组长度</span><a href="#3-huo-qu-shu-zu-chang-du" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> l <span class="token operator">=</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2 + 3 = 5</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-bian-li-shu-zu">4、遍历数组</span><a href="#4-bian-li-shu-zu" class="header-anchor">.</a></h4><pre><code>fori:1 2 3 foreach:1 2 3 lambda:1 2 3 </code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fori:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nforeach:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ns <span class="token operator">:</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> ns<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="5-shu-zu-yuan-su-de-mo-ren-chu-shi-hua-zhi"><mark>5、数组元素的默认初始化值</mark></span><a href="#5-shu-zu-yuan-su-de-mo-ren-chu-shi-hua-zhi" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java">外层数组元素（元素是数组）默认值：<span class="token punctuation">[</span>I<span class="token annotation punctuation">@7852e922</span>内层数组元素（和数据类型有关：这里是<span class="token keyword">int</span>）默认值<span class="token number">0</span>从上面可以看出 外层都是地址值             内层默认值是和数据类型有关的<span class="token punctuation">,</span>整型：<span class="token number">0</span><span class="token punctuation">,</span>浮点型：<span class="token number">0.0</span><span class="token punctuation">,</span>字符型：<span class="token string">''</span><span class="token punctuation">,</span>bool型：<span class="token boolean">false</span><span class="token punctuation">,</span>对象：null<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外层</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"外层数组元素（元素是数组）默认值："</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//内层</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"内层数组元素（和数据类型有关：这里是int）默认值"</span> <span class="token operator">+</span> num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//整个数组 地址值</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Ljava<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>Object<span class="token punctuation">;</span><span class="token annotation punctuation">@4e25154f</span> <span class="token comment" spellcheck="true">//这里并不是默认初始化值，只是打印这个二维数组的地址值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//如果是下面这种情况</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//外层</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// null</span><span class="token comment" spellcheck="true">//内层</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 抛出NullPointerException异常 因为外层数组元素没有分配空间(即外层数组arr2[0] = null;)</span>nullException in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NullPointerException    at javaSE<span class="token punctuation">.</span>test<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="6-shu-zu-nei-cun-jie-xi">6、数组内存解析</span><a href="#6-shu-zu-nei-cun-jie-xi" class="header-anchor">.</a></h4>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 一维数组</title>
      <link href="/2020/07/20/60293.html"/>
      <url>/2020/07/20/60293.html</url>
      
        <content type="html"><![CDATA[<h3><span id="yi-wei-shu-zu">一维数组</span><a href="#yi-wei-shu-zu" class="header-anchor">.</a></h3><h4><span id="1-sheng-ming-he-chu-shi-hua">1、声明和初始化</span><a href="#1-sheng-ming-he-chu-shi-hua" class="header-anchor">.</a></h4><ul><li>数组一旦初始化长度，就确定了</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//声明 // int num[]</span><span class="token comment" spellcheck="true">//1.静态初始化</span>num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//2.动态初始化</span>num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>num<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型推断 特殊</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 长度为0</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-huo-qu-zhi-ding-wei-zhi-de-yuan-su">2、获取指定位值的元素</span><a href="#2-huo-qu-zhi-ding-wei-zhi-de-yuan-su" class="header-anchor">.</a></h4><ul><li>通过索引获取</li><li>索引从 0 开始</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token comment" spellcheck="true">//赋值</span>num<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1 2 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="3-huo-qu-shu-zu-chang-du">3、获取数组长度</span><a href="#3-huo-qu-shu-zu-chang-du" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//通过 属性 length</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"num 数组的长度："</span> <span class="token operator">+</span> num<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// num 数组的长度：3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-bian-li-shu-zu">4、遍历数组</span><a href="#4-bian-li-shu-zu" class="header-anchor">.</a></h4><pre><code>fori:1 2 3 foreach:1 2 3 lambda:1 2 3 </code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fori:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//fori</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nforeach:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//foreach</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n <span class="token operator">:</span> num<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nlambda:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//lambda</span>Arrays<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="5-shu-zu-yuan-su-de-mo-ren-chu-shi-hua-zhi"><mark>5、数组元素的默认初始化值</mark></span><a href="#5-shu-zu-yuan-su-de-mo-ren-chu-shi-hua-zhi" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">byte</span>类型默认初始化值：<span class="token number">0</span><span class="token keyword">short</span>类型默认初始化值：<span class="token number">0</span><span class="token keyword">int</span>类型默认初始化值：<span class="token number">0</span><span class="token keyword">long</span>类型默认初始化值：<span class="token number">0</span><span class="token keyword">float</span>类型默认初始化值：<span class="token number">0.0</span><span class="token keyword">double</span>类型默认初始化值：<span class="token number">0.0</span><span class="token keyword">char</span>类型默认初始化值：  <span class="token comment" spellcheck="true">// '' or '\u0000' or '\0'</span><span class="token keyword">boolean</span>类型默认初始化值：<span class="token boolean">false</span>String类型默认初始化值：nullObject类型默认初始化值：null<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">short</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">short</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">int</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">long</span><span class="token punctuation">[</span><span class="token punctuation">]</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">long</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">float</span><span class="token punctuation">[</span><span class="token punctuation">]</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">float</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">double</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">char</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">boolean</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Object<span class="token punctuation">[</span><span class="token punctuation">]</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"byte类型默认初始化值："</span> <span class="token operator">+</span> b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"short类型默认初始化值："</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"int类型默认初始化值："</span> <span class="token operator">+</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"long类型默认初始化值："</span> <span class="token operator">+</span> l<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"float类型默认初始化值："</span> <span class="token operator">+</span> f<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"double类型默认初始化值："</span> <span class="token operator">+</span> d<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"char类型默认初始化值："</span> <span class="token operator">+</span> c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"boolean类型默认初始化值："</span> <span class="token operator">+</span> bool<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"String类型默认初始化值："</span> <span class="token operator">+</span> str<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Object类型默认初始化值："</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 数组</title>
      <link href="/2020/07/20/33165.html"/>
      <url>/2020/07/20/33165.html</url>
      
        <content type="html"><![CDATA[<h3><span id="shu-zu-array">数组（Array）</span><a href="#shu-zu-array" class="header-anchor">.</a></h3><ul><li><p><strong>多个相同类型数据按一定顺序排序的集合</strong>，并使用一个名字命名，并通过编号的形式，对这些数据统一管理</p></li><li><p><strong>数组要素</strong></p><ul><li>数组名</li><li>数组元素</li><li>数组下标（索引）</li><li>数组长度</li></ul></li><li><p><strong>数组特点</strong>：有序排列</p></li><li><p><strong>数组是引用数据类型</strong></p></li><li><p><strong>元素可以是任意类型</strong></p></li><li><p><strong>创建数组对象会在内存中开辟一整块连续空间</strong></p></li><li><p><strong><mark>数组长度一旦确定就不能修改</mark></strong></p></li><li><p><strong>数组分类</strong></p><ul><li>维数<ul><li>一维、二维、。。。</li></ul></li><li>类型<ul><li>基本类型<strong>元素</strong>数组</li><li>引用类型<strong>元素</strong>数组</li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 小项目：家庭收支记账系统</title>
      <link href="/2020/07/20/60516.html"/>
      <url>/2020/07/20/60516.html</url>
      
        <content type="html"><![CDATA[<h3><span id="ji-yu-wen-ben-jie-mian-de-jia-ting-shou-zhi-ji-zhang-xi-tong">基于文本界面的家庭收支记账系统</span><a href="#ji-yu-wen-ben-jie-mian-de-jia-ting-shou-zhi-ji-zhang-xi-tong" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//工具类 ： 不需要自己写</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Scanner<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/**Utility工具类：将不同的功能封装为方法，就是可以直接通过调用方法使用它的功能，而无需考虑具体的功能实现细节。*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Utility</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Scanner scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**    用于界面菜单的选择。该方法读取键盘，如果用户键入’1’-’4’中的任意字符，则方法返回。返回值为用户键入字符。    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">readMenuSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            String str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">'1'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token string">'2'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token string">'3'</span> <span class="token operator">&amp;&amp;</span> c <span class="token operator">!=</span> <span class="token string">'4'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"选择错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    用于收入和支出金额的输入。该方法从键盘读取一个不超过4位长度的整数，并将其作为方法的返回值。    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">readNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> n<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            String str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                n <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NumberFormatException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"数字输入错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    用于收入和支出说明的输入。该方法从键盘读取一个不超过8位长度的字符串，并将其作为方法的返回值。    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> String <span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> str<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**    用于确认选择的输入。该方法从键盘读取‘Y’或’N’，并将其作为方法的返回值。    */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">char</span> <span class="token function">readConfirmSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">char</span> c<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>            String str <span class="token operator">=</span> <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            c <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'Y'</span> <span class="token operator">||</span> c <span class="token operator">==</span> <span class="token string">'N'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"选择错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> c<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> String <span class="token function">readKeyBoard</span><span class="token punctuation">(</span><span class="token keyword">int</span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String line <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            line <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">||</span> line<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> limit<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输入长度（不大于"</span> <span class="token operator">+</span> limit <span class="token operator">+</span> <span class="token string">"）错误，请重新输入："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> line<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//FamilyAccount.java</span><span class="token comment" spellcheck="true">//使用字符串及整形变量 暂时存储数据</span><span class="token keyword">class</span> <span class="token class-name">FamilyAccount</span><span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> balance <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//余额</span>      String details <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据内容</span>      <span class="token keyword">int</span> money <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      String info <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-----------------家庭收支记账软件-----------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"        1 收支明细"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"        2 登记收入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"        3 登记支出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"        4 退   出\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"        请选择(1-4):"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">char</span> selection <span class="token operator">=</span> Utility<span class="token punctuation">.</span><span class="token function">readMenuSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token keyword">switch</span><span class="token punctuation">(</span>selection<span class="token punctuation">)</span><span class="token punctuation">{</span>              <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token operator">:</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n-----------------当前收支明细记录-----------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收  支    账户金额        收支金额        说  明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>details<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//数据输出</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------------------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token operator">:</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"本次收入金额:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  money <span class="token operator">=</span> Utility<span class="token punctuation">.</span><span class="token function">readNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"本次收入说明:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  info <span class="token operator">=</span> Utility<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//拼接数据</span>                  balance <span class="token operator">+=</span> money<span class="token punctuation">;</span>                  details <span class="token operator">+=</span> <span class="token string">"收入\t"</span> <span class="token operator">+</span> balance <span class="token operator">+</span> <span class="token string">"\t\t"</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">"\t\t"</span> <span class="token operator">+</span> info <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------登记完成---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token string">'3'</span><span class="token operator">:</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"本次支出金额:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  money <span class="token operator">=</span> Utility<span class="token punctuation">.</span><span class="token function">readNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"本次支出说明:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  info <span class="token operator">=</span> Utility<span class="token punctuation">.</span><span class="token function">readString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//拼接数据</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>balance <span class="token operator">>=</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>                      balance <span class="token operator">-=</span> money<span class="token punctuation">;</span>                      details <span class="token operator">+=</span> <span class="token string">"支出\t"</span> <span class="token operator">+</span> balance <span class="token operator">+</span> <span class="token string">"\t\t"</span> <span class="token operator">+</span> money <span class="token operator">+</span> <span class="token string">"\t\t"</span> <span class="token operator">+</span> info <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">;</span>                      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"---------------------登记完成---------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"余额不足,余额："</span> <span class="token operator">+</span> balance<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>                                    <span class="token keyword">break</span><span class="token punctuation">;</span>              <span class="token keyword">case</span> <span class="token string">'4'</span><span class="token operator">:</span>                  <span class="token keyword">char</span> isExit <span class="token operator">=</span> Utility<span class="token punctuation">.</span><span class="token function">readConfirmSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token keyword">if</span><span class="token punctuation">(</span>isExit <span class="token operator">==</span> <span class="token string">'Y'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                  <span class="token punctuation">}</span>          <span class="token punctuation">}</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- breakGET</title>
      <link href="/2020/07/20/9562.html"/>
      <url>/2020/07/20/9562.html</url>
      
        <content type="html"><![CDATA[<h3><span id="break-xiao-zhi-shi-dian">break小知识点</span><a href="#break-xiao-zhi-shi-dian" class="header-anchor">.</a></h3><p>众所周知，break用于跳出switch-case和终止循环，但是他只能终止本层循环，那么有没有方法使其终止外层，甚至其他的循环代码块呢？结果，当然是有的</p><pre class="line-numbers language-java"><code class="language-java">label<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">break</span> labelName<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//在break 后加标签 可以终止指定的 循环代码块</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同理</p><p><code>continue label；</code>用于结束label绑定循环代码块的一次循环</p><p>这种方式，像极了汇编语言，跳转语句和循环语句，加的标签</p>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 键盘获取变量</title>
      <link href="/2020/07/19/20792.html"/>
      <url>/2020/07/19/20792.html</url>
      
        <content type="html"><![CDATA[<h3><span id="jian-pan-shu-ru">键盘输入</span><a href="#jian-pan-shu-ru" class="header-anchor">.</a></h3><p>1.导包 <code>import java.util.Scanner;</code></p><p>2.Scanner实例化 <code>Scanner scan = new Scanner(System.in);</code></p><p>3.调用Scanner类的相关方法，获取相应的数据</p><ol><li><code>int num = scan.nextInt();</code></li><li><code>double num = scan.nextDouble();</code></li><li><code>String str = scan.next();</code></li><li>。。。</li></ol><img src="/2020/07/19/20792/image-20200719150611212.png"><h3><span id="dui-yu-zi-fu-huo-qu-sui-ran-mei-you-ti-gong-dan-shi-ke-yi-ru-xia-cao-zuo">对于字符获取，虽然没有提供，但是可以如下操作</span><a href="#dui-yu-zi-fu-huo-qu-sui-ran-mei-you-ti-gong-dan-shi-ke-yi-ru-xia-cao-zuo" class="header-anchor">.</a></h3><pre class="line-numbers language-java"><code class="language-java">Scanner scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span>System<span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="shu-ru-bu-fu-he-lei-xing-shi-hui-pao-chu-inputmismatchexception-yi-chang">输入不符合类型时，会抛出<code>InputMismatchException</code>异常</span><a href="#shu-ru-bu-fu-he-lei-xing-shi-hui-pao-chu-inputmismatchexception-yi-chang" class="header-anchor">.</a></h3><p><img src="/2020/07/19/20792/image-20200719153451969.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 程序流程控制</title>
      <link href="/2020/07/19/16567.html"/>
      <url>/2020/07/19/16567.html</url>
      
        <content type="html"><![CDATA[<h3><span id="cheng-xu-liu-cheng-kong-zhi">程序流程控制</span><a href="#cheng-xu-liu-cheng-kong-zhi" class="header-anchor">.</a></h3><blockquote><p>流程控制语句是用来控制程序中各语句执行顺序的语句，可以把语句组合成能完成一定功能的小逻辑模块。</p></blockquote><h4><span id="san-chong-ji-ben-liu-cheng-jie-gou">三种基本流程结构</span><a href="#san-chong-ji-ben-liu-cheng-jie-gou" class="header-anchor">.</a></h4><ul><li><strong>顺序</strong></li></ul><ul><li><p><strong>分支</strong></p><ul><li><strong>if…else…(条件判断)</strong></li><li><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//if</span><span class="token keyword">if</span><span class="token punctuation">(</span>条件表达式<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><pre><code>//if-elseif(条件表达式1){//}else{//}//if-else if-elseif(条件表达式){//}else if(条件表达式){     //   }else if(条件表达式){     //   }。。。。else{//}```</code></pre><ul><li><p><strong>switch-case</strong></p><ul><li><code>value</code>只能是①<code>byte</code>、②<code>short</code>、③<code>int</code>、④<code>char</code>、⑤ <code>enum (JDK1.5)</code>、⑥<code>String (JDK1.7)</code></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> 常量表达式<span class="token number">1</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> 常量表达式<span class="token number">2</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token keyword">break</span><span class="token punctuation">;</span>    。。。<span class="token keyword">default</span><span class="token operator">:</span>    <span class="token comment" spellcheck="true">//</span>    <span class="token comment" spellcheck="true">//break;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p><strong>循环</strong></p><ul><li><p><strong>四要素</strong></p><p>①初始化条件</p><p>②循环条件</p><p>③循环体</p><p>④迭代条件</p></li><li><p><strong>for</strong></p><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>①<span class="token punctuation">,</span>②<span class="token punctuation">,</span>④<span class="token punctuation">)</span><span class="token punctuation">{</span>    ③<span class="token punctuation">}</span>```<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行过程：<code>①</code> –&gt;<code>②--&gt;③--&gt;④</code>–&gt;<code>②--&gt;③--&gt;④</code> 。。。。–&gt;<code>②</code></p></li><li><p><strong>foreach</strong> : 遍历数组，集合</p><pre><code>String[] nums = {&quot;1&quot;,&quot;2&quot;,&quot;3&quot;};for(String num : nums){    System.out.println(num);}</code></pre></li></ul></li></ul></li></ul><ul><li><p><strong>while</strong></p><ul><li><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>①<span class="token keyword">while</span><span class="token punctuation">(</span>②<span class="token punctuation">)</span><span class="token punctuation">{</span>    ③    ④<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行过程：<code>①</code> –&gt;<code>②--&gt;③--&gt;④</code>–&gt;<code>②--&gt;③--&gt;④</code> 。。。。–&gt;<code>②</code></p></li></ul></li><li><p><strong>do-while</strong></p><ul><li><pre class="line-numbers language-java"><code class="language-java">①<span class="token keyword">do</span><span class="token punctuation">{</span>    ③     ④<span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>②<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>执行过程：① –&gt; ③ –&gt; ④ –&gt; ②   –&gt; ③ –&gt; ④ –&gt; ②  。。。</p></li></ul></li></ul><h3><span id="xiao-jie">小结</span><a href="#xiao-jie" class="header-anchor">.</a></h3><ul><li><p>凡是可以使用<code>switch-case</code>的结构都可以使用<code>if-else</code>结构去替换，反之不成立</p><ul><li>当<code>switch</code>参数取值不多时，优先使用<code>switch</code>，<code>switch</code>的执行效率要比<code>if-else</code>的高</li></ul></li><li><p><code>for</code>和<code>while</code>可以相互转换</p></li><li><p>跳出循环</p><ul><li>循环条件为false</li><li>break跳出</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 运算符GET</title>
      <link href="/2020/07/19/43397.html"/>
      <url>/2020/07/19/43397.html</url>
      
        <content type="html"><![CDATA[<h3><span id="yun-suan-fu">运算符</span><a href="#yun-suan-fu" class="header-anchor">.</a></h3><ul><li><p><strong>算术运算符</strong></p><ul><li><code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>、<code>++</code>、<code>--</code></li></ul></li><li><p><strong>赋值运算符</strong></p><ul><li><code>=</code>、<code>+=</code> 、<code>-=</code>、<code>*=</code>、<code>/=</code>、<code>%=</code></li><li><code>&lt;&lt;=</code>、<code>&gt;&gt;=</code>、<code>&amp;=</code>、<code>|=</code>、<code>^=</code></li></ul></li><li><p><strong>比较（关系）运算符</strong></p><ul><li><code>==</code>、<code>!=</code>、<code>&gt;</code>、<code>&lt;</code>、<code>&gt;=</code>、<code>&lt;=</code>、</li><li><strong><code>instanceof</code></strong></li></ul></li><li><p><strong>逻辑运算符</strong></p><ul><li>逻辑：<code>&amp;</code>、<code>|</code>、<code>!</code>、<code>^</code></li><li>短路：<code>&amp;&amp;</code>、<code>||</code></li></ul></li><li><p><strong>位运算符</strong></p><ul><li>操作的都是整型的数据</li><li>移位的步数有限制<ul><li>比如说算术左移 <code>1 &lt;&lt; 31</code> 结果会变成 <code>-2147483648</code> = <code>-2</code><sup><code>31</code></sup>  最高为变为了1，整个数变成了负数，由于这些数在计算机底层用<code>补码</code>存储的（<code>0b10000000 00000000 00000000 00000000</code>），所以求得的<code>原码</code>就是<code>-2147483648</code></li><li><img src="/2020/07/19/43397/image-20200719120538728.png" style="zoom: 50%;"></li><li>算术右移 <code>-1&gt;&gt;1</code> 、<code>-1&gt;&gt;2</code>。。。。=<code>-1</code></li><li><mark>所以说 在移位操作时，我们必须把数先换成 补码 再做操作 才能看出 原理</mark></li></ul></li><li><code>&lt;&lt; (算术左移|逻辑左移)</code>、<code>&gt;&gt; (算术右移)</code>、<code>&gt;&gt;&gt; (逻辑右移 无&lt;&lt;&lt;)</code></li><li><code>&amp;</code>、<code>|</code>、<code>^</code>、<code>~</code></li></ul><p><img src="/2020/07/19/43397/image-20200719122557632.png" alt></p></li><li><p><strong>三元（条件）运算符</strong></p><ul><li>（条件表达式）？ 表达式1 :  表达式2</li><li>条件表达式 = true  ==&gt; 表达式1</li><li>条件表达式 = false ==&gt; 表达式2</li><li>所有三元运算符都可变为 if…else…语句</li><li><mark>但是if…else…不一定能转为 三元； 因为if…else…中可能含有复杂的语句</mark></li><li><strong><mark>表达式1 和 表达式2 结果类型要一直</mark></strong><ul><li>如果表达式1为int型，表达式2位double型，表达式1的结果自动提升到double</li></ul></li></ul></li></ul><p><strong>优先级</strong></p><table class="reference">    <tbody>        <tr>            <th style="width:66px;">                类别 </th>            <th style="width:274px;">                操作符</th>            <th style="width:132px;">                关联性 </th>        </tr>        <tr>            <td style="width:66px;">                后缀</td>            <td style="width:274px;">                () [] . (点操作符)</td>            <td style="width:132px;">                左到右</td>        </tr><tr>            <td style="width:66px;">                一元</td>            <td style="width:274px;">                expr++  expr--</td>            <td style="width:132px;">                从左到右</td>        </tr>        <tr>            <td style="width:66px;">                一元</td>            <td style="width:274px;">                ++expr --expr + - ～ ！</td>            <td style="width:132px;">                从右到左</td>        </tr>        <tr>            <td style="width:66px;">                乘性&nbsp;</td>            <td style="width:274px;">                * /％</td>            <td style="width:132px;">                左到右</td>        </tr>        <tr>            <td style="width:66px;">                加性&nbsp;</td>            <td style="width:274px;">                + -</td>            <td style="width:132px;">                左到右</td>        </tr>        <tr>            <td style="width:66px;">                移位&nbsp;</td>            <td style="width:274px;">                &gt;&gt; &gt;&gt;&gt; &nbsp;&lt;&lt;&nbsp;</td>            <td style="width:132px;">                左到右</td>        </tr>        <tr>            <td style="width:66px;">                关系&nbsp;</td>            <td style="width:274px;">                &gt;  &gt;=  &lt;  &lt;=&nbsp;</td>            <td style="width:132px;">                左到右</td>        </tr>        <tr>            <td style="width:66px;">                相等&nbsp;</td>            <td style="width:274px;">                ==&nbsp; !=</td>            <td style="width:132px;">                左到右</td>        </tr>        <tr>            <td style="width:66px;">                按位与</td>            <td style="width:274px;">                ＆</td>            <td style="width:132px;">                左到右</td>        </tr>        <tr>            <td style="width:66px;">                按位异或</td>            <td style="width:274px;">                ^</td>            <td style="width:132px;">                左到右</td>        </tr>        <tr>            <td style="width:66px;">                按位或</td>            <td style="width:274px;">                |</td>            <td style="width:132px;">                左到右</td>        </tr>        <tr>            <td style="width:66px;">                逻辑与</td>            <td style="width:274px;">                &amp;&amp;</td>            <td style="width:132px;">                左到右</td>        </tr>        <tr>            <td style="width:66px;">                逻辑或</td>            <td style="width:274px;">                | |</td>            <td style="width:132px;">                左到右</td>        </tr>        <tr>            <td style="width:66px;">                条件</td>            <td style="width:274px;">                ？：</td>            <td style="width:132px;">                从右到左</td>        </tr>        <tr>            <td style="width:66px;">                赋值</td>            <td style="width:274px;">                = + = - = * = / =％= &gt;&gt; = &lt;&lt; =＆= ^ = | =</td>            <td style="width:132px;">                从右到左</td>        </tr>        <tr>            <td style="width:66px;">                逗号</td>            <td style="width:274px;">                ，</td>            <td style="width:132px;">                左到右</td>        </tr>    </tbody></table><h3><span id="yun-suan-fu-huo-de-xiao-zhi-shi-dian-zhi-qian-wei-zhu-yi-de">运算符获得小知识点（之前未注意的）</span><a href="#yun-suan-fu-huo-de-xiao-zhi-shi-dian-zhi-qian-wei-zhu-yi-de" class="header-anchor">.</a></h3><ul><li><p><strong>使用赋值运算符<mark>类型不会改变</mark></strong>（自增自减也不会）</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">short</span> num <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// num = 3</span><span class="token comment" spellcheck="true">// 如果不使用</span><span class="token keyword">short</span> tmp <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>tmp <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//编译通不过</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/19/43397/image-20200719011747719.png" alt></p></li><li><p><strong>自增运算符小练习</strong></p></li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>n <span class="token operator">+=</span> <span class="token punctuation">(</span>n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>n<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// n = ?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java"><code class="language-java">n <span class="token operator">=</span> n <span class="token operator">+</span> n<span class="token operator">++</span> <span class="token operator">+</span> <span class="token operator">++</span>n<span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token operator">+</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li><p><strong>交换两个数（按位异或）</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原 a = "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"; b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法一：定义临时变量</span><span class="token comment" spellcheck="true">//好处：①对于任何类型都可以</span><span class="token comment" spellcheck="true">//推荐使用</span><span class="token keyword">int</span> tmp <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> tmp<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法一 a = "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"; b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法二： 先加，后减</span><span class="token comment" spellcheck="true">//好处：无需定义临时变量</span><span class="token comment" spellcheck="true">//弊端：①相加可能会超出数的存储范围 ②只适用于 数值类型</span>a <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法二 a = "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"; b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方法三： 异或</span><span class="token comment" spellcheck="true">//好处：无需定义临时变量</span><span class="token comment" spellcheck="true">//弊端：①只适用于 数值类型</span>a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"方法三 a = "</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">"; b = "</span> <span class="token operator">+</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h3><h4><span id="bie-bei-wu-dao-liao-zhe-cai-shi-java-zhong-de-zhen-zheng-de-luo-ji-yi-wei-he-suan-shu-yi-wei-ta-jiang-de-huan-shi-you-wen-ti-de-luo-ji-yi-wei-qi-shi-shi-wu-fu-hao-de-bu-cun-zai-fu-shu">（他讲的还是有问题的 逻辑移位 其实是无符号的 不存在负数）</span><a href="#bie-bei-wu-dao-liao-zhe-cai-shi-java-zhong-de-zhen-zheng-de-luo-ji-yi-wei-he-suan-shu-yi-wei-ta-jiang-de-huan-shi-you-wen-ti-de-luo-ji-yi-wei-qi-shi-shi-wu-fu-hao-de-bu-cun-zai-fu-shu" class="header-anchor">.</a></h4><ul><li><p>逻辑左移=算数左移，右边统一添0 </p></li><li><p>逻辑右移，左边统一添0 </p></li><li><p>算数右移，左边添加的数和符号有关</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 进制表示方式</title>
      <link href="/2020/07/18/43248.html"/>
      <url>/2020/07/18/43248.html</url>
      
        <content type="html"><![CDATA[<h3><span id="jin-zhi-biao-shi-fang-shi">进制表示方式</span><a href="#jin-zhi-biao-shi-fang-shi" class="header-anchor">.</a></h3><ul><li>二进制（binary）表示 – 0B或0b开头 ，0~1</li><li>八进制（octal）表示 – 0开头，0~7</li><li>十进制（decimal）表示 – 正常表示，0~9</li><li>十六进制（hex）表示 – 0x或0X开头，0~F</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">int</span> binary <span class="token operator">=</span> <span class="token number">0b110</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 6</span><span class="token keyword">int</span> octal <span class="token operator">=</span> <span class="token number">0123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 83</span><span class="token keyword">int</span> decimal <span class="token operator">=</span> <span class="token number">123</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 123</span><span class="token keyword">int</span> hex <span class="token operator">=</span> <span class="token number">0x12A</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 298</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>binary<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>octal<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>decimal<span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hex<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/18/43248/image-20200718223606857.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- String类型</title>
      <link href="/2020/07/18/60127.html"/>
      <url>/2020/07/18/60127.html</url>
      
        <content type="html"><![CDATA[<h3><span id="zi-fu-chuan-lei-xing">字符串类型</span><a href="#zi-fu-chuan-lei-xing" class="header-anchor">.</a></h3><ul><li>String属于引用数据类型</li></ul><h3><span id="string-de-shi-yong">String的使用</span><a href="#string-de-shi-yong" class="header-anchor">.</a></h3><h4><span id="1-sheng-ming">1、声明</span><a href="#1-sheng-ming" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4><span id="2-yun-suan">2、运算</span><a href="#2-yun-suan" class="header-anchor">.</a></h4><blockquote><p>可以和 8 种基本数据类型做 <strong>连接运算</strong></p></blockquote><ul><li>连接运算符 <code>+</code></li></ul><pre class="line-numbers language-java"><code class="language-java">String str1 <span class="token operator">=</span> <span class="token string">"str"</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// str1 = "str1"</span>String str2 <span class="token operator">=</span> <span class="token string">"str"</span> <span class="token operator">+</span> <span class="token number">1.2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// str2 = "str1.2"</span>String str3 <span class="token operator">=</span> <span class="token string">"str"</span> <span class="token operator">+</span> <span class="token string">'c'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// str3 = "strc"</span>String str4 <span class="token operator">=</span> <span class="token string">"str"</span> <span class="token operator">+</span> ture<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// str4 = "strtrue"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>字符串附近的 <code>+</code> 才是连接运算符</li></ul><pre class="line-numbers language-java"><code class="language-java">String str <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token string">"str"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// str = "4str"</span>String str <span class="token operator">=</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token string">"str"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// str = "129str" 97 + 32 = 129</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 基本数据类型之间的运算规则</title>
      <link href="/2020/07/18/50652.html"/>
      <url>/2020/07/18/50652.html</url>
      
        <content type="html"><![CDATA[<h3><span id="ji-ben-shu-ju-lei-xing-zhi-jian-de-yun-suan-gui-ze">基本数据类型之间的运算规则</span><a href="#ji-ben-shu-ju-lei-xing-zhi-jian-de-yun-suan-gui-ze" class="header-anchor">.</a></h3><blockquote><p>除了<code>boolean</code>类型</p></blockquote><ul><li><p><strong>自动类型提升</strong></p><ul><li>当容量小的数据类型与大的数据内型运算时，结果自动提升为大的数据类型</li><li><strong>byte、short 、char</strong> –&gt; int –&gt; long –&gt; float –&gt; double</li><li><strong>特例</strong>：<strong>byte、short 、char</strong>三者间运算(<strong>包括自己和自己</strong>) 都转换为 <strong>int</strong><ul><li>int = byte + short</li><li>int = byte - char</li><li>int = char * short</li><li><code>int = byte / byte</code></li></ul></li></ul><blockquote><p>这里的<strong>容量</strong>指 能表示<strong>数的范围大小</strong></p><p>不是 字节大小</p></blockquote></li></ul>  <img src="/2020/07/18/50652/image-20200718203326556.png" style="zoom: 67%;"><ul><li><strong>强制类型转换</strong>：自动提升逆运算：容量大的 –&gt; 容量小的<ul><li>使用强转符 ： ()<ul><li>int i = （int）1.4；// i = 1</li></ul></li><li>可能会损失精度</li><li><strong>符号有可能颠倒</strong></li></ul></li></ul><p><img src="/2020/07/18/50652/image-20200718211530434.png" alt></p><h3><span id="bu-cun">补存</span><a href="#bu-cun" class="header-anchor">.</a></h3><p><strong>1. long num = 12345；// 没有写L 没有报错 原因</strong></p><p>​    整型字面量 默认类型是 int </p><p>​    int –&gt;  long 是自动提升的</p><p><strong>2.long num = 12345678901；// 会 编译失败 原因</strong></p><p>​    字面量范围超过了 int 的数据的范围</p><p>​    可以 使用 <code>long num = 12345678901L;</code></p><p><strong>3.float num = 1.3; // 会 编译失败 原因</strong></p><p>​    浮点型字面量 默认类型是double</p><p>​    double –&gt; float 需要强制转换</p><p>​    必须使用 <code>float num = 1.3F;</code></p><p>​    或 <code>float num = (float)1.3;</code></p><blockquote><p>推荐使用 <code>F</code></p><p>因为 前者是 先分配 float 大小的 内存去存 1.3</p><p>后者是 先分配 double大小的内存 存1.3 然后截取低 32位</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象工厂（AbstractFactory）模式</title>
      <link href="/2020/07/18/12546.html"/>
      <url>/2020/07/18/12546.html</url>
      
        <content type="html"><![CDATA[<h2><span id="chou-xiang-gong-han-abstractfactory-mo-shi">抽象工厂（AbstractFactory）模式</span><a href="#chou-xiang-gong-han-abstractfactory-mo-shi" class="header-anchor">.</a></h2><h3><span id="yi-gong-han-mo-shi">一、工厂模式</span><a href="#yi-gong-han-mo-shi" class="header-anchor">.</a></h3><ul><li><p><strong>作用：</strong></p><ul><li>实现了创建者和调用者的分离</li></ul></li><li><p><strong>详细分类</strong></p><ul><li>简单工厂模式<ul><li>用来生产同一等级结构中的任一产品（对于增加新的产品，需要求修改已有代码）</li></ul></li><li>工厂方法模式<ul><li>用来生产同一等级结构中的固定产品（支持增加任意产品）</li></ul></li><li>抽象工厂模式<ul><li>围绕一个超级工厂创建其他工厂，该超级工厂又称为其他工厂的工厂</li></ul></li></ul></li><li><p><strong>七大原则</strong></p><ul><li><strong>开闭原则：</strong>对扩展开放，对修改关闭（当应用需求发生改变时，尽量不修改原有代码，可以进行扩展）</li><li><strong>依赖倒置原则：</strong>要面向接口编程，不要面向实现编程（实现接口，不要直接继承实现）</li><li><strong>迪米特法则：</strong>只与你的“直接朋友”交谈，不跟”陌生人“说话（直接朋友：当前对象本身或当前对象中创建的一些对象；可通过朋友联系陌生人，降低耦合性）</li></ul></li><li><p><strong>核心本质</strong>（特点）</p><ul><li>实例化对象不用new，用工厂方法代替</li><li>将选择实现类，创建对象统一管理和控制。从而将调用者跟我们的实现类解耦</li></ul></li></ul><h3><span id="er-chou-xiang-gong-han-mo-shi">二、抽象工厂模式</span><a href="#er-chou-xiang-gong-han-mo-shi" class="header-anchor">.</a></h3><ul><li>定义：抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们具体的类</li><li>适用场景<ul><li>客户端（应用层）不依赖于产品类实例如何被创建、实现等细节</li><li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码</li><li>提供一个产品类的库，所有的产品以同样的接口出现，从而使得客户端不依赖于具体的实现</li></ul></li><li>优点<ul><li>具体产品在应用层的代码隔离，无需关心创建的细节</li><li>将一个系列的产品统一到一起创建</li></ul></li><li>缺点<ul><li>规定了所有可能被创建的产品集合，产品族中扩展新的产品困难</li><li>增加了系统的抽象性和理解难度</li></ul></li></ul><p><img src="/2020/07/18/12546/image-20200721211737426.png" alt></p><h4><span id="shi-xian">实现</span><a href="#shi-xian" class="header-anchor">.</a></h4><h5><span id="1-chan-pin-zu-jie-kou-ji-qi-shi-xian">1.产品族接口及其实现</span><a href="#1-chan-pin-zu-jie-kou-ji-qi-shi-xian" class="header-anchor">.</a></h5><p><strong>手机</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 手机接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPhone</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 实现类</span><span class="token comment" spellcheck="true">// huawei手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaweiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">IPhone</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// xiaomi手机</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">IPhone</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米手机开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>路由器</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 路由器 接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRouter</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//实现类</span><span class="token comment" spellcheck="true">// huawei路由器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaweiRouter</span> <span class="token keyword">implements</span> <span class="token class-name">IRouter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"华为路由器开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// xiaomi路由器</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiRouter</span> <span class="token keyword">implements</span> <span class="token class-name">IRouter</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小米路由器开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="2-chan-pin-gong-han-jie-kou-ji-gong-han-shi-xian-lei">2.产品工厂接口及工厂实现类</span><a href="#2-chan-pin-gong-han-jie-kou-ji-gong-han-shi-xian-lei" class="header-anchor">.</a></h5><p><strong>工厂接口</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IProductFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//制造 路由器</span>    IRouter <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//制造 手机</span>    IPhone <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//扩展 在这里添加 需要扩展的商品的制造方法 ，然后实现类同时添加实现的 方法</span>    <span class="token comment" spellcheck="true">// 同样违背了 开闭原则</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>华为工厂</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuaweiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IProductFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IRouter <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IPhone <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小米工厂</strong></p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IProductFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IRouter <span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IPhone <span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="3-gu-ke-lei">3.顾客类</span><a href="#3-gu-ke-lei" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        IPhone xiaomiPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRouter xiaomiRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IPhone huaweiPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRouter huaweiRouter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">createRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaomiPhone<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        xiaomiRouter<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        huaweiPhone<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        huaweiRouter<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="xiao-jie">小结</span><a href="#xiao-jie" class="header-anchor">.</a></h3><ul><li><h3><span id="gai-nian">概念：</span><a href="#gai-nian" class="header-anchor">.</a></h3><p>所谓抽象工厂模式就是提供一个接口，用于创建相关或者依赖对象的家族，而不需要明确指定具体类。它允许客户端使用抽象的接口来创建一组相关的产品，而不需要关心实际产出的具体产品是什么。这样一来，客户就可以从具体的产品中被解耦。它的优点是隔离了具体类的生成，使得客户端不需要知道什么被创建了，而缺点就在于新增新的行为会比较麻烦，因为当添加一个新的产品对象时，需要更改接口及其下的所有子类。</p><h3><span id="te-dian">特点：</span><a href="#te-dian" class="header-anchor">.</a></h3><ul><li>可以在类的内部对产品族中相关联的多等级产品共同管理，而不必专门引入多个新的类来进行管理。</li><li>当增加一个新的产品族时不需要修改原代码，满足开闭原则。</li><li>其缺点是：当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</li></ul><h3><span id="chou-xiang-gong-han-mo-shi-de-zhu-yao-jiao-se">抽象工厂模式的主要角色 :</span><a href="#chou-xiang-gong-han-mo-shi-de-zhu-yao-jiao-se" class="header-anchor">.</a></h3><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法 <code>new Product()</code>，可以创建多个不同等级的产品。</li><li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要功能和特性，抽象工厂模式有多个抽象产品。</li><li>具体产品（Concrete Product）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间是多对一的关系。</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 工厂模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单例模式（Singleton）</title>
      <link href="/2020/07/18/34811.html"/>
      <url>/2020/07/18/34811.html</url>
      
        <content type="html"><![CDATA[<h1><span id="dan-li-mo-shi-singleton">单例模式（Singleton）</span><a href="#dan-li-mo-shi-singleton" class="header-anchor">.</a></h1><h3><span id="ding-yi"><strong>定义：</strong></span><a href="#ding-yi" class="header-anchor">.</a></h3><p>指一个类只有一个实例，且该类能自行创建这个实例的一种模式。例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。</p><p>在计算机系统中，还有 Windows 的回收站、操作系统中的文件系统、多线程中的线程池、显卡的驱动程序对象、打印机的后台处理服务、应用程序的日志对象、数据库的连接池、网站的计数器、Web 应用的配置对象、应用程序中的对话框、系统中的缓存等常常被设计成单例。</p><h3><span id="dan-li-mo-shi-you-3-ge-te-dian"><strong>单例模式有 3 个特点</strong>：</span><a href="#dan-li-mo-shi-you-3-ge-te-dian" class="header-anchor">.</a></h3><ol><li>单例类只有一个实例对象；(私有构造器)</li><li>该单例对象必须由单例类自行创建；（内部new）</li><li>单例类对外提供一个访问该单例的全局访问点；（getInstance静态方法）</li></ol><h3><span id="dan-li-de-shi-xian">单例的实现</span><a href="#dan-li-de-shi-xian" class="header-anchor">.</a></h3><ul><li><p><strong>实现方式</strong></p><ul><li>饿汉式（类加载时初始化，线程安全，如果未获取实例，会造成资源浪费）</li><li>懒汉式（类加载时不初始化，获取实例时初始化，线程不安全，不会造成资源浪费）</li><li>懒汉式（线程安全版）<ul><li><code>synchronized</code> getInstance()（<code>synchronized</code>是非常消耗性能，多次调用该方法会造成不必要的性能消耗）</li><li>双重校验锁（DCL）（解决了多次调用getInstance对性能消耗的影响，但是存在指令重排问题）</li><li>双重校验锁（DCL）+ volatile （解决指令重排问题，但是反射可以破解单例模式）</li><li>三重校验锁（在构造器中再加一个验证，仍然有缺陷，只适用于先产生单例对象，再使用反射获取对象 的情况）</li><li>红绿灯（可以简单解决放射问题，但是仍然有问题）</li></ul></li><li>静态内部类（类加载时不初始化）</li><li>枚举（默认单例，不能通过反射破解）</li></ul><p>除了枚举所有的实现方式，在反射机制面前，都是不安全</p></li></ul><h4><span id="1-e-han-shi">1.饿汉式</span><a href="#1-e-han-shi" class="header-anchor">.</a></h4><blockquote><p><strong>饿汉式</strong> <code>线程安全</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungry</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造器</span>    <span class="token keyword">private</span> <span class="token function">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//内部 new对象 private final static</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Hungry HUNGRY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Hungry <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> HUNGRY<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        饿汉式 由于在内部已经new 实力化        会造成资源浪费     */</span>    <span class="token comment" spellcheck="true">//多线程并发</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// lambda表达式 jdk8</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                Hungry<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/*            结果发现 始终只有一个实例产生            (没有考虑到反射情况下)        */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示</p><p><img src="/2020/07/18/34811/image-20200718150307478.png" alt></p><h4><span id="2-lan-han-shi-xian-cheng-bu-an-quan">2.懒汉式（线程不安全）</span><a href="#2-lan-han-shi-xian-cheng-bu-an-quan" class="header-anchor">.</a></h4><blockquote><p>懒汉式（普通）<code>存在多线程问题</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造器</span>    <span class="token keyword">private</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//声明域对象 但是不实例化 到要使用时 实例化 private static  相比于饿汉式 没有 final</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span>  LazyMan LAZYMAN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyMan <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LAZYMAN <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            LAZYMAN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> LAZYMAN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        虽然解决了 内存浪费问题，在单线程下也是OK的, 对象是唯一的        但是：多线程下,是不安全的，对象可能 不是唯一        看main方法中的测试可以看出        多次的结果产生了多个对象        我们需要的是单例        因此我们需要同步     */</span>    <span class="token comment" spellcheck="true">//多线程并发</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                LazyMan<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果演示</p><p><img src="/2020/07/18/34811/image-20200718150929152.png" alt></p><h4><span id="3-lan-han-shi-xian-cheng-an-quan">3.懒汉式（线程安全）</span><a href="#3-lan-han-shi-xian-cheng-an-quan" class="header-anchor">.</a></h4><blockquote><p>懒汉式（<code>synchronized</code> getInstance()）<code>为了解决多线程问题</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan_Synr</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造器</span>    <span class="token keyword">private</span> <span class="token function">LazyMan_Synr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//声明域对象 但是不实例化 到要使用时 实例化 private static  相比于饿汉式 没有 final</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> LazyMan_Synr LAZYMAN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取实例 同步操作</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> LazyMan_Synr <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LAZYMAN <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            LAZYMAN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan_Synr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> LAZYMAN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        虽然进行了同步处理，解决了多线程问题        但是synchronized操作是非常消耗性能的        我们可以使用 DCL 过滤不必要的 同步代码块的调用     */</span>    <span class="token comment" spellcheck="true">//多线程并发</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                LazyMan_Synr<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果显示</p><p><img src="/2020/07/18/34811/image-20200718152804700.png" alt></p><blockquote><p>双重校验锁（DCL）<code>为了解决多线程问题</code></p></blockquote><h5><span id="dcl-dan-li-mo-shi-wei-shi-me-yao-liang-ci-pan-kong">DCL单例模式为什么要两次判空</span><a href="#dcl-dan-li-mo-shi-wei-shi-me-yao-liang-ci-pan-kong" class="header-anchor">.</a></h5><p><a href="https://www.jianshu.com/p/17a39b71f8d9" target="_blank" rel="noopener"><strong>来自简书（next_discover）</strong></a></p><ul><li>getInstance方法中第一个判空条件，逻辑上是可以去除的，去除之后并不影响单例的正确性，但是去除之后效率低。因为去掉之后，不管instance是否已经初始化，都会进行synchronized操作，而synchronized是一个重操作消耗性能。加上之后，如果已经初始化直接返回结果，不会进行synchronized操作。</li><li>getInstance方法中的第二个判空条件是不可以去除，如果去除了，并且刚好有两个线程a和b都通过了第一个判空条件。此时假设a先获得锁，进入synchronized的代码块，初始化instance，a释放锁。接着b获得锁，进入synchronized的代码块，也直接初始化instance，instance被初始化多遍不符合单例模式的要求~。加上第二个判空条件之后，b获得锁进入synchronized的代码块，此时instance不为空，不执行初始化操作。</li></ul><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan_Lock</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造器</span>    <span class="token keyword">private</span> <span class="token function">LazyMan_Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//声明域对象 但是不实例化 到要使用时 实例化 private static  相比于饿汉式 没有 final</span>    <span class="token keyword">private</span>  <span class="token keyword">static</span> LazyMan_Lock LAZYMAN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取实例 双重检查锁模式的 懒汉式单例 （DCL懒汉式）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyMan_Lock <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LAZYMAN <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外层检测</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan_Lock<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//同步锁</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>LAZYMAN <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//内层检测</span>                    LAZYMAN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan_Lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不是一个原子性操作</span>                    <span class="token comment" spellcheck="true">/*                        new一个对象 正常的3步实现                        1.分配内存空间                        2.执行构造方法，初始化对象                        3.把这个对象指向这个空间                     */</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> LAZYMAN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        DCL懒汉式         降低了 synchronized 对性能的影响        获得的结果只有个一个实例        但是仍然存在问题        由于上面        LAZYMAN = new LazyMan_Lock(); // 不是一个原子性操作        new 实例的顺序就有可能被打破        假如A获取实例 构造的顺序 是 132            1.分配内存空间            3.把这个对象指向这个空间            2.执行构造方法，初始化对象        此时B又获取实例的话，由于LAZYMAN != null,他就会认为实例是存在的,紧接着返回这个实例，        实际上这个实例指向的是一片虚无,就会报错     */</span>    <span class="token comment" spellcheck="true">//多线程并发</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                LazyMan_Synr<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>展示结果</p><ul><li><p>结果与上一个无区别</p></li><li><p>存在指令重排问题（目前无法展示出结果，发生概率太小）</p></li></ul><h5><span id="zhi-ling-chong-pai"></span><a href="#zhi-ling-chong-pai" class="header-anchor">.</a></h5><p>指令重排是指JVM在编译Java代码的时候，或者CPU在执行JVM字节码的时候，对现有的指令顺序进行重新排序。</p><p>指令重排的目的是为了在不改变程序执行结果的前提下，优化程序的运行效率。需要注意的是，这里所说的不改变执行结果，指的是不改变单线程下的程序执行结果。</p><h4><span id></span><a href="#" class="header-anchor">.</a></h4><blockquote><p>懒汉式（双重校验锁（DCL）+ volatile）<code>为了解决多线程问题 + 原子性</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan_Lock_Atom</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造器</span>    <span class="token keyword">private</span> <span class="token function">LazyMan_Lock_Atom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//声明域对象 但是不实例化 到要使用时 实例化 private static  相比于饿汉式 没有 final</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyMan_Lock_Atom LAZYMAN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取实例 双重检查锁模式的 懒汉式单例 （DCL懒汉式）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyMan_Lock_Atom <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LAZYMAN <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外层检测</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan_Lock_Atom<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//同步锁</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>LAZYMAN <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//内层检测</span>                    LAZYMAN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan_Lock_Atom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不是一个原子性操作</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> LAZYMAN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        增加volatile修饰符 保证原子性        private volatile static LazyMan_Lock_Atom LAZYMAN;        当时这些仍然是有问题的        由于放射可以获得 该类的私有构造器，所以可以轻易破解 单例模式 获取多个实例     */</span>    <span class="token comment" spellcheck="true">//使用反射破解 单例模式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        for (int i = 0; i &lt; 10 ; i++) {</span><span class="token comment" spellcheck="true">//            new Thread(()->{</span><span class="token comment" spellcheck="true">//                LazyMan_Lock_Atom.getInstance();</span><span class="token comment" spellcheck="true">//            }).start();</span><span class="token comment" spellcheck="true">//        }</span>        <span class="token comment" spellcheck="true">//单例模式创建的实例</span>        LazyMan_Lock_Atom LazyMan <span class="token operator">=</span> LazyMan_Lock_Atom<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反射创建的实例</span>        Constructor<span class="token operator">&lt;</span>LazyMan_Lock_Atom<span class="token operator">></span> constructor <span class="token operator">=</span> LazyMan_Lock_Atom<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LazyMan_Lock_Atom LazyMan1 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"单例模式创建的实例 "</span><span class="token operator">+</span> LazyMan<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反射创建的实例 "</span><span class="token operator">+</span> LazyMan1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*            运行可以看到 两次产生对象不是同一个         */</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果演示</p><ul><li>结果是一致</li><li>这里我们考虑反射破解（运行可以看到 两次产生对象不是同一个，单例被破解）</li></ul><p><img src="/2020/07/18/34811/image-20200718155630033.png" alt></p><blockquote><p>懒汉式（三重校验锁）<code>为了解决反射破解问题</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan_Lock_Atom_PRO</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//私有构造器</span>    <span class="token keyword">private</span> <span class="token function">LazyMan_Lock_Atom_PRO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan_Lock_Atom_PRO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//第三重检测</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>LAZYMAN <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果对象(单例模式创建的)存在</span>                <span class="token comment" spellcheck="true">//抛出异常 由于 反射破解 私有构造器</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不要试图使用反射破解异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//声明域对象 但是不实例化 到要使用时 实例化 private static  相比于饿汉式 没有 final</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyMan_Lock_Atom_PRO LAZYMAN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取实例 双重检查锁模式的 懒汉式单例 （DCL懒汉式）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyMan_Lock_Atom_PRO <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LAZYMAN <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外层检测</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan_Lock_Atom_PRO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//同步锁</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>LAZYMAN <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//内层检测</span>                    LAZYMAN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan_Lock_Atom_PRO</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不是一个原子性操作</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> LAZYMAN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        在私有构造器中添加第三重检测        看上去好像 是解决了反射破解构造器的问题        事实上，仍然有问题            这个只适用于 先产生单例对象，再使用反射获取对象 的情况        如果没有 产生使用单例模式创建对象 而是 使用 反射     */</span>    <span class="token comment" spellcheck="true">//使用反射破解 单例模式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//反射创建的实例</span>        Constructor<span class="token operator">&lt;</span>LazyMan_Lock_Atom_PRO<span class="token operator">></span> constructor <span class="token operator">=</span> LazyMan_Lock_Atom_PRO<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">/</span><span class="token comment" spellcheck="true">/************************ 三重检测结果 ***************************/</span><span class="token operator">/</span>        <span class="token comment" spellcheck="true">/*        //单例模式创建的实例        LazyMan_Lock_Atom_PRO LazyMan = LazyMan_Lock_Atom_PRO.getInstance();         //反射实例1        LazyMan_Lock_Atom_PRO LazyMan1 = constructor.newInstance();        System.out.println("单例模式创建的实例 "+ LazyMan);        System.out.println("反射创建的实例1 "+ LazyMan1);        */</span>        <span class="token operator">/</span><span class="token comment" spellcheck="true">/************* 仍然存在的问题（先注释“三重检测结果”部分）*************/</span><span class="token operator">/</span>        <span class="token comment" spellcheck="true">//反射实例1</span>        LazyMan_Lock_Atom_PRO LazyMan1 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反射实例2</span>        LazyMan_Lock_Atom_PRO LazyMan2 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反射创建的实例1 "</span><span class="token operator">+</span> LazyMan1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反射创建的实例2 "</span><span class="token operator">+</span> LazyMan2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果展示</p><ul><li><p>三重检测结果</p><p><img src="/2020/07/18/34811/image-20200718161027137.png" alt></p></li><li><p>仍然存在的问题（没有使用getInstance获取实例，只使用反射获取实例，仍然可以破解）</p><p><img src="/2020/07/18/34811/image-20200718160814285.png" alt></p></li></ul><blockquote><p>懒汉式（红绿灯）<code>为了解决反射破解问题</code></p></blockquote><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan_Lock_Atom_PRO_Signals</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//添加红绿灯</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> qwert <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//私有构造器</span>    <span class="token keyword">private</span> <span class="token function">LazyMan_Lock_Atom_PRO_Signals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>qwert <span class="token operator">==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果实例 不存在</span>            qwert <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//如果实例存在</span>            <span class="token comment" spellcheck="true">//抛出异常 由于 反射破解 私有构造器</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"不要试图使用反射破解异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//声明域对象 但是不实例化 到要使用时 实例化 private static  相比于饿汉式 没有 final</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyMan_Lock_Atom_PRO_Signals LAZYMAN<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取实例 双重检查锁模式的 懒汉式单例 （DCL懒汉式）</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> LazyMan_Lock_Atom_PRO_Signals <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>LAZYMAN <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//外层检测</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan_Lock_Atom_PRO_Signals<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//同步锁</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>LAZYMAN <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//内层检测</span>                    LAZYMAN <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan_Lock_Atom_PRO_Signals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 不是一个原子性操作</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> LAZYMAN<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        使用 红绿灯(一个标志位) 解决 反射破解 构造器 创建对象            私有一个boolean static(保持唯一) 属性 由于这个属性 正常角度是无法通过放射去获取这个 属性的（因为你不知道属性名是啥） 并更改这个属性值的 所以一般来说已经很安全            但是 如果 是在 反编译的情况下 同样可以获取 该属性的名字 然后更改 属性值 破解构造器 创建实例            下面的就不做演示，也就是说 道高一尺，魔高一丈     */</span>    <span class="token comment" spellcheck="true">//使用反射破解 单例模式</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//反射创建的实例</span>        Constructor<span class="token operator">&lt;</span>LazyMan_Lock_Atom_PRO_Signals<span class="token operator">></span> constructor <span class="token operator">=</span> LazyMan_Lock_Atom_PRO_Signals<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反射实例1</span>        LazyMan_Lock_Atom_PRO_Signals LazyMan1 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反射实例2</span>        LazyMan_Lock_Atom_PRO_Signals LazyMan2 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反射创建的实例1 "</span><span class="token operator">+</span> LazyMan1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"反射创建的实例2 "</span><span class="token operator">+</span> LazyMan2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果展示</p><p><img src="/2020/07/18/34811/image-20200718162753394.png" alt></p><h4><span id="4-jing-tai-nei-bu-lei">4.静态内部类</span><a href="#4-jing-tai-nei-bu-lei" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Outer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Inner</span><span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> Outer instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Outer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 调用该方法，获取实例，并进行初始化</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Outer <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Inner<span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="5-mei-ju">5.枚举</span><a href="#5-mei-ju" class="header-anchor">.</a></h4><img src="/2020/07/18/34811/image-20200718164835227.png" style="zoom:50%;"><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//enum 默认就是一个单列的 可以去看 Constructor.class 中 newInstance()</span>    <span class="token comment" spellcheck="true">/*        if ((clazz.getModifiers() &amp; Modifier.ENUM) != 0)            throw new IllegalArgumentException("Cannot reflectively create enum objects"); // 不能反射地创建枚举对象     */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> EnumSingle <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">EnumSingle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> EnumSingle <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException<span class="token punctuation">,</span> NoSuchMethodException <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        EnumSingle instance1 = EnumSingle.getInstance();</span><span class="token comment" spellcheck="true">//        EnumSingle instance2 = EnumSingle.getInstance();</span><span class="token comment" spellcheck="true">//</span><span class="token comment" spellcheck="true">//        System.out.println(instance1);</span><span class="token comment" spellcheck="true">//        System.out.println(instance2);</span>        Constructor<span class="token operator">&lt;</span>EnumSingle<span class="token operator">></span> constructor <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EnumSingle enumSingle1 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        EnumSingle enumSingle2 <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>enumSingle1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>enumSingle2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//反编译 1</span>        <span class="token comment" spellcheck="true">//javap -p **.class</span>        <span class="token comment" spellcheck="true">//反编译 2 专业</span>        <span class="token comment" spellcheck="true">//jad.exe 将 class反编译为 java文件</span>        <span class="token comment" spellcheck="true">//jad -sjava **.class</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> java </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 变量</title>
      <link href="/2020/07/18/54508.html"/>
      <url>/2020/07/18/54508.html</url>
      
        <content type="html"><![CDATA[<h3><span id="bian-liang">变量</span><a href="#bian-liang" class="header-anchor">.</a></h3><ul><li>内存中的一个存储区域</li><li>该区域的数据可以在同一类型范围内不断变化</li><li>变量是程序中最基本的存储单元</li><li><code>变量类型</code> <code>变量名</code> = <code>存储的值</code>;</li></ul><p><strong>作用</strong></p><ul><li>用于在内存中保存数据</li></ul><p><strong>注意</strong></p><ul><li>先声明，后使用</li><li>变量只在其作用域中有效</li><li>同一个作用域中不能声明多个同名变量</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 标识符</title>
      <link href="/2020/07/18/39433.html"/>
      <url>/2020/07/18/39433.html</url>
      
        <content type="html"><![CDATA[<h3><span id="biao-shi-fu-identifier">标识符（Identifier）</span><a href="#biao-shi-fu-identifier" class="header-anchor">.</a></h3><ul><li><p>Java对各种 <strong>变量</strong>、<strong>方法</strong>和 <strong>类</strong>等<strong>要素命名时使用的字符序列</strong>成为标识符</p></li><li><p><strong>即</strong>变量名、方法名、类名都是标识符</p></li></ul><p><strong>标识符命名规则</strong> –&gt;  <mark>不遵守,编译通不过</mark></p><ul><li>由字母，数字，<code>_</code>或<code>$</code> 组成</li><li>数字不能开头</li><li>不可以是关键字和保留字</li><li>严格区分大小写</li><li>标识符不包含空格</li></ul><p><strong>标识符命名规范</strong> –&gt;   <mark>不遵守,编译运行可以通过</mark></p><ul><li>包名： <code>xxxyyyzzz</code></li><li>类名、接口名：<code>XxxYyyZzz</code></li><li>变量名、方法名：<code>xxxYyyZzz</code></li><li>常量名：<code>XXX_YYY_ZZZ</code></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 数据类型</title>
      <link href="/2020/07/18/30289.html"/>
      <url>/2020/07/18/30289.html</url>
      
        <content type="html"><![CDATA[<h3><span id="shu-ju-lei-xing">数据类型</span><a href="#shu-ju-lei-xing" class="header-anchor">.</a></h3><blockquote><p>java是一个 <strong>强类型</strong> 语言，每一种数据都定义的明确的数据类型，在内存中分配不同的大小</p></blockquote><ul><li>8个基本数据类型（primitive type）<ul><li>byte、short、int、long</li><li>float、double</li><li>char</li><li>boolean</li></ul></li><li>引用类型（reference type）<ul><li>class</li><li>interface</li><li>array</li></ul></li></ul><blockquote><p>实际上，JAVA中还存在另外一种基本类型 void，它也有对应的包装类 java.lang.Void，不过我们无法直接对它们进行操作。</p></blockquote><p><strong>整型</strong>（补码）</p><blockquote><p>默认int</p><p>声明<strong>long型常量</strong>要在后面加 <code>l</code> 或<code>L</code></p></blockquote><table><thead><tr><th align="left">类型</th><th>占用存储空间</th><th>取值范围</th></tr></thead><tbody><tr><td align="left">byte</td><td>1byte = 8bit</td><td>-128~127</td></tr><tr><td align="left">short</td><td>2byte</td><td>-2<sup>15</sup> ~ 2<sup>15</sup>-1</td></tr><tr><td align="left">int</td><td>4byte</td><td>-2<sup>31</sup> ~ 2<sup>31</sup>-1（约21亿）</td></tr><tr><td align="left">long</td><td>8byte</td><td>-2<sup>63</sup> ~ 2<sup>63</sup>-1</td></tr></tbody></table><p><strong>浮点型</strong>（IEEE754）</p><ul><li><p>float单精度：尾数精确到7位有效数字，double使其两倍</p></li><li><p>表示形式</p><ul><li>十进制形式， 5.1， 5.1F， .5（0.5）</li><li>科学计数法，5.1e2（5.1 * 10<sup>2</sup>）</li></ul></li></ul><blockquote><p>默认double</p><p>声明<strong>float常量</strong>要在后面加<code>f</code>或<code>F</code></p><p><strong>float数值的范围比long大</strong></p></blockquote><table><thead><tr><th>类型</th><th>占用存储空间</th><th>取值范围</th></tr></thead><tbody><tr><td>float</td><td>4byte</td><td>-3.403E38 ~ 3.404E38</td></tr><tr><td>double</td><td>8byte</td><td>-1.798E308 ~ 1.798E308</td></tr></tbody></table><p><strong>字符型</strong></p><blockquote><p><code>&#39;1&#39;</code>,<code>&#39;a&#39;</code>,<code>&#39;中&#39;</code>。。。</p><p><strong>转义字符</strong> <code>&#39;\n&#39;</code></p><p><strong>Unicode</strong><code>\u4e2d&#39;</code> 中</p></blockquote><table><thead><tr><th>类型</th><th>占用存储空间</th><th>取值范围</th></tr></thead><tbody><tr><td><strong>char</strong></td><td><strong>2byte</strong></td><td>-2<sup>15</sup> ~ 2<sup>15</sup>-1</td></tr></tbody></table><p><strong>布尔型</strong></p><table><thead><tr><th>类型</th><th>占用存储空间</th><th>取值范围</th></tr></thead><tbody><tr><td>boolean</td><td></td><td>true|false</td></tr></tbody></table><blockquote><p><strong>boolean到底占几个字节，依赖于JVM</strong></p><p><strong>第一，无论Boolean占用多少字节，只有1bit的值是有意义的</strong></p><p><strong>第二，boolean 类型被编译成 int 类型来使用，占 4 个 byte 。</strong></p><p><strong>第三，在 Java 虚拟机里，1 表示 true ，0 表示 false 。</strong></p></blockquote><h3><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h3><h4><span id="zhuan-yi-zi-fu">转义字符</span><a href="#zhuan-yi-zi-fu" class="header-anchor">.</a></h4><table><thead><tr><th>转义字符</th><th>意义</th><th>ASCII码值（十进制）</th></tr></thead><tbody><tr><td>\a</td><td>响铃(BEL)</td><td>007</td></tr><tr><td>\b</td><td>退格(BS) ，将当前位置移到前一列</td><td>008</td></tr><tr><td>\f</td><td>换页(FF)，将当前位置移到下页开头</td><td>012</td></tr><tr><td>\n</td><td>换行(LF) ，将当前位置移到下一行开头</td><td>010</td></tr><tr><td>\r</td><td>回车(CR) ，将当前位置移到本行开头</td><td>013</td></tr><tr><td>\t</td><td>水平制表(HT) （跳到下一个TAB位置）</td><td>009</td></tr><tr><td>\v</td><td>垂直制表(VT)</td><td>011</td></tr><tr><td>\\</td><td>代表一个反斜线字符’’\“</td><td>092</td></tr><tr><td>\‘</td><td>代表一个单引号（撇号）字符</td><td>039</td></tr><tr><td>\“</td><td>代表一个双引号字符</td><td>034</td></tr><tr><td>?</td><td>代表一个问号</td><td>063</td></tr><tr><td>\0</td><td>空字符(NUL)</td><td>000</td></tr><tr><td>\ddd</td><td>1到3位八进制数所代表的任意字符</td><td>三位八进制</td></tr><tr><td>\xhh</td><td>十六进制所代表的任意字符</td><td>十六进制</td></tr></tbody></table><h4><span id="ascii-ma">ASCII码</span><a href="#ascii-ma" class="header-anchor">.</a></h4><table><thead><tr><th>二进制</th><th>十进制</th><th>十六进制</th><th>缩写</th><th>可以显示的表示法</th><th>名称/意义</th></tr></thead><tbody><tr><td>00000000</td><td>0</td><td>00</td><td>NUL</td><td>␀</td><td>空字符（Null）</td></tr><tr><td>00000001</td><td>1</td><td>01</td><td>SOH</td><td>␁</td><td>标题开始</td></tr><tr><td>00000010</td><td>2</td><td>02</td><td>STX</td><td>␂</td><td>本文开始</td></tr><tr><td>00000011</td><td>3</td><td>03</td><td>ETX</td><td>␃</td><td>本文结束</td></tr><tr><td>00000100</td><td>4</td><td>04</td><td>EOT</td><td>␄</td><td>传输结束</td></tr><tr><td>00000101</td><td>5</td><td>05</td><td>ENQ</td><td>␅</td><td>请求</td></tr><tr><td>00000110</td><td>6</td><td>06</td><td>ACK</td><td>␆</td><td>确认回应</td></tr><tr><td>00000111</td><td>7</td><td>07</td><td>BEL</td><td>␇</td><td>响铃</td></tr><tr><td>00001000</td><td>8</td><td>08</td><td>BS</td><td>␈</td><td>退格</td></tr><tr><td>00001001</td><td>9</td><td>09</td><td>HT</td><td>␉</td><td>水平定位符号</td></tr><tr><td>00001010</td><td>10</td><td>0A</td><td>LF</td><td>␊</td><td>换行键</td></tr><tr><td>00001011</td><td>11</td><td>0B</td><td>VT</td><td>␋</td><td>垂直定位符号</td></tr><tr><td>00001100</td><td>12</td><td>0C</td><td>FF</td><td>␌</td><td>换页键</td></tr><tr><td>00001101</td><td>13</td><td>0D</td><td>CR</td><td>␍</td><td>归位键</td></tr><tr><td>00001110</td><td>14</td><td>0E</td><td>SO</td><td>␎</td><td>取消变换（Shift out）</td></tr><tr><td>00001111</td><td>15</td><td>0F</td><td>SI</td><td>␏</td><td>启用变换（Shift in）</td></tr><tr><td>00010000</td><td>16</td><td>10</td><td>DLE</td><td>␐</td><td>跳出数据通讯</td></tr><tr><td>00010001</td><td>17</td><td>11</td><td>DC1</td><td>␑</td><td>设备控制一（XON 启用软件速度控制）</td></tr><tr><td>00010010</td><td>18</td><td>12</td><td>DC2</td><td>␒</td><td>设备控制二</td></tr><tr><td>00010011</td><td>19</td><td>13</td><td>DC3</td><td>␓</td><td>设备控制三（XOFF 停用软件速度控制）</td></tr><tr><td>00010100</td><td>20</td><td>14</td><td>DC4</td><td>␔</td><td>设备控制四</td></tr><tr><td>00010101</td><td>21</td><td>15</td><td>NAK</td><td>␕</td><td>确认失败回应</td></tr><tr><td>00010110</td><td>22</td><td>16</td><td>SYN</td><td>␖</td><td>同步用暂停</td></tr><tr><td>00010111</td><td>23</td><td>17</td><td>ETB</td><td>␗</td><td>区块传输结束</td></tr><tr><td>00011000</td><td>24</td><td>18</td><td>CAN</td><td>␘</td><td>取消</td></tr><tr><td>00011001</td><td>25</td><td>19</td><td>EM</td><td>␙</td><td>连接介质中断</td></tr><tr><td>00011010</td><td>26</td><td>1A</td><td>SUB</td><td>␚</td><td>替换</td></tr><tr><td>00011011</td><td>27</td><td>1B</td><td>ESC</td><td>␛</td><td>跳出</td></tr><tr><td>00011100</td><td>28</td><td>1C</td><td>FS</td><td>␜</td><td>文件分割符</td></tr><tr><td>00011101</td><td>29</td><td>1D</td><td>GS</td><td>␝</td><td>组群分隔符</td></tr><tr><td>00011110</td><td>30</td><td>1E</td><td>RS</td><td>␞</td><td>记录分隔符</td></tr><tr><td>00011111</td><td>31</td><td>1F</td><td>US</td><td>␟</td><td>单元分隔符</td></tr><tr><td>01111111</td><td>127</td><td>7F</td><td>DEL</td><td>␡</td><td>删除</td></tr></tbody></table><h4><span id="unicode-zhong-wen-bian-ma">Unicode 中文编码</span><a href="#unicode-zhong-wen-bian-ma" class="header-anchor">.</a></h4><blockquote><p><a href="https://blog.csdn.net/qlwangcong518/article/details/85016294" target="_blank" rel="noopener">https://blog.csdn.net/qlwangcong518/article/details/85016294</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javase -- 关键字 和 保留字</title>
      <link href="/2020/07/18/1428.html"/>
      <url>/2020/07/18/1428.html</url>
      
        <content type="html"><![CDATA[<h3><span id="guan-jian-zi-keyword">关键字 （keyword）</span><a href="#guan-jian-zi-keyword" class="header-anchor">.</a></h3><ul><li>被java语言赋予了特殊含义，<strong>用做专门用途的字符串</strong>（单词）</li><li>关键字<strong>所有字母</strong>都为<strong>小写</strong></li></ul><p><strong>java关键字</strong></p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td><a href="https://baike.baidu.com/item/abstract" target="_blank" rel="noopener">abstract</a></td><td><a href="https://baike.baidu.com/item/assert" target="_blank" rel="noopener">assert</a></td><td><a href="https://baike.baidu.com/item/boolean" target="_blank" rel="noopener">boolean</a></td><td>break</td><td><a href="https://baike.baidu.com/item/byte" target="_blank" rel="noopener">byte</a></td></tr><tr><td>case</td><td><a href="https://baike.baidu.com/item/catch" target="_blank" rel="noopener">catch</a></td><td><a href="https://baike.baidu.com/item/char" target="_blank" rel="noopener">char</a></td><td><a href="https://baike.baidu.com/item/class" target="_blank" rel="noopener">class</a></td><td>const</td></tr><tr><td>continue</td><td><a href="https://baike.baidu.com/item/default" target="_blank" rel="noopener">default</a></td><td><a href="https://baike.baidu.com/item/do" target="_blank" rel="noopener">do</a></td><td><a href="https://baike.baidu.com/item/double" target="_blank" rel="noopener">double</a></td><td><a href="https://baike.baidu.com/item/else" target="_blank" rel="noopener">else</a></td></tr><tr><td><a href="https://baike.baidu.com/item/enum" target="_blank" rel="noopener">enum</a></td><td><a href="https://baike.baidu.com/item/extends" target="_blank" rel="noopener">extends</a></td><td><a href="https://baike.baidu.com/item/final" target="_blank" rel="noopener">final</a></td><td><a href="https://baike.baidu.com/item/finally" target="_blank" rel="noopener">finally</a></td><td>float</td></tr><tr><td><a href="https://baike.baidu.com/item/for" target="_blank" rel="noopener">for</a></td><td>goto</td><td><a href="https://baike.baidu.com/item/if" target="_blank" rel="noopener">if</a></td><td><a href="https://baike.baidu.com/item/implements" target="_blank" rel="noopener">implements</a></td><td><a href="https://baike.baidu.com/item/import" target="_blank" rel="noopener">import</a></td></tr><tr><td><a href="https://baike.baidu.com/item/instanceof" target="_blank" rel="noopener">instanceof</a></td><td><a href="https://baike.baidu.com/item/int" target="_blank" rel="noopener">int</a></td><td><a href="https://baike.baidu.com/item/interface" target="_blank" rel="noopener">interface</a></td><td>long</td><td>native</td></tr><tr><td>new</td><td><a href="https://baike.baidu.com/item/package" target="_blank" rel="noopener">package</a></td><td><a href="https://baike.baidu.com/item/private" target="_blank" rel="noopener">private</a></td><td><a href="https://baike.baidu.com/item/protected" target="_blank" rel="noopener">protected</a></td><td><a href="https://baike.baidu.com/item/public" target="_blank" rel="noopener">public</a></td></tr><tr><td><a href="https://baike.baidu.com/item/return" target="_blank" rel="noopener">return</a></td><td><a href="https://baike.baidu.com/item/strictfp" target="_blank" rel="noopener">strictfp</a></td><td><a href="https://baike.baidu.com/item/short" target="_blank" rel="noopener">short</a></td><td><a href="https://baike.baidu.com/item/static" target="_blank" rel="noopener">static</a></td><td><a href="https://baike.baidu.com/item/super" target="_blank" rel="noopener">super</a></td></tr><tr><td><a href="https://baike.baidu.com/item/switch" target="_blank" rel="noopener">switch</a></td><td><a href="https://baike.baidu.com/item/synchronized" target="_blank" rel="noopener">synchronized</a></td><td><a href="https://baike.baidu.com/item/this" target="_blank" rel="noopener">this</a></td><td><a href="https://baike.baidu.com/item/throw" target="_blank" rel="noopener">throw</a></td><td>throws</td></tr><tr><td><a href="https://baike.baidu.com/item/transient" target="_blank" rel="noopener">transient</a></td><td>try</td><td><a href="https://baike.baidu.com/item/void" target="_blank" rel="noopener">void</a></td><td><a href="https://baike.baidu.com/item/volatile" target="_blank" rel="noopener">volatile</a></td><td><a href="https://baike.baidu.com/item/while" target="_blank" rel="noopener">while</a></td></tr></tbody></table><p><strong>java简单含义解释</strong></p><table><thead><tr><th><strong>关键字</strong></th><th><strong>含义</strong></th></tr></thead><tbody><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>assert</td><td>断言，用来进行程序调试</td></tr><tr><td>boolean</td><td>基本数据类型之一，声明布尔类型的关键字</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>class</td><td>声明一个类</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr><tr><td>continue</td><td>回到一个块的开始处，用于跳出当前循环</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支。Java8 中也作用于声明接口函数的默认实现</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>enum</td><td>枚举</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型。对于类，可以是另一个类或者抽象类；对于接口，可以是另一个接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个<strong>类不能派生出子类</strong>，或者<strong>成员方法不能被覆盖</strong>，或者<strong>成员域的值不能被改变，用来定义常量</strong></td></tr><tr><td>finally</td><td>用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td><strong>native</strong></td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的（与操作系统打交道）</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>package</td><td>包</td></tr><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td><strong>strictfp</strong></td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循[IEEE 754](<a href="https://baike.baidu.com/item/IEEE" target="_blank" rel="noopener">https://baike.baidu.com/item/IEEE</a> 754)算术规范</td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td><strong>transient</strong></td><td>声明不用序列化的成员域</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td><strong>volatile</strong></td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td>while</td><td>用在循环结构中</td></tr></tbody></table><h3><span id="bao-liu-zi-reserved-word">保留字（reserved word）</span><a href="#bao-liu-zi-reserved-word" class="header-anchor">.</a></h3><ul><li>现有版本未使用，以后可能会使用</li><li>const 、 goto</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> javase </tag>
            
            <tag> 学习笔记 </tag>
            
            <tag> 尚硅谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA设置配置</title>
      <link href="/2020/07/16/15330.html"/>
      <url>/2020/07/16/15330.html</url>
      
        <content type="html"><![CDATA[<blockquote><p>这篇博客用于记录 我的IDEA的一些原有配置信息位置 及 恢复</p></blockquote><p>IDEA2020.1的配置文件路径：</p><p>C:\Users\用户名\AppData\Roaming\JetBrains\IntelliJIdea2020.1\</p><h3><span id="filetemplates">fileTemplates</span><a href="#filetemplates" class="header-anchor">.</a></h3><p>文件注释模板</p><p><img src="/2020/07/16/15330/image-20200716163321484.png" alt></p><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author liuminkai * @version 1.0 * @datetime ${DATE} ${TIME} * @decription ${DECRIPTION} **/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="templates">templates</span><a href="#templates" class="header-anchor">.</a></h3><p>行注释模板</p><p><img src="/2020/07/16/15330/image-20200716163456993.png" alt></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>templateSet</span> <span class="token attr-name">group</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>other<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>syso<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>System.out::println<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>a lambda expression<span class="token punctuation">"</span></span> <span class="token attr-name">toReformat</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">toShortenFQNames</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JAVA_EXPRESSION<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>twr<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>try() {&amp;#10;&amp;#10;}<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>try-with-resources<span class="token punctuation">"</span></span> <span class="token attr-name">toReformat</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">toShortenFQNames</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JAVA_EXPRESSION<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>**<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>**&amp;#10; * $desc$&amp;#10; * @date $date$ $time$&amp;#10;$params$&amp;#10; * @return $return$&amp;#10; * @throw &amp;#10; **/<span class="token punctuation">"</span></span> <span class="token attr-name">shortcut</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ENTER<span class="token punctuation">"</span></span> <span class="token attr-name">description</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">toReformat</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token attr-name">toShortenFQNames</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>desc<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alwaysStopAt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>date()<span class="token punctuation">"</span></span> <span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alwaysStopAt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>time()<span class="token punctuation">"</span></span> <span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alwaysStopAt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>params<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>groovyScript(&amp;quot;def result<span class="token punctuation">=</span><span class="token punctuation">'</span><span class="token punctuation">'</span>; def params<span class="token punctuation">=</span>\&amp;quot;${_1}\&amp;quot;.replaceAll(<span class="token punctuation">'</span>[\\\\[|\\\\]|\\\\s]<span class="token punctuation">'</span>, <span class="token punctuation">'</span><span class="token punctuation">'</span>).split(<span class="token punctuation">'</span>,<span class="token punctuation">'</span>).toList(); for(i <span class="token punctuation">=</span> 0; i &amp;lt; params.size(); i++) {result+<span class="token punctuation">=</span><span class="token punctuation">'</span> * @param <span class="token punctuation">'</span> + params[i] + ((i &amp;lt; params.size() - 1) ? <span class="token punctuation">'</span>\\n<span class="token punctuation">'</span> : <span class="token punctuation">'</span><span class="token punctuation">'</span>)}; return result&amp;quot;, methodParameters()) <span class="token punctuation">"</span></span> <span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alwaysStopAt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>variable</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return<span class="token punctuation">"</span></span> <span class="token attr-name">expression</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>methodReturnType()<span class="token punctuation">"</span></span> <span class="token attr-name">defaultValue</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">alwaysStopAt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>context</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JAVA_CODE<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>context</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>templateSet</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="kuai-jie-jian">快捷键</span><a href="#kuai-jie-jian" class="header-anchor">.</a></h3><p><img src="/2020/07/16/15330/image-20200716163711949.png" alt></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>application</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>component</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>KeymapManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>active_keymap</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Eclipse copy<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>application</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/16/15330/image-20200716163901296.png" alt></p><pre class="line-numbers language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keymap</span> <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Eclipse copy<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Eclipse<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Back<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mouse-shortcut</span> <span class="token attr-name">keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console.Execute.Multiline<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console.Jdbc.Execute<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Console.Jpa.GenerateSql<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Diff.NextChange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl f6<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl page_down<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Diff.PrevChange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shift ctrl f6<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl page_up<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DirDiffMenu.SynchronizeDiff.All<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EditorChooseLookupItemCompleteStatement<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EditorCompleteStatement<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EditorSplitLine<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EditorStartNewLine<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl enter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>EditorStartNewLineBefore<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl alt enter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shift ctrl enter<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>FindInPath<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shift f<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Forward<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mouse-shortcut</span> <span class="token attr-name">keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button5<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Generate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alt insert<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alt space<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Groovy.Shell.Execute<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HighlightUsagesInFile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shift ctrl f7<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JumpToLastChange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl q<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alt left<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>JumpToNextChange<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>alt right<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>KotlinShellExecute<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>NextTab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl f6<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl page_down<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl alt right<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>OverrideMethods<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shift alt o<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>PreviousTab<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shift ctrl f6<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl page_up<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl alt left<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TypeHierarchy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>f4<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keyboard-shortcut</span> <span class="token attr-name">first-keystroke</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ctrl h<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>action</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>action</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ViewSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>keymap</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>IEDA文档注释模板和方法注释模板</title>
      <link href="/2020/07/14/52809.html"/>
      <url>/2020/07/14/52809.html</url>
      
        <content type="html"><![CDATA[<h5><span id="wen-dang-zhu-shi-mo-ban">文档注释模板</span><a href="#wen-dang-zhu-shi-mo-ban" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @author liuminkai * @version 1.0 * @datetime ${DATE} ${TIME} * @decription ${DECRIPTION} **/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/14/52809/image-20200714203742120.png" alt></p><h5><span id="fang-fa-zhu-shi-mo-ban">方法注释模板</span><a href="#fang-fa-zhu-shi-mo-ban" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">*</span> $desc$ <span class="token operator">*</span> <span class="token annotation punctuation">@date</span> $date$ $time$$params$ <span class="token operator">*</span> @<span class="token keyword">return</span> $<span class="token keyword">return</span>$ <span class="token operator">*</span> @<span class="token keyword">throw</span>  <span class="token operator">*</span><span class="token operator">*</span><span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/07/14/52809/image-20200714204130749.png" alt></p><p><img src="/2020/07/14/52809/image-20200714204313489.png" alt></p><pre class="line-numbers language-groovy"><code class="language-groovy"><span class="token function">groovyScript</span><span class="token punctuation">(</span><span class="token string">"def result=''; def params=\"${_1}\".replaceAll('[\\\\[|\\\\]|\\\\s]', '').split(',').toList(); for(i = 0; i &lt; params.size(); i++) {result+=' * @param ' + params[i] + ((i &lt; params.size() - 1) ? '\\n' : '')}; return result"</span><span class="token punctuation">,</span> <span class="token function">methodParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS兼容问题（PC端）</title>
      <link href="/2020/07/10/31245.html"/>
      <url>/2020/07/10/31245.html</url>
      
        <content type="html"><![CDATA[<h1><span id="css-jian-rong-wen-ti-pc-duan">CSS兼容问题（PC端）</span><a href="#css-jian-rong-wen-ti-pc-duan" class="header-anchor">.</a></h1><blockquote><p>浏览器兼容性问题，通常是因为不同浏览器对同一端代码有不同的解析，造成页面显示不统一的情况</p></blockquote><h2><span id="yi-qi-yin">一、起因</span><a href="#yi-qi-yin" class="header-anchor">.</a></h2><ul><li>浏览器不同 <ul><li>IE</li><li>FireFox</li><li>Chrome</li><li>Opera</li><li>Safari</li><li>。。。</li></ul></li><li>浏览器版本不同<ul><li>IE6 IE7 。。。</li><li>IE9 。。。（遵循W3C规范，之前不遵循，其他浏览器遵循，所以说主要兼容来自IE9版本之前的IE浏览器）</li></ul></li></ul><h2><span id="er-css-hack">二、CSS Hack</span><a href="#er-css-hack" class="header-anchor">.</a></h2><blockquote><p>为了让页面形成统一的效果，要针对不同的浏览器或不同版本写出对应可解析的CSS样式，所以我们就把这个针对不同浏览器/版本而写CSS的过程叫<strong>CSS Hack</strong></p></blockquote><p>简单理解，根据不同浏览器/版本写样式</p><h3><span id="1-ie-tiao-jian-zhu-shi-fa">1.IE条件注释法</span><a href="#1-ie-tiao-jian-zhu-shi-fa" class="header-anchor">.</a></h3><blockquote><p>在正常代码之外添加判别IE浏览器或对应版本的条件注释，符合条件的浏览器或者版本号才执行里边的代码</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 小于等于IE8 识别内容 --></span><span class="token comment" spellcheck="true">&lt;!--[if lte IE8]>    想要执行的代码&lt;![endif]--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-css-shu-xing-qian-zhui-fa">2.CSS属性前缀法</span><a href="#2-css-shu-xing-qian-zhui-fa" class="header-anchor">.</a></h3><blockquote><p>给CSS的属性添加前缀。</p><p>*可以被IE6/IE7识别</p><p>_只能被IE6识别</p><p>IE6~IE10可以识别 \9</p><p>IE6不能识别 !important </p><p>FireFox不能识别 *  _ \9</p></blockquote><p>在标准模式下</p><ul><li>“ _ “ IE6专有的Hack</li><li>“ \9 “ IE6~IE10 都生效</li><li>“ \0 “ IE8~IE10 都生效</li><li>“ \9\0 “ IE9/IE10</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">h1 </span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#111</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* all */</span>        <span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#222</span><span class="token entity" title="\9">\9</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IE */</span>        *<span class="token property">color</span><span class="token punctuation">:</span> <span class="token hexcode">#333</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IE6/IE7 */</span>        <span class="token property">_color</span><span class="token punctuation">:</span> <span class="token hexcode">#444</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* IE6 */</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>IETester软件</p><p>测试IE兼容性</p></blockquote><h3><span id="3-xuan-ze-qi-qian-zhui-fa">3.选择器前缀法</span><a href="#3-xuan-ze-qi-qian-zhui-fa" class="header-anchor">.</a></h3><ul><li>IE6/IE7可识别 *div{}</li><li>IE7可识别 *+div{}</li><li>@media screen\9{}          IE6/IE7</li><li>@media \0screen{}         IE8</li><li>@media  \0screen,screen\9{}         IE6/IE7/IE8</li><li>@media  screen\0{}           IE8/9/10</li><li>@media  screen and (min-width: 100px\0){}          IE9/10</li><li>。。。</li></ul><h2><span id="san-liu-lan-qi-si-you-shu-xing">三、浏览器私有属性</span><a href="#san-liu-lan-qi-si-you-shu-xing" class="header-anchor">.</a></h2><ul><li>-moz代表FireFox浏览器私有属性</li><li>-ms代表IE浏览器私有属性</li><li>-webkit代表Chrome、Safari私有属性</li><li>-o代表Opera私有属性</li></ul><blockquote><p>书写要求：标准写在最后，兼容性写在前面</p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token property">-webkit-transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">3</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-moz-transform</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">3</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-ms-transforn</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">3</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">-o-transforn</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">3</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token property">transforn</span><span class="token punctuation">:</span><span class="token function">rotate</span><span class="token punctuation">(</span>-<span class="token number">3</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么会出现私有属性呢？这是因为<strong>制定HTML和CSS标准的组织w3c动作是很慢的</strong>。</p><ul><li>通常，有W3C组织成员提出一个新属性，比如说圆角border-radius，大家都觉得很好，但w3c制定标准，要走很复杂的程序、审查等，而浏览器市场推广时间紧，如果一个属性已经够成熟了，就会在浏览器中加入支持。</li><li>但是为避免日后w3c公布标准时有所变更，会加入一个私有前缀，比如  -webkit- border-radius，<strong>通过这种方式来提前支持新属性</strong>，等到日后w3c公布了标准，border-radius的标准写法确立之后，再让新版的浏览器支持border-radius这种写法。</li></ul><p>彼得朱 链接：<a href="https://www.jianshu.com/p/a6f52fe96e6e" target="_blank" rel="noopener">https://www.jianshu.com/p/a6f52fe96e6e</a></p><h2><span id="si-liu-lan-qi-yang-shi-chu-shi-hua">四、浏览器样式初始化</span><a href="#si-liu-lan-qi-yang-shi-chu-shi-hua" class="header-anchor">.</a></h2><blockquote><p>解决不同浏览器/版本代码解析效果不同  –  把默认样式归零</p></blockquote><pre class="line-numbers language-html"><code class="language-html">blockquote,body,button,dd,dl,dt,fieldset,form,h1,h2,h3,h4,h5,h6,hr,input,legend,li,ol,p,pre,td,textarea,th,ul {    margin:0;padding:0;} /* *{margin:0;padding:0;} */body, button, input, select, textarea {    font: 12px/1.5tahoma, arial, \5b8b\4f53;/* 宋体 */} h1, h2, h3, h4, h5, h6 {    font-size: 100%;}address, cite, dfn, em, var {    font-style:normal;}code, kbd, pre, samp {    font-family:couriernew, courier, monospace;}small {    font-size: 12px;}ul, ol {    list-style: none;}a {    text-decoration: none}a:hover {    text-decoration: underline;}sup {    vertical-align: text-top;}sub {    vertical-align: text-bottom;}legend {    color: #000;}fieldset, img {    border: 0;}button, input, select, textarea {    font-size: 100%;}table {    border-collapse: collapse;    border-spacing: 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以使用 Normlize.css达到初始化效果</p></blockquote><p>Normalize.css 使浏览器呈现所有 HTML 元素更加一致，并且符合现代 web 标准。Normalize.css 只作用于需要规范化的样式。</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 非压缩 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/normalize/8.0.1/normalize.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 压缩 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/normalize/8.0.1/normalize.min.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h1><p><a href="https://www.jb51.net/css/571918.html" target="_blank" rel="noopener">https://www.jb51.net/css/571918.html</a></p><h3><span id="zui-quan-zheng-li-liu-lan-qi-jian-rong-xing-wen-ti-yu-jie-jue-fang-an"><strong>最全整理浏览器兼容性问题与解决方案</strong>：</span><a href="#zui-quan-zheng-li-liu-lan-qi-jian-rong-xing-wen-ti-yu-jie-jue-fang-an" class="header-anchor">.</a></h3><p> <a href="https://wenku.baidu.com/view/1ceb47637f21af45b307e87101f69e314332fae9.html?fr=search" target="_blank" rel="noopener">https://wenku.baidu.com/view/1ceb47637f21af45b307e87101f69e314332fae9.html?fr=search</a></p><h3><span id="bootcdn">bootCDN</span><a href="#bootcdn" class="header-anchor">.</a></h3><p>稳定、快速、免费的前端开源项目 CDN 加速服务</p><blockquote><p><a href="https://www.bootcdn.cn/" target="_blank" rel="noopener">https://www.bootcdn.cn/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> css </tag>
            
            <tag> 兼容问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>响应式Web</title>
      <link href="/2020/07/10/41780.html"/>
      <url>/2020/07/10/41780.html</url>
      
        <content type="html"><![CDATA[<h2><span id="xiang-ying-shi-web">响应式Web</span><a href="#xiang-ying-shi-web" class="header-anchor">.</a></h2><h3><span id="xiang-ying-shi-bu-ju"><strong>响应式布局</strong></span><a href="#xiang-ying-shi-bu-ju" class="header-anchor">.</a></h3><p>简单理解，就是根据不同的屏幕尺寸写不同的样式</p><h3><span id="bi-xu-you-viewport">必须有 viewport</span><a href="#bi-xu-you-viewport" class="header-anchor">.</a></h3><p>告诉<strong>手机浏览器</strong>，这个网站是响应式的</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 内容设备宽度,一倍的缩放 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 告诉手机浏览器，这个网站是响应式的 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="xu-yao-de-yang-shi-biao">需要的样式表</span><a href="#xu-yao-de-yang-shi-biao" class="header-anchor">.</a></h3><p>（看你需要的设备,当然可以写在一个文件里,详情参看media query）</p><blockquote><p>桌面端</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 当宽度大于等于992px 就会加载该样式表 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(min-width: 992px)<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>desktop.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>移动端</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 当宽度小于等于767px 就会加载该样式表 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">media</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(max-width: 767px)<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mobile.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>公共部分 (不冲突的部分)</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 公共样式 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>common.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>以上用到的media的使用可以参看媒体查询</p><h3><span id="mei-ti-cha-xun-media-query"><mark>媒体查询 media query</mark></span><a href="#mei-ti-cha-xun-media-query" class="header-anchor">.</a></h3><blockquote><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Media_queries</a></p></blockquote><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* css文件内 */</span><span class="token comment" spellcheck="true">/* 公共样式 */</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 桌面端样式 */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 991px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* ipad端样式 */</span><span class="token punctuation">}</span><span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 767px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 移动端样式 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="yan-shi">演示</span><a href="#yan-shi" class="header-anchor">.</a></h4><blockquote><p>html body部分</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>普通布局</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 普通布局 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">85%</span><span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span>>div</span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">32%</span><span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FBC33A</span><span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">2%</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span>>div<span class="token pseudo-class">:nth-child(3n)</span></span><span class="token punctuation">{</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/kaiminliu/Images/pic%E6%99%AE%E9%80%9A%E5%B8%83%E5%B1%80.gif" alt></p><blockquote><p>响应式布局</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 响应式布局 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>        <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">85%</span><span class="token punctuation">;</span>        <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.box</span>>div</span><span class="token punctuation">{</span>        <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FBC33A</span><span class="token punctuation">;</span>        <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>        <span class="token property">margin-bottom</span><span class="token punctuation">:</span> <span class="token number">15</span>px<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 桌面端样式 */</span>    <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 992px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>        <span class="token selector"><span class="token class">.box</span>>div</span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">32%</span><span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">2%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span>>div<span class="token pseudo-class">:nth-child(3n)</span></span><span class="token punctuation">{</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* ipad端样式 */</span>    <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">min-width</span><span class="token punctuation">:</span> 768px<span class="token punctuation">)</span> and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 991px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>        <span class="token selector"><span class="token class">.box</span>>div</span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">49%</span><span class="token punctuation">;</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">2%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span>>div<span class="token pseudo-class">:nth-child(2n)</span></span><span class="token punctuation">{</span>            <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 移动端样式 */</span>    <span class="token atrule"><span class="token rule">@media</span> screen and <span class="token punctuation">(</span><span class="token property">max-width</span><span class="token punctuation">:</span> 767px<span class="token punctuation">)</span></span><span class="token punctuation">{</span>        <span class="token selector"><span class="token class">.box</span>>div</span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/kaiminliu/Images/pic%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80.gif" alt></p><h3><span id="meta-viewport"><mark>meta</mark> <mark>viewport</mark></span><a href="#meta-viewport" class="header-anchor">.</a></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width,initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- 告诉手机浏览器，这个网站是响应式的 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>通俗的讲，移动设备上的viewport就是设备的屏幕上能用来显示我们的网页的那一块区域，在具体一点，就是浏览器上(也可能是一个app中的webview)用来显示网页的那部分区域，但viewport又不局限于浏览器可视区域的大小，它可能比浏览器的可视区域要大，也可能比浏览器的可视区域要小。在默认情况下，一般来讲，移动设备上的viewport都是要大于浏览器可视区域的，这是因为考虑到移动设备的分辨率相对于桌面电脑来说都比较小，所以为了能在移动设备上正常显示那些传统的为桌面浏览器设计的网站，移动设备上的浏览器都会把自己默认的viewport设为980px或1024px（也可能是其它值，这个是由设备自己决定的），但带来的后果就是浏览器会出现横向滚动条，因为浏览器可视区域的宽度是比这个默认的viewport的宽度要小的。下图列出了一些设备上浏览器的默认viewport的宽度。</p><p><a href="https://www.runoob.com/w3cnote/viewport-deep-understanding.html" target="_blank" rel="noopener">https://www.runoob.com/w3cnote/viewport-deep-understanding.html</a></p></blockquote><p><img src="/2020/07/10/41780/1532326250-2008-201407.png" alt></p><h4><span id="css-zhong-de-1px-bu-deng-yu-she-bei-zhong-de-1px"><strong><mark>css中的1px不等于设备中的1px</mark></strong></span><a href="#css-zhong-de-1px-bu-deng-yu-she-bei-zhong-de-1px" class="header-anchor">.</a></h4><p>手机从iPhone4开始，css中1px是iPone4下的2px，后面的机器比例更大（用原本只能装480*320个像素的屏幕,由于Retina(视网膜)屏幕的显示技术,装入960*640个像素，清晰度提升了）</p><h3><span id="font-setting">Font Setting</span><a href="#font-setting" class="header-anchor">.</a></h3><blockquote><p>使用相对长度或视口相对长度</p><p>1rem = 15px</p></blockquote><h4><span id="1-wen-ben-xiang-dui-chang-du">1.文本相对长度</span><a href="#1-wen-ben-xiang-dui-chang-du" class="header-anchor">.</a></h4><table><thead><tr><th>长度单位</th><th>解释</th></tr></thead><tbody><tr><td>em</td><td>相对于当前对象内文本的字体尺寸</td></tr><tr><td>ex</td><td>相对于字符x的高度一半</td></tr><tr><td>ch</td><td>数字0的宽度</td></tr><tr><td>rem</td><td>相对于当前页面的根元素&lt;/html&gt;规定的font-size字体大小属性值的倍数</td></tr></tbody></table><h4><span id="2-shi-kou-viewport-xiang-dui-chang-du">2.视口(viewport)相对长度</span><a href="#2-shi-kou-viewport-xiang-dui-chang-du" class="header-anchor">.</a></h4><blockquote><p>视口指的是浏览器的可视区域，其宽度和浏览器窗口的宽度保持一致</p></blockquote><table><thead><tr><th>长度单位</th><th>解释</th></tr></thead><tbody><tr><td>vw</td><td>相对于视口的宽度，视口为均分为100vw</td></tr><tr><td>vh</td><td>相对于视口的高度，视口为均分为100vh</td></tr><tr><td>vmax</td><td>相对于视口的宽度和宽度的中的较大值，视口为均分为100vmax</td></tr><tr><td>wmin</td><td>相对于视口的宽度和宽度的中的较较小值，视口为均分为100vmax</td></tr></tbody></table><h3><span id="image-size">Image Size</span><a href="#image-size" class="header-anchor">.</a></h3><blockquote><p>显示图片 准备3种尺寸  （一下指定是宽高）</p><ul><li>1x ：图片尺寸 刚好等于 图片显示区域</li><li>2x ：图片尺寸 刚好等于 图片显示区域的两倍</li><li>3x ：图片尺寸 刚好等于 图片显示区域的三倍</li></ul><p>图片选择时，根据设备不同(高清支持情况)，显示对应的图片</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>picture</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">srcset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://placehold.it/600x600 2x,https://placehold.it/900x900 3x<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://placehold.it/300X300<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>picture</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>300x300<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://placehold.it/300X300<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>600x600<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://placehold.it/600x600<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>900x900<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://placehold.it/900x900<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/kaiminliu/Images/pic%E5%93%8D%E5%BA%94%E5%BC%8F900x900.png" alt></p><h2><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h2><h3><span id="flex-dan-xing-bu-ju">flex弹性布局</span><a href="#flex-dan-xing-bu-ju" class="header-anchor">.</a></h3><blockquote><p><a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰的网络日志：Flex 布局教程：语法篇</a></p></blockquote><h3><span id="zai-xian-bian-ma-css-xue-xi">在线编码、css学习</span><a href="#zai-xian-bian-ma-css-xue-xi" class="header-anchor">.</a></h3><blockquote><p><a href="https://codepen.io/" target="_blank" rel="noopener">https://codepen.io/</a></p></blockquote><h3><span id="css-zhong-wen-shou-ce">css中文手册</span><a href="#css-zhong-wen-shou-ce" class="header-anchor">.</a></h3><blockquote><p><a href="http://css.cuishifeng.cn/" target="_blank" rel="noopener">http://css.cuishifeng.cn/</a></p></blockquote><blockquote><p><a href="https://www.runoob.com/cssref/css-reference.html" target="_blank" rel="noopener">https://www.runoob.com/cssref/css-reference.html</a></p></blockquote><h3><span id="tailwind-css">Tailwind CSS</span><a href="#tailwind-css" class="header-anchor">.</a></h3><h4><span id="yi-ge-gong-ju-ji-css-kuang-jia-zhu-ni-kuai-su-shi-xian-ding-zhi-hua-de-wang-zhan-she-ji">一个工具集 CSS 框架，助你快速实现定制化的网站设计。</span><a href="#yi-ge-gong-ju-ji-css-kuang-jia-zhu-ni-kuai-su-shi-xian-ding-zhi-hua-de-wang-zhan-she-ji" class="header-anchor">.</a></h4><blockquote><p><a href="https://www.tailwindcss.cn/" target="_blank" rel="noopener">https://www.tailwindcss.cn/</a></p></blockquote><blockquote><p>640px 以下 基本上是手机</p><p>768px以上 基本上是ipad <strong>竖屏</strong>状态</p><p>1024px以上 基本是指电脑或 ipad <strong>横屏</strong>状态</p><p>1280px以上就是电脑屏幕尺寸</p></blockquote><h3><span id="bootstrap">Bootstrap</span><a href="#bootstrap" class="header-anchor">.</a></h3><h4><span id="jian-ji-zhi-guan-qiang-han-de-qian-duan-kai-fa-kuang-jia-rang-web-kai-fa-geng-xun-su-jian-dan">简洁、直观、强悍的前端开发框架，让web开发更迅速、简单。</span><a href="#jian-ji-zhi-guan-qiang-han-de-qian-duan-kai-fa-kuang-jia-rang-web-kai-fa-geng-xun-su-jian-dan" class="header-anchor">.</a></h4><p><a href="https://v3.bootcss.com/" target="_blank" rel="noopener">Bootstrap3中文文档(v3.3.7)</a></p><blockquote><p><a href="https://www.bootcss.com/" target="_blank" rel="noopener">https://www.bootcss.com/</a></p></blockquote><blockquote><p>576px 以下 基本上是手机</p><p>768px以上 基本上是ipad <strong>竖屏</strong>状态</p><p>992px以上 基本是指电脑或 ipad <strong>横屏</strong>状态</p><p>1200px以上就是电脑屏幕尺寸</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 响应式 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传-fileupload</title>
      <link href="/2020/07/09/5100.html"/>
      <url>/2020/07/09/5100.html</url>
      
        <content type="html"><![CDATA[<h1><span id="wen-jian-shang-chuan">文件上传</span><a href="#wen-jian-shang-chuan" class="header-anchor">.</a></h1><h3><span id="1-zhun-bei-gong-zuo">1.准备工作</span><a href="#1-zhun-bei-gong-zuo" class="header-anchor">.</a></h3><p>对于文件上传，浏览器在上传的过程中是将文件以流的形式提交到服务器端的。</p><p>一般选择采用Apache的开源工具common-fileupload这个文件上传组件。</p><p>common-fileupload是依赖于common-io这个包的，所以我们需要这两个jar包</p><ul><li><p>common-fileupload : <a href="https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload" target="_blank" rel="noopener">https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload</a></p></li><li><p>common-io :  <a href="https://mvnrepository.com/artifact/commons-io/commons-io/" target="_blank" rel="noopener">https://mvnrepository.com/artifact/commons-io/commons-io/</a></p></li></ul><h6><span id="maven-yi-lai">maven依赖</span><a href="#maven-yi-lai" class="header-anchor">.</a></h6><pre class="line-numbers language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-fileupload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/commons-io/commons-io --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-io<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.7<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-shi-yong-lei-jie-shao">2.使用类介绍</span><a href="#2-shi-yong-lei-jie-shao" class="header-anchor">.</a></h3><h4><span id="wen-jian-shang-chuan-zhu-yi-shi-xiang-diao-you">文件上传注意事项(调优)</span><a href="#wen-jian-shang-chuan-zhu-yi-shi-xiang-diao-you" class="header-anchor">.</a></h4><ul><li>为保证服务器安全，上传文件应该放在外界无法直接访问的目录，比如放在<code>WEB-INF</code>目录下</li><li>为了防止文件覆盖的现象发生，要为上传产生一个唯一的文件名<ul><li>时间戳（不太安全：不同用户同一时间上传同一文件）</li><li>uuid 唯一识别的通用码<ul><li><code>UUID.randomUUID()</code></li></ul></li><li>md5</li><li>。。。</li></ul></li><li>要限制上传文件的最大值<ul><li>服务器硬盘资源比较昂贵（当然有钱可以忽略）</li></ul></li><li>可以限制上传文件的类型，在收到上传文件时，判断后缀名是否合法<ul><li>同样是硬盘资源</li></ul></li></ul><h4><span id="xu-yao-yong-dao-de-lei-xiang-jie">需要用到的类详解</span><a href="#xu-yao-yong-dao-de-lei-xiang-jie" class="header-anchor">.</a></h4><p><code>ServletFileUpload</code>负责文件上传的文件数据，并将表单中的每个输入项封装成一个<code>FIleItem</code>对象，在使用<code>ServletFileUpload</code>对象解析请求时需要<code>DiskFileItemFactory</code>对象。所以我们需要在进行解析工作前构造好<code>DiskFileItemFactory</code>对象，通过<code>ServletFileUpload</code>对象的构造方法或<code>setFileItemFactory()</code>方法设置<code>ServletFileUpload</code>对象的<code>fileItemFactory</code>属性。</p><h5><span id="fileitem-lei"><code>FileItem</code>类</span><a href="#fileitem-lei" class="header-anchor">.</a></h5><h5><span id="chang-yong-fang-fa">常用方法</span><a href="#chang-yong-fang-fa" class="header-anchor">.</a></h5><pre class="line-numbers language-java"><code class="language-java"><span class="token comment" spellcheck="true">//用于判断FileItem类对象封装的数据(input等标签type是其他还是file)是一个普通表单还是一个文件表单</span><span class="token comment" spellcheck="true">//普通 true </span><span class="token comment" spellcheck="true">//文件 false</span><span class="token keyword">boolean</span> <span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于返回表单标签name属性的值</span>String <span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于将FileItem对象中保存的数据流内容以一个字符串返回 value属性的值</span>String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于获取文件上传字段中的文件名</span>String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//以流的形式返回上传文件的数据内容</span>InputStream <span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果主体内容被保存在临时文件中，该方法用于删除该临时文件</span><span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="servletfileupload-lei"><code>ServletFileUpload</code>类</span><a href="#servletfileupload-lei" class="header-anchor">.</a></h5><p><code>ServletFileUpload</code>负责处理上传的文件数据，并将表单中每个输入项封装成一个<code>FileItem</code>对象中</p><p>使用<strong><code>parseRequest(HttpServletRequest)</code>方法</strong>可以将通过表单中每一个HTML标签提交的数据封装成一个<code>FileItem</code>对象，然后以List列表的形式返回，使用该方法处理上传文件简单易用。</p><h3><span id="3-dai-ma-bian-xie">3.代码编写</span><a href="#3-dai-ma-bian-xie" class="header-anchor">.</a></h3><h4><span id="wen-jian-shang-chuan-biao-dan">文件上传表单</span><a href="#wen-jian-shang-chuan-biao-dan" class="header-anchor">.</a></h4><p>表单如果包含一个文件上传输入项的话，这个表单的enctype属性必须设置为multipart/form-data</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 通过表单文件上传必须 enctype="multipart/form-data"method只能使用post ; get大小有限制action可指定url--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--multiple允许选中多文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fileName<span class="token punctuation">"</span></span> <span class="token attr-name">multiple</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>文件上传<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id></span><a href="#" class="header-anchor">.</a></h5><h4><span id="fileuploadservlet-shi-yong-fileupload-uuid">fileUploadServlet (使用 fileupload + uuid)</span><a href="#fileuploadservlet-shi-yong-fileupload-uuid" class="header-anchor">.</a></h4><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/*        1.判断上传文件的表单是一个普通表单还是一个文件表单    */</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ServletFileUpload<span class="token punctuation">.</span><span class="token function">isMultipartContent</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不带文件的表单 终止方法</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        2.创建上传文件的保存路径， 建议在WEB-INF路径下    */</span>    String uploadPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/upload"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File uploadDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>uploadPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>uploadDir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        uploadDir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//目录不存在，创建目录</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//缓存--临时路径</span>    <span class="token comment" spellcheck="true">//如果文件超过一定大小，自动放到临时路径，过几天自动删除</span>    String tmpPath <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    File tmpDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>tmpPath<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>tmpDir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        tmpDir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//目录不存在，创建目录</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        3.处理上传文件        一般都需要通过流来获取，我们可以使用request.getInputStream(),原生态的文件上传流获取，十分麻烦        通过Apache的文件上传组件实现    */</span>    <span class="token comment" spellcheck="true">//1. 创建DiskFileItemFactory对象，处理文件上传路径或者大小限制</span>    DiskFileItemFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置一个缓冲区，当文件大小超过缓冲区大小时，文件放到临时文件中</span>    factory<span class="token punctuation">.</span><span class="token function">setSizeThreshold</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1M</span>    factory<span class="token punctuation">.</span><span class="token function">setRepository</span><span class="token punctuation">(</span>tmpDir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置缓冲区临时目录</span>    <span class="token comment" spellcheck="true">//2. 获取ServletFileUpload</span>    ServletFileUpload upload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//监听文件上传进度 （可选）</span>    upload<span class="token punctuation">.</span><span class="token function">setProgressListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ProgressListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">/**         * @param pBytesRead 已经读取的文件大小         * @param pContentLength    文件大小         * @param pItems   文件读取个数 0:没有 1:正在读取第一个 2:第二个 。。。        **/</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token keyword">long</span> pBytesRead<span class="token punctuation">,</span> <span class="token keyword">long</span> pContentLength<span class="token punctuation">,</span> <span class="token keyword">int</span> pItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总大小："</span> <span class="token operator">+</span> pContentLength <span class="token operator">+</span> <span class="token string">"\n已上传："</span> <span class="token operator">+</span> pBytesRead <span class="token operator">+</span> <span class="token string">"\n正在上传：第"</span> <span class="token operator">+</span> pItems <span class="token operator">+</span> <span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//处理乱码问题 （可选）</span>    upload<span class="token punctuation">.</span><span class="token function">setHeaderEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//设置单个文件的最大值 （可选）</span>    upload<span class="token punctuation">.</span><span class="token function">setFileSizeMax</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//10M</span>    <span class="token comment" spellcheck="true">//设置总共能够上传文件的大小 （可选）</span>    upload<span class="token punctuation">.</span><span class="token function">setSizeMax</span><span class="token punctuation">(</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//20M</span>    <span class="token comment" spellcheck="true">//3. 处理上传的文件</span>    <span class="token comment" spellcheck="true">//把前端请求解析，封装成一个FileItem对象（表单标签对象）List</span>    List<span class="token operator">&lt;</span>FileItem<span class="token operator">></span> fileItems <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>FileItem fileItem <span class="token operator">:</span> fileItems<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fileItem<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//普通标签</span>            <span class="token comment" spellcheck="true">//getFiledName 得到标签的 name属性的值</span>            String name <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//getString得到 value属性的值</span>            String value <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name: "</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value: "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//文件标签</span>            <span class="token comment" spellcheck="true">//=====================处理文件=================//</span>            <span class="token comment" spellcheck="true">//获取上传文件的路径</span>            String uploadFileName <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>uploadFileName <span class="token operator">==</span> null <span class="token operator">||</span> <span class="token string">""</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>uploadFileName<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//获取上传的文件名</span>            String fileName <span class="token operator">=</span> uploadFileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>uploadFileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//获取文件的后缀名</span>            String ExtName <span class="token operator">=</span> uploadFileName<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>uploadFileName<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//使用UUID（唯一识别的通用码）随机生成一个唯一识别的通用码</span>            String uuid <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//=====================存放地址=================//</span>            <span class="token comment" spellcheck="true">// 使用 UUID 创建一个文件夹 upload 路径下</span>            String realPath <span class="token operator">=</span> uploadPath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> uuid<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//给每一个文件创建一个uuid文件夹</span>            File uuidDir <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>uuidDir<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//没有就创建</span>                uuidDir<span class="token punctuation">.</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">//=====================文件传输=================//</span>            <span class="token comment" spellcheck="true">//获取文件上传的流</span>            InputStream in <span class="token operator">=</span> fileItem<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建一个文件输出流</span>            FileOutputStream out <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>realPath <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//创建一个缓冲区</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//1M</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token operator">=</span>in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                out<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">,</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            out<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            in<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//上传成功，删除临时文件</span>            fileItem<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">FileUploadException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="bu-chong">补充</span><a href="#bu-chong" class="header-anchor">.</a></h2><h3><span id="1-pu-tong-biao-dan-he-wen-jian-biao-dan">1.普通表单和文件表单</span><a href="#1-pu-tong-biao-dan-he-wen-jian-biao-dan" class="header-anchor">.</a></h3><ul><li>普通<ul><li>enctype=”application/x-www-form-urlencoded”&gt;</li></ul></li><li>文件<ul><li>enctype:multipart/form-data<ul><li>input type=”file”</li></ul></li></ul></li></ul><h3><span id="2-md5-jia-mi">2.MD5加密</span><a href="#2-md5-jia-mi" class="header-anchor">.</a></h3>]]></content>
      
      
      
        <tags>
            
            <tag> javaWeb </tag>
            
            <tag> file上传和下载 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QQ截屏快速获取像素颜色</title>
      <link href="/2020/06/22/6850.html"/>
      <url>/2020/06/22/6850.html</url>
      
        <content type="html"><![CDATA[<h1><span id="qq-jie-ping-kuai-su-huo-qu-xiang-su-yan-se">QQ截屏快速获取像素颜色</span><a href="#qq-jie-ping-kuai-su-huo-qu-xiang-su-yan-se" class="header-anchor">.</a></h1><p>qq截屏的快捷键是 CTRL + ALT + A</p><p>qq截屏除了截屏 还有个很不错的小功能 ==获取像素的颜色== 是大家都容易忽略的<br>具体方法很简单</p><blockquote><p>第一步<br>按下 Ctrl + Alt + A  快捷键 但是 不要点击鼠标 </p></blockquote><blockquote><p>第二步<br>移动鼠标 到你想要像素点的颜色<br>如图所示 按C 即可复制 RGB十进制值（<strong>按CTRL可换为十六进制，CTRL+C复制十六进制值</strong>）</p></blockquote><p><img src="/2020/06/22/6850/image-20200622114251153.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 收获 </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>登录界面小收获(css,js)</title>
      <link href="/2020/06/21/24412.html"/>
      <url>/2020/06/21/24412.html</url>
      
        <content type="html"><![CDATA[<h2><span id="shou-huo">收获</span><a href="#shou-huo" class="header-anchor">.</a></h2><p>今天做了一个登陆界面</p><p>学到了一些小知识点</p><p><img src="/2020/06/21/24412/image-20200621231731038.png" alt></p><h4><span id="1-zuo-wang-ye-qian-yao-xue-hui-she-zhi-chu-zhi-css">1. 做网页前要学会设置初值（css）</span><a href="#1-zuo-wang-ye-qian-yao-xue-hui-she-zhi-chu-zhi-css" class="header-anchor">.</a></h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">html,body,div(背景图)</span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100%</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector">* </span><span class="token punctuation">{</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>    //文本对齐    //字体大小    //字体粗细    //字体名字    //<span class="token number">...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-qu-chu-input-button-de-bian-kuang-ying-xiang">2. 去除input，button的边框影响</span><a href="#2-qu-chu-input-button-de-bian-kuang-ying-xiang" class="header-anchor">.</a></h4><pre class="line-numbers language-css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span><span class="token number">0</span> <span class="token punctuation">;</span><span class="token property">outline</span><span class="token punctuation">:</span> none<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4><span id="3-rong-qi-deng-lu-kuang-ju-zhong-liu-lan-qi-chuang-kou">3. 容器(登陆框)居中（浏览器窗口）</span><a href="#3-rong-qi-deng-lu-kuang-ju-zhong-liu-lan-qi-chuang-kou" class="header-anchor">.</a></h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">div(对应容器)</span><span class="token punctuation">{</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>,-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-input-de-dao-jiao-dian-focus-shi-shi-yong-css-shi-input-fa-sheng-xiang-ying-de-bian-hua-shi-qu-jiao-dian-hou-yang-shi-ye-hui-tong-yang-xiao-shi">4. input得到焦点(focus)时，使用CSS是input发生相应的变化；失去焦点后，样式也会同样消失</span><a href="#4-input-de-dao-jiao-dian-focus-shi-shi-yong-css-shi-input-fa-sheng-xiang-ying-de-bian-hua-shi-qu-jiao-dian-hou-yang-shi-ye-hui-tong-yang-xiao-shi" class="header-anchor">.</a></h4><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.input-text</span><span class="token pseudo-class">:focus</span> </span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/* 最好只用在input文本上(text,password,tel,email,...),不要用在按钮上 */</span>    <span class="token property">border-color</span><span class="token punctuation">:</span> purple<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/*当得到焦点时，input边框变为紫色*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4><span id="5-jquery-zhong-ru-he-qu-diao-bian-liang-zhi-zhong-px-deng-dan-wei-shi-yong-parseint-var-radix">5.JQuery中如何去掉变量值中 px等单位(使用parseInt(var [, radix]) )</span><a href="#5-jquery-zhong-ru-he-qu-diao-bian-liang-zhi-zhong-px-deng-dan-wei-shi-yong-parseint-var-radix" class="header-anchor">.</a></h4><blockquote><p>radix : 基数</p><p>当 1 &lt; radix &lt; 37 , 就是 让radix进制 返回数</p><p>当 radix = 0 ，表示 10进制</p><p>当radix = 0x or 0X , 表示16进制</p><p>当radix &gt; 36 or radix = 1 , parseInt返回0</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token string">"10px"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"去掉px : "</span> <span class="token operator">+</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/21/24412/image-20200621235510522.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jQuery </tag>
            
            <tag> css </tag>
            
            <tag> 收获 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php入门笔记3</title>
      <link href="/2020/06/21/6361.html"/>
      <url>/2020/06/21/6361.html</url>
      
        <content type="html"><![CDATA[<h1><span id="php-jin-jie">PHP进阶</span><a href="#php-jin-jie" class="header-anchor">.</a></h1><ul><li>HTTP协议</li><li>会话技术</li><li>文件操作</li><li>图像处理</li><li>函数进阶</li></ul><h2><span id="yi-http-xie-yi">一、 HTTP协议</span><a href="#yi-http-xie-yi" class="header-anchor">.</a></h2><h3><span id="1-shi-me-shi-http-xie-yi">1、 什么是HTTP协议</span><a href="#1-shi-me-shi-http-xie-yi" class="header-anchor">.</a></h3><blockquote><p>Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）<strong>服务器</strong>传输<strong>超文本</strong>到<strong>本地浏览器</strong>的<strong>传送协议</strong>。</p><p>HTTP是一种基于请求与响应式的协议，即浏览器发送请求，服务器做出响应。在交互过程中，请求消息与响应消息统称为HTTP消息。</p></blockquote><h3><span id="2-http-xiao-xi">2、HTTP消息</span><a href="#2-http-xiao-xi" class="header-anchor">.</a></h3><ul><li>消息头<ul><li>保存消息时间、系统信息等内容</li></ul></li><li>实体内容<ul><li>包存网页或表单数据</li></ul></li></ul><blockquote><p>请求网址（Request URL）<img src="/2020/06/21/6361/image-20200621101540627.png" alt></p></blockquote><blockquote><p>请求方法（Request Method）<img src="/2020/06/21/6361/image-20200621101707766.png" alt></p></blockquote><blockquote><p>状态码（Status Code）<img src="/2020/06/21/6361/image-20200621101805949.png" alt></p></blockquote><blockquote><p>IP地址（Remote Address）<img src="/2020/06/21/6361/image-20200621101858003.png" alt></p></blockquote><blockquote><p>响应头（Response Headers）：是服务器返回的信息<img src="/2020/06/21/6361/image-20200621103020732.png" alt></p></blockquote><blockquote><p>请求头（Request Headers）：是发送本次请求时的浏览器的信息<img src="/2020/06/21/6361/image-20200621103215749.png" alt></p></blockquote><h3><span id="3-http-qing-qiu">3、 HTTP请求</span><a href="#3-http-qing-qiu" class="header-anchor">.</a></h3><h4><span id="3-1-qing-qiu-fang-shi-chang-yong">3.1、请求方式(常用)</span><a href="#3-1-qing-qiu-fang-shi-chang-yong" class="header-anchor">.</a></h4><ul><li><p>GET</p><ul><li>数据通过URL地址的参数进行传递,提交的数据是可见的(对于用户)</li><li>传输数据量（不超过1KB）受限于URL的长度</li></ul></li><li><p>POST</p><ul><li>通常用于表单和文件上传</li><li>通过实体内容传递数据</li><li>传输数据量大小理论上没有限制，但服务端会进行限制</li><li>因为POST内容隐藏在实体中，POST相对GET要安全一些</li></ul></li></ul><h4><span id="3-2-huo-qu-qing-qiu-xin-xi-php">3.2、获取请求信息（PHP）</span><a href="#3-2-huo-qu-qing-qiu-xin-xi-php" class="header-anchor">.</a></h4><blockquote><p>PHP接收到浏览器端的请求，会将相关信息保存在<strong><code>$_SERVER</code>超全局变量数组</strong>中,我们通过该数组就可以获得请求消息</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token prolog">&lt;?php var_dump($_SERVER) ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="4-http-xiang-ying">4、HTTP响应</span><a href="#4-http-xiang-ying" class="header-anchor">.</a></h3><table><thead><tr><th><strong>消息头</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Location</td><td>控制浏览器显示哪个页面</td></tr><tr><td>Server</td><td>服务器的类型</td></tr><tr><td>Content-Type</td><td>服务器发送内容的类型和编码类型</td></tr><tr><td>Last-Modified</td><td>服务器最后一次修改的时间</td></tr><tr><td>Date</td><td>响应网站的时间</td></tr></tbody></table><h6><span id="zai-mo-ren-qing-kuang-xia-xiang-ying-xiao-xi-tou-you-fu-wu-qi-zi-dong-fa-chu-tong-guo-php-de-header-han-shu-ke-yi-zi-ding-yi-xiang-ying-xiao-xi-tou">在默认情况下，响应消息头由服务器自动发出。通过PHP的header()函数可以自定义响应消息头。</span><a href="#zai-mo-ren-qing-kuang-xia-xiang-ying-xiao-xi-tou-you-fu-wu-qi-zi-dong-fa-chu-tong-guo-php-de-header-han-shu-ke-yi-zi-ding-yi-xiang-ying-xiao-xi-tou" class="header-anchor">.</a></h6><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//设定编码格式</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//响应404消息</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'HTTP/1.1 404 Not Found'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//页面重定向</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: login.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-1-php-yuan-cheng-qing-qiu">4.1、PHP远程请求</span><a href="#4-1-php-yuan-cheng-qing-qiu" class="header-anchor">.</a></h4><blockquote><p>HTTP协议是一种通信协议，除了浏览器，其他软件也可以通过HTTP协议与服务器交换信息。虽然PHP运行于服务器端，但有时服务器也需要向另一台服务器请求数据，这时可以通过PHP来实现。</p></blockquote><ul><li><p>file_get_contents()</p><p>file_get_contents()函数用于从一个文件中读取内容，返回字符串。该函数既可以读取本地文件，也可以读取远程地址文件。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//请求远程地址</span><span class="token variable">$html</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.test.com');</span><span class="token comment" spellcheck="true">//获取响应消息头</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$http_response_header</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出返回信息</span><span class="token keyword">echo</span> <span class="token string">'&lt;hr>'</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$html</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>$http_response_header变量是PHP的内置变量，用于自动保存响应消息。</p></blockquote></li><li><p>cURL扩展</p><p>PHP中提供的cURL扩展可以高效地进行远程请求。在使用cURL扩展前应确保php.ini中已经开启了cURL扩展。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//初始化一个cURL会话</span><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置请求选项，包括具体的URL</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.itcast.cn');</span><span class="token comment" spellcheck="true">//设定返回的信息中包含响应消息头</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设定curl_exec()函数将结果返回，而不是直接输出</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行一个cURL会话</span><span class="token variable">$html</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//释放cURL句柄，关闭一个cURL会话</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出返回信息</span><span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$html</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2><span id="er-hui-hua-ji-zhu">二、会话技术</span><a href="#er-hui-hua-ji-zhu" class="header-anchor">.</a></h2><blockquote><p>当用户通过浏览器访问网站时，通常情况下，服务器需要对用户的状态进行跟踪。例如，当用户通过用户名和密码进行登录时，如果登录成功，服务器应该记住该用户的登录状态。<br>在Web开发中，服务器跟踪用户信息的技术称为会话技术。</p></blockquote><h3><span id="1-cookie-ji-zhu">1、Cookie技术</span><a href="#1-cookie-ji-zhu" class="header-anchor">.</a></h3><blockquote><p>Cookie是<strong>网站为了辨别用户身份而存储在用户本地终端上的数据</strong>。因为HTTP协议是无状态的，即服务器不知道用户上一次做了什么，这严重阻碍了交互式Web应用程序的实现。</p><p>Cookie就是<strong>解决HTTP无状态性的一种技术</strong>，服务器可以设置或读取Cookie中包含的信息，借此可以跟踪用户与服务器之间的会话状态，通常应用于保存浏览历史、保存购物车商品和保存用户登录状态等场景。</p></blockquote><img src="/2020/06/21/6361/image-20200706092718694.png" style="zoom:50%;"><h5><span id="que-dian">缺点</span><a href="#que-dian" class="header-anchor">.</a></h5><ul><li>Cookie被附加在每个HTTP请求中，无形中增加了数据流量。</li><li>Cookie在HTTP请求中是明文传输的，所以安全性不高，容易被窃取。</li><li>Cookie存储于浏览器，可以被篡改，服务器接收后必须先验证数据的合法性。</li><li>浏览器限制Cookie的数量和大小（通常限制为50个，每个不超过4KB），对于复杂的存储需求来说是不够用的。</li></ul><h4><span id="1-1-cookie-de-shi-yong">1.1、Cookie的使用</span><a href="#1-1-cookie-de-shi-yong" class="header-anchor">.</a></h4><p>​    在PHP中，使用setcookie()函数可以创建或修改Cookie。</p><pre class="line-numbers language-php"><code class="language-php">bool <span class="token function">setcookie</span> <span class="token punctuation">(</span>        string <span class="token variable">$name</span>        <span class="token comment" spellcheck="true">//Cookie名称</span>       string <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//Cookie值</span>       int <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//有效期（时间戳）</span>       string <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//有效路径（默认为当前目录和子目录有效）</span>       string <span class="token variable">$domain</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//有效域名（可允许二级域名下访问Cookie）</span>       bool <span class="token variable">$secure</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//是否只允许HTTPS安全连接访问</span>       bool <span class="token variable">$httponly</span> <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token comment" spellcheck="true">//是否只允许HTTP访问（可阻止JavaScript访问Cookie）</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参数$name是必需的，其他参数都是可选的</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'city'</span><span class="token punctuation">,</span> <span class="token string">'北京市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//未指定过期时间，在会话结束时过期</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'city'</span><span class="token punctuation">,</span> <span class="token string">'北京市'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//半小时后过期</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'city'</span><span class="token punctuation">,</span> <span class="token string">'北京市'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一天后过期</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'city'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//立即过期（删除COOKIE）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>setcookie()函数的第三个参数是时间戳，当省略时，Cookie仅在本次会话有效，当用户关闭浏览器时，会话就会结束。</li><li>除了可以通过PHP操作Cookie，使用JavaScript也可以操作Cookie，如果只是保存用户在网页中的偏好设置，可以直接用JavaScript操作Cookie，无需服务器进行处理。</li></ul><h4><span id="1-2-du-qu-cookie">1.2、读取Cookie</span><a href="#1-2-du-qu-cookie" class="header-anchor">.</a></h4><blockquote><p>对于浏览器发送的Cookie数据，在PHP中可以使用超全局数组变量<code>$_COOKIE</code>来接收。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//判断Cookie中是否存在city数据</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$city</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从COOKIE中获取City数据</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Cookie中的city不存在</span>    <span class="token comment" spellcheck="true">//在这可以设置cookie</span><span class="token punctuation">}</span><span class="token variable">$city</span><span class="token operator">=</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，当PHP第一次通过setcookie()创建Cookie时，<code>$_COOKIE</code>中没有这个数据；只有当浏览器下次请求并携带Cookie时，才能通过<code>$_COOKIE</code>获取到相关信息。</p></blockquote><h4><span id="1-3-cha-kan-cookie">1.3、查看Cookie</span><a href="#1-3-cha-kan-cookie" class="header-anchor">.</a></h4><blockquote><p>当服务器端PHP通过setcookie()向浏览器端响应Cookie后，浏览器就会保存Cookie，在下次请求时会自动携带Cookie。</p></blockquote><p>对于普通用户来说，Cookie是不可见的，但Web开发者可以通过“F12”开发者工具查看Cookie。在开发者工具中切换到【Network】-【Cookies】。</p><img src="/2020/06/21/6361/image-20200706094114117.png" style="zoom:50%;"><img src="/2020/06/21/6361/image-20200706094321663.png" style="zoom:50%;"><ul><li>Cookie在浏览器中是根据域名分开保存的，每个Cookie具有名称（Name）、值（Value）、域名（Domain）、路径（Path）、有效期（Expires）等属性。</li><li>在访问Cookie时，不同路径之间是隔离的，路径可以向下继承。例如，路径为“/admin/”的Cookie可以在admin的子目录中访问，但在admin的上级目录中无法访问。</li></ul><h3><span id="2-session-ji-zhu">2、Session技术</span><a href="#2-session-ji-zhu" class="header-anchor">.</a></h3><blockquote><p>Session在网络应用中称为“会话”，指的是用户在浏览某个网站时，从进入网站到关闭网站所经过的这段时间。<br>Session技术是一种服务器端的技术，它的生命周期从用户访问页面开始，直到断开与网站的连接时结束。Session通常用于保存用户登录状态、保存生成的验证码等。</p></blockquote><p>当PHP启动Session时，服务器会为每个用户的浏览器创建一个供其独享的Session文件。</p><img src="/2020/06/21/6361/image-20200706094745683.png" style="zoom:50%;"><ul><li>每一个Session都具有一个唯一的会话ID，用于标识不同的用户。</li><li>会话ID分别保存在浏览器端和服务器端两个位置，浏览器端<strong>通过Cookie保存</strong>，服务器端<strong>以文件的形式</strong>保存在指定的Session目录中。</li></ul><h4><span id="2-1-cha-kan-sessionid">2.1、查看SessionID</span><a href="#2-1-cha-kan-sessionid" class="header-anchor">.</a></h4><p> Session文件的保存目录是php.ini中的配置项“session.save_path”指定的，其默认路径位于“C:\Windows\Temp”，打开这个目录可以查看Session文件：</p><p><img src="/2020/06/21/6361/image-20200706100035013.png" alt></p><h4><span id="2-2-session-de-shi-yong">2.2、Session的使用</span><a href="#2-2-session-de-shi-yong" class="header-anchor">.</a></h4><ul><li>在使用Session之前，需要通过session_start()函数先启动Session</li><li>当启动后，即可通过超全局变量<code>$_SESSION</code>添加、读取或修改Session中的数据。</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//开启SESSION</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//向SESSION添加数据（字符串）</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//向SESSION添加数据（数组）</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//判断SESSION中是否存在test</span>      <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//读取SESSION中的test</span><span class="token punctuation">}</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//删除单个数据</span><span class="token variable">$_SESSION</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//删除所有数据</span><span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//结束当前会话</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用“<code>$_SESSION</code>= []”方式可以删除Session中的所有数据，但是Session文件仍然存在，只不过它是一个空文件。<br>如果需要将这个空文件删除，可以通过session_destroy()函数来实现。</p></blockquote><h3><span id="3-shu-chu-huan-chong">3、输出缓冲</span><a href="#3-shu-chu-huan-chong" class="header-anchor">.</a></h3><blockquote><p>在PHP中，输出缓冲（Output Buffer）是一种缓存机制，它通过内存预先保存PHP脚本的输出内容，当缓存的数据量达到设定的大小时，再将数据传输到浏览器。</p><p>输出缓冲机制解决了当有实体内容输出后，再使用header()、setcookie()、session_start()等函数无法设置HTTP消息头的问题，因为消息头必须在实体内容之前被发送，通过输出缓冲，可以使实体内容延缓到HTTP消息头的后面被发送。</p></blockquote><blockquote><p>输出缓冲在PHP中是默认开启的。<br>在php.ini中，它的配置项为“output_buffering = 4096”，表示输出缓冲的内存空间为4KB。</p></blockquote><p>通过PHP的ob函数可以控制输出缓冲，常用函数如下：</p><table><thead><tr><th><strong>函数名</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>ob_start()</td><td>启动输出缓冲</td></tr><tr><td>ob_get_contents()</td><td>返回当前输出缓冲区的内容</td></tr><tr><td>ob_end_flush()</td><td>向浏览器发送输出缓冲区的内容，并禁用输出缓冲</td></tr><tr><td>ob_end_clean()</td><td>清空输出缓冲区的内容，不进行发送，并禁用输出缓冲</td></tr><tr><td>ob_start()</td><td>启动输出缓冲</td></tr></tbody></table><h2><span id="san-wen-jian-cao-zuo">三、文件操作</span><a href="#san-wen-jian-cao-zuo" class="header-anchor">.</a></h2><h3><span id="1-wen-jian-shang-chuan">1、文件上传</span><a href="#1-wen-jian-shang-chuan" class="header-anchor">.</a></h3><h4><span id="1-1-wen-jian-shang-chuan-biao-dan">1.1、文件上传表单</span><a href="#1-1-wen-jian-shang-chuan-biao-dan" class="header-anchor">.</a></h4><p>要想完成文件上传，在设计表单时需要满足以下两个需求：</p><ul><li>表单提交方式设置为POST方式。</li><li>enctype属性的值设置为“multipart/form-data”。</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>默认情况下，该元素只能上传一个文件。当需要上传多个文件时，可以编写多个标签，或者为一个标签添加multiple属性。</p></blockquote><h4><span id="1-2-chu-li-shang-chuan-wen-jian">1.2、处理上传文件</span><a href="#1-2-chu-li-shang-chuan-wen-jian" class="header-anchor">.</a></h4><p>PHP默认将通过HTTP上传的文件保存到服务器的临时目录下，该临时文件的保存期为脚本的周期，即PHP脚本执行期间。</p><p>在处理上传文件时，通过sleep(seconds)函数延迟PHP文件执行的时间，可以在系统临时目录“C:\Windows\Temp”中查看临时文件。</p><ul><li>提交表单后，上传的文件会以随机生成的文件名保存在系统临时目录中。</li><li>PHP执行完毕后，图中方框内的临时文件就会被释放掉。</li></ul><h4><span id="1-3-huo-qu-wen-jian-xin-xi">1.3、获取文件信息</span><a href="#1-3-huo-qu-wen-jian-xin-xi" class="header-anchor">.</a></h4><p>在PHP释放上传文件之前，在PHP脚本中可以用超全局变量<code>$_FILES</code>来获取上传文件的信息。<br>该变量的外层数组保存上传文件的“name”属性名，内层数组保存的是该上传文件的具体信息</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//假设PHP收到来自</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>上传的文件<span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//上传文件名称，如photo.jpg</span><span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//上传文件大小，如879394（单位是Byte）</span><span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//上传是否有误，如0（表示成功）</span><span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//上传文件的MIME类型，如image/jpeg</span><span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//上传后临时文件名，如C:\Windows\Temp\php9BA5.tmp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$_FILES数组中的 error 有 7 个值，分别为 0、1、2、3、4、6、7。</p><p>0 表示上传成功<br>1 表示文件大小超过了php.ini中upload_max_filesize选项限制的值<br>2 表示文件大小超过了表单中max_file_size选项指定的值<br>3 表示文件只有部分被上传<br>4 表示没有文件被上传<br>6 表示找不到临时文件夹<br>7 表示文件写入失败</p><h4><span id="1-4-shang-chuan-wen-jian-de-bao-cun">1.4、上传文件的保存</span><a href="#1-4-shang-chuan-wen-jian-de-bao-cun" class="header-anchor">.</a></h4><ul><li>文件上传成功后会暂时保存在系统的临时文件夹中。</li><li>为了保存文件到指定的目录中，需要使用 move_uploaded_file()函数进行操作。</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//判断是否有“name=upload”的文件上传，是否上传成功</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//上传成功，将文件保存到当前目录下的“uploads”目录中</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'./uploads'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'文件上传成功'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，移动文件的目标路径“./uploads”必须是已经存在的目录，否则会移动失败。</p></blockquote><h3><span id="2-wen-jian-ji-ben-cao-zuo">2、文件基本操作</span><a href="#2-wen-jian-ji-ben-cao-zuo" class="header-anchor">.</a></h3><h4><span id="2-1-wen-jian-lei-xing">2.1、文件类型</span><a href="#2-1-wen-jian-lei-xing" class="header-anchor">.</a></h4><blockquote><p>文件类型主要分为文件和目录，PHP可以通过filetype()函数来获取文件类型。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">filetype</span><span class="token punctuation">(</span><span class="token string">'./uploads/1.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：file</span><span class="token keyword">echo</span> <span class="token function">filetype</span><span class="token punctuation">(</span><span class="token string">'./uploads'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出结果：dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在Windows系统中，PHP只能获得“file”、“dir”和“unknown”三种文件类型。</li><li>在Linux系统中，还可以获取block（块设备文件）、char（字符设置）、link（符号链接）等文件类型。</li></ul><blockquote><p><strong>在操作一个文件时，如果该文件不存在，会发生错误</strong>。为了避免这种情况发生，可以通过<strong>file_exits()</strong>、<strong>is_file()</strong>和<strong>is_dir()</strong>函数，来检查文件或目录是否存在。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">'./uploads/1.jpg'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//文件存在，输出：bool(true)</span><span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">'./uploads/2.jpg'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//文件不存在，输出：bool(false)</span><span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token string">'./uploads/1.jpg'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：bool(true)</span><span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token string">'./uploads'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出结果：bool(true)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-2-wen-jian-shu-xing">2.2、文件属性</span><a href="#2-2-wen-jian-shu-xing" class="header-anchor">.</a></h4><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>int filesize(string $filename )</td><td>获取文件大小</td></tr><tr><td>int filectime(string $filename)</td><td>获取文件的创建时间</td></tr><tr><td>int filemtime(string $filename)</td><td>获取文件的修改时间</td></tr><tr><td>int fileatime(string $filename)</td><td>获取文件的上次访问时间</td></tr><tr><td>bool is_readable(string $filename)</td><td>判断给定文件是否可读</td></tr><tr><td>bool is_writable(string $filename)</td><td>判断给定文件是否可写</td></tr><tr><td>bool is_executable(string $filename)</td><td>判断给定文件是否可执行</td></tr><tr><td>array stat(string $filename)</td><td>给出文件的信息</td></tr></tbody></table><blockquote><p>由于PHP中int数据类型表示的数据范围有限，所以filesize()函数对于大于2GB的文件，并不能准确获取其大小，需斟酌使用。</p></blockquote><h4><span id="2-3-wen-jian-cao-zuo">2.3、文件操作</span><a href="#2-3-wen-jian-cao-zuo" class="header-anchor">.</a></h4><p>在程序开发过程中，经常需要对文件进行复制、删除以及重命名等操作。针对这些功能，PHP提供了相应的函数</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>bool copy(string $source, string $dest)</td><td>用于实现拷贝文件的功能</td></tr><tr><td>bool unlink(string $filename)</td><td>用于删除文件</td></tr><tr><td>bool rename(string $old_name, string $new_name)</td><td>用于实现文件或目录的重命名功能</td></tr></tbody></table><h4><span id="2-4-wen-jian-du-xie">2.4、文件读写</span><a href="#2-4-wen-jian-du-xie" class="header-anchor">.</a></h4><p>在PHP中，对于文件的读写提供了许多函数。其中，基于文件的句柄的函数可以对大文件进行流式读写操作；而对于小文件，直接进行读写效率更高。</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>resource fopen(string $filename, string $mode)</td><td>打开文件，获取文件句柄</td></tr><tr><td>bool fclose(resource $handle)</td><td>关闭文件句柄</td></tr><tr><td>string fread(resource $handle, int $length)</td><td>通过句柄读取文件，获取指定长度字符串</td></tr><tr><td>int fwrite(resource $handle, string $string [,int $length])</td><td>通过句柄写入文件</td></tr><tr><td>string fgetc(resource $handle)</td><td>通过句柄读取文件，每次读取一个字节。</td></tr><tr><td>string fgets(resource $handle [,int $length])</td><td>通过句柄读取文件，每次读取一行内容</td></tr><tr><td>array file(string $filename)</td><td>将文件读取到按行分割的数组中</td></tr><tr><td>string file_get_contents(string $filename)</td><td>读取文件</td></tr><tr><td>int file_put_contents(string $filename, mixed $data)</td><td>写入文件</td></tr></tbody></table><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//定义下载文件名</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'download.zip'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取文件大小</span><span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token string">'./data.zip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置HTTP响应消息为文件下载</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type:octet-stream'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-length:'</span><span class="token punctuation">.</span><span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-disposition:attachment;filename="'</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">.</span><span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'./data.zip'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//以只读方式打开文件</span><span class="token comment" spellcheck="true">//读取文件并输出</span><span class="token variable">$buffer</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取缓冲</span><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//已读取的大小</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$size</span> <span class="token operator">-</span> <span class="token variable">$count</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断文件是否全部读取</span>      <span class="token keyword">echo</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$buffer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token variable">$count</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token variable">$buffer</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关闭文件，停止脚本</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-mu-lu-ji-ben-cao-zuo">3、目录基本操作</span><a href="#3-mu-lu-ji-ben-cao-zuo" class="header-anchor">.</a></h3><h4><span id="3-1-chuang-jian-mu-lu">3.1、创建目录</span><a href="#3-1-chuang-jian-mu-lu" class="header-anchor">.</a></h4><p>在进行文件操作时，经常需要创建目录。通过mkdir()函数可以实现目录的创建。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">'./path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在当前目录下创建一个path目录</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">'./path1/path2'</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//在当前目录下递归创建path1/path2目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4><span id="3-2-jie-xi-lu-jing">3.2、解析路径</span><a href="#3-2-jie-xi-lu-jing" class="header-anchor">.</a></h4><p>在程序中经常需要对文件路径进行解析操作，如路径中的文件名和目录等。PHP提供了一些函数实现目录的解析操作。</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>string basename(string $path [, string $suffix ])</td><td>返回路径中的文件名</td></tr><tr><td>string dirname(string $path)</td><td>返回路径中的目录部分</td></tr><tr><td>mixed pathinfo(string $path [, int $options ])</td><td>以数组的形式返回路径信息，包括目录名、文件名等</td></tr></tbody></table><blockquote><p>需要注意的是，在处理带有中文的路径时，应注意操作系统对于文件路径的编码问题。只有PHP程序设置的编码与操作系统的编码统一，才能正确处理中文路径。</p></blockquote><h4><span id="3-3-bian-li-mu-lu">3.3、遍历目录</span><a href="#3-3-bian-li-mu-lu" class="header-anchor">.</a></h4><p>在程序中经常需要对某个目录下的子目录或文件进行遍历。为此，PHP中内置了相应的函数用于实现目录或文件的遍历。</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>resource opendir(string $path)</td><td>打开一个目录句柄</td></tr><tr><td>string readdir(resource $dir_handle)</td><td>从目录句柄中读取条目</td></tr><tr><td>void closedir(resource $dir_handle)</td><td>关闭目录句柄</td></tr><tr><td>void rewinddir(resource $dir_handle)</td><td>倒回目录句柄</td></tr><tr><td>array glob(string $pattern [, int $flags = 0 ])</td><td>寻找与模式匹配的文件路径</td></tr></tbody></table><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">getDirSize</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//保存文件大小</span>      <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//打开目录句柄</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">!=</span><span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$name</span> <span class="token operator">!=</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"$path/$name"</span><span class="token punctuation">;</span>                  <span class="token variable">$size</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getDirSize</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token variable">$size</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'当前目录大小：'</span><span class="token punctuation">.</span><span class="token function">getDirSize</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'B'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="si-tu-xiang-chu-li">四、图像处理</span><a href="#si-tu-xiang-chu-li" class="header-anchor">.</a></h2><h3><span id="1-gd-ku-jian-jie">1、GD库简介</span><a href="#1-gd-ku-jian-jie" class="header-anchor">.</a></h3><blockquote><p>GD库是PHP处理图像的扩展库，它提供了一系列用来处理图像的函数，可以实现缩略图、验证码和图片水印等操作。<br>但由于不同的GD库版本支持的图像格式不完全一样，因此，从PHP的4.3版本开始，PHP捆绑了其开发团队实现的GD2库。它不仅支持GIF、JPEG、PNG等格式的图像文件，还支持FreeType、Type1等字体库。</p></blockquote><ul><li>打开PHP的配置文件php.ini</li><li>找到“;extension=php_gd2.dll”配置项，去掉前面的分号“;”注释</li><li>保存PHP的配置文件php.ini，并重启Apache使配置生效</li><li>通过phpinfo()函数可以查看GD库是否开启成功</li></ul><h3><span id="2-tu-xiang-de-chuang-jian-yu-shu-chu">2、图像的创建与输出</span><a href="#2-tu-xiang-de-chuang-jian-yu-shu-chu" class="header-anchor">.</a></h3><h4><span id="2-1-chuang-jian-tu-xiang-zi-yuan">2.1、创建图像资源</span><a href="#2-1-chuang-jian-tu-xiang-zi-yuan" class="header-anchor">.</a></h4><p>在处理图像前，需要先创建图像资源。PHP有多种创建图像的方式，可以基于一个已有的文件创建，也可以直接创建一个空白画布。</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>resource imagecreate(int $width, int $height)</td><td>创建指定宽高的空白画布图像</td></tr><tr><td>resource imagecreatetruecolor (int $width, int $height )</td><td>创建指定宽高的真彩色空白画布图像</td></tr><tr><td>resource imagecreatefromgif(string $filename)</td><td>从给定的文件路径创建GIF格式的图像</td></tr><tr><td>resource imagecreatefromjpeg(string $filename)</td><td>从给定的文件路径创建JPEG格式的图像</td></tr><tr><td>resource imagecreatefrompng(string $filename)</td><td>从给定的文件路径创建PNG格式的图像</td></tr></tbody></table><h4><span id="2-2-tian-chong-yan-se">2.2、填充颜色</span><a href="#2-2-tian-chong-yan-se" class="header-anchor">.</a></h4><p>在使用PHP创建空白画布的时候，并不能直接给画布指定颜色。为画布填充颜色时，可以通过imagecolorallocate()函数来完成。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//创建空白画布资源</span><span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreate</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//填充颜色（参数依次为：图像资源、红色数值、绿色数值，蓝色数值）</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>imagecolorallocate()函数用于为画布填充颜色，该函数的第2~4个参数分别表示RGB中的三种颜色。</p><h4><span id="2-3-tu-xiang-shu-chu">2.3、图像输出</span><a href="#2-3-tu-xiang-shu-chu" class="header-anchor">.</a></h4><p>在完成图像资源的处理后，可以将图像输出到网页中，或者保存到文件中。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//创建空白画布并填充颜色</span><span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreate</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置HTTP响应消息，将文档类型设置为GIF图片</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将图像资源以GIF格式输出</span><span class="token function">imagegif</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//该函数第2个参数指定图像保存路径，省略时直接输出到网页</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在在输出时应通过header()函数告知浏览器接下来发送的数据是一张GIF格式的图片，否则浏览器不会以图片的形式展现内容。</p></blockquote><h3><span id="3-hui-zhi-wen-ben-he-tu-xing">3、绘制文本和图形</span><a href="#3-hui-zhi-wen-ben-he-tu-xing" class="header-anchor">.</a></h3><h4><span id="3-1-hui-zhi-wen-ben">3.1、绘制文本</span><a href="#3-1-hui-zhi-wen-ben" class="header-anchor">.</a></h4><p>在PHP中，绘制文本通常用于开发验证码、文字水印等功能。通过imagettftext()函数可以将文字写入到图像中，该函数的参数说明如下。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">array</span> <span class="token function">imagettftext</span><span class="token punctuation">(</span>      resource <span class="token variable">$image</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//图像资源（通过imagecreate()创建）</span>      float <span class="token variable">$size</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//文字大小（字号）</span>      float <span class="token variable">$angel</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//文字倾斜角度</span>      int <span class="token variable">$x</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//绘制位置的x坐标</span>      int <span class="token variable">$y</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//绘制位置的y坐标</span>      int <span class="token variable">$color</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//文字颜色（通过imagecolorallocate()创建）</span>      string <span class="token variable">$fontfile</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//文字字体文件（即.ttf字体文件的保存路径）</span>      string <span class="token variable">$text</span>    <span class="token comment" spellcheck="true">//文字内容</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用imagettftext()函数时，需要给定字体文件，可以使用Windows系统中安装的字体文件（在C:\Windows\Fonts目录中），也可以通过网络获取其它字体文件放在项目目录下使用。</p><h4><span id="3-2-hui-zhi-ji-ben-tu-xing">3.2、绘制基本图形</span><a href="#3-2-hui-zhi-ji-ben-tu-xing" class="header-anchor">.</a></h4><p>图形的构成无论多么复杂，都离不开最基本的点、线、面。在PHP中，GD库提供很多绘制基本图形的函数，通过这些函数可以绘制像素点、线条、矩形、图形等。</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>imagesetpixel(resource $image, int $x, int ​$y, int $color)</td><td>绘制一个点，其中参数$x和​$y用于指定该点的坐标，$color用于指定颜色</td></tr><tr><td>imageline(resource $image, int ​$x1, int ​$y1, int ​$x2, int $y2, int $color)</td><td>用$color颜色在图像$image中从坐标（x1,y1）到（x2,y2）绘制一条线条</td></tr><tr><td>imagerectangle(resource $image, int ​$x1, int ​$y1, int $x2, int ​$y2, int $color)</td><td>用$color颜色在$image图像中绘制一个矩形，其左上角坐标为（x1，y1），右下角坐标为（x2，y2）</td></tr><tr><td>imageellipse(resource $image, int ​$cx, int ​$cy, int ​$w, int ​$h, int $color)</td><td>在$image图像中绘制一个以坐标（cx，cy）为中心的椭圆。其中，​$w和​$h分别指定了椭圆的宽度和高度，如果​$w和$h相等，则为正圆。成功时返回true，失败则返回false。</td></tr><tr><td>imagesetpixel(resource $image, int ​$x, int ​$y, int $color)</td><td>绘制一个点，其中参数$x和​$y用于指定该点的坐标，$color用于指定颜色</td></tr></tbody></table><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//创建画布、填充颜色、创建颜色</span><span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreate</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//创建200*100大小的画布</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//为画布填充白色</span><span class="token variable">$color</span> <span class="token operator">=</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//创建黑色</span><span class="token comment" spellcheck="true">//绘制矩形</span><span class="token function">imagerectangle</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//绘制文本（使用Windows自带的黑体字体）</span><span class="token function">imagettftext</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">,</span> <span class="token string">'C:/Windows/Fonts/simhei.ttf'</span><span class="token punctuation">,</span> <span class="token string">'矩形'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出图像</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: image/png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-tu-xiang-suo-fang-yu-die-jia">4、图像缩放与叠加</span><a href="#4-tu-xiang-suo-fang-yu-die-jia" class="header-anchor">.</a></h3><p>在创建图像资源时，除了创建空白画布，还可以基于图片文件进行创建。当需要对图片进行缩放、叠加时，可以通过imagecopyresampled()函数来完成。</p><pre class="line-numbers language-php"><code class="language-php">bool <span class="token function">imagecopyresampled</span><span class="token punctuation">(</span>      resource <span class="token variable">$dst_image</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//目标图像资源</span>      resource <span class="token variable">$src_image</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//原图像资源</span>      int <span class="token variable">$dst_x</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//目标的x坐标</span>      int <span class="token variable">$dst_y</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//目标的y坐标</span>      int <span class="token variable">$src_x</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//原图的x坐标</span>      int <span class="token variable">$src_y</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//原图的y坐标</span>      int <span class="token variable">$dst_w</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//目标图像的宽</span>      int <span class="token variable">$dst_h</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//目标图像的高</span>      int <span class="token variable">$src_w</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//原图像的宽</span>      int <span class="token variable">$src_h</span>         <span class="token comment" spellcheck="true">//原图像的高</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//定义基本变量</span><span class="token variable">$source</span> <span class="token operator">=</span> <span class="token string">'./1.jpg'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//原图路径</span><span class="token variable">$dst_w</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//目标宽度</span><span class="token variable">$dst_h</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    目标高度<span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$src_w</span><span class="token punctuation">,</span> <span class="token variable">$src_h</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//获取原图宽高</span><span class="token variable">$src_im</span> <span class="token operator">=</span> <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//创建原图资源</span><span class="token variable">$dst_im</span> <span class="token operator">=</span> <span class="token function">imagecreatetruecolor</span><span class="token punctuation">(</span><span class="token variable">$dst_w</span><span class="token punctuation">,</span> <span class="token variable">$dst_h</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//创建目标图像画布资源</span><span class="token comment" spellcheck="true">//将原图缩放到目标图像中</span><span class="token function">imagecopyresampled</span><span class="token punctuation">(</span><span class="token variable">$dst_im</span><span class="token punctuation">,</span> <span class="token variable">$src_im</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$dst_w</span><span class="token punctuation">,</span> <span class="token variable">$dst_h</span><span class="token punctuation">,</span> <span class="token variable">$src_w</span><span class="token punctuation">,</span> <span class="token variable">$src_h</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存到文件中（参数依次为图像资源、保存路径、JPEG压缩质量0~100）</span><span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$dst_im</span><span class="token punctuation">,</span> <span class="token string">'./thumb_1.jpg'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义基本变量</span><span class="token variable">$source</span> <span class="token operator">=</span> <span class="token string">'./1.jpg'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//原图路径</span><span class="token variable">$target</span> <span class="token operator">=</span> <span class="token string">'./2.jpg'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//目标图路径</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$src_w</span><span class="token punctuation">,</span> <span class="token variable">$src_h</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取原图的宽高</span><span class="token comment" spellcheck="true">//创建图像资源</span><span class="token variable">$src_image</span> <span class="token operator">=</span> <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dst_image</span> <span class="token operator">=</span> <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$target</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将原图叠加到目标图中</span><span class="token function">imagecopyresampled</span><span class="token punctuation">(</span><span class="token variable">$dst_image</span><span class="token punctuation">,</span> <span class="token variable">$src_image</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$src_w</span><span class="token punctuation">,</span> <span class="token variable">$src_h</span><span class="token punctuation">,</span> <span class="token variable">$src_w</span><span class="token punctuation">,</span> <span class="token variable">$src_h</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$dst_image</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="wu-han-shu-jin-jie">五、函数进阶</span><a href="#wu-han-shu-jin-jie" class="header-anchor">.</a></h2><h3><span id="1-jing-tai-bian-liang">1、静态变量</span><a href="#1-jing-tai-bian-liang" class="header-anchor">.</a></h3><blockquote><p>在函数中定义的局部变量，在函数执行完成后，就会被自动释放。当不希望函数中的局部变量被释放时，可以使用静态变量。<br>在实际开发中，函数执行完成后自动释放局部变量有利于节省内存空间，而静态变量会一直占用内存空间，因此在使用静态变量时一定要酌情考虑</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">/</span>    <span class="token operator">/</span>声明静态变量，并赋值<span class="token number">1</span>      <span class="token keyword">return</span> <span class="token operator">++</span><span class="token variable">$a</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//静态变量$a自增1，然后返回</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：2</span><span class="token keyword">echo</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-yin-yong-can-shu">2、引用参数</span><a href="#2-yin-yong-can-shu" class="header-anchor">.</a></h3><blockquote><p>在变量赋值的时候，有传值赋值和引用赋值两种形式。同样，在函数进行参数传递时，也可以进行引用传参。<br>在编写函数时，在参数的前面加上“&amp;”引用符号即可。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token operator">++</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$num</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//调用函数，引用传参</span><span class="token keyword">echo</span> <span class="token variable">$num</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出结果：2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当test()函数第1次调用时，函数内的$a引用了函数外部的变量$num。</li><li>在函数中对$a进行自增运算时，$num的值也会随之改变。</li><li>在实际开发中，通过引用传参可以在函数中直接修改变量的值。</li></ul><p>3、可变参数</p><blockquote><p>在PHP中，函数参数的数量可以是不固定的，可以通过func_get_args()获取调用时传递的所有参数，这些参数以数组的形式保存。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$params</span> <span class="token operator">=</span> <span class="token function">func_get_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取调用时传递的参数，返回数组类型</span>      <span class="token keyword">return</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：123-456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>test()函数定义时，没有声明参数</li><li>调用函数时传入的123、456两个参数</li><li>在test()中通过func_get_args()函数获取到传递的参数</li></ul><p>因此，在PHP中，函数的参数数量可以是不固定的</p><blockquote><p>值得一提的是，在调用函数时，还可以使用call_user_func_array()函数以数组的形式传递参数。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：579</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>call_user_func_array()函数的第1个参数表示需要调用的函数</li><li>call_user_func_array()函数的第2个参数表示传入的参数</li><li>在传参时，数组的第1个元素将赋值给$a，数组的第2个元素将赋值给$b。</li><li>当被调用的函数执行后，其返回值将作为call_user_func_array()函数的返回值进行返回。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php入门笔记3</title>
      <link href="/2020/06/21/6361.html"/>
      <url>/2020/06/21/6361.html</url>
      
        <content type="html"><![CDATA[<h1><span id="php-jin-jie">PHP进阶</span><a href="#php-jin-jie" class="header-anchor">.</a></h1><ul><li>HTTP协议</li><li>会话技术</li><li>文件操作</li><li>图像处理</li><li>函数进阶</li></ul><h2><span id="yi-http-xie-yi">一、 HTTP协议</span><a href="#yi-http-xie-yi" class="header-anchor">.</a></h2><h3><span id="1-shi-me-shi-http-xie-yi">1、 什么是HTTP协议</span><a href="#1-shi-me-shi-http-xie-yi" class="header-anchor">.</a></h3><blockquote><p>Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）<strong>服务器</strong>传输<strong>超文本</strong>到<strong>本地浏览器</strong>的<strong>传送协议</strong>。</p><p>HTTP是一种基于请求与响应式的协议，即浏览器发送请求，服务器做出响应。在交互过程中，请求消息与响应消息统称为HTTP消息。</p></blockquote><h3><span id="2-http-xiao-xi">2、HTTP消息</span><a href="#2-http-xiao-xi" class="header-anchor">.</a></h3><ul><li>消息头<ul><li>保存消息时间、系统信息等内容</li></ul></li><li>实体内容<ul><li>包存网页或表单数据</li></ul></li></ul><blockquote><p>请求网址（Request URL）<img src="/2020/06/21/6361/image-20200621101540627.png" alt></p></blockquote><blockquote><p>请求方法（Request Method）<img src="/2020/06/21/6361/image-20200621101707766.png" alt></p></blockquote><blockquote><p>状态码（Status Code）<img src="/2020/06/21/6361/image-20200621101805949.png" alt></p></blockquote><blockquote><p>IP地址（Remote Address）<img src="/2020/06/21/6361/image-20200621101858003.png" alt></p></blockquote><blockquote><p>响应头（Response Headers）：是服务器返回的信息<img src="/2020/06/21/6361/image-20200621103020732.png" alt></p></blockquote><blockquote><p>请求头（Request Headers）：是发送本次请求时的浏览器的信息<img src="/2020/06/21/6361/image-20200621103215749.png" alt></p></blockquote><h3><span id="3-http-qing-qiu">3、 HTTP请求</span><a href="#3-http-qing-qiu" class="header-anchor">.</a></h3><h4><span id="3-1-qing-qiu-fang-shi-chang-yong">3.1、请求方式(常用)</span><a href="#3-1-qing-qiu-fang-shi-chang-yong" class="header-anchor">.</a></h4><ul><li><p>GET</p><ul><li>数据通过URL地址的参数进行传递,提交的数据是可见的(对于用户)</li><li>传输数据量（不超过1KB）受限于URL的长度</li></ul></li><li><p>POST</p><ul><li>通常用于表单和文件上传</li><li>通过实体内容传递数据</li><li>传输数据量大小理论上没有限制，但服务端会进行限制</li><li>因为POST内容隐藏在实体中，POST相对GET要安全一些</li></ul></li></ul><h4><span id="3-2-huo-qu-qing-qiu-xin-xi-php">3.2、获取请求信息（PHP）</span><a href="#3-2-huo-qu-qing-qiu-xin-xi-php" class="header-anchor">.</a></h4><blockquote><p>PHP接收到浏览器端的请求，会将相关信息保存在<strong><code>$_SERVER</code>超全局变量数组</strong>中,我们通过该数组就可以获得请求消息</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pre</span><span class="token punctuation">></span></span><span class="token prolog">&lt;?php var_dump($_SERVER) ?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pre</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="4-http-xiang-ying">4、HTTP响应</span><a href="#4-http-xiang-ying" class="header-anchor">.</a></h3><table><thead><tr><th><strong>消息头</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Location</td><td>控制浏览器显示哪个页面</td></tr><tr><td>Server</td><td>服务器的类型</td></tr><tr><td>Content-Type</td><td>服务器发送内容的类型和编码类型</td></tr><tr><td>Last-Modified</td><td>服务器最后一次修改的时间</td></tr><tr><td>Date</td><td>响应网站的时间</td></tr></tbody></table><h6><span id="zai-mo-ren-qing-kuang-xia-xiang-ying-xiao-xi-tou-you-fu-wu-qi-zi-dong-fa-chu-tong-guo-php-de-header-han-shu-ke-yi-zi-ding-yi-xiang-ying-xiao-xi-tou">在默认情况下，响应消息头由服务器自动发出。通过PHP的header()函数可以自定义响应消息头。</span><a href="#zai-mo-ren-qing-kuang-xia-xiang-ying-xiao-xi-tou-you-fu-wu-qi-zi-dong-fa-chu-tong-guo-php-de-header-han-shu-ke-yi-zi-ding-yi-xiang-ying-xiao-xi-tou" class="header-anchor">.</a></h6><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//设定编码格式</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//响应404消息</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'HTTP/1.1 404 Not Found'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//页面重定向</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: login.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-1-php-yuan-cheng-qing-qiu">4.1、PHP远程请求</span><a href="#4-1-php-yuan-cheng-qing-qiu" class="header-anchor">.</a></h4><blockquote><p>HTTP协议是一种通信协议，除了浏览器，其他软件也可以通过HTTP协议与服务器交换信息。虽然PHP运行于服务器端，但有时服务器也需要向另一台服务器请求数据，这时可以通过PHP来实现。</p></blockquote><ul><li><p>file_get_contents()</p><p>file_get_contents()函数用于从一个文件中读取内容，返回字符串。该函数既可以读取本地文件，也可以读取远程地址文件。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//请求远程地址</span><span class="token variable">$html</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span>'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.test.com');</span><span class="token comment" spellcheck="true">//获取响应消息头</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$http_response_header</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出返回信息</span><span class="token keyword">echo</span> <span class="token string">'&lt;hr>'</span><span class="token punctuation">.</span><span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$html</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>$http_response_header变量是PHP的内置变量，用于自动保存响应消息。</p></blockquote></li><li><p>cURL扩展</p><p>PHP中提供的cURL扩展可以高效地进行远程请求。在使用cURL扩展前应确保php.ini中已经开启了cURL扩展。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//初始化一个cURL会话</span><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置请求选项，包括具体的URL</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> 'http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.itcast.cn');</span><span class="token comment" spellcheck="true">//设定返回的信息中包含响应消息头</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设定curl_exec()函数将结果返回，而不是直接输出</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行一个cURL会话</span><span class="token variable">$html</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//释放cURL句柄，关闭一个cURL会话</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出返回信息</span><span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token variable">$html</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2><span id="er-hui-hua-ji-zhu">二、会话技术</span><a href="#er-hui-hua-ji-zhu" class="header-anchor">.</a></h2><blockquote><p>当用户通过浏览器访问网站时，通常情况下，服务器需要对用户的状态进行跟踪。例如，当用户通过用户名和密码进行登录时，如果登录成功，服务器应该记住该用户的登录状态。<br>在Web开发中，服务器跟踪用户信息的技术称为会话技术。</p></blockquote><h3><span id="1-cookie-ji-zhu">1、Cookie技术</span><a href="#1-cookie-ji-zhu" class="header-anchor">.</a></h3><blockquote><p>Cookie是<strong>网站为了辨别用户身份而存储在用户本地终端上的数据</strong>。因为HTTP协议是无状态的，即服务器不知道用户上一次做了什么，这严重阻碍了交互式Web应用程序的实现。</p><p>Cookie就是<strong>解决HTTP无状态性的一种技术</strong>，服务器可以设置或读取Cookie中包含的信息，借此可以跟踪用户与服务器之间的会话状态，通常应用于保存浏览历史、保存购物车商品和保存用户登录状态等场景。</p></blockquote><img src="/2020/06/21/6361/image-20200706092718694.png" style="zoom:50%;"><h5><span id="que-dian">缺点</span><a href="#que-dian" class="header-anchor">.</a></h5><ul><li>Cookie被附加在每个HTTP请求中，无形中增加了数据流量。</li><li>Cookie在HTTP请求中是明文传输的，所以安全性不高，容易被窃取。</li><li>Cookie存储于浏览器，可以被篡改，服务器接收后必须先验证数据的合法性。</li><li>浏览器限制Cookie的数量和大小（通常限制为50个，每个不超过4KB），对于复杂的存储需求来说是不够用的。</li></ul><h4><span id="1-1-cookie-de-shi-yong">1.1、Cookie的使用</span><a href="#1-1-cookie-de-shi-yong" class="header-anchor">.</a></h4><p>​    在PHP中，使用setcookie()函数可以创建或修改Cookie。</p><pre class="line-numbers language-php"><code class="language-php">bool <span class="token function">setcookie</span> <span class="token punctuation">(</span>        string <span class="token variable">$name</span>        <span class="token comment" spellcheck="true">//Cookie名称</span>       string <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//Cookie值</span>       int <span class="token variable">$expire</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//有效期（时间戳）</span>       string <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//有效路径（默认为当前目录和子目录有效）</span>       string <span class="token variable">$domain</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//有效域名（可允许二级域名下访问Cookie）</span>       bool <span class="token variable">$secure</span> <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//是否只允许HTTPS安全连接访问</span>       bool <span class="token variable">$httponly</span> <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token comment" spellcheck="true">//是否只允许HTTP访问（可阻止JavaScript访问Cookie）</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>参数$name是必需的，其他参数都是可选的</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'city'</span><span class="token punctuation">,</span> <span class="token string">'北京市'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">//未指定过期时间，在会话结束时过期</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'city'</span><span class="token punctuation">,</span> <span class="token string">'北京市'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//半小时后过期</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'city'</span><span class="token punctuation">,</span> <span class="token string">'北京市'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">60</span><span class="token operator">*</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//一天后过期</span><span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'city'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//立即过期（删除COOKIE）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>setcookie()函数的第三个参数是时间戳，当省略时，Cookie仅在本次会话有效，当用户关闭浏览器时，会话就会结束。</li><li>除了可以通过PHP操作Cookie，使用JavaScript也可以操作Cookie，如果只是保存用户在网页中的偏好设置，可以直接用JavaScript操作Cookie，无需服务器进行处理。</li></ul><h4><span id="1-2-du-qu-cookie">1.2、读取Cookie</span><a href="#1-2-du-qu-cookie" class="header-anchor">.</a></h4><blockquote><p>对于浏览器发送的Cookie数据，在PHP中可以使用超全局数组变量<code>$_COOKIE</code>来接收。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//判断Cookie中是否存在city数据</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$city</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//从COOKIE中获取City数据</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//Cookie中的city不存在</span>    <span class="token comment" spellcheck="true">//在这可以设置cookie</span><span class="token punctuation">}</span><span class="token variable">$city</span><span class="token operator">=</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'city'</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，当PHP第一次通过setcookie()创建Cookie时，<code>$_COOKIE</code>中没有这个数据；只有当浏览器下次请求并携带Cookie时，才能通过<code>$_COOKIE</code>获取到相关信息。</p></blockquote><h4><span id="1-3-cha-kan-cookie">1.3、查看Cookie</span><a href="#1-3-cha-kan-cookie" class="header-anchor">.</a></h4><blockquote><p>当服务器端PHP通过setcookie()向浏览器端响应Cookie后，浏览器就会保存Cookie，在下次请求时会自动携带Cookie。</p></blockquote><p>对于普通用户来说，Cookie是不可见的，但Web开发者可以通过“F12”开发者工具查看Cookie。在开发者工具中切换到【Network】-【Cookies】。</p><img src="/2020/06/21/6361/image-20200706094114117.png" style="zoom:50%;"><img src="/2020/06/21/6361/image-20200706094321663.png" style="zoom:50%;"><ul><li>Cookie在浏览器中是根据域名分开保存的，每个Cookie具有名称（Name）、值（Value）、域名（Domain）、路径（Path）、有效期（Expires）等属性。</li><li>在访问Cookie时，不同路径之间是隔离的，路径可以向下继承。例如，路径为“/admin/”的Cookie可以在admin的子目录中访问，但在admin的上级目录中无法访问。</li></ul><h3><span id="2-session-ji-zhu">2、Session技术</span><a href="#2-session-ji-zhu" class="header-anchor">.</a></h3><blockquote><p>Session在网络应用中称为“会话”，指的是用户在浏览某个网站时，从进入网站到关闭网站所经过的这段时间。<br>Session技术是一种服务器端的技术，它的生命周期从用户访问页面开始，直到断开与网站的连接时结束。Session通常用于保存用户登录状态、保存生成的验证码等。</p></blockquote><p>当PHP启动Session时，服务器会为每个用户的浏览器创建一个供其独享的Session文件。</p><img src="/2020/06/21/6361/image-20200706094745683.png" style="zoom:50%;"><ul><li>每一个Session都具有一个唯一的会话ID，用于标识不同的用户。</li><li>会话ID分别保存在浏览器端和服务器端两个位置，浏览器端<strong>通过Cookie保存</strong>，服务器端<strong>以文件的形式</strong>保存在指定的Session目录中。</li></ul><h4><span id="2-1-cha-kan-sessionid">2.1、查看SessionID</span><a href="#2-1-cha-kan-sessionid" class="header-anchor">.</a></h4><p> Session文件的保存目录是php.ini中的配置项“session.save_path”指定的，其默认路径位于“C:\Windows\Temp”，打开这个目录可以查看Session文件：</p><p><img src="/2020/06/21/6361/image-20200706100035013.png" alt></p><h4><span id="2-2-session-de-shi-yong">2.2、Session的使用</span><a href="#2-2-session-de-shi-yong" class="header-anchor">.</a></h4><ul><li>在使用Session之前，需要通过session_start()函数先启动Session</li><li>当启动后，即可通过超全局变量<code>$_SESSION</code>添加、读取或修改Session中的数据。</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//开启SESSION</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'小明'</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//向SESSION添加数据（字符串）</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//向SESSION添加数据（数组）</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>          <span class="token comment" spellcheck="true">//判断SESSION中是否存在test</span>      <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'test'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//读取SESSION中的test</span><span class="token punctuation">}</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//删除单个数据</span><span class="token variable">$_SESSION</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//删除所有数据</span><span class="token function">session_destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//结束当前会话</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>使用“<code>$_SESSION</code>= []”方式可以删除Session中的所有数据，但是Session文件仍然存在，只不过它是一个空文件。<br>如果需要将这个空文件删除，可以通过session_destroy()函数来实现。</p></blockquote><h3><span id="3-shu-chu-huan-chong">3、输出缓冲</span><a href="#3-shu-chu-huan-chong" class="header-anchor">.</a></h3><blockquote><p>在PHP中，输出缓冲（Output Buffer）是一种缓存机制，它通过内存预先保存PHP脚本的输出内容，当缓存的数据量达到设定的大小时，再将数据传输到浏览器。</p><p>输出缓冲机制解决了当有实体内容输出后，再使用header()、setcookie()、session_start()等函数无法设置HTTP消息头的问题，因为消息头必须在实体内容之前被发送，通过输出缓冲，可以使实体内容延缓到HTTP消息头的后面被发送。</p></blockquote><blockquote><p>输出缓冲在PHP中是默认开启的。<br>在php.ini中，它的配置项为“output_buffering = 4096”，表示输出缓冲的内存空间为4KB。</p></blockquote><p>通过PHP的ob函数可以控制输出缓冲，常用函数如下：</p><table><thead><tr><th><strong>函数名</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>ob_start()</td><td>启动输出缓冲</td></tr><tr><td>ob_get_contents()</td><td>返回当前输出缓冲区的内容</td></tr><tr><td>ob_end_flush()</td><td>向浏览器发送输出缓冲区的内容，并禁用输出缓冲</td></tr><tr><td>ob_end_clean()</td><td>清空输出缓冲区的内容，不进行发送，并禁用输出缓冲</td></tr><tr><td>ob_start()</td><td>启动输出缓冲</td></tr></tbody></table><h2><span id="san-wen-jian-cao-zuo">三、文件操作</span><a href="#san-wen-jian-cao-zuo" class="header-anchor">.</a></h2><h3><span id="1-wen-jian-shang-chuan">1、文件上传</span><a href="#1-wen-jian-shang-chuan" class="header-anchor">.</a></h3><h4><span id="1-1-wen-jian-shang-chuan-biao-dan">1.1、文件上传表单</span><a href="#1-1-wen-jian-shang-chuan-biao-dan" class="header-anchor">.</a></h4><p>要想完成文件上传，在设计表单时需要满足以下两个需求：</p><ul><li>表单提交方式设置为POST方式。</li><li>enctype属性的值设置为“multipart/form-data”。</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>上传<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>默认情况下，该元素只能上传一个文件。当需要上传多个文件时，可以编写多个标签，或者为一个标签添加multiple属性。</p></blockquote><h4><span id="1-2-chu-li-shang-chuan-wen-jian">1.2、处理上传文件</span><a href="#1-2-chu-li-shang-chuan-wen-jian" class="header-anchor">.</a></h4><p>PHP默认将通过HTTP上传的文件保存到服务器的临时目录下，该临时文件的保存期为脚本的周期，即PHP脚本执行期间。</p><p>在处理上传文件时，通过sleep(seconds)函数延迟PHP文件执行的时间，可以在系统临时目录“C:\Windows\Temp”中查看临时文件。</p><ul><li>提交表单后，上传的文件会以随机生成的文件名保存在系统临时目录中。</li><li>PHP执行完毕后，图中方框内的临时文件就会被释放掉。</li></ul><h4><span id="1-3-huo-qu-wen-jian-xin-xi">1.3、获取文件信息</span><a href="#1-3-huo-qu-wen-jian-xin-xi" class="header-anchor">.</a></h4><p>在PHP释放上传文件之前，在PHP脚本中可以用超全局变量<code>$_FILES</code>来获取上传文件的信息。<br>该变量的外层数组保存上传文件的“name”属性名，内层数组保存的是该上传文件的具体信息</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//假设PHP收到来自</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></span>上传的文件<span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//上传文件名称，如photo.jpg</span><span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//上传文件大小，如879394（单位是Byte）</span><span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//上传是否有误，如0（表示成功）</span><span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>               <span class="token comment" spellcheck="true">//上传文件的MIME类型，如image/jpeg</span><span class="token keyword">echo</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//上传后临时文件名，如C:\Windows\Temp\php9BA5.tmp</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>$_FILES数组中的 error 有 7 个值，分别为 0、1、2、3、4、6、7。</p><p>0 表示上传成功<br>1 表示文件大小超过了php.ini中upload_max_filesize选项限制的值<br>2 表示文件大小超过了表单中max_file_size选项指定的值<br>3 表示文件只有部分被上传<br>4 表示没有文件被上传<br>6 表示找不到临时文件夹<br>7 表示文件写入失败</p><h4><span id="1-4-shang-chuan-wen-jian-de-bao-cun">1.4、上传文件的保存</span><a href="#1-4-shang-chuan-wen-jian-de-bao-cun" class="header-anchor">.</a></h4><ul><li>文件上传成功后会暂时保存在系统的临时文件夹中。</li><li>为了保存文件到指定的目录中，需要使用 move_uploaded_file()函数进行操作。</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//判断是否有“name=upload”的文件上传，是否上传成功</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'error'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">//上传成功，将文件保存到当前目录下的“uploads”目录中</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'upload'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'./uploads'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'文件上传成功'</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，移动文件的目标路径“./uploads”必须是已经存在的目录，否则会移动失败。</p></blockquote><h3><span id="2-wen-jian-ji-ben-cao-zuo">2、文件基本操作</span><a href="#2-wen-jian-ji-ben-cao-zuo" class="header-anchor">.</a></h3><h4><span id="2-1-wen-jian-lei-xing">2.1、文件类型</span><a href="#2-1-wen-jian-lei-xing" class="header-anchor">.</a></h4><blockquote><p>文件类型主要分为文件和目录，PHP可以通过filetype()函数来获取文件类型。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">filetype</span><span class="token punctuation">(</span><span class="token string">'./uploads/1.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：file</span><span class="token keyword">echo</span> <span class="token function">filetype</span><span class="token punctuation">(</span><span class="token string">'./uploads'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出结果：dir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>在Windows系统中，PHP只能获得“file”、“dir”和“unknown”三种文件类型。</li><li>在Linux系统中，还可以获取block（块设备文件）、char（字符设置）、link（符号链接）等文件类型。</li></ul><blockquote><p><strong>在操作一个文件时，如果该文件不存在，会发生错误</strong>。为了避免这种情况发生，可以通过<strong>file_exits()</strong>、<strong>is_file()</strong>和<strong>is_dir()</strong>函数，来检查文件或目录是否存在。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">'./uploads/1.jpg'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//文件存在，输出：bool(true)</span><span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token string">'./uploads/2.jpg'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//文件不存在，输出：bool(false)</span><span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token function">is_file</span><span class="token punctuation">(</span><span class="token string">'./uploads/1.jpg'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：bool(true)</span><span class="token function">var_dump</span><span class="token punctuation">(</span> <span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token string">'./uploads'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出结果：bool(true)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-2-wen-jian-shu-xing">2.2、文件属性</span><a href="#2-2-wen-jian-shu-xing" class="header-anchor">.</a></h4><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>int filesize(string $filename )</td><td>获取文件大小</td></tr><tr><td>int filectime(string $filename)</td><td>获取文件的创建时间</td></tr><tr><td>int filemtime(string $filename)</td><td>获取文件的修改时间</td></tr><tr><td>int fileatime(string $filename)</td><td>获取文件的上次访问时间</td></tr><tr><td>bool is_readable(string $filename)</td><td>判断给定文件是否可读</td></tr><tr><td>bool is_writable(string $filename)</td><td>判断给定文件是否可写</td></tr><tr><td>bool is_executable(string $filename)</td><td>判断给定文件是否可执行</td></tr><tr><td>array stat(string $filename)</td><td>给出文件的信息</td></tr></tbody></table><blockquote><p>由于PHP中int数据类型表示的数据范围有限，所以filesize()函数对于大于2GB的文件，并不能准确获取其大小，需斟酌使用。</p></blockquote><h4><span id="2-3-wen-jian-cao-zuo">2.3、文件操作</span><a href="#2-3-wen-jian-cao-zuo" class="header-anchor">.</a></h4><p>在程序开发过程中，经常需要对文件进行复制、删除以及重命名等操作。针对这些功能，PHP提供了相应的函数</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>bool copy(string $source, string $dest)</td><td>用于实现拷贝文件的功能</td></tr><tr><td>bool unlink(string $filename)</td><td>用于删除文件</td></tr><tr><td>bool rename(string $old_name, string $new_name)</td><td>用于实现文件或目录的重命名功能</td></tr></tbody></table><h4><span id="2-4-wen-jian-du-xie">2.4、文件读写</span><a href="#2-4-wen-jian-du-xie" class="header-anchor">.</a></h4><p>在PHP中，对于文件的读写提供了许多函数。其中，基于文件的句柄的函数可以对大文件进行流式读写操作；而对于小文件，直接进行读写效率更高。</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>resource fopen(string $filename, string $mode)</td><td>打开文件，获取文件句柄</td></tr><tr><td>bool fclose(resource $handle)</td><td>关闭文件句柄</td></tr><tr><td>string fread(resource $handle, int $length)</td><td>通过句柄读取文件，获取指定长度字符串</td></tr><tr><td>int fwrite(resource $handle, string $string [,int $length])</td><td>通过句柄写入文件</td></tr><tr><td>string fgetc(resource $handle)</td><td>通过句柄读取文件，每次读取一个字节。</td></tr><tr><td>string fgets(resource $handle [,int $length])</td><td>通过句柄读取文件，每次读取一行内容</td></tr><tr><td>array file(string $filename)</td><td>将文件读取到按行分割的数组中</td></tr><tr><td>string file_get_contents(string $filename)</td><td>读取文件</td></tr><tr><td>int file_put_contents(string $filename, mixed $data)</td><td>写入文件</td></tr></tbody></table><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//定义下载文件名</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'download.zip'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取文件大小</span><span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token string">'./data.zip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置HTTP响应消息为文件下载</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type:octet-stream'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-length:'</span><span class="token punctuation">.</span><span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-disposition:attachment;filename="'</span><span class="token punctuation">.</span><span class="token variable">$name</span><span class="token punctuation">.</span><span class="token string">'"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$fp</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'./data.zip'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//以只读方式打开文件</span><span class="token comment" spellcheck="true">//读取文件并输出</span><span class="token variable">$buffer</span> <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//读取缓冲</span><span class="token variable">$count</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//已读取的大小</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">feof</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$size</span> <span class="token operator">-</span> <span class="token variable">$count</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//判断文件是否全部读取</span>      <span class="token keyword">echo</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span> <span class="token variable">$buffer</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token variable">$count</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token variable">$buffer</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//关闭文件，停止脚本</span><span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>exit<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-mu-lu-ji-ben-cao-zuo">3、目录基本操作</span><a href="#3-mu-lu-ji-ben-cao-zuo" class="header-anchor">.</a></h3><h4><span id="3-1-chuang-jian-mu-lu">3.1、创建目录</span><a href="#3-1-chuang-jian-mu-lu" class="header-anchor">.</a></h4><p>在进行文件操作时，经常需要创建目录。通过mkdir()函数可以实现目录的创建。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">'./path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//在当前目录下创建一个path目录</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string">'./path1/path2'</span><span class="token punctuation">,</span> <span class="token number">0777</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//在当前目录下递归创建path1/path2目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4><span id="3-2-jie-xi-lu-jing">3.2、解析路径</span><a href="#3-2-jie-xi-lu-jing" class="header-anchor">.</a></h4><p>在程序中经常需要对文件路径进行解析操作，如路径中的文件名和目录等。PHP提供了一些函数实现目录的解析操作。</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>string basename(string $path [, string $suffix ])</td><td>返回路径中的文件名</td></tr><tr><td>string dirname(string $path)</td><td>返回路径中的目录部分</td></tr><tr><td>mixed pathinfo(string $path [, int $options ])</td><td>以数组的形式返回路径信息，包括目录名、文件名等</td></tr></tbody></table><blockquote><p>需要注意的是，在处理带有中文的路径时，应注意操作系统对于文件路径的编码问题。只有PHP程序设置的编码与操作系统的编码统一，才能正确处理中文路径。</p></blockquote><h4><span id="3-3-bian-li-mu-lu">3.3、遍历目录</span><a href="#3-3-bian-li-mu-lu" class="header-anchor">.</a></h4><p>在程序中经常需要对某个目录下的子目录或文件进行遍历。为此，PHP中内置了相应的函数用于实现目录或文件的遍历。</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>resource opendir(string $path)</td><td>打开一个目录句柄</td></tr><tr><td>string readdir(resource $dir_handle)</td><td>从目录句柄中读取条目</td></tr><tr><td>void closedir(resource $dir_handle)</td><td>关闭目录句柄</td></tr><tr><td>void rewinddir(resource $dir_handle)</td><td>倒回目录句柄</td></tr><tr><td>array glob(string $pattern [, int $flags = 0 ])</td><td>寻找与模式匹配的文件路径</td></tr></tbody></table><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">getDirSize</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//保存文件大小</span>      <span class="token variable">$handle</span> <span class="token operator">=</span> <span class="token function">opendir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//打开目录句柄</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">readdir</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token operator">!=</span><span class="token string">'.'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$name</span> <span class="token operator">!=</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"$path/$name"</span><span class="token punctuation">;</span>                  <span class="token variable">$size</span> <span class="token operator">+</span><span class="token operator">=</span> <span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">getDirSize</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>      <span class="token punctuation">}</span>      <span class="token function">closedir</span><span class="token punctuation">(</span><span class="token variable">$handle</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token variable">$size</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'当前目录大小：'</span><span class="token punctuation">.</span><span class="token function">getDirSize</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'B'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="si-tu-xiang-chu-li">四、图像处理</span><a href="#si-tu-xiang-chu-li" class="header-anchor">.</a></h2><h3><span id="1-gd-ku-jian-jie">1、GD库简介</span><a href="#1-gd-ku-jian-jie" class="header-anchor">.</a></h3><blockquote><p>GD库是PHP处理图像的扩展库，它提供了一系列用来处理图像的函数，可以实现缩略图、验证码和图片水印等操作。<br>但由于不同的GD库版本支持的图像格式不完全一样，因此，从PHP的4.3版本开始，PHP捆绑了其开发团队实现的GD2库。它不仅支持GIF、JPEG、PNG等格式的图像文件，还支持FreeType、Type1等字体库。</p></blockquote><ul><li>打开PHP的配置文件php.ini</li><li>找到“;extension=php_gd2.dll”配置项，去掉前面的分号“;”注释</li><li>保存PHP的配置文件php.ini，并重启Apache使配置生效</li><li>通过phpinfo()函数可以查看GD库是否开启成功</li></ul><h3><span id="2-tu-xiang-de-chuang-jian-yu-shu-chu">2、图像的创建与输出</span><a href="#2-tu-xiang-de-chuang-jian-yu-shu-chu" class="header-anchor">.</a></h3><h4><span id="2-1-chuang-jian-tu-xiang-zi-yuan">2.1、创建图像资源</span><a href="#2-1-chuang-jian-tu-xiang-zi-yuan" class="header-anchor">.</a></h4><p>在处理图像前，需要先创建图像资源。PHP有多种创建图像的方式，可以基于一个已有的文件创建，也可以直接创建一个空白画布。</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>resource imagecreate(int $width, int $height)</td><td>创建指定宽高的空白画布图像</td></tr><tr><td>resource imagecreatetruecolor (int $width, int $height )</td><td>创建指定宽高的真彩色空白画布图像</td></tr><tr><td>resource imagecreatefromgif(string $filename)</td><td>从给定的文件路径创建GIF格式的图像</td></tr><tr><td>resource imagecreatefromjpeg(string $filename)</td><td>从给定的文件路径创建JPEG格式的图像</td></tr><tr><td>resource imagecreatefrompng(string $filename)</td><td>从给定的文件路径创建PNG格式的图像</td></tr></tbody></table><h4><span id="2-2-tian-chong-yan-se">2.2、填充颜色</span><a href="#2-2-tian-chong-yan-se" class="header-anchor">.</a></h4><p>在使用PHP创建空白画布的时候，并不能直接给画布指定颜色。为画布填充颜色时，可以通过imagecolorallocate()函数来完成。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//创建空白画布资源</span><span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreate</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//填充颜色（参数依次为：图像资源、红色数值、绿色数值，蓝色数值）</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>imagecolorallocate()函数用于为画布填充颜色，该函数的第2~4个参数分别表示RGB中的三种颜色。</p><h4><span id="2-3-tu-xiang-shu-chu">2.3、图像输出</span><a href="#2-3-tu-xiang-shu-chu" class="header-anchor">.</a></h4><p>在完成图像资源的处理后，可以将图像输出到网页中，或者保存到文件中。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//创建空白画布并填充颜色</span><span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreate</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//设置HTTP响应消息，将文档类型设置为GIF图片</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将图像资源以GIF格式输出</span><span class="token function">imagegif</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//该函数第2个参数指定图像保存路径，省略时直接输出到网页</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在在输出时应通过header()函数告知浏览器接下来发送的数据是一张GIF格式的图片，否则浏览器不会以图片的形式展现内容。</p></blockquote><h3><span id="3-hui-zhi-wen-ben-he-tu-xing">3、绘制文本和图形</span><a href="#3-hui-zhi-wen-ben-he-tu-xing" class="header-anchor">.</a></h3><h4><span id="3-1-hui-zhi-wen-ben">3.1、绘制文本</span><a href="#3-1-hui-zhi-wen-ben" class="header-anchor">.</a></h4><p>在PHP中，绘制文本通常用于开发验证码、文字水印等功能。通过imagettftext()函数可以将文字写入到图像中，该函数的参数说明如下。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">array</span> <span class="token function">imagettftext</span><span class="token punctuation">(</span>      resource <span class="token variable">$image</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">//图像资源（通过imagecreate()创建）</span>      float <span class="token variable">$size</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//文字大小（字号）</span>      float <span class="token variable">$angel</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//文字倾斜角度</span>      int <span class="token variable">$x</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//绘制位置的x坐标</span>      int <span class="token variable">$y</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//绘制位置的y坐标</span>      int <span class="token variable">$color</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//文字颜色（通过imagecolorallocate()创建）</span>      string <span class="token variable">$fontfile</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//文字字体文件（即.ttf字体文件的保存路径）</span>      string <span class="token variable">$text</span>    <span class="token comment" spellcheck="true">//文字内容</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用imagettftext()函数时，需要给定字体文件，可以使用Windows系统中安装的字体文件（在C:\Windows\Fonts目录中），也可以通过网络获取其它字体文件放在项目目录下使用。</p><h4><span id="3-2-hui-zhi-ji-ben-tu-xing">3.2、绘制基本图形</span><a href="#3-2-hui-zhi-ji-ben-tu-xing" class="header-anchor">.</a></h4><p>图形的构成无论多么复杂，都离不开最基本的点、线、面。在PHP中，GD库提供很多绘制基本图形的函数，通过这些函数可以绘制像素点、线条、矩形、图形等。</p><table><thead><tr><th><strong>函数</strong></th><th><strong>功能</strong></th></tr></thead><tbody><tr><td>imagesetpixel(resource $image, int $x, int ​$y, int $color)</td><td>绘制一个点，其中参数$x和​$y用于指定该点的坐标，$color用于指定颜色</td></tr><tr><td>imageline(resource $image, int ​$x1, int ​$y1, int ​$x2, int $y2, int $color)</td><td>用$color颜色在图像$image中从坐标（x1,y1）到（x2,y2）绘制一条线条</td></tr><tr><td>imagerectangle(resource $image, int ​$x1, int ​$y1, int $x2, int ​$y2, int $color)</td><td>用$color颜色在$image图像中绘制一个矩形，其左上角坐标为（x1，y1），右下角坐标为（x2，y2）</td></tr><tr><td>imageellipse(resource $image, int ​$cx, int ​$cy, int ​$w, int ​$h, int $color)</td><td>在$image图像中绘制一个以坐标（cx，cy）为中心的椭圆。其中，​$w和​$h分别指定了椭圆的宽度和高度，如果​$w和$h相等，则为正圆。成功时返回true，失败则返回false。</td></tr><tr><td>imagesetpixel(resource $image, int ​$x, int ​$y, int $color)</td><td>绘制一个点，其中参数$x和​$y用于指定该点的坐标，$color用于指定颜色</td></tr></tbody></table><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//创建画布、填充颜色、创建颜色</span><span class="token variable">$im</span> <span class="token operator">=</span> <span class="token function">imagecreate</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//创建200*100大小的画布</span><span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//为画布填充白色</span><span class="token variable">$color</span> <span class="token operator">=</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//创建黑色</span><span class="token comment" spellcheck="true">//绘制矩形</span><span class="token function">imagerectangle</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">180</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//绘制文本（使用Windows自带的黑体字体）</span><span class="token function">imagettftext</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">,</span> <span class="token string">'C:/Windows/Fonts/simhei.ttf'</span><span class="token punctuation">,</span> <span class="token string">'矩形'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出图像</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: image/png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$im</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-tu-xiang-suo-fang-yu-die-jia">4、图像缩放与叠加</span><a href="#4-tu-xiang-suo-fang-yu-die-jia" class="header-anchor">.</a></h3><p>在创建图像资源时，除了创建空白画布，还可以基于图片文件进行创建。当需要对图片进行缩放、叠加时，可以通过imagecopyresampled()函数来完成。</p><pre class="line-numbers language-php"><code class="language-php">bool <span class="token function">imagecopyresampled</span><span class="token punctuation">(</span>      resource <span class="token variable">$dst_image</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//目标图像资源</span>      resource <span class="token variable">$src_image</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//原图像资源</span>      int <span class="token variable">$dst_x</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//目标的x坐标</span>      int <span class="token variable">$dst_y</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//目标的y坐标</span>      int <span class="token variable">$src_x</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//原图的x坐标</span>      int <span class="token variable">$src_y</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//原图的y坐标</span>      int <span class="token variable">$dst_w</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//目标图像的宽</span>      int <span class="token variable">$dst_h</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//目标图像的高</span>      int <span class="token variable">$src_w</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//原图像的宽</span>      int <span class="token variable">$src_h</span>         <span class="token comment" spellcheck="true">//原图像的高</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//定义基本变量</span><span class="token variable">$source</span> <span class="token operator">=</span> <span class="token string">'./1.jpg'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//原图路径</span><span class="token variable">$dst_w</span> <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//目标宽度</span><span class="token variable">$dst_h</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    目标高度<span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$src_w</span><span class="token punctuation">,</span> <span class="token variable">$src_h</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//获取原图宽高</span><span class="token variable">$src_im</span> <span class="token operator">=</span> <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//创建原图资源</span><span class="token variable">$dst_im</span> <span class="token operator">=</span> <span class="token function">imagecreatetruecolor</span><span class="token punctuation">(</span><span class="token variable">$dst_w</span><span class="token punctuation">,</span> <span class="token variable">$dst_h</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//创建目标图像画布资源</span><span class="token comment" spellcheck="true">//将原图缩放到目标图像中</span><span class="token function">imagecopyresampled</span><span class="token punctuation">(</span><span class="token variable">$dst_im</span><span class="token punctuation">,</span> <span class="token variable">$src_im</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$dst_w</span><span class="token punctuation">,</span> <span class="token variable">$dst_h</span><span class="token punctuation">,</span> <span class="token variable">$src_w</span><span class="token punctuation">,</span> <span class="token variable">$src_h</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//保存到文件中（参数依次为图像资源、保存路径、JPEG压缩质量0~100）</span><span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$dst_im</span><span class="token punctuation">,</span> <span class="token string">'./thumb_1.jpg'</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义基本变量</span><span class="token variable">$source</span> <span class="token operator">=</span> <span class="token string">'./1.jpg'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//原图路径</span><span class="token variable">$target</span> <span class="token operator">=</span> <span class="token string">'./2.jpg'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//目标图路径</span><span class="token function">list</span><span class="token punctuation">(</span><span class="token variable">$src_w</span><span class="token punctuation">,</span> <span class="token variable">$src_h</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">getimagesize</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//获取原图的宽高</span><span class="token comment" spellcheck="true">//创建图像资源</span><span class="token variable">$src_image</span> <span class="token operator">=</span> <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$source</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dst_image</span> <span class="token operator">=</span> <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$target</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//将原图叠加到目标图中</span><span class="token function">imagecopyresampled</span><span class="token punctuation">(</span><span class="token variable">$dst_image</span><span class="token punctuation">,</span> <span class="token variable">$src_image</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$src_w</span><span class="token punctuation">,</span> <span class="token variable">$src_h</span><span class="token punctuation">,</span> <span class="token variable">$src_w</span><span class="token punctuation">,</span> <span class="token variable">$src_h</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-Type: image/jpeg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imagejpeg</span><span class="token punctuation">(</span><span class="token variable">$dst_image</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="wu-han-shu-jin-jie">五、函数进阶</span><a href="#wu-han-shu-jin-jie" class="header-anchor">.</a></h2><h3><span id="1-jing-tai-bian-liang">1、静态变量</span><a href="#1-jing-tai-bian-liang" class="header-anchor">.</a></h3><blockquote><p>在函数中定义的局部变量，在函数执行完成后，就会被自动释放。当不希望函数中的局部变量被释放时，可以使用静态变量。<br>在实际开发中，函数执行完成后自动释放局部变量有利于节省内存空间，而静态变量会一直占用内存空间，因此在使用静态变量时一定要酌情考虑</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">static</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">/</span>    <span class="token operator">/</span>声明静态变量，并赋值<span class="token number">1</span>      <span class="token keyword">return</span> <span class="token operator">++</span><span class="token variable">$a</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//静态变量$a自增1，然后返回</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：2</span><span class="token keyword">echo</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-yin-yong-can-shu">2、引用参数</span><a href="#2-yin-yong-can-shu" class="header-anchor">.</a></h3><blockquote><p>在变量赋值的时候，有传值赋值和引用赋值两种形式。同样，在函数进行参数传递时，也可以进行引用传参。<br>在编写函数时，在参数的前面加上“&amp;”引用符号即可。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token operator">++</span><span class="token variable">$a</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$num</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//调用函数，引用传参</span><span class="token keyword">echo</span> <span class="token variable">$num</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出结果：2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>当test()函数第1次调用时，函数内的$a引用了函数外部的变量$num。</li><li>在函数中对$a进行自增运算时，$num的值也会随之改变。</li><li>在实际开发中，通过引用传参可以在函数中直接修改变量的值。</li></ul><p>3、可变参数</p><blockquote><p>在PHP中，函数参数的数量可以是不固定的，可以通过func_get_args()获取调用时传递的所有参数，这些参数以数组的形式保存。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token variable">$params</span> <span class="token operator">=</span> <span class="token function">func_get_args</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取调用时传递的参数，返回数组类型</span>      <span class="token keyword">return</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">,</span> <span class="token variable">$params</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：123-456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>test()函数定义时，没有声明参数</li><li>调用函数时传入的123、456两个参数</li><li>在test()中通过func_get_args()函数获取到传递的参数</li></ul><p>因此，在PHP中，函数的参数数量可以是不固定的</p><blockquote><p>值得一提的是，在调用函数时，还可以使用call_user_func_array()函数以数组的形式传递参数。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">456</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：579</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>call_user_func_array()函数的第1个参数表示需要调用的函数</li><li>call_user_func_array()函数的第2个参数表示传入的参数</li><li>在传参时，数组的第1个元素将赋值给$a，数组的第2个元素将赋值给$b。</li><li>当被调用的函数执行后，其返回值将作为call_user_func_array()函数的返回值进行返回。</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS入门(表现层) -- B站狂神说java笔记</title>
      <link href="/2020/06/20/22113.html"/>
      <url>/2020/06/20/22113.html</url>
      
        <content type="html"><![CDATA[<h1><span id="css-ru-men-biao-xian-ceng-b-zhan-kuang-shen-shuo-java-bi-ji">CSS入门(表现层) – B站狂神说java笔记</span><a href="#css-ru-men-biao-xian-ceng-b-zhan-kuang-shen-shuo-java-bi-ji" class="header-anchor">.</a></h1><p><img src="/2020/06/20/22113/image-20200619022400050.png" alt></p><h3><span id="1-shi-me-shi-css">1.什么是CSS</span><a href="#1-shi-me-shi-css" class="header-anchor">.</a></h3><p>Cascading Style Sheets 层叠级联样式表</p><p>CSS：表现（美化页面）</p><p>字体、颜色、边距、高度、宽度、背景图、网页定位、网页浮动。。。</p><h3><span id="1-fa-zhan-shi">1.发展史</span><a href="#1-fa-zhan-shi" class="header-anchor">.</a></h3><p>CSS1.0</p><p>CSS2.0 DIV(块) + CSS    HTML与CSS分离，网页变的更简单，SEO优化</p><p>CSS2.1 浮动和定位（重点）</p><p>CSS3 圆角、阴影、动画、、、    浏览器兼容性~（如果要精通就这 可以上菜鸟教程）</p><h3><span id="2-kuai-su-ru-men">2.快速入门</span><a href="#2-kuai-su-ru-men" class="header-anchor">.</a></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tilte</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 规范：&lt;style> 可以编写css的代码，设一个声明，最好使用分号结尾         &lt;style>            选择器 {                声明1;                声明2;                声明3;            }        &lt;/style>    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">h1 </span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>CSS 优势：</p><ul><li>内容和表现分离</li><li>网页结构表现统一，可以实现复用</li><li>样式十分丰富</li><li>建议使用独立于html的css文件</li><li>利用SEO，容易被搜索引擎收录 （用Vue这个框架，是及其不容易被收录的）</li></ul><h3><span id="3-css-san-chong-dao-ru-fang-shi">3.CSS三种导入方式</span><a href="#3-css-san-chong-dao-ru-fang-shi" class="header-anchor">.</a></h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tilte</span><span class="token punctuation">></span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--内部样式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">h1</span><span class="token punctuation">{</span>            <span class="token property">color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--外部样式--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 行内样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*style.css*/</span><span class="token selector">h1</span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><mark>优先级</mark>: 就近原则（谁里元素最近，就显示谁的样式）</p><p>拓展：</p><p>​    外部样式两种写法</p><ul><li><p>导入式(比较少用) css2.1特有的  必须在style标签里面</p><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--head标签内--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token atrule"><span class="token rule">@import</span> <span class="token url">url("css/style.css")</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><mark>弊端：</mark>当你网页代码比较多时，会先展示结构，后</p></li><li><p>链接式（主流）</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>css/style.css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h3><span id="4-xuan-ze-qi">4. 选择器</span><a href="#4-xuan-ze-qi" class="header-anchor">.</a></h3><blockquote><p>作用：选择页面上的某一个或者某一类元素</p></blockquote><h4><span id="4-1-ji-ben-xuan-ze-qi">4.1 基本选择器</span><a href="#4-1-ji-ben-xuan-ze-qi" class="header-anchor">.</a></h4><ul><li>标签选择器 ：选中一类标签<ul><li>标签名 {}</li></ul></li><li>类选择器：选择所有class属性一致的标签，跨标签<ul><li>.类名 {}</li></ul></li><li>Id选择器（保证全局唯一）<ul><li>#id名 {}</li></ul></li></ul><p><mark>优先级</mark>：id &gt; class &gt; 标签</p><h4><span id="4-2-ceng-ci-xuan-ze-qi-xia-mian-de-ming-cheng-shi-bian-yu-li-jie">4.2 层次选择器(下面的名称是便于理解)</span><a href="#4-2-ceng-ci-xuan-ze-qi-xia-mian-de-ming-cheng-shi-bian-yu-li-jie" class="header-anchor">.</a></h4><ul><li>后代选择器：在某个元素的后面 所有子代 孙代 。。。</li><li>子选择器  下面的一代</li><li>相连兄弟选择器 只是下面的的相连节点</li><li>通用选择器 自己和自己下面的所有的</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>active<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>    &lt;!-- 后代选择器 -->    body p </span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">&lt;!-- 子选择器 -->    body>p</span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">&lt;!-- 相连兄弟选择器: 只是下面的一个 -->    <span class="token class">.active</span> + p</span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">&lt;!-- 通用兄弟选择器: 自己和自己下面的所有的 -->    <span class="token class">.active</span>~p</span><span class="token punctuation">{</span>        <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="4-3-jie-gou-wei-lei-xuan-ze-qi">4.3 结构伪类选择器</span><a href="#4-3-jie-gou-wei-lei-xuan-ze-qi" class="header-anchor">.</a></h4><p>格式   <strong>selector:pseudo-classes（伪类）{}</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>h1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>p3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>li1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>li2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>li3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css">&lt;style>    <span class="token comment" spellcheck="true">/* ul的第一个子元素 */</span>    <span class="token selector">ul li<span class="token pseudo-class">:first-child</span></span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* ul的最后一个子元素 */</span>    <span class="token selector">ul li<span class="token pseudo-class">:last-child</span></span><span class="token punctuation">{</span>        <span class="token property">color</span><span class="token punctuation">:</span>pink<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*选中p1 ： 定位到父元素，选择当前的第一个元素 *， 选择当前p元素的父级元素的第一个子元素，并且是当前元素（p）才生效*/</span>    <span class="token selector">p<span class="token pseudo-class">:nth-child(2)</span></span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">/*按顺序  如果有其他元素 它的位置也算做其中之一，但是它的样式不会有任何改变*/</span>         <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">p<span class="token pseudo-class">:nth-of-type(2)</span></span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">/*按类型*/</span>         <span class="token property">color</span><span class="token punctuation">:</span>blue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/22113/image-20200619072450955.png" alt></p><h4><span id="4-4-shu-xing-xuan-ze-qi">4.4 属性选择器</span><a href="#4-4-shu-xing-xuan-ze-qi" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>demo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>links item first<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>links item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/12.html<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>links item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>images/12.png<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>links item<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>links item<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>first<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>links item last<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>6<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css"><code class="language-css"><span class="token selector">&lt;style>    <span class="token class">.demo</span> a</span><span class="token punctuation">{</span>        <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>        <span class="token property">display</span><span class="token punctuation">:</span>block<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>        <span class="token property">border-radius</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>        <span class="token property">background</span><span class="token punctuation">:</span><span class="token hexcode">#270066</span><span class="token punctuation">;</span>        <span class="token property">text-align</span><span class="token punctuation">:</span>center<span class="token punctuation">;</span>        <span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span>        <span class="token property">text-decoration</span><span class="token punctuation">:</span>none<span class="token punctuation">;</span>        <span class="token property">margin-right</span><span class="token punctuation">:</span><span class="token number">5</span>px<span class="token punctuation">;</span>        <span class="token property">font</span><span class="token punctuation">:</span>bold <span class="token number">20</span>px/<span class="token number">50</span>px Arial<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        标签[属性名=属性值]{}        [属性名=属性值(可以是正则表达式)]        = 绝对等于(属性值及个数都相等)        *= 包含等于        ^= 以什么开头        $= 以什么结尾        ...        ...    */</span>    <span class="token comment" spellcheck="true">/*        存在id=first的元素 选中 背景变红    */</span>    <span class="token selector">a<span class="token attribute">[id='first']</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span>red    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*        存在class=links 背景变绿    */</span>    <span class="token comment" spellcheck="true">/*变不了绿 因为所有class 至少有"links item"组成，而"links item" != "links  (绝对等于)" */</span>    <span class="token selector">a<span class="token attribute">[class='links']</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span>green<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*变绿不行 那么 全变黄了; 这个只要包含 links 就可以改变样式" */</span>    <span class="token selector">a<span class="token attribute">[class*='links']</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span>yellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/*选择href属性值中以http开头 变橙色*/</span>    <span class="token selector">a<span class="token attribute">[href^='http']</span></span><span class="token punctuation">{</span>        <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>    <span class="token punctuation">}</span>&lt;/style><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="5-mei-hua-wang-ye">5.美化网页</span><a href="#5-mei-hua-wang-ye" class="header-anchor">.</a></h3><h4><span id="5-1-wei-shi-me-yao-mei-hua-ye-mian">5.1 为什么要美化页面</span><a href="#5-1-wei-shi-me-yao-mei-hua-ye-mian" class="header-anchor">.</a></h4><ul><li>有效的传递页面信息</li><li>美化页面，页面漂亮，才能吸引用户</li><li>凸显页面的主题</li><li>提高用户的体验</li></ul><p>span标签：重点要突出的字，使用span标签括起来</p><h4><span id="5-2-zi-ti-yang-shi-chang-yong">5.2 字体样式（常用）</span><a href="#5-2-zi-ti-yang-shi-chang-yong" class="header-anchor">.</a></h4><ul><li>font-family 字体</li><li>font-size 字体大小</li><li>font-weight 字体粗细</li><li>color 字体颜色</li><li></li></ul><h4><span id="5-3-wen-ben-yang-shi-chang-yong">5.3 文本样式（常用）</span><a href="#5-3-wen-ben-yang-shi-chang-yong" class="header-anchor">.</a></h4><ul><li><p>颜色 color</p><ul><li>单词 red</li><li>RGB 红绿蓝 rgb(r,g,b) 或 #——</li><li>RGBA 红绿蓝透明度 rgba(r,g,b,a);</li></ul></li><li><p>文本对齐方式 text-align </p><ul><li>center</li><li>left</li><li>right</li></ul></li><li><p>首行缩进 text-indent</p></li><li><p>行高 line-height    <mark>行高 与 块的高度一致 文本就可以上下居中</mark></p></li><li><p>装饰 text-decoration</p><ul><li>underline 下划线</li><li>line-through 中划线</li><li>overline 上划线</li><li>none 去划线</li></ul></li><li><p><mark>文本图片垂直对齐 </mark>vertical-align</p><ul><li>top</li><li><strong>middle</strong></li><li>bottom</li></ul><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*因为图片-文本垂直居中对齐 是图片和文字相对的，所以两个都要设置*/</span>          <span class="token selector">img,span</span><span class="token punctuation">{</span>               <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>           <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>武当王也，拜见老天师<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p><img src="/2020/06/20/22113/image-20200619092336196.png" alt="image-20200619092336196"></p><h4><span id="5-4-chao-lian-jie-wei-lei">5.4 超链接伪类</span><a href="#5-4-chao-lian-jie-wei-lei" class="header-anchor">.</a></h4><ul><li><p>link  未访问的链接</p></li><li><p>visited 已访问的链接</p></li><li><p><strong>hover</strong> 鼠标悬浮在链接上</p></li><li><p>active 被选择的链接</p><p><strong>1.hover的声明必须在link和visited之后</strong> </p><p><strong>2.active的声明必须在hover之后</strong></p></li></ul><h4><span id="5-5-wen-ben-yin-ying-xin-te-xing">5.5 文本阴影（新特性）</span><a href="#5-5-wen-ben-yin-ying-xin-te-xing" class="header-anchor">.</a></h4><ul><li>text-shadow：阴影颜色  水平偏移  垂直偏移  阴影半径</li></ul><h4><span id="5-6-lie-biao">5.6 列表</span><a href="#5-6-lie-biao" class="header-anchor">.</a></h4><ul><li>list-style：none 去掉圆点<ul><li>circle 空心圆</li><li>decimal 数字</li><li>square 正方形</li><li>。。。</li></ul></li></ul><h4><span id="5-7-bei-jing">5.7 背景</span><a href="#5-7-bei-jing" class="header-anchor">.</a></h4><ul><li>背景颜色 background-color</li><li>背景图片 background-image ：url(“”)</li><li>平铺 background-repeat<ul><li>默认平铺的 repeat</li><li>repeat-x</li><li>repeat-y</li><li>no-repeat</li></ul></li><li>background ：颜色  图片  图片位置（）  平铺方式</li></ul><h4><span id="5-8-jian-bian">5.8 渐变</span><a href="#5-8-jian-bian" class="header-anchor">.</a></h4><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*例子*/</span><span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#52ACFF</span><span class="token punctuation">;</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span><span class="token number">180</span>deg, <span class="token hexcode">#52ACFF</span> <span class="token number">25%</span>, <span class="token hexcode">#FFE32C</span> <span class="token number">100%</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4><span id="5-9-he-zi-mo-xing">5.9 盒子模型</span><a href="#5-9-he-zi-mo-xing" class="header-anchor">.</a></h4><ul><li><p>margin：外边距</p></li><li><p>padding：内边距</p></li><li><p>border：边框</p></li></ul><p><img src="/2020/06/20/22113/image-20200619110600410.png" alt="image-20200619110600410"></p><h5><span id="5-9-1-bian-kuang-border-cu-xi-yang-shi-yan-se">5.9.1 边框 border：粗细 样式 颜色</span><a href="#5-9-1-bian-kuang-border-cu-xi-yang-shi-yan-se" class="header-anchor">.</a></h5><ol><li>边框的粗细</li><li>边框的样式</li><li>边框的颜色</li></ol><h4><span id="5-10-yuan-jiao-bian-kuang"><mark>5.10 圆角边框</mark></span><a href="#5-10-yuan-jiao-bian-kuang" class="header-anchor">.</a></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token comment" spellcheck="true">/*                圆角： >= 宽度                小边宽度构造源            */</span>            <span class="token selector">div</span><span class="token punctuation">{</span>                <span class="token property">float</span><span class="token punctuation">:</span>left<span class="token punctuation">;</span>                <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>                <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">span</span><span class="token punctuation">{</span>                <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">div<span class="token pseudo-class">:nth-child(1)</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid red<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">div<span class="token pseudo-class">:nth-child(2)</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid red<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100</span>px <span class="token number">100</span>px <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">div<span class="token pseudo-class">:nth-child(2)</span> span</span><span class="token punctuation">{</span>                <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token selector">div<span class="token pseudo-class">:nth-child(3)</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid red<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">30</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">div<span class="token pseudo-class">:nth-child(4)</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid red<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">div<span class="token pseudo-class">:nth-child(5)</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid red<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">div<span class="token pseudo-class">:nth-child(5)</span> span</span><span class="token punctuation">{</span>                <span class="token property">line-height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>             <span class="token punctuation">}</span>            <span class="token selector">div<span class="token pseudo-class">:nth-child(6)</span></span><span class="token punctuation">{</span>                <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid red<span class="token punctuation">;</span>                <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>       <span class="token comment" spellcheck="true">&lt;!--    border-radius    --></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>100px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>100px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>30px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>50px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>100px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>1000px<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/22113/image-20200619115428347.png" alt="image-20200619115428347"></p><h4><span id="5-11-he-zi-yin-ying"><mark>5.11 盒子阴影</mark></span><a href="#5-11-he-zi-yin-ying" class="header-anchor">.</a></h4><p><strong>box-shadow:</strong>水平偏移  垂直偏移  模糊程度(px)  颜色</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector">div </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">10</span>px solid pink<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/*阴影 颜色 水平 垂直 模糊程度*/</span>            <span class="token property">box-shadow</span><span class="token punctuation">:</span> red <span class="token number">10</span>px <span class="token number">10</span>px <span class="token number">100</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/22113/image-20200619120531110.png" alt="image-20200619120531110"></p><h4><span id="5-12-fu-dong">5.12 浮动</span><a href="#5-12-fu-dong" class="header-anchor">.</a></h4><ul><li><p>float</p><ul><li>left</li><li>right</li></ul></li><li><p>display：</p><ul><li>inline</li><li>block</li><li>inline-block</li><li>none：消失</li></ul></li></ul><p><strong>问题</strong>：边框塌陷 </p><p><strong>没有使用浮动</strong>紫色的是父级边框</p><p><img src="/2020/06/20/22113/image-20200619125625442.png" alt="没有使用浮动"></p><p><strong>使用浮动后</strong>紫色边框被压扁了</p><p><img src="/2020/06/20/22113/image-20200619125923675.png" alt="使用浮动后"></p><p><strong>解决方法</strong>：</p><ul><li>clear<ul><li>left</li><li>right</li><li>both</li></ul></li></ul><h4><span id="5-13-fu-ji-bian-kuang-ta-xian">5.13 父级边框塌陷</span><a href="#5-13-fu-ji-bian-kuang-ta-xian" class="header-anchor">.</a></h4><p><strong>1.将父级边框高度设置到比浮动高度大（比较LOW）</strong></p><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.father</span> </span><span class="token punctuation">{</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">47</span>, <span class="token number">12</span>, <span class="token number">161</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/22113/image-20200619133432172.png" alt="image-20200619133432172"></p><p><strong>2.增加一个空的div 设置clear 清除浮动</strong></p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">            <span class="token selector"><span class="token class">.father</span> </span><span class="token punctuation">{</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">47</span>, <span class="token number">12</span>, <span class="token number">161</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.father</span>  div<span class="token pseudo-class">:nth-of-type(1)</span> </span><span class="token punctuation">{</span>                <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">2</span>px solid red<span class="token punctuation">;</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* display: inline-block; */</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.father</span>  div<span class="token pseudo-class">:nth-of-type(2)</span> </span><span class="token punctuation">{</span>                <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">2</span>px solid red<span class="token punctuation">;</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* display: inline-block; */</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.father</span>  div<span class="token pseudo-class">:nth-of-type(3)</span> </span><span class="token punctuation">{</span>                <span class="token property">border</span><span class="token punctuation">:</span><span class="token number">2</span>px solid red<span class="token punctuation">;</span>                <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">/* display: inline-block; */</span>            <span class="token punctuation">}</span>            <span class="token selector"><span class="token class">.clear</span></span><span class="token punctuation">{</span>                <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>                <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">padding</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid darkgoldenrod            <span class="token punctuation">}</span>        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2.png<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>img</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>武当王也,拜见老天师！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- 增加空div clear清除浮动 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>clear<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/22113/image-20200619133010045.png" alt="image-20200619133010045"></p><p><strong>3.overflow 溢出  在父级元素中添加该样式</strong></p><ul><li>hidden 内容超过容器部分隐藏</li><li>scroll  以滚动条方式 容纳全部内容</li></ul><p><strong>hidden</strong></p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector"><span class="token class">.father</span> </span><span class="token punctuation">{</span>     <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">47</span>, <span class="token number">12</span>, <span class="token number">161</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* height: 1000px; */</span>     <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/22113/image-20200619134516220.png" alt="image-20200619134516220"></p><p><strong>Scroll</strong></p><pre class="line-numbers language-css"><code class="language-css"> <span class="token selector"><span class="token class">.father</span> </span><span class="token punctuation">{</span>     <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid <span class="token function">rgb</span><span class="token punctuation">(</span><span class="token number">47</span>, <span class="token number">12</span>, <span class="token number">161</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">/* height: 1000px; */</span>     <span class="token property">overflow</span><span class="token punctuation">:</span> scroll<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/22113/image-20200619134056874.png" alt="image-20200619134056874"></p><ol start="4"><li>通过 伪类 :after实现</li></ol><pre class="line-numbers language-css"><code class="language-css"><span class="token selector"><span class="token class">.father</span><span class="token pseudo-element">:after</span> </span><span class="token punctuation">{</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>小结</strong></p><ol><li><p>设置父元素的高度</p><p>简单，元素假设没有固定的高度，就会被限制</p></li><li><p>浮动元素后面添加空div</p><p>简单，代码中尽量避免空div</p></li><li><p>overflow</p><p>简单，下拉的一些场景避免使用</p></li><li><p>父类添加一个伪类，after</p><p>写法复杂一点，但是没有副作用，推荐使用</p></li></ol><h4><span id="dui-bi">对比</span><a href="#dui-bi" class="header-anchor">.</a></h4><ul><li>display<ul><li>方向不可控制</li></ul></li><li>float<ul><li>浮动起来的话会脱离标准文档流，所以要解决父级边框塌陷问题</li></ul></li></ul><h4><span id="5-14-ding-wei">5.14 定位</span><a href="#5-14-ding-wei" class="header-anchor">.</a></h4><h5><span id="5-14-1-xiang-dui-ding-wei">5.14.1 相对定位</span><a href="#5-14-1-xiang-dui-ding-wei" class="header-anchor">.</a></h5><ul><li>相对于原来的位置进行偏移</li><li>position：relation</li><li>他仍然在标准文件流中</li></ul><h5><span id="5-14-2-jue-dui-ding-wei">5.14.2 绝对定位</span><a href="#5-14-2-jue-dui-ding-wei" class="header-anchor">.</a></h5><ul><li><p>position：absolute</p></li><li><p>没有父级元素的前提下，相对于浏览器定位</p></li><li><p>假如父级元素存在定位，我们通常会相对于父级元素进行偏移，在父级元素范围内移动</p></li></ul><p>相对于父级或浏览器的位置，进行制定的偏移，绝对定位的话，它不在标准文档流中，原来的位置不会保留</p><h5><span id="5-14-3-gu-ding-ding-wei">5.14.3 固定定位</span><a href="#5-14-3-gu-ding-ding-wei" class="header-anchor">.</a></h5><ul><li>position：fixed</li></ul><h5><span id="5-14-4-z-index">5.14.4 z-index</span><a href="#5-14-4-z-index" class="header-anchor">.</a></h5><ul><li>0 - 999</li></ul><p><strong>opacity</strong> 背景透明度(&lt;1)</p><p>filter:Alpha(opacity=50)</p><blockquote><p>margin : 0 auto; 居中的前提</p><p>要求： 块元素， 块元素有固定的宽度</p></blockquote><p>###</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript入门(行为层) -- B站狂神说Java笔记</title>
      <link href="/2020/06/20/11091.html"/>
      <url>/2020/06/20/11091.html</url>
      
        <content type="html"><![CDATA[<h2><span id="javascript-ru-men-xing-wei-ceng-b-zhan-kuang-shen-shuo-java-bi-ji">JavaScript入门(行为层) – B站狂神说Java笔记</span><a href="#javascript-ru-men-xing-wei-ceng-b-zhan-kuang-shen-shuo-java-bi-ji" class="header-anchor">.</a></h2><h1><span id="jquery-zhong-wen-wen-dang"></span><a href="#jquery-zhong-wen-wen-dang" class="header-anchor">.</a></h1><h2><span id="1-shi-me-shi-javascript">1、 什么是JavaScript？</span><a href="#1-shi-me-shi-javascript" class="header-anchor">.</a></h2><ul><li><p>javascript是 一门世界上最流行的脚本语言</p></li><li><p>Java、JavaScript没关系</p></li><li><p>javascript 10天就开发出来了</p></li><li><p>ECMAScript是javaScript的一个标准</p></li></ul><p><mark>一个合格的后端人员，必须要精通JavaScript</mark></p><h2><span id="2-kuai-su-ru-men">2、快速入门</span><a href="#2-kuai-su-ru-men" class="header-anchor">.</a></h2><h3><span id="2-1-yin-ru-javascript">2.1 引入JavaScript</span><a href="#2-1-yin-ru-javascript" class="header-anchor">.</a></h3><p>1.内部标签</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">//.........</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2.外部引入</p><pre class="line-numbers language-html"><code class="language-html">//js文件内部写 js //html 引用js文件<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>abc.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-2-ji-ben-yu-fa-ru-men">2.2 基本语法入门</span><a href="#2-2-ji-ben-yu-fa-ru-men" class="header-anchor">.</a></h3><h4><span id="1-bian-liang">1.变量</span><a href="#1-bian-liang" class="header-anchor">.</a></h4><ul><li><p>定义变量</p><ul><li>var num = 1；</li><li>var name = “lmk”；</li></ul><blockquote><p>javascript 严格区分大小写</p></blockquote><blockquote><p>console.log(变量名)  在浏览器控制台打印数据</p></blockquote></li></ul><h4><span id="2-shu-ju-lei-xing">2.数据类型</span><a href="#2-shu-ju-lei-xing" class="header-anchor">.</a></h4><p>数值、文本、图形、音频、视频。。。</p><p><mark>number</mark></p><blockquote><p>js 不区分小数和整数</p></blockquote><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token number">123</span> <span class="token comment" spellcheck="true">//整数 123</span><span class="token number">123.1</span> <span class="token comment" spellcheck="true">//浮点数 123.1</span><span class="token number">1.123e3</span> <span class="token comment" spellcheck="true">//科学计数法</span><span class="token operator">-</span><span class="token number">99</span> <span class="token comment" spellcheck="true">//负数</span><span class="token number">NaN</span> <span class="token comment" spellcheck="true">// not a number</span><span class="token number">Infinity</span> <span class="token comment" spellcheck="true">// 无限大</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><mark>字符串</mark></p><ul><li>‘abc’</li><li>“abc”</li></ul><p><mark>布尔值</mark></p><ul><li>true</li><li>false</li></ul><p><mark>null 和 undefined</mark></p><ul><li>null 空</li><li>undefined 未定义</li></ul><p><mark>数组</mark></p><p>一些类型相同的对象，js中不需要这样</p><pre><code>var arr = [1,2,3,&quot;4&quot;];new Array(1,2,3,&quot;4&quot;);</code></pre><p><mark>对象</mark></p><p>对象是大括号，数组是中括号</p><blockquote><p>每个属性之间使用逗号隔开，最后一个不需要添加</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//Person person = new Person(1,2,3,4);</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'lmk'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>    tags<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span><span class="token string">'java'</span><span class="token punctuation">,</span><span class="token string">'c++'</span><span class="token punctuation">,</span><span class="token string">'python'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>去对象的值</p><pre><code>person.name&gt;&quot;lmk&quot;</code></pre><p><strong>逻辑运算</strong></p><pre class="line-numbers language-javaScript"><code class="language-javaScript">&&|||<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>比较运算符</strong></p><pre><code>=== 等于=== 绝对等于 值要等、类型也要相等</code></pre><p>这是一个js的缺陷 ，坚持不用==比较</p><p>须知：</p><ul><li>NaN === NaN // false 这个与所有的数值都不相等，包括自己</li><li>只能用 isNaN()方法判断</li></ul><p>浮点数问题：精度问题</p><pre class="line-numbers language-javascript"><code class="language-javascript">Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0.00000001</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="2-3-yan-ge-jian-cha-mo-shi">2.3 严格检查模式</span><a href="#2-3-yan-ge-jian-cha-mo-shi" class="header-anchor">.</a></h3><pre class="line-numbers language-js"><code class="language-js"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 必须写在第一行 就会严格检查 下面 i = 1; 会报错</span><span class="token comment" spellcheck="true">//全局变量</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//ES6中 局部变量 建议使用</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/11091/image-20200619200342403.png" alt="严格检查"></p><hr><p><img src="/2020/06/20/11091/image-20200619200359165.png" alt="普通"></p><h2><span id="3-shu-ju-lei-xing">3、 数据类型</span><a href="#3-shu-ju-lei-xing" class="header-anchor">.</a></h2><h3><span id="3-1-zi-fu-chuan">3.1 字符串</span><a href="#3-1-zi-fu-chuan" class="header-anchor">.</a></h3><p>1.正常字符串我们使用 单引号，或者双引号包裹</p><p>2.注意转义字符 \</p><pre class="line-numbers language-js"><code class="language-js">\'  单引号\n  换行\t  制表\u4e2d         \u#### unicode字符 ‘中’\x41     Ascll字符<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/11091/image-20200619201002952.png" alt="image-20200619201002952"></p><p>3.多行字符串编写 用反引号 包裹</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`helloworld....`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>4.模板字符串（ES6）${}</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">"lmk"</span><span class="token punctuation">;</span> <span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token template-string"><span class="token string">`你好呀，</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2020/06/20/11091/image-20200619201707453.png" alt="image-20200619201707453"></p><p>5.字符串长度</p><pre class="line-numbers language-js"><code class="language-js">str<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.字符串的可变性，<mark>不可变</mark></p><p><img src="/2020/06/20/11091/image-20200619202215891.png" alt="image-20200619202215891"></p><p>7.大小写转化</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//注意，这里是方法，不是属性了</span>student<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//变大写</span>student<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//变小写</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/11091/image-20200619202709214.png" alt="image-20200619202709214"></p><p>8.student.indexOf(“”); 获取指定字符串 在 student中的索引</p><p>9.substring</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token punctuation">)</span>student<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//tudent</span>student<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//tu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="3-2-shu-zu">3.2 数组</span><a href="#3-2-shu-zu" class="header-anchor">.</a></h3><p><strong>Array可以包含任意的数据类型</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>1.长度</p><pre class="line-numbers language-js"><code class="language-js">arr<span class="token punctuation">.</span>length<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注意：加入给arr.length复制，数组大小就会发生变化，如果复制过小，元素就会丢失</p><p>2.indexOf， 通过元素获得下标索引</p><p>3.<mark><strong>slice()</strong></mark>  截取array的一部分，返回一个新数组 类似于String中的substring</p><p>4.<strong>push , pop</strong></p><pre><code>push() // 压入到尾部pop() //弹出尾部元素</code></pre><ol start="5"><li><strong>unshift , shift</strong> 头部</li></ol><pre><code>unshift() // 压入到头部shift() // 弹出头部元素</code></pre><p>6.排序 sort()</p><p>7.元素反转 reverse()</p><p>8.片接 concat()</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：concat() 并没有修改数组，只是会返回一个新数组</p><p>9.<strong>连接符 join</strong></p><p>打印拼接数组，使用特定字符连接</p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token string">"c-b-a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>10.多维数组</p><pre class="line-numbers language-js"><code class="language-js">arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3><span id="3-3-dui-xiang"><mark>3.3 对象</mark></span><a href="#3-3-dui-xiang" class="header-anchor">.</a></h3><p><strong>若干个键值对，javascript中的所有的键都是字符串，值是任意对象</strong>  <em>用大括号扩起来</em></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> 对象名 <span class="token operator">=</span> <span class="token punctuation">{</span>    属性名<span class="token punctuation">:</span>属性值<span class="token punctuation">,</span>    属性名<span class="token punctuation">:</span>属性值<span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token punctuation">}</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">"lmk"</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    email <span class="token punctuation">:</span> <span class="token string">"1423928659@qq.com"</span><span class="token punctuation">,</span>    score <span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1.对象赋值</p><pre class="line-numbers language-js"><code class="language-js">Person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"liuminkai"</span><span class="token string">"liuminkai"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.<strong>使用一个不存在的对象属性，不会报错 undefined</strong></p><pre class="line-numbers language-js"><code class="language-js">person<span class="token punctuation">.</span>genderundefined<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>3<strong>.动态的删减属性</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">delete</span> person<span class="token punctuation">.</span>name<span class="token boolean">true</span>person <span class="token comment" spellcheck="true">//查看结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>4.<strong>动态的添加</strong></p><pre class="line-numbers language-js"><code class="language-js">person<span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span><span class="token string">"男"</span>person <span class="token comment" spellcheck="true">// 查看结构</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5.判断属性值是否在这个对象中 ！ xxx in xxx</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'age'</span> <span class="token keyword">in</span> person<span class="token boolean">true</span><span class="token comment" spellcheck="true">//继承</span><span class="token string">'toString'</span> <span class="token keyword">in</span> person<span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/11091/image-20200619212646790.png" alt="image-20200619212646790"></p><ol start="6"><li>判断一个属性是否是这个对象自身拥有的hasOwnProperty</li></ol><pre class="line-numbers language-js"><code class="language-js">person<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'toString'</span><span class="token punctuation">)</span><span class="token boolean">false</span>person<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'age'</span><span class="token punctuation">)</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-4-liu-cheng-kong-zhi">3.4 流程控制</span><a href="#3-4-liu-cheng-kong-zhi" class="header-anchor">.</a></h3><p>if判断</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>while循环</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token keyword">do</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for循环</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>forEach（ES5.1）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//函数</span>age<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>for in / for of</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//for  in</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//i 代表是 key </span>    <span class="token comment" spellcheck="true">//...</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//for  of</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">of</span> l<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//i 代表是 value</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="3-5-map-he-set-es6">3.5 Map 和Set （ES6）</span><a href="#3-5-map-he-set-es6" class="header-anchor">.</a></h3><p><strong>Map</strong></p><pre><code>//var map = new Map([[&#39;tom&#39;,100],[&#39;jack&#39;,90],[&#39;haha&#39;,80]]);var name = map.get(&#39;tom&#39;); //100map.set(&#39;lmk&#39;,100);// [&#39;lmk&#39;,100]</code></pre><p><strong>Set</strong>  (无序，不重复)</p><pre><code>var set = new Set([3,1,1,1,1]);set.add(2);set.delete(1);set.has(3);</code></pre><p><img src="/2020/06/20/11091/image-20200619221250133.png" alt></p><h3><span id="3-6-iterator-es6">3.6 iterator（ES6）</span><a href="#3-6-iterator-es6" class="header-anchor">.</a></h3><h4><span id="bian-li-shu-zu">遍历数组</span><a href="#bian-li-shu-zu" class="header-anchor">.</a></h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// arr.name = "212"; 早期bug 他会把name 也加进去</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//x - 1,2,3,name</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="bian-li-map">遍历Map</span><a href="#bian-li-map" class="header-anchor">.</a></h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"jack"</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"lmk"</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="bian-li-set">遍历Set</span><a href="#bian-li-set" class="header-anchor">.</a></h4><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token keyword">set</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> x <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="4-han-shu-ji-mian-xiang-dui-xiang">4、 函数及面向对象</span><a href="#4-han-shu-ji-mian-xiang-dui-xiang" class="header-anchor">.</a></h2><h3><span id="4-1-han-shu-ding-yi-ji-bian-liang-zuo-yong-yu">4.1 函数定义及变量作用域</span><a href="#4-1-han-shu-ding-yi-ji-bian-liang-zuo-yong-yu" class="header-anchor">.</a></h3><h4><span id="han-shu-de-ding-yi"><mark><strong>函数的定义</strong></mark></span><a href="#han-shu-de-ding-yi" class="header-anchor">.</a></h4><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//方式一</span><span class="token keyword">function</span> <span class="token function">方法名</span><span class="token punctuation">(</span>参数<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> 返回值<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//方式二</span><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>如果没有执行return，函数执行完也会放回结果，结果是</p><p>undefined</p></blockquote><p><strong>调用函数</strong></p><pre><code>函数名(参数);</code></pre><p><strong>手动抛出异常</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">!=</span> <span class="token string">"number"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    thown <span class="token string">'Not a Number'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>arguments</strong></p><blockquote><p>arguments 是javaScript 免费赠送的关键字</p><p>代表，传递进来的所有的参数，是一个数组</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> abs <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">-</span>x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>问题:arguments 包含所有的参数，我们有时候想使用多余的参数来进行附加操作，需要排除已有参数</p><p><strong>rest（ES6）</strong></p><p>获取除了已经定义的参数之外的所有参数 （可变参数）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token operator">...</span>rest<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"a=>"</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"b=>"</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//会将除了a，b的所有参数变成一个数组</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="bian-liang-de-zuo-yong-yu"><strong>变量的作用域</strong></span><a href="#bian-liang-de-zuo-yong-yu" class="header-anchor">.</a></h4><p>在函数体中声明，则在函数体外不能使用</p><p>如果想用（后面 闭包）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span>x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// uncaught ReferenceError: x is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>提升变量的作用域</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"x"</span> <span class="token operator">+</span> y<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">'y'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 后定义 y</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果： xundefined</p><p>说明：js执行引擎，自动提升了y的声明，但是不会提升变量y的赋值(定义变量提前声明赋值)</p><p>这个是Javascript 建立之初就存在的特性，要养成规范</p><pre><code>function a(){    var y     var x = &quot;x&quot; + y;    console.og(x);    y = &#39;y&#39;; // 后定义 y}</code></pre><p><img src="/2020/06/20/11091/image-20200620072111763.png" alt="image-20200620072111763"></p><h5><span id="quan-ju-han-shu"><strong>全局函数</strong></span><a href="#quan-ju-han-shu" class="header-anchor">.</a></h5><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//全局变量</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局对象<strong>window</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">"xxx"</span><span class="token punctuation">;</span><span class="token function">alert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// xxx</span><span class="token function">alert</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// xxx</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>alert()这个函数本身也是一个<mark>window</mark>变量</p><pre><code>var x = &quot;xxx&quot;;window.alert(x); // xxxvar old_alert = window.alert;window.alert = function (){    console.log(&quot;...&quot;);}window.alert(123);//失败 ...window.old_alert(456);// 456//恢复window.alert = old_alert;window.alert(123);// 123</code></pre><p><video src="1.mp4"></video></p><h5><span id="quan-ju-zuo-yong-yu"><strong>全局作用域</strong></span><a href="#quan-ju-zuo-yong-yu" class="header-anchor">.</a></h5><p>javascript实际上只有一个全局作用域，任何变量（函数也可视为变量），假设没有在函数作用范围内找到，就会向外查找，如果在全局作用域中都没有找到，报错</p><h5><span id="ju-bu-zuo-yong-yu"><strong>局部作用域</strong></span><a href="#ju-bu-zuo-yong-yu" class="header-anchor">.</a></h5><p>在ES6之前</p><p>局部作用域有问题</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 问题，i 出了作用域还能用</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/11091/image-20200620083302887.png" alt="image-20200620083302887"></p><p>在ES6，引入了<strong>let关键字</strong>，解决了局部作用域冲突</p><pre><code>function a(){    for(let i = 0; i &lt; 4; i++){        console.log(i);    }    console.log(i+1);}</code></pre><p><img src="/2020/06/20/11091/image-20200620083614444.png" alt="image-20200620083614444"></p><h5><span id="chang-liang">常量</span><a href="#chang-liang" class="header-anchor">.</a></h5><p>在ES6之前，怎么定义常量：只有用大写字母命令的变量就是常量（建议不要修改，很脑残，实际上还是变量）</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> PI <span class="token operator">=</span> <span class="token string">'3.14'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3.14</span>PI <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>PI<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在ES6，引入<strong>const常量关键字</strong></p><pre><code>const PI = &#39;3.14&#39;;PI = &#39;2&#39;;</code></pre><p><img src="/2020/06/20/11091/image-20200620084919380.png" alt></p><h4><span id="gui-fan">规范</span><a href="#gui-fan" class="header-anchor">.</a></h4><p>由于我们所有的全局变量都会绑定到我们的window上，如果不同的js文件，使用了相同的全局变量，冲突 -&gt; 如何能够减少冲突？<strong>自定义一个唯一空间名字中，所有的全局变量都把绑定到这个唯一空间名字上</strong></p><pre class="line-numbers language-js"><code class="language-js"> <span class="token comment" spellcheck="true">// 唯一全局变量</span> <span class="token keyword">var</span> lmk <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//定义全局变量</span>lmk<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"liuminkai"</span><span class="token punctuation">;</span>lmk<span class="token punctuation">.</span>add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-2-bi-bao">4.2 闭包</span><a href="#4-2-bi-bao" class="header-anchor">.</a></h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">lazy_sum</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回的是一个函数</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-3-jian-tou-han-shu">4.3 箭头函数</span><a href="#4-3-jian-tou-han-shu" class="header-anchor">.</a></h3><h3><span id="4-4-fang-fa">4.4 方法</span><a href="#4-4-fang-fa" class="header-anchor">.</a></h3><blockquote><p>方法就是把函数放在对象的里面，对象只有两个东西：属性和方法</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义方法 age</span><span class="token keyword">var</span> lmk <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'liuminkai'</span><span class="token punctuation">,</span>    birth <span class="token punctuation">:</span> <span class="token number">1999</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 今年 - 出生的年</span>        <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> now <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用</span>lmk<span class="token punctuation">.</span>name<span class="token punctuation">;</span>lmk<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="this-dai-biao-shi-me">this代表什么？</span><a href="#this-dai-biao-shi-me" class="header-anchor">.</a></h4><p><strong>对象本身</strong></p><p>上面定义方法还可以拆开</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义方法的另一种方式 拆开</span><span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 今年 - 出生的年</span>    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> now <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> lmk <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'liuminkai'</span><span class="token punctuation">,</span>    birth <span class="token punctuation">:</span> <span class="token number">1999</span>    age <span class="token punctuation">:</span> getAge<span class="token punctuation">}</span>lmk<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//ok</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//NaN  因为如果你调用getAge() 那么方法里的 this 就指向 window对象 ，该对象是没有birth这个属性的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><mark>this是无法指向的，是默认指向调用它的对象</mark></p><h4><span id="apply">apply</span><a href="#apply" class="header-anchor">.</a></h4><blockquote><p>在js中可以控制this的指向</p></blockquote><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//定义方法的另一种方式 拆开</span><span class="token keyword">function</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 今年 - 出生的年</span>    <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> now <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>birth<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> lmk <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">'liuminkai'</span><span class="token punctuation">,</span>    birth <span class="token punctuation">:</span> <span class="token number">1999</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> getAge<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//apply(应用的对象,参数列表)</span>getAge<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>lmk<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ok this 指向 lmk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/11091/image-20200620091652219.png" alt></p><h2><span id="5-nei-bu-dui-xiang">5、 内部对象</span><a href="#5-nei-bu-dui-xiang" class="header-anchor">.</a></h2><blockquote><p>标准对象 : 万物皆对象 – number对象 。。。</p></blockquote><p><img src="/2020/06/20/11091/image-20200620092256732.png" alt></p><h3><span id="5-1-date">5.1 Date</span><a href="#5-1-date" class="header-anchor">.</a></h3><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> now <span class="token operator">=</span>  <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Sat Jun 20 2020 09:24:14 GMT+0800 (中国标准时间)</span>now<span class="token punctuation">.</span><span class="token function">getFullYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 年</span>now<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 月 0 - 11</span>now<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 日 -------注意</span>now<span class="token punctuation">.</span><span class="token function">getDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 星期</span>now<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 时</span>now<span class="token punctuation">.</span><span class="token function">getMinutes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 分</span>now<span class="token punctuation">.</span><span class="token function">getSeconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 秒</span>now<span class="token punctuation">.</span><span class="token function">toLocaleString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// "2020/6/20 上午9:31:29"</span>now<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 时间戳</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="5-2-json">5.2 JSON</span><a href="#5-2-json" class="header-anchor">.</a></h3><p>早期，所有数据传输习惯使用XML文件</p><p><strong>JSON是什么？</strong></p><ul><li><a href="https://baike.baidu.com/item/JSON" target="_blank" rel="noopener">JSON</a>(<a href="https://baike.baidu.com/item/JavaScript" target="_blank" rel="noopener">JavaScript</a> Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。</li><li>简洁和清晰的<strong>层次结构</strong>使得 JSON 成为理想的数据交换语言。 </li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在javascript中一切皆为对象、任何js支持的类型都可以用JSON来表示</p><ul><li>对象都用{}</li><li>数组都用[]</li><li>所有的键值对 都用 key : value</li></ul><h5><span id="json-zi-fu-chuan-he-js-dui-xiang-de-zhuan-huan">JSON 字符串和JS对象的转换</span><a href="#json-zi-fu-chuan-he-js-dui-xiang-de-zhuan-huan" class="header-anchor">.</a></h5><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">"lmk"</span><span class="token punctuation">,</span>    age <span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    gender <span class="token punctuation">:</span> <span class="token string">"男"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//对象转化为 JSON字符串 </span><span class="token keyword">var</span> json <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//JSON 字符串串 转为 js对象 </span><span class="token comment" spellcheck="true">// key的引号加上 不然报错</span><span class="token keyword">var</span> newObj <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'{"name":"liuminkai","age":1}'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/11091/image-20200620110612039.png" alt="JS对象 --&gt; JSON字符串"></p><p><img src="/2020/06/20/11091/image-20200620110839849.png" alt="JSON字符串 --&gt; JS对象"></p><p><strong>JSON与JS对象的区别</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">'1'</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">'{"a":"1","b":1}'</span> <span class="token comment" spellcheck="true">//字符串 内容是对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="5-3-ajax-lue">5.3 Ajax(略)</span><a href="#5-3-ajax-lue" class="header-anchor">.</a></h3><ul><li>原生的js写法 xhr异步请求</li><li>jQuery封装好的方法 $(“#name”).ajax(“”)</li><li>axios请求</li></ul><h2><span id="6-mian-xiang-dui-xiang-bian-cheng">6 、面向对象编程</span><a href="#6-mian-xiang-dui-xiang-bian-cheng" class="header-anchor">.</a></h2><h3><span id="6-1-shi-me-shi-mian-xiang-dui-xiang">6.1 什么是面向对象</span><a href="#6-1-shi-me-shi-mian-xiang-dui-xiang" class="header-anchor">.</a></h3><ul><li><p>JavaScript、java、C#、、、、  </p><ul><li>类：模板</li><li>对象：具体的实例</li></ul></li><li><p>在javaScript这个需要我们换一下思维</p><ul><li><p><strong>原型对象（可理解为父类）</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> student <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span>    work <span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" 写作业..."</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> lmk <span class="token operator">=</span> <span class="token punctuation">{</span>    name <span class="token punctuation">:</span> <span class="token string">"liuminkai"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// lmk 的原型 是 student  这么看 这个原型可以随意的换</span>lmk<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> student<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><pre><code>//类的定义看 下面```![](image-20200620113025346.png)&gt;  class继承（ES6）**以前给对象新增方法**- 要么在原对象里直接加- 要么拿到它的原型对象增加一个方法```js//以前定义 一个类//构造函数function Student(name) {    this.name = name;    //hello : function(){  }}// 给student 新增一个方法Student.prototype.hello = function(){    alert(&quot;hello&quot;);}//继承方法在上面  原型</code></pre><pre><code>![image-20200620120408164](image-20200620120408164.png)**ES6之后**：class1.定义一个类    ```js    //定义一个学生的类    class Student{        constructor(name){            this.name = name;        }        hello(){            alert(&#39;hello&#39;);        }    }    //小学生 继承 学生    class pupil extends Student{        constructor(name,grade){            super(name);            this.grade = grade;        }        myIdentity(){            console.log(&quot;我是一名小学生&quot;);        }     }</code></pre><p><strong>class继承本质：还是查看原型</strong></p><pre><code>![image-20200620120915598](image-20200620120915598.png)</code></pre><h4><span id="yuan-xing-lian">原型链</span><a href="#yuan-xing-lian" class="header-anchor">.</a></h4><blockquote><p>_<em>proto_</em></p></blockquote><p><img src="/2020/06/20/11091/image-20200620123248846.png" alt="image-20200620123248846"></p><p><a href="https://baijiahao.baidu.com/s?id=1604426873229560999&wfr=spider&for=pc" target="_blank" rel="noopener">秒通原型和原型链</a></p><h2><span id="7-cao-zuo-bom-yuan-su-chong-dian">7、 操作BOM元素（重点）</span><a href="#7-cao-zuo-bom-yuan-su-chong-dian" class="header-anchor">.</a></h2><p>BOM : 浏览器对象模型</p><p>JavaScript 和 浏览器的关系？</p><p>JavaScript的诞生是为了能够让他在浏览器中运行</p><ul><li>IE6-11</li><li>Chrome</li><li>Safari</li><li>FireFox <strong>Linux</strong></li></ul><h3><span id="7-1-window-chong-yao">7.1 window(重要)</span><a href="#7-1-window-chong-yao" class="header-anchor">.</a></h3><blockquote><p>window 代表 浏览器窗口 （默认全局作用域）</p></blockquote><pre class="line-numbers language-js"><code class="language-js">window<span class="token punctuation">.</span><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>undefinedwindow<span class="token punctuation">.</span>innerHeight<span class="token number">63</span>window<span class="token punctuation">.</span>innerWidth<span class="token number">632</span>window<span class="token punctuation">.</span>outerHeight<span class="token number">63</span>window<span class="token punctuation">.</span>outerWidth<span class="token number">632</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="7-2-navigator">7.2 navigator</span><a href="#7-2-navigator" class="header-anchor">.</a></h3><blockquote><p>navigator 封装了浏览器的信息</p></blockquote><pre class="line-numbers language-js"><code class="language-js">navigator<span class="token punctuation">.</span>appName<span class="token string">"Netscape"</span>navigator<span class="token punctuation">.</span>appVersion<span class="token string">"5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Mobile Safari/537.36"</span>navigator<span class="token punctuation">.</span>userActivationUserActivation <span class="token punctuation">{</span>hasBeenActive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> isActive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">}</span>navigator<span class="token punctuation">.</span>userAgent<span class="token string">"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/83.0.4103.97 Mobile Safari/537.36"</span>navigator<span class="token punctuation">.</span>platform<span class="token string">"Win32"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>大多数时候，我们不会使用navigator对象，因为会被认为修改</strong></p><p><mark>不建议使用这些属性来判断和编写代码</mark></p><h3><span id="7-3-screen">7.3 screen</span><a href="#7-3-screen" class="header-anchor">.</a></h3><blockquote><p>代表屏幕</p></blockquote><pre class="line-numbers language-js"><code class="language-js">screen<span class="token punctuation">.</span>widthscreen<span class="token punctuation">.</span>height<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3><span id="7-4-location-chong-yao">7.4 location (重要)</span><a href="#7-4-location-chong-yao" class="header-anchor">.</a></h3><blockquote><p>代表当前页面的URL信息</p></blockquote><pre><code>location.assign(&#39;https://liuminkai.top&#39;);</code></pre><h3><span id="7-5-document">7.5 Document</span><a href="#7-5-document" class="header-anchor">.</a></h3><blockquote><p>代表当前的页面，HTML</p></blockquote><pre><code>document.titledocumen.title = &quot;...&quot;</code></pre><ul><li><p>获取具体的文档树节点</p></li><li><p>获取cookie</p><pre><code>document.cookie&quot;&quot;//不要浏览恶意的网站 因为 他们的cookie可能是由毒的</code></pre><p><strong>劫持cookie原理</strong></p><pre><code>&lt;script src=&quot;aa.js&quot;&gt;&lt;/script&gt;&lt;!-- 恶意人员，获取你的cookie上传到他的服务器获取登录 伪造cookie 获取你的隐私--&gt;</code></pre><p>服务器端可以设置 cookie ：httpOnly:只读</p></li></ul><h3><span id="7-6-history">7.6 History</span><a href="#7-6-history" class="header-anchor">.</a></h3><blockquote><p>代表浏览器的历史记录 不建议使用</p></blockquote><pre><code>history.back()history.forword()</code></pre><h3><span id="7-7-cao-zuo-biao-dan">7.7 操作表单</span><a href="#7-7-cao-zuo-biao-dan" class="header-anchor">.</a></h3><h3><span id="7-8-cao-zuo-wen-jian">7.8 操作文件</span><a href="#7-8-cao-zuo-wen-jian" class="header-anchor">.</a></h3><h2><span id="8-cao-zuo-dom-yuan-su-chong-dian">8、 操作DOM元素 （重点）</span><a href="#8-cao-zuo-dom-yuan-su-chong-dian" class="header-anchor">.</a></h2><h3><span id="8-1-de-dao-dom">8.1 得到DOM</span><a href="#8-1-de-dao-dom" class="header-anchor">.</a></h3><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//通过标签名</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过id</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过class</span>document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//通过name</span>document<span class="token punctuation">.</span><span class="token function">getElementByName</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="8-2-geng-xin-dom">8.2 更新DOM</span><a href="#8-2-geng-xin-dom" class="header-anchor">.</a></h3><ul><li>操作文本<ul><li><code>node.innerText</code> 就是文本</li><li><code>node.innerHTML</code> 可以解析HTML代码</li></ul></li><li>操作css<ul><li><code>node.style.color</code> </li><li>。。。</li></ul></li></ul><h3><span id="8-3-shan-chu-dom">8.3 删除DOM</span><a href="#8-3-shan-chu-dom" class="header-anchor">.</a></h3><p>删除节点的步骤： 先获取父节点，再通过父节点删除自己</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>father<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>标题一<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>p2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> self <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'p1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> father <span class="token operator">=</span> self<span class="token punctuation">.</span>parentElement<span class="token punctuation">;</span>    father<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//还可以这样</span>    father<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span><span class="token function">children</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：删除多个节点的时候，children是在时刻变化的，删除节点的时候一定要注意~</p><h3><span id="8-4-cha-ru-dom">8.4 插入DOM</span><a href="#8-4-cha-ru-dom" class="header-anchor">.</a></h3><blockquote><p>前面的 innerHTML，innerHTML 也算是插入结点，当时会覆盖原有的信息 </p></blockquote><p><strong>追加</strong></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">//创建 新节点</span><span class="token keyword">var</span> child <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"tagName"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//可添加属性和属性值</span><span class="token comment" spellcheck="true">//child.setAttribute('attribute','value');</span><span class="token comment" spellcheck="true">//结点 添加值</span>child<span class="token punctuation">.</span>innerText <span class="token operator">=</span> <span class="token string">'我是新节点'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//child 追加到 father中</span>father<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>insertBefore</strong></p><pre><code>child.insertBefore(newNode,child)</code></pre><h2><span id="9-cao-zuo-biao-dan-yan-zheng">9、 操作表单(验证)</span><a href="#9-cao-zuo-biao-dan-yan-zheng" class="header-anchor">.</a></h2><ul><li>文本框 text</li><li>下拉框 select</li><li>单选框 radio</li><li>多选框 checkbox</li><li>隐藏域 hidden</li><li>密码框 password</li><li>。。。。</li></ul><p>表单目的：提交信息</p><blockquote><p>获得要提交的信息</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>women<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>女<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> user <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sex <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//要获取 单选框选中</span>    <span class="token comment" spellcheck="true">//可以通过 checked</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>提交表单(无加密)</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>psw<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>women<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/11091/image-20200620164408472.png" alt="image-20200620164408472"></p><blockquote><p>MD5工具类</p></blockquote><pre class="line-numbers language-html"><code class="language-html">&lt;script src = "https://cdn.bootcss.com/blueimp-md5/2.10.0/js/md5.min.js"><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>使用 MD５加密</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 在button增加一个onclick事件用于 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>pwd<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>women<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>encrypt()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">function</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> user <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> sex <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token string">"sex"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pwd<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>pwd<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//md5加密</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/20/11091/image-20200620165446600.png" alt="image-20200620165446600"></p><p><strong>但是，代码是有问题的，当我们提交的时候，密码会变得很长</strong></p><p><img src="/2020/06/20/11091/image-20200620165619583.png" alt="image-20200620165619583"></p><blockquote><p>优化    隐藏加密信息，添加表单验证</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!-- 添加hidden类型的input标签  --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://www.baidu.com<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">onsubmit</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>return encrypt()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>用户名:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span><span class="token punctuation">></span></span>密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>input-pwd<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>md5-pwd<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>man<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>男    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>radio<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sex<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>women<span class="token punctuation">"</span></span> <span class="token attr-name">checked</span><span class="token punctuation">></span></span>女    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>01_helloworld.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">var</span> user <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> input_pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'input-pwd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> md5_pwd <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'md5-pwd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    md5_pwd<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span>input_pwd<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//md5加密</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>input_pwd<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">""</span> <span class="token operator">||</span> user<span class="token punctuation">.</span>value <span class="token operator">===</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"请输入用户名或密码"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="10-jquery">10、jQuery</span><a href="#10-jquery" class="header-anchor">.</a></h2><p>JavaScript的jQuery库，里面存在大量的javascript的函数</p><blockquote><p>在线引用</p></blockquote><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcdn.net/ajax/libs/jquery/3.5.1/jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>$ == jQuery</p><p><code>公式: $(选择器).事件(事件函数)</code>    </p></blockquote><h1><span id="jquery-zhong-wen-wen-dang"></span><a href="#jquery-zhong-wen-wen-dang" class="header-anchor">.</a></h1><blockquote><p>操作DOM</p></blockquote><p><img src="/2020/06/20/11091/image-20200620192341469.png" alt></p><blockquote><h2><span id="xiao-ji-qiao">小技巧</span><a href="#xiao-ji-qiao" class="header-anchor">.</a></h2></blockquote><ul><li>如何巩固JS （看jQuery源码，看游戏源码）</li><li>巩固HTML，CSS（扒网站，全部down下来，删除无关的）</li></ul><p>1.layui: 弹窗</p><p>2.ElementUI：饿了么 ，快速建web</p><p>3.bootstrap：×</p><p>4.note.js</p>]]></content>
      
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云端IDE(linux服务器)</title>
      <link href="/2020/06/14/17010.html"/>
      <url>/2020/06/14/17010.html</url>
      
        <content type="html"><![CDATA[<p>有了云端ide（VSCode）就可以 随时随地 用各种设备 在网页上就可以编程了</p><h2><span id="an-zhuang-qian-ti">安装前提</span><a href="#an-zhuang-qian-ti" class="header-anchor">.</a></h2><ul><li>有台服务器</li><li>服务器安全组 配置规则 入方向 添加8080 8443端口</li></ul><p>Code-Server：<a href="https://github.com/cdr/code-server/releases/tag/3.4.0/" target="_blank" rel="noopener">https://github.com/cdr/code-server/releases/tag/3.4.0/</a></p><p>我的服务器是centos系统</p><pre><code>wget https://github.com/cdr/code-server/releases/tag/3.4.0/code-server-3.4.0-linux-x86_64.tar.gzornpm  install -g code-server</code></pre><p><img src="/2020/06/14/17010/image-20200615002332137.png" alt="没下成功,可以本地直接下载压缩包，通过xshell、xftp传过去"></p><pre class="line-numbers language-shell"><code class="language-shell"># 解压tar -zxvf code-server-3.4.0-linux-x86_64.tar.gz# 对其更名mv code-server-3.4.0-linux-x86_64 code-server<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># 进入安装目录cd code-server# 启动服务./code-server# 设置固定密码export PASSWORD="你的密码"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为8080端口一般会被占用 ，为了其他外网能够访问服务器</p><p>那么 我们可以做如下修改</p><pre class="line-numbers language-shell"><code class="language-shell"># 打开配置文件vim /root/.config/code-server/config.yaml# 修改配置bind-addr: 0.0.0.0:8443 # 默认端口auth: passwordpassword: 13fa7c9ec2398436ef7b851ccert: false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置修改完 </p><pre class="line-numbers language-shell"><code class="language-shell"># Ctrl + c 终止服务# ./code-server 再次启动服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/14/17010/image-20200615105447319.png" alt="image-20200615105447319"></p><p>使用自己电脑或者移动设备</p><p>在浏览器 地址栏输入  服务器ip地址 ：8443 （如果有域名可以绑定ip）</p><p>出现下面情况 成功</p><p><img src="/2020/06/14/17010/image-20200615110222187.png" alt="image-20200615110222187"></p><p><strong>界面</strong></p><p><strong>移动端（手机）</strong></p><p><img src="/2020/06/14/17010/Screenshot_2020-06-15-11-06-03-600_com.android.br.jpg" alt></p><p><strong>PC端</strong></p><p><img src="/2020/06/14/17010/image-20200615111439323.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 云端IDE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的自定义IDEA快捷键-部分</title>
      <link href="/2020/06/14/26561.html"/>
      <url>/2020/06/14/26561.html</url>
      
        <content type="html"><![CDATA[<h2><span id="wo-de-zi-ding-yi-idea-kuai-jie-jian">我的自定义IDEA快捷键</span><a href="#wo-de-zi-ding-yi-idea-kuai-jie-jian" class="header-anchor">.</a></h2><table><thead><tr><th>我的快捷键</th><th>描述</th></tr></thead><tbody><tr><td>Alt + ↑</td><td>当前行向上移动</td></tr><tr><td>Alt + ↓</td><td>当前行向下移动</td></tr><tr><td>Alt + ←</td><td>上一次编辑位置</td></tr><tr><td>Alt + →</td><td>下一次编辑位置</td></tr><tr><td>Alt + Shift + ↑</td><td>光标位置向外扩增选择</td></tr><tr><td>Alt + Shift + ↓</td><td>光标位置向内回退选择</td></tr><tr><td>Alt + 空格</td><td>generate(构造器,getter,setter …)</td></tr><tr><td></td><td></td></tr><tr><td>Ctrl + Alt + ↓</td><td>复制当前行到下一行</td></tr><tr><td>Ctrl + Alt + ←</td><td>上一个tab页</td></tr><tr><td>Ctrl + Alt + →</td><td>下一个tab页</td></tr><tr><td>Ctrl + Shift + ↑</td><td>光标所在位置的上一个方法</td></tr><tr><td>Ctrl + Shift + ↓</td><td>光标所在位置的下一个方法</td></tr><tr><td>Ctrl + Enter</td><td>光标所在位置下方插入新行</td></tr><tr><td>Ctrl + Shift + z</td><td>选中代码 + （if ，try ， …）</td></tr><tr><td></td><td></td></tr><tr><td>Shift + Enter</td><td>光标所在位置上方插入新行</td></tr></tbody></table><h3><span id="line-templates">line Templates</span><a href="#line-templates" class="header-anchor">.</a></h3><p><img src="/2020/06/14/26561/image-20200616205327632.png" alt="line Templates"></p><h3><span id="fang-fa-nei">方法内</span><a href="#fang-fa-nei" class="header-anchor">.</a></h3><p><strong>itar</strong> (for) – array(string)</p><pre><code>for (int i = 0; i &lt; args.length; i++) {    String arg = args[i];}</code></pre><p><strong>iter</strong> (foreach) – array(string)</p><pre><code>for (String arg : args) {}</code></pre><p><strong>ritar</strong>(r for) – array(string)</p><pre><code>for (int i = args.length - 1; i &gt;= 0; i--) {     String arg = args[i];}</code></pre><p><strong>itli</strong>(for list)</p><pre><code>for (int i = 0; i &lt; list.size(); i++) {    Object o =  list.get(i);}</code></pre><p><strong>itit</strong>(while 迭代器)</p><pre><code> while (iterator.hasNext()) {    Object next =  iterator.next();}</code></pre><p><strong>iten</strong>(while enum)</p><pre><code>while (enumeration.hasMoreElements()) {    Object nextElement =  enumeration.nextElement();}</code></pre><p><strong>itco</strong>(for 迭代器 集合)</p><pre><code>for (Iterator iterator = collection.iterator(); iterator.hasNext(); ) {    Object next =  iterator.next();}</code></pre><p><strong>souf</strong></p><pre><code>System.out.printf()</code></pre><p>serr</p><pre><code>System.err.println();</code></pre><p>soutv(打印可以直接访问的 变量 参数 )</p><pre><code>System.out.println(&quot;args = &quot; + args);</code></pre><p>soutp(打印方法参数)</p><pre><code>System.out.println(&quot;args = [&quot; + args + &quot;]&quot;);</code></pre><p>soutm（打印光标所在的 类名.方法名）</p><pre><code>System.out.println(&quot;io_05_inputStream.fun&quot;);</code></pre><h3><span id="fang-fa-nei-wai">方法内外</span><a href="#fang-fa-nei-wai" class="header-anchor">.</a></h3><p>prsf</p><pre><code>private static final </code></pre><p>psf</p><pre><code>public static final</code></pre><p>psfs</p><pre><code>public static final String </code></pre><p>psfi</p><pre><code>public static final int </code></pre><h3><span id="fang-fa-wai">方法外</span><a href="#fang-fa-wai" class="header-anchor">.</a></h3><p>sbc</p><pre><code>////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</code></pre><p>noInstance</p><pre><code>private CLassName() {    //no instance}</code></pre><p>newInstance</p>]]></content>
      
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于更改my.ini client字符集仍然是GBK的问题-已解决</title>
      <link href="/2020/06/11/10249.html"/>
      <url>/2020/06/11/10249.html</url>
      
        <content type="html"><![CDATA[<h2><span id="guan-yu-geng-gai-my-ini-client-zi-fu-ji-mysql-cmd-reng-ran-shi-gbk-de-wen-ti-windows-yi-jie-jue">关于更改my.ini client字符集，mysql cmd仍然是GBK的问题（windows）-已解决</span><a href="#guan-yu-geng-gai-my-ini-client-zi-fu-ji-mysql-cmd-reng-ran-shi-gbk-de-wen-ti-windows-yi-jie-jue" class="header-anchor">.</a></h2><h3><span id="zhuang-kuang-shuo-ming">状况说明</span><a href="#zhuang-kuang-shuo-ming" class="header-anchor">.</a></h3><p>在练习JDBC操作数据库的时候，存入中文数据都成了 ’ ？‘</p><p>这是由于数据库字符集不是utf8导致的(java工程utf8)</p><p>经查看的确是编码不匹配问题</p><p><img src="/2020/06/11/10249/image-20200611011451063.png" alt></p><h3><span id="jie-jue-fang-fa">解决方法</span><a href="#jie-jue-fang-fa" class="header-anchor">.</a></h3><blockquote><p>先找到 my.ini 配置文件（可能在安装目录下或则是在隐藏文件夹ProgramData下mysql目录下）</p><p>打开my.ini 做如下修改</p></blockquote><pre class="line-numbers language-ini"><code class="language-ini"># 在 [mysqld] 下添加<span class="token constant">character-set-server</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span># 在 [client] 下添加<span class="token constant">default-character-set</span><span class="token attr-value"><span class="token punctuation">=</span>utf8</span># 重启MySQL服务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/06/11/10249/image-20200611004519065.png" alt></p><p><img src="/2020/06/11/10249/image-20200611004843753.png" alt></p><h4><span id="jie-guo">结果</span><a href="#jie-guo" class="header-anchor">.</a></h4><p>仍然有点偏差，字符集 client 、connection 、 results 并没有改变，还是 GBK</p><p>但是<strong>JDBC插入数据已经能够正常显示</strong></p><p><img src="/2020/06/11/10249/image-20200611005648063.png" alt></p><h4><span id="wei-shi-me">为什么</span><a href="#wei-shi-me" class="header-anchor">.</a></h4><p>当我查看cmd字符集 代码是936（GBK）</p><p><img src="/2020/06/11/10249/image-20200611005914934.png" alt="GBK"></p><p>可能是cmd这个客户端编码的影响</p><p>当我切换cmd编码为 UTF8（65001）</p><pre class="line-numbers language-shell"><code class="language-shell">chcp 65001 # 临时更改<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/2020/06/11/10249/image-20200611010504905.png" alt></p><h3><span id="yong-jiu-geng-gai-cmd-bian-ma">永久更改cmd编码</span><a href="#yong-jiu-geng-gai-cmd-bian-ma" class="header-anchor">.</a></h3><blockquote><p>第一步 win + R</p><p>第二步 输入regedit 进入注册表</p><p>第三步 找到下示路径 <strong>两种选一种</strong></p></blockquote><p><img src="/2020/06/11/10249/image-20200611010842614.png" alt>  </p><p><strong>或者</strong></p><p><img src="/2020/06/11/10249/image-20200611090830382.png" alt></p><blockquote><p>第四步  新建 autorun 文件 类型是字符串值</p><p> 或者 新建CodePage文件 类型是DWORD</p><p>第五步 双击autorun，填入值:     chcp 65001 </p><p>或者 双击CodePage， 填入值： 65001</p></blockquote><p><img src="/2020/06/11/10249/image-20200611011142820.png" alt></p><p><strong>或者</strong></p><p><img src="/2020/06/11/10249/image-20200611091155675.png" alt></p><blockquote><p>重启cmd 结束</p></blockquote><h3><span id="xin-de-wen-ti">新的问题</span><a href="#xin-de-wen-ti" class="header-anchor">.</a></h3><p>在mysql命令行会输入不了中文</p><p>解决 换回 GBK即可</p><p>：删除上述文件（autorun 或 CodePage）</p><p>以及</p><p><img src="/2020/06/11/10249/image-20200611101126058.png" alt></p><p><strong>上述client 、connection 、 results</strong>的编码并不代表数据的<strong>存储编码</strong></p><p><strong>只要在my.ini中有之前的配置就没问题</strong>但除了 你的 数据表、数据列的编码本身就 不是UTF8</p><p><strong>注意</strong></p><blockquote><p>如果你的 数据库的字符集是latin1</p><p>在该数据库下新建的 表、列的字符集都会是latin1</p><p>除非 在创建表时指定 字符集</p></blockquote><p>不同的客户端 的 这些都不同</p><p><strong>Navicat</strong>：</p><p><img src="/2020/06/11/10249/image-20200611102952562.png" alt></p><p>JAVA IDEA：</p><p><img src="/2020/06/11/10249/image-20200611105600508.png" alt></p><p><a href="https://blog.csdn.net/xinyuan_java/article/details/90715341?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522159184231219724848324900%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=159184231219724848324900&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-90715341.pc_search_back_js&utm_term=mysql%E5%AD%97%E7%AC%A6%E9%9B%86" target="_blank" rel="noopener">MySQL字符集</a> (服务器级、数据库级、数据表级、数据列级)</p>]]></content>
      
      
      
        <tags>
            
            <tag> err </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php入门笔记2</title>
      <link href="/2020/06/05/55320.html"/>
      <url>/2020/06/05/55320.html</url>
      
        <content type="html"><![CDATA[<h2><span id="php-cao-zuo-shu-ju-ku-mysql">php操作数据库（mysql）</span><a href="#php-cao-zuo-shu-ju-ku-mysql" class="header-anchor">.</a></h2><h3><span id="yi-php-shu-ju-ku-kuo-zhan-fen-lei">一、PHP数据库扩展分类</span><a href="#yi-php-shu-ju-ku-kuo-zhan-fen-lei" class="header-anchor">.</a></h3><ul><li>MySQL 扩展</li><li>MySQLi 扩展</li><li>PDO扩展</li></ul><h4><span id="1-mysql-kuo-zhan">1.MySQL扩展</span><a href="#1-mysql-kuo-zhan" class="header-anchor">.</a></h4><blockquote><p>MySQL 扩展是针对 MySQL 4.1.3 或更早版本设计的，是 PHP 与 MySQL数据库交互的早期扩展。由于其不支持 MySQL 数据库服务器的新特性，且安全性差，在项目开发中不建议使用，可用 MySQLi 扩展代替</p></blockquote><h4><span id="2-mysqli-kuo-zhan">2.MySQLi 扩展</span><a href="#2-mysqli-kuo-zhan" class="header-anchor">.</a></h4><blockquote><p>MySQLi 扩展是 MySQL 扩展的增强版，它不仅包含了所有 MySQL 扩展的功能函数，还可以使用 MySQL 新版本中的高级特性。</p><p>例如，多语句执行和事务的支持，预处理方式完全解决了 SQL 注入问题等。MySQLi 扩展只支持MySQL 数据库，如果不考虑其他数据库，该扩展是一个非常好的选择。</p></blockquote><h4><span id="3-pdo-kuo-zhan">3.PDO 扩展</span><a href="#3-pdo-kuo-zhan" class="header-anchor">.</a></h4><blockquote><p>PDO 是 PHP Data Objects（数据对象）的简称，它提供了一个统一的 API接口，只要修改其中的 DSN (数据源)，就可以实现PHP应用与不同类型数据库服务器之间的交互。</p></blockquote><p><strong>PHP中的数据库扩展需要到php.ini中打开</strong>，然后重启服务</p><blockquote><p>去掉 extension 前的 ；即可</p><p>extension=php_mysql.dll<br>extension=php_mysqli.dll<br>extension=php_pdo_mysql.dll</p></blockquote><h3><span id="er-php-fang-wen-mysql-de-ji-ben-bu-zou">二、PHP访问MySQL的基本步骤</span><a href="#er-php-fang-wen-mysql-de-ji-ben-bu-zou" class="header-anchor">.</a></h3><p><img src="/2020/06/05/55320/image-20200606125149957.png" alt></p><h3><span id="san-dui-bi-mysql-he-mysqli-kuo-zhan">三、对比MySQL和MySQLi扩展</span><a href="#san-dui-bi-mysql-he-mysqli-kuo-zhan" class="header-anchor">.</a></h3><ul><li><p>MySQLi扩展 支持两种语法，①面向过程 ②面向对象</p><p>MySQL扩展用法 非常相似的面向过程语法，即使用函数完成 PHP 与 MySQL的交互</p></li></ul><p><strong>面向过程 函数</strong></p><table><thead><tr><th><strong>基本步骤</strong></th><th><strong>MySQL扩展</strong></th><th><strong>MySQLi扩展</strong></th></tr></thead><tbody><tr><td><strong>连接和选择数据库</strong></td><td>mysql_connect()</td><td>mysqli_connect()</td></tr><tr><td><strong>执行SQL语句</strong></td><td>mysql_query()</td><td>mysqli_query()</td></tr><tr><td><strong>处理结果集</strong></td><td>mysql_fetch_array()</td><td>mysqli_fetch_array()</td></tr><tr><td><strong>释放结果集</strong></td><td>mysql_free_result()</td><td>mysqli_free_result()</td></tr><tr><td><strong>关闭连接</strong></td><td>mysql_close()</td><td>mysqli_close()</td></tr></tbody></table><h3><span id="si-lian-jie-shu-ju-ku-mian-xiang-guo-cheng">四、连接数据库（面向过程）</span><a href="#si-lian-jie-shu-ju-ku-mian-xiang-guo-cheng" class="header-anchor">.</a></h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//函数</span>mysqli <span class="token function">mysqli_connect</span> <span class="token punctuation">(</span>      string <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'mysqli.default_host'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//主机名或 IP</span>      string <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'mysqli.default_user'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//用户名</span>      string <span class="token variable">$passwd</span> <span class="token operator">=</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'mysqli.default_pw'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//密码</span>      string <span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">//数据库名</span>      int <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'mysqli.default_port'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//端口号</span>      string <span class="token variable">$socket</span> <span class="token operator">=</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string">'mysqli.default_socket'</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">//socket 通信</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/*函数有 6 个可选参数，当省略时参数时，自动使用 php.ini 中配置的默认值。连接成功时，该函数返回数据库连接；连接失败时，函数返回 false，并提示 Warning 级错误信息。参数 $socket 表示socket 通信方式，通常不需要设置*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="1-lian-jie-bing-xuan-ze-shu-ju-ku">(1) 连接并选择数据库</span><a href="#1-lian-jie-bing-xuan-ze-shu-ju-ku" class="header-anchor">.</a></h5><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//连接数据库，并通过$link保存连接</span><span class="token variable">$link</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'phpdb'</span><span class="token punctuation">,</span><span class="token string">'3307'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5><span id="2-zi-ding-yi-cuo-wu-xin-xi">(2) 自定义错误信息</span><a href="#2-zi-ding-yi-cuo-wu-xin-xi" class="header-anchor">.</a></h5><blockquote><p>当数据库连接失败时，mysqli_connect() 提示的错误信息并不友好，可以通过下面的方式解决。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//连接数据库，并屏蔽错误信息</span><span class="token variable">$link</span> <span class="token operator">=</span> @<span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'数据库连接失败'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*“@”用于屏蔽函数的错误信息“or”是比较运算符 只有左边表达式的值为 false 时，才会执行右边的表达式“exit”用于停止脚本，同时可以输出错误信息当需要详细的错误信息时，可以通过mysqli_connect_error() 函数来获取*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5><span id="3-she-zhi-zi-fu-ji">(3) 设置字符集</span><a href="#3-she-zhi-zi-fu-ji" class="header-anchor">.</a></h5><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//设置字符集</span><span class="token function">mysqli_set_charset</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//成功返回true，失败返回false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong></p><blockquote><p>只有保持 PHP 脚本文件、Web 服务器返回的编码、网页的 <meta> 标记、PHP 访问 MySQL 使用的字符集都统一时，才能避免中文出现乱码问题</p></blockquote><h3><span id="wu-zhi-xing-sql-yu-ju-mian-xiang-guo-cheng">五、执行SQL语句（面向过程）</span><a href="#wu-zhi-xing-sql-yu-ju-mian-xiang-guo-cheng" class="header-anchor">.</a></h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//函数</span>mixed <span class="token function">mysqli_query</span> <span class="token punctuation">(</span>      mysqli <span class="token variable">$link</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//数据库连接</span>      string <span class="token variable">$query</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">//SQL语句</span>      int <span class="token variable">$resultmode</span> <span class="token operator">=</span> <span class="token constant">MYSQLI_STORE_RESULT</span>    <span class="token comment" spellcheck="true">//结果集模式</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意</strong></p><blockquote><p>当函数执行 SELECT、SHOW、DESCRIBE 或EXPLAIN 查询时，返回值是查询结果集，而对于其他查询，成功返回 true，失败返回 false。</p><p>可选参数 $resultmode 的值：</p><p>​    ① MYSQLI_STORE_RESULT：会将结果集全部读取到 PHP 端</p><p>​    ② MYSQLI_USE_RESULT ：仅初始化结果集检索，在处理结果集时进行数据读取</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//连接数据库</span><span class="token variable">$link</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token string">'use `itcast`'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//选择数据库（SQL语句方式）</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token string">'set names utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//设置字符集（SQL语句方式）</span><span class="token comment" spellcheck="true">//执行SQL语句，并获取结果集</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token string">'show databases'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'执行失败。错误信息：'</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="liu-chu-li-jie-guo-ji-mian-xiang-guo-cheng">六、处理结果集（面向过程）</span><a href="#liu-chu-li-jie-guo-ji-mian-xiang-guo-cheng" class="header-anchor">.</a></h3><blockquote><p>当通过 mysqli_query() 函数执行 SQL 语句后，返回的结果集并不能直接使用，需要使用函数从结果集中获取信息，保存为数组</p></blockquote><blockquote><p>在表列举函数中，mysqli_fetch_all() 和 mysqli_fetch_array() 的返回值支持关联数组和索引数组两种形式，</p><p>函数第 1 个参数表示结果集，</p><p>​        第 2 个参数是可选参数，表示返回的数组形式，其值有 MYSQLI_ASSOC、MYSQLI_NUM、MYSQLI_BOTH 三种常量，分别表示关联数组、索引数组，或两者皆有，默认值为 MYSQLI_BOTH。</p></blockquote><h4><span id="1-yi-ci-cha-xun-yi-xing-ji-lu">1.一次查询一行记录</span><a href="#1-yi-ci-cha-xun-yi-xing-ji-lu" class="header-anchor">.</a></h4><blockquote><p>当需要一次查询一行记录时，可以通过 mysqli_fetch_assoc()、mysqli_fetch_row() 或 mysqli_fetch_array() 来实现</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//通过循环将结果集中所有的记录全部读取</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">echo</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出“name”字段的值</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="2-yi-ci-cha-xun-suo-you-ji-lu">2. 一次查询所有记录</span><a href="#2-yi-ci-cha-xun-suo-you-ji-lu" class="header-anchor">.</a></h4><blockquote><p>当需要一次查询出所有的记录时，可以通过 mysqli_fetch_all() 函数来实现</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//查询所有记录，获取关联数组结果</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_all</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//打印数组结构</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//每行记录是一个数组，所有的行组成了$data数组</span><span class="token comment" spellcheck="true">//MYSQLI_ASSOC，表示返回关联数组结果</span><span class="token comment" spellcheck="true">//$data是一个包含所有行的二维数组，当访问第1行记录中的“name”时，可以通过“$data[0]['name']”进行访问</span><span class="token comment" spellcheck="true">//使用 var_dump() 函数可以查看该数组的结构。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="qi-yu-chu-li-yu-ju-mian-xiang-guo-cheng">七、预处理语句（面向过程）</span><a href="#qi-yu-chu-li-yu-ju-mian-xiang-guo-cheng" class="header-anchor">.</a></h3><blockquote><p>MySQLi  扩展中有一种预处理语句的机制，其原理是预先编译 SQL 语句的模板，当执行时只传输有变化的数据。下图演示了预处理语句和传统方式的区别。</p></blockquote><p><img src="/2020/06/05/55320/image-20200606133957119.png" alt></p><blockquote><p> 从图中可以看出，当 PHP 需要执行 SQL 时，传统方式是将发送的数据和 SQL 写在一起，这种方式每条 SQL 都需要经过分析、编译和优化的周期；而预处理语句只需要编译一次用户提交的 SQL 模板，在操作时，发送相关数据即可完成更新操作，这极大地提高了运行效率，而且无需考虑数据中包含特殊字符（如单引号）导致的语法问题。</p></blockquote><p><strong>预处理相关函数</strong></p><h6><span id="1-mysqli-prepare">1.mysqli_prepare</span><a href="#1-mysqli-prepare" class="header-anchor">.</a></h6><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//用于预处理一个待执行的 SQL 语句</span>mysqli_stmt <span class="token function">mysqli_prepare</span> <span class="token punctuation">(</span> mysqli <span class="token variable">$link</span> <span class="token punctuation">,</span> string <span class="token variable">$query</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//参数 $link 表示数据库连接，$query 表示 SQL 语句模板。当函数执行后，成功返回预处理对象，失败返回 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h6><span id="2-mysqli-stmt-bind-param">2.mysqli_stmt_bind_param</span><a href="#2-mysqli-stmt-bind-param" class="header-anchor">.</a></h6><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//用于将变量作为参数绑定到预处理语句中</span>bool <span class="token function">mysqli_stmt_bind_param</span> <span class="token punctuation">(</span>       mysqli_stmt <span class="token variable">$stmt</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//预处理对象</span>       string <span class="token variable">$types</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//数据类型</span>       mixed <span class="token operator">&amp;</span><span class="token variable">$var1</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">//绑定变量1（引用传参）</span>       <span class="token punctuation">[</span><span class="token punctuation">,</span> mixed<span class="token operator">&amp;</span>$<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">//绑定变量n...（可选参数，可绑定多个，引用传参）</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//数 $stmt 表示由 mysqli_prepare() 返回的预处理对象；$types 用于指定被绑定变量的数据类型，它是由一个或多个字符组成的字符串；后面的 $var（可以是多个参数）表示需要绑定的变量，且其个数必须与 $types 字符串的长度一致。该函数执行成功时返回 true，失败时返回 false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>参数绑定时的数据类型字符</strong></p><table><thead><tr><th><strong>字符</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>i</strong></td><td>描述变量的数据类型为MySQL中的integer类型</td></tr><tr><td><strong>d</strong></td><td>描述变量的数据类型为MySQL中的double类型</td></tr><tr><td><strong>s</strong></td><td>描述变量的数据类型为MySQL中的string类型</td></tr><tr><td><strong>b</strong></td><td>描述变量的数据类型为MySQL中的blob类型</td></tr></tbody></table><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//演示</span><span class="token comment" spellcheck="true">//连接数据库、预处理SQL模板</span><span class="token variable">$link</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token string">'itcast'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token function">mysqli_prepare</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token string">'UPDATE `user` SET `name`=? WHERE `id`=?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数绑定（将变量$name、$id按顺序绑定到SQL语句“?”占位符上）</span><span class="token function">mysqli_stmt_bind_param</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">,</span> <span class="token string">'si'</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6><span id="3-mysqli-stmt-execute">3.mysqli_stmt_execute</span><a href="#3-mysqli-stmt-execute" class="header-anchor">.</a></h6><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//在完成参数绑定后，接下来应该将数据内容发送给 MySQL 执行</span>bool <span class="token function">mysqli_stmt_execute</span> <span class="token punctuation">(</span> mysqli_stmt <span class="token variable">$stmt</span> <span class="token punctuation">)</span><span class="token comment" spellcheck="true">//$stmt 参数表示由 mysqli_prepare() 函数返回的预处理对象。当函数执行成功后，返回 true，执行失败返回 false。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//演示</span><span class="token comment" spellcheck="true">//连接数据库、预处理SQL模板</span><span class="token variable">$link</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token string">'itcast'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token function">mysqli_prepare</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token string">'UPDATE `user` SET `name`=? WHERE `id`=?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//参数绑定，并为已经绑定的变量赋值</span><span class="token function">mysqli_stmt_bind_param</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">,</span> <span class="token string">'si'</span><span class="token punctuation">,</span> <span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'aa'</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行预处理（第一次执行）</span><span class="token function">mysqli_stmt_execute</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//为第二次执行重新赋值</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'bb'</span><span class="token punctuation">;</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//执行预处理（第二次执行）</span><span class="token function">mysqli_stmt_execute</span><span class="token punctuation">(</span><span class="token variable">$stmt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="qi-ta-cao-zuo">其他操作</span><a href="#qi-ta-cao-zuo" class="header-anchor">.</a></h3><table><thead><tr><th><strong>函数</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><strong>mysqli_insert_id()</strong></td><td>获取上一次插入操作时产生的ID号</td></tr><tr><td><strong>mysqli_affected_rows()</strong></td><td>获取上一次操作时受影响的行数</td></tr><tr><td><strong>mysqli_real_escape_string()</strong></td><td>用于转义SQL语句字符串中的特殊字符</td></tr><tr><td><strong>mysqli_free_result()</strong></td><td>释放结果集</td></tr><tr><td><strong>mysqli_close()</strong></td><td>关闭先前打开的数据库连接</td></tr><tr><td><strong>mysqli_error()</strong></td><td>返回最近函数调用的错误代码</td></tr></tbody></table><p><a href="http://www.php.net/manual/zh/index.php" target="_blank" rel="noopener" style="position:fixed;top:50%;left:90%;text-decoration:none;font-size:25px;color:violet;background-color:yellow">PHP手册</a></p><blockquote><p>mysqli_free_result() 和 mysqli_close() 函数用于释放资源、关闭连接，由于 PHP 访问 MySQL 使用了非持久连接，因此当 PHP 脚本执行结束时会自动释放。</p></blockquote><h3><span id="wan-zheng-cao-zuo-mian-xiang-guo-cheng">完整操作(面向过程)</span><a href="#wan-zheng-cao-zuo-mian-xiang-guo-cheng" class="header-anchor">.</a></h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//连接数据库、设置字符集</span><span class="token variable">$link</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token string">'itcast'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysqli_set_charset</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ① 执行查询操作、处理结果集</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token string">'SELECT * FROM `user`'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'执行失败。错误信息：'</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取错误信息</span><span class="token punctuation">}</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_all</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span> <span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ② 用完后，释放结果集</span><span class="token function">mysqli_free_result</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// ③ 执行插入操作，拼接SQL语句</span><span class="token comment" spellcheck="true">//转义特殊符号</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">mysqli_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> <span class="token string">"单引号'测试'文本"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> "<span class="token constant">INSERT</span> <span class="token constant">INTO</span> `user` <span class="token punctuation">(</span>`name`<span class="token punctuation">)</span> <span class="token function">VALUES</span> <span class="token punctuation">(</span><span class="token string">'".$name."'</span><span class="token punctuation">)</span>"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'执行失败。错误信息：'</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ④ 获取最后插入的ID</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token function">mysqli_insert_id</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//获取AUTO_INCREMENT字段的自增值</span><span class="token comment" spellcheck="true">// ⑤ 执行修改操作</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">,</span> "<span class="token constant">UPDATE</span> `user` <span class="token constant">SET</span> `name`<span class="token operator">=</span><span class="token string">'aa'</span> <span class="token constant">WHERE</span> `id`<span class="token operator">></span><span class="token number">2</span>"<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token string">'执行失败。错误信息：'</span><span class="token punctuation">.</span><span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// ⑥ 获取受影响的行数</span><span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">mysqli_affected_rows</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//可获取UPDATE、                                                    //DELETE等操作影响的行数</span><span class="token comment" spellcheck="true">// ⑦ 关闭连接</span><span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$link</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在上述代码中，第 4<del>10 行演示了 mysqli_error()、mysqli_free_result()函数的使用，第 12 行演示了 mysqli_real_escape_string() 函数的使用，第17</del>25行演示了 mysqli_insert_id()、mysqli_affected_rows()、mysqli_close()函数的使用。其中第 8 行 $data 保存了查询出的数据，因此在第 10 行释放了$result 结果集。第 25 行关闭 $link 连接后，$link 将不能继续使用。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php入门笔记1</title>
      <link href="/2020/05/20/6418.html"/>
      <url>/2020/05/20/6418.html</url>
      
        <content type="html"><![CDATA[<h1><span id="php-yu-fa-ji-chu">PHP 语法基础</span><a href="#php-yu-fa-ji-chu" class="header-anchor">.</a></h1><h2><span id="yi-php-biao-ji-yu-zhu-shi">一、php标记与注释</span><a href="#yi-php-biao-ji-yu-zhu-shi" class="header-anchor">.</a></h2><h3><span id="1-php-biao-ji">1.php标记</span><a href="#1-php-biao-ji" class="header-anchor">.</a></h3><p>​    php是嵌入式脚本语言，它经常会和HTML内容混编在一起，因此为了区分HTML与PHP代码，需要使用标记将PHP代码包裹起来。</p><table><thead><tr><th><strong>标记类型</strong></th><th><strong>开始标记</strong></th><th><strong>结束标记</strong></th></tr></thead><tbody><tr><td>标准标记</td><td>&lt;?php</td><td>?&gt;</td></tr><tr><td>短标记</td><td>&lt;?</td><td>?&gt;</td></tr><tr><td>ASP风格标记</td><td>&lt;%</td><td>%&gt;</td></tr><tr><td>脚本风格标记</td><td><script language="“php”"></td><td></script></td></tr></tbody></table><ul><li>标记语言是PHP中最常用的标记，当<strong>一个文件是纯PHP代码</strong>时，<strong>可省略结束标记</strong>,且开始标记最好顶格写。</li><li>其他三种标记，在实际开发中很少使用</li></ul><h3><span id="2-php-zhu-shi">2.PHP注释</span><a href="#2-php-zhu-shi" class="header-anchor">.</a></h3><pre><code>&gt;单行注释  //&gt;&gt;多行注释 /* */</code></pre><h2><span id="er-biao-shi-fu-yu-guan-jian-zi">二、标识符与关键字</span><a href="#er-biao-shi-fu-yu-guan-jian-zi" class="header-anchor">.</a></h2><h3><span id="1-biao-shi-fu">1.标识符</span><a href="#1-biao-shi-fu" class="header-anchor">.</a></h3><p>​    在程序开发中，经常需要定义一些符号来标记一些名称，如变量名、常量名、函数名、类名等</p><h5><span id="gui-ze">规则</span><a href="#gui-ze" class="header-anchor">.</a></h5><ul><li>只能由字母、数字和下划线组成</li><li>必须以字母或下划线开头</li><li>用作变量名时，区分大小写</li><li>若由多个单词组成，就以下划线分隔</li></ul><h3><span id="2-guan-jian-zi">2.关键字</span><a href="#2-guan-jian-zi" class="header-anchor">.</a></h3><p>​    编程语言中事先定义好并赋予了特殊含义的单词，也称作保留字</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>and</td><td>or</td><td>xor</td><td>_<em>FILE_</em></td><td>exception</td></tr><tr><td>_<em>LINE_</em></td><td>array()</td><td>As</td><td>break</td><td>case</td></tr><tr><td>class</td><td>const</td><td>continue</td><td>declare</td><td>default</td></tr><tr><td>die()</td><td>do</td><td>echo</td><td>else</td><td>elseif</td></tr><tr><td>empty()</td><td>enddeclare</td><td>endfor</td><td>endforeach</td><td>endif</td></tr><tr><td>endswitch</td><td>endwhile</td><td>eval()</td><td>exit()</td><td>extends</td></tr><tr><td>for</td><td>foreach</td><td>function</td><td>global</td><td>if</td></tr><tr><td>include</td><td>include_once</td><td>isset()</td><td>list()</td><td>new</td></tr><tr><td>print</td><td>require</td><td>require_once</td><td>return</td><td>static</td></tr><tr><td>switch</td><td>unset()</td><td>use</td><td>var</td><td>while</td></tr><tr><td>_<em>FUNCTION_</em></td><td>_<em>CLASS_</em></td><td>_<em>METHOD_</em></td><td>final</td><td>php_user_filter</td></tr><tr><td>interface</td><td>implements</td><td>extends</td><td>public</td><td>private</td></tr><tr><td>protected</td><td>abstract</td><td>clone</td><td>try</td><td>catch</td></tr><tr><td>throw</td><td>this</td><td></td><td></td><td></td></tr></tbody></table><h2><span id="san-bian-liang-yu-chang-liang">三、变量与常量</span><a href="#san-bian-liang-yu-chang-liang" class="header-anchor">.</a></h2><h3><span id="1-bian-liang">1.变量</span><a href="#1-bian-liang" class="header-anchor">.</a></h3><p>​    变量就是保留可变数据的容器。</p><p>​    PHP中，变量由$与变量名组成，如：$online 、$_online</p><p>​    <strong>php是弱类型语言，所以变量不需要事先声明，就可以进行赋值使用</strong></p><ul><li><p>PHP赋值方式</p><ul><li>传值赋值（默认）</li><li>引用赋值</li></ul><p>​    引用使用时只需要在变量前添加 “ &amp; ”符号即可，如$n = &amp;$num</p></li></ul><h3><span id="2-ke-bian-bian-liang">2.可变变量</span><a href="#2-ke-bian-bian-liang" class="header-anchor">.</a></h3><p>​    通过可变变量，可以将另一个变量的值作为该变量的名称</p><p>​    可变变量只需在一个变量前多加一个美元符号$</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>    <span class="token variable">$hello</span> <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//hello</span>    <span class="token keyword">echo</span> $<span class="token variable">$a</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//world</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==注意：在当 $a 的值是数字 时，$$a会出现非法变量名的情况==</p><h3><span id="3-chang-liang">3.常量</span><a href="#3-chang-liang" class="header-anchor">.</a></h3><p>​    常量用于保存在脚本运行过程中值始终保持不变的量，它的特点是一旦被定义就不能被修改或重新定义</p><ul><li><p>常量的定义方式：</p><ul><li>define（） 函数</li><li>const关键字</li></ul><p>①define（）函数</p><pre class="line-numbers language-php"><code class="language-php"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">'CON'</span><span class="token punctuation">,</span> <span class="token string">'php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义名称为CON的常量，其值为php </span><span class="token keyword">echo</span> <span class="token constant">CON</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//输出结果为：php</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">// 输出常量也可是下面方式</span><span class="token keyword">echo</span> <span class="token function">constant</span><span class="token punctuation">(</span><span class="token string">'CON'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//php</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>②const关键字</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">const</span> <span class="token constant">PAI</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//定义名字为PAI的常量，其值为3.14</span><span class="token keyword">echo</span> <span class="token constant">PAI</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//输出结果为：3.14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3><span id="4-yu-ding-yi-bian-liang">4.预定义变量</span><a href="#4-yu-ding-yi-bian-liang" class="header-anchor">.</a></h3><p>​    预定义常量是指PHP预先定义好的常量，用于获取PHP中的相关信息，方便开发。<br>在需要时可直接在程序中使用</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token constant">PHP_VERSION</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//用于获取PHP的版本信息</span><span class="token keyword">echo</span> <span class="token constant">PHP_OS</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//用于获取解析PHP的操作系统类型</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2><span id="si-shu-ju-jie-gou">四、数据结构</span><a href="#si-shu-ju-jie-gou" class="header-anchor">.</a></h2><img src="/2020/05/20/6418/image-20200520132505260.png" style="zoom:50%;"><h3><span id="1-bu-er-xing">1.布尔型</span><a href="#1-bu-er-xing" class="header-anchor">.</a></h3><p>​    true 和 false</p><h3><span id="2-zheng-xing">2.整型</span><a href="#2-zheng-xing" class="header-anchor">.</a></h3><p>​    八进制（oct）：07</p><p>​    十进制（dec）：9</p><p>​    十六进制（hex）：0xF</p><h3><span id="3-fu-dian-xing">3.浮点型</span><a href="#3-fu-dian-xing" class="header-anchor">.</a></h3><pre class="line-numbers language-php"><code class="language-php">标准格式：    <span class="token variable">$fnum</span> <span class="token operator">=</span> <span class="token number">3.14</span>科学计数法：    <span class="token variable">$fnum</span> <span class="token operator">=</span> <span class="token number">314E-2</span><span class="token comment" spellcheck="true">// 不管采用哪种格式 浮点数的有效位都是14位</span><span class="token comment" spellcheck="true">// 有效位： 从左边第一个不为0的数开始，直到末尾数的 个数，不包含小数点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-zi-fu-chuan-xing">4.字符串型</span><a href="#4-zi-fu-chuan-xing" class="header-anchor">.</a></h3><ul><li>使用单引号或双引号表示字符串</li></ul><p>​    <strong>注意：变量在双引号字符串中被解析</strong></p><p>​                <strong>变量在单引号字符串中原样输出</strong></p><ul><li><p>在字符串中可以使用转义字符。例如：</p><pre><code>        **双引号字符串中使用双引号时，可以使用 “ \\&quot;  ”来表示。**              **单引号字符串只支持“ &#39; ”和“ \ ”的转义。**</code></pre></li><li><p>在双引号字符串中输出变量时，有时会出现变量名界定不明确的问题，对于这种情况，可以使用{}来对变量进行界定。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'php'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"世界上最好的语言是{$str}？"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出结果为：世界上最好的语言是php？</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2><span id="wu-cha-kan-shu-ju-lei-xing">五、查看数据类型</span><a href="#wu-cha-kan-shu-ju-lei-xing" class="header-anchor">.</a></h2><p>​    PHP是弱类型语言，变量的数据类型会随程序的流程而改变。为了方便调试程序，PHP提供了<strong>var_dump()</strong>函数用于<strong>查看变量的值和数据类型</strong>。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token variable">$fnum</span> <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    <span class="token variable">$bool</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'hello world'</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$fnum</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2020/05/20/6418/image-20200520135509868.png" alt></p><p>使用<strong>print_r()</strong>打印变量易于理解的信息</p><h2><span id="liu-yun-suan-fu">六、运算符</span><a href="#liu-yun-suan-fu" class="header-anchor">.</a></h2><h3><span id="1-suan-zhu-yun-suan-fu">1.算术运算符</span><a href="#1-suan-zhu-yun-suan-fu" class="header-anchor">.</a></h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>意义</strong></th><th><strong>范例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>+</td><td>加</td><td>5+5</td><td>10</td></tr><tr><td>-</td><td>减</td><td>6-4</td><td>2</td></tr><tr><td>*</td><td>乘</td><td>3*4</td><td>12</td></tr><tr><td>/</td><td>除</td><td>5/5</td><td>1</td></tr><tr><td>%</td><td>取模（即算术中的求余数）</td><td>5%7</td><td>5</td></tr></tbody></table><h3><span id="2-fu-zhi-yun-suan-fu">2.赋值运算符</span><a href="#2-fu-zhi-yun-suan-fu" class="header-anchor">.</a></h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>意义</strong></th><th><strong>范例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>=</td><td>赋值</td><td>$a=3; ​$b=2;</td><td>$a=3; ​$b=2;</td></tr><tr><td>+=</td><td>加等于</td><td>$a=3; $b=2; $a+=$b;</td><td>$a=5; ​$b=2;</td></tr><tr><td>-=</td><td>减等于</td><td>$a=3; ​$b=2; $a-=​$b;</td><td>$a=1; $b=2;</td></tr><tr><td>*=</td><td>乘等于</td><td>$a=3; ​$b=2; $a*=​ $b;</td><td>$a=6; ​$b=2;</td></tr><tr><td>/=</td><td>除等于</td><td>$a=3; ​$b=2; $a/= $b;</td><td>$a=1.5; ​$b=2;</td></tr><tr><td>%=</td><td>模等于</td><td>$a=3; ​$b=2; $a%= $b;</td><td>$a=1; ​$b=2;</td></tr><tr><td>.=</td><td>连接等于</td><td>$a=’abc’; ​$a .= ‘def’;</td><td>$a=’abcdef’</td></tr></tbody></table><h3><span id="3-bi-jiao-yun-suan-fu">3.比较运算符</span><a href="#3-bi-jiao-yun-suan-fu" class="header-anchor">.</a></h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>运算</strong></th><th>范例（$x=5）</th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>==</td><td>等于</td><td>$x == 4</td><td>false</td></tr><tr><td>!=</td><td>不等于</td><td>$x != 4</td><td>true</td></tr><tr><td>&lt;&gt;</td><td>不等于</td><td>$x &lt;&gt; 4</td><td>true</td></tr><tr><td>===</td><td>恒等</td><td>$x === 5</td><td>true</td></tr><tr><td>!==</td><td>不恒等</td><td>$x !== ’5’</td><td>true</td></tr><tr><td>&gt;</td><td>大于</td><td>$x &gt; 5</td><td>false</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>$x &gt;= 5</td><td>true</td></tr><tr><td>&lt;</td><td>小于</td><td>$x &lt; 5</td><td>false</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>$x &lt;= 5</td><td>true</td></tr></tbody></table><ul><li>对于两个数据类型不相同的数据进行比较时，PHP会自动将其转换成相同类型的数据后再进行比较。</li><li>运算符==”和“!=”运算符在比较时，只比较其值是否相等。</li><li>运算符“===”与“!==”在进行比较时，要比较数值和其数据类型是否相等。</li></ul><h3><span id="4-luo-ji-yun-suan-fu">4.逻辑运算符</span><a href="#4-luo-ji-yun-suan-fu" class="header-anchor">.</a></h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>运算</strong></th><th><strong>范例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>&amp;&amp;</td><td>与</td><td>$a &amp;&amp; $b</td><td>a和​b都为true，结果为true，否则为false</td></tr><tr><td>||</td><td>或</td><td>$a || $b</td><td>a和​b中至少有一个为true，则结果为true，否则为false</td></tr><tr><td>!</td><td>非</td><td>!$a</td><td>若a为false，结果为true，否则相反</td></tr><tr><td>xor</td><td>异或</td><td>$a xor $b</td><td>a和​b一个为true，一个为false，结果为true，否则为false</td></tr><tr><td>and</td><td>与</td><td>$a and $b</td><td>与&amp;&amp;相同，但优先级较低</td></tr><tr><td>or</td><td>或</td><td>$a or $b</td><td>与||相同，但优先级较低</td></tr></tbody></table><ul><li>&amp;&amp; 和 ||的优先级高于 and 和 or</li></ul><h3><span id="5-di-zeng-di-jian-yun-suan-fu">5.递增递减运算符</span><a href="#5-di-zeng-di-jian-yun-suan-fu" class="header-anchor">.</a></h3><table><thead><tr><th><strong>运算符</strong></th><th><strong>运算</strong></th><th><strong>范例</strong></th><th><strong>结果</strong></th></tr></thead><tbody><tr><td>++</td><td>（前）自增</td><td>$a=2; $b=++$a;</td><td>$a=3; $b=3;</td></tr><tr><td>++</td><td>（后）自增</td><td>$a=2; ​$b=$a++;</td><td>$a=3; ​$b=2;</td></tr><tr><td>- -</td><td>（前）自减</td><td>$a=2; $b=–$a;</td><td>$a=1; ​$b=1;</td></tr><tr><td>- -</td><td>（后）自减</td><td>$a=2; $b=$a–;</td><td>$a=1; $b=2;</td></tr></tbody></table><h2><span id="qi-biao-da-shi">七、表达式</span><a href="#qi-biao-da-shi" class="header-anchor">.</a></h2><h6><span id="lue">略</span><a href="#lue" class="header-anchor">.</a></h6><h2><span id="ba-yun-suan-fu-you-xian-ji">八、运算符优先级</span><a href="#ba-yun-suan-fu-you-xian-ji" class="header-anchor">.</a></h2><table><thead><tr><th><strong>结合方向</strong></th><th><strong>运算符</strong></th></tr></thead><tbody><tr><td>无</td><td>new</td></tr><tr><td>左</td><td>[</td></tr><tr><td>右</td><td>++ – ~  (int) (float) (string) (array) (object) @</td></tr><tr><td>无</td><td>Instanceof</td></tr><tr><td>右</td><td>!</td></tr><tr><td>左</td><td>* / %</td></tr><tr><td>左</td><td>+ - .</td></tr><tr><td>左</td><td>&lt;&lt; &gt;&gt;</td></tr><tr><td>无</td><td>== != === !== &lt;&gt;</td></tr><tr><td>左</td><td>&amp;</td></tr><tr><td>左</td><td>^</td></tr><tr><td>左</td><td>|</td></tr><tr><td>左</td><td>&amp;&amp;</td></tr><tr><td>左</td><td>||</td></tr><tr><td>左</td><td>? :</td></tr><tr><td>右</td><td>= += -= *= /= .= %= &amp;= |= ^= &lt;&lt;= &gt;&gt;=</td></tr><tr><td>左</td><td>and</td></tr><tr><td>左</td><td>Xor</td></tr><tr><td>左</td><td>Or</td></tr><tr><td>左</td><td>,</td></tr></tbody></table><ul><li>同一行的运算符具有相同的优先级</li><li>左结合方向表示同级运算符的执行顺序为从左到右</li><li>右结合方向则表示执行顺序为从右到左</li><li>补充：圆括号()优先级别最高</li></ul><h2><span id="jiu-shu-ju-lei-xing-zhuan-huan">九、数据类型转换</span><a href="#jiu-shu-ju-lei-xing-zhuan-huan" class="header-anchor">.</a></h2><h3><span id="1-zi-dong-lei-xing-zhuan-huan">1.自动类型转换</span><a href="#1-zi-dong-lei-xing-zhuan-huan" class="header-anchor">.</a></h3><p>​    自动类型转换，指的是当运算需要或与期望的结果类型不匹配时，PHP将自动进行类型转换，无需编程人员做任何操作</p><p>4种：①转换成布尔型 ②转换成整型 ③转换成浮点型 ④转换成字符串型</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">/* 字符串 --> 整型 */</span><span class="token comment" spellcheck="true">//比较“888php”与888是否相等</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">'888php'</span> <span class="token operator">==</span> <span class="token number">888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出结果：bool(true)</span><span class="token comment" spellcheck="true">//比较“php888”与888是否相等</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">'php888'</span> <span class="token operator">==</span> <span class="token number">888</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//输出结果：bool(false)</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token string">'php888'</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出结果：bool(true)</span><span class="token comment" spellcheck="true">//这个是因为 字符串转换为 整型时 如果 字符串以数字开头，则使用 该数值 否则转换为零</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-qiang-zhi-lei-xing-zhuan-huan">2.强制类型转换</span><a href="#2-qiang-zhi-lei-xing-zhuan-huan" class="header-anchor">.</a></h3><p>​    强制类型转换，就是根据编程需求手动转换数据类型，在要转换的数据或变量之前加上“(目标类型)”即可</p><table><thead><tr><th><strong>强制类型</strong></th><th><strong>功能描述</strong></th><th><strong>范例</strong></th><th><strong>var_dump</strong>()打印结果</th></tr></thead><tbody><tr><td>（bool）</td><td>强转为布尔型</td><td>(bool)-5.9</td><td>bool(true)</td></tr><tr><td>（string）</td><td>强转为字符串型</td><td>(string)12</td><td>string(2) “12”</td></tr><tr><td>（integer）</td><td>强转为整型</td><td>(integer)’hello’</td><td>int(0)</td></tr><tr><td>（float）</td><td>强转为浮点型</td><td>(float)false</td><td>float(0)</td></tr><tr><td>（array）</td><td>强转为数组</td><td>(array)’php’</td><td>array(1) { [0]=&gt; string(3) “php” }</td></tr><tr><td>（object）</td><td>强转为对象</td><td>(object)2.34</td><td>object(stdClass)#1(1){[“scalar”]=&gt;float(2.34}</td></tr></tbody></table><h2><span id="shi-liu-cheng-kong-zhi-yu-ju">十、流程控制语句</span><a href="#shi-liu-cheng-kong-zhi-yu-ju" class="header-anchor">.</a></h2><h3><span id="1-shun-xu-jie-gou-lue">1.顺序结构（略）</span><a href="#1-shun-xu-jie-gou-lue" class="header-anchor">.</a></h3><h3><span id="2-xuan-ze-jie-gou">2.选择结构</span><a href="#2-xuan-ze-jie-gou" class="header-anchor">.</a></h3><p>注意与java不同</p><p>​    ①if 语句</p><p>​    <img src="/2020/05/20/6418/blog\LMKblog\source\_posts\image-20200520151143095.png" alt="image-20200520151143095" style="zoom:50%;"></p><p>​    ②if…else…语句</p><p>​        三目运算符 </p><p>​    <img src="/2020/05/20/6418/image-20200520151217222.png" style="zoom:50%;"></p><p>​    ③if…elseif…else…  (其中 elseif 可存在多个; else 与 if之间没空格; else不能省略；大括号可以省略，但当有大括号时，大括号与if这些关键字之间不能有空格)</p><p>​    <img src="/2020/05/20/6418/image-20200520151249422.png" style="zoom:50%;">    </p><p>​    ④switch语句</p><p>​        略</p><h3><span id="3-xun-huan-jie-gou">3.循环结构</span><a href="#3-xun-huan-jie-gou" class="header-anchor">.</a></h3><p>​    ①while循环语句</p><p>​    <img src="/2020/05/20/6418/image-20200520151046007.png" style="zoom:50%;"></p><p>​    ②do…while循环语句</p><p>​    <img src="/2020/05/20/6418/image-20200520151001154.png" style="zoom: 50%;"></p><p>​    ③for循环语句<br>​    <img src="/2020/05/20/6418/image-20200520151418735.png" style="zoom:50%;"></p><h3><span id="liu-cheng-tiao-zhuan-yu-ju">流程跳转语句</span><a href="#liu-cheng-tiao-zhuan-yu-ju" class="header-anchor">.</a></h3><p>​    break；continue</p><pre><code>break n; //跳出 n重循环</code></pre><h2><span id="shi-yi-ti-huan-yu-fa">十一、替换语法</span><a href="#shi-yi-ti-huan-yu-fa" class="header-anchor">.</a></h2><p>​        当大量的HTML与PHP代码混合编译时，为了方便区分流程语句的开始和结束位置，可以使用PHP提供的替代语法进行编码。<br>​        其基本形式就是把if、while、for、foreach、switch这些语句的左花括号（{）换成冒号（:），将右花括号（}）分别换成“endif;”、“endwhile;”、“endfor;”、“endforeach;”和“endswitch;”。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token number">1</span><span class="token operator">~</span><span class="token number">99</span>之间的偶数：<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token markup">&lt;100;++$i): ?></span>        <span class="token delimiter">&lt;?php</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token delimiter">?></span>            <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?</span><span class="token operator">=</span><span class="token variable">$i</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span></span>        <span class="token delimiter">&lt;?php</span> <span class="token keyword">endif</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">endfor</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>“<?= ?>”是短标记输出语法，自 PHP 5.4起，这种语法在短标记关闭的情况下仍然可用。<br>因此，在HTML嵌入PHP变量使用这种简写形式将会非常方便。</p></blockquote><h2><span id="shi-er-han-shu">十二、函数</span><a href="#shi-er-han-shu" class="header-anchor">.</a></h2><p>函数：就是程序中用来实现特定功能的代码段，避免代码的重复书写。<br>自定义函数：就是开发人员可根据实际功能编写的代码段。</p><h3><span id="1-zi-ding-yi-han-shu">1.自定义函数</span><a href="#1-zi-ding-yi-han-shu" class="header-anchor">.</a></h3><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> 函数名<span class="token punctuation">(</span> <span class="token punctuation">[</span>参数<span class="token number">1</span><span class="token punctuation">,</span> 参数<span class="token number">2</span><span class="token punctuation">,</span> ……<span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>       函数体<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>函数名的命名规则与标识符相同，函数名 <strong>不区分大小写</strong>，且是唯一的</p><p>（其变量是区分大小写的）</p><pre><code>#返回值处理return $var;</code></pre><h4><span id="ke-xuan-can-shu">可选参数</span><a href="#ke-xuan-can-shu" class="header-anchor">.</a></h4><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token operator">=</span><span class="token string">'world'</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//$b 是可选参数</span>      <span class="token keyword">return</span> <span class="token variable">$a</span><span class="token punctuation">.</span><span class="token variable">$b</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//拼接两个字符串</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出结果：helloworld</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>可选参数必须放在必选参数的后面</p><h4><span id="han-shu-zhong-bian-liang-de-zuo-yong-yu">函数中变量的作用域</span><a href="#han-shu-zhong-bian-liang-de-zuo-yong-yu" class="header-anchor">.</a></h4><blockquote><p>通常情况下，为避免变量命名冲突，函数内的变量与函数外的变量不能互相访问</p><p>因此，变量在它的作用范围内才可以使用，这个作用范围称为变量的作用域。<br>其中，在函数中定义的变量称为局部变量，仅能在函数内使用，当函数执行完成后被释放；在函数外定义的变量称为全局变量，正常情况下仅可在函数外使用。</p></blockquote><p><strong>函数中使用全局变量的方法：</strong></p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$var</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//在此处定义变量$var</span><span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string">'php'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//在此处定义变量$str</span><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">//方式一：利用global关键字取得全局变量</span>     <span class="token keyword">global</span> <span class="token variable">$var</span><span class="token punctuation">;</span>     <span class="token keyword">echo</span> <span class="token string">'全局变量$var：'</span><span class="token punctuation">.</span><span class="token variable">$var</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//方式二：利用$GLOBALS['变量名']访问</span>     <span class="token keyword">echo</span> <span class="token string">'全局变量$str：'</span><span class="token punctuation">.</span><span class="token variable">$GLOBALS</span><span class="token punctuation">[</span><span class="token string">'str'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="2-ke-bian-han-shu">2.可变函数</span><a href="#2-ke-bian-han-shu" class="header-anchor">.</a></h3><ul><li>PHP 支持可变函数，这意味着如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。</li><li>值得一提的是，变量的值可以是用户自定义的函数名称，也可以是PHP内置的函数名称，但是变量的值必须是实际存在的函数的名称。</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">echo</span> <span class="token string">'running....'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$funcname</span> <span class="token operator">=</span> <span class="token string">'test'</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//定义变量，其值是函数的名称</span><span class="token keyword">echo</span> <span class="token variable">$funcname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//利用可变变量调用函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可变函数可以增加程序的灵活性，但是滥用可变函数会降低PHP代码的可读性，使程序逻辑难以理解，给代码的维护带来不便，所以在编程过程中尽量少用可变函数。</p></blockquote><h3><span id="3-ni-ming-han-shu">3.匿名函数</span><a href="#3-ni-ming-han-shu" class="header-anchor">.</a></h3><p>​    匿名函数就是没有函数名称的函数，也称作闭包函数，经常用作回调函数参数的值。对于临时定义的函数，使用匿名函数无需考虑函数命名冲突的问题。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//匿名函数的使用</span><span class="token variable">$sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//定义匿名函数</span>      <span class="token keyword">return</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//输出结果：300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>需要注意的是，此种匿名函数调用的方式看似与可变函数的使用类似，但实际上不是，可通过var_dump()对匿名函数的变量进行打印输出，可以看到其数据类型为对象类型</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//匿名函数中使用 外部变量</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token variable">$sum</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token keyword">use</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span> <span class="token operator">+</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$sum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出结果：400</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>在匿名函数使用的外部变量需先在函数声明前进行定义<br>定义匿名函数时，添加use(变量名[,变量名])即可。</p></blockquote><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//匿名函数的其他用法</span><span class="token keyword">function</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">,</span> <span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token variable">$func</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token variable">$a</span> <span class="token operator">+</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//输出结果：300</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>匿名函数还可以作为函数的参数传递，实现回调函数。<br>极大增强了函数的灵活性。</p></blockquote><h3><span id="ke-bian-yu-ni-ming">可变与匿名</span><a href="#ke-bian-yu-ni-ming" class="header-anchor">.</a></h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//可变</span><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"这是函数a"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//a</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这是函数a</span><span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示结果 ： string(1) "a"</span><span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示结果 ： 这是函数aNULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//匿名函数</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"这是匿名函数"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这是个语句</span><span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这是匿名函数</span><span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//显示结果 object(Closure)#1 (0) {}</span><span class="token keyword">echo</span> <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这是匿名函数NULL</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="shi-san-shu-zu">十三、数组</span><a href="#shi-san-shu-zu" class="header-anchor">.</a></h2><p>与java中数组不同</p><p>​    php的下标（键） 可以是 字符串类型</p><p>​    键和值之间 使用  =&gt; 连接数组</p><h3><span id="1-shu-zu-lei-xing">1.数组类型</span><a href="#1-shu-zu-lei-xing" class="header-anchor">.</a></h3><ul><li>索引数组：下标为整型的数组</li><li>关联数组：下标为字符串的数组</li></ul><img src="/2020/05/20/6418/image-20200520161848957.png" style="zoom:50%;"><h3><span id="2-ding-yi-shu-zu">2.定义数组</span><a href="#2-ding-yi-shu-zu" class="header-anchor">.</a></h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//定义索引数组</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'one'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'four'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//定义关联数组</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'lmk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//定义空数组、混合型数组</span><span class="token variable">$empty</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mixed</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$mixed</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'one'</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'two'</span><span class="token punctuation">,</span><span class="token string">'three'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//three 的键为3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>从PHP 5.4版本起，新增了定义数组的简写语法“[ ]”，使用 “[ ]”定义数组的语法与“array()”语法类似，书写更加方便。</p></blockquote><pre><code>$color = [&#39;red&#39;,&#39;blue&#39;]$arr = [&#39;one&#39;=&gt;1,&#39;two&#39;=&gt;2]</code></pre><blockquote><p>数组元素的下标只有整型和字符串两种类型，如果有其他类型，则会进行类型转换。<br>在PHP中合法的整数值下标会被自动的转换为整型下标。<br>若数组存在相同的下标时，后面的元素值会覆盖前面的元素值。</p></blockquote><h3><span id="3-fang-wen-shu-zu">3.访问数组</span><a href="#3-fang-wen-shu-zu" class="header-anchor">.</a></h3><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//定义数组</span><span class="token variable">$info</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'id'</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'Tom'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//方式一：通过键名访问元素</span><span class="token keyword">echo</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：Tom</span><span class="token variable">$var</span> <span class="token operator">=</span> <span class="token string">'id'</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//也可以使用变量的值作为键名</span><span class="token keyword">echo</span> <span class="token variable">$info</span><span class="token punctuation">[</span><span class="token variable">$var</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//输出结果：1</span><span class="token comment" spellcheck="true">//方式二：通过print_r()或var_dump()</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//输出结果：Array( [id]=> 1 [name]=> Tom )</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出结果：array(2){ ["id"]=> int(1) ["name"]=> string(3)"Tom" }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="4-shu-zu-fu-zhi">4.数组赋值</span><a href="#4-shu-zu-fu-zhi" class="header-anchor">.</a></h3><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">//定义数组（此步骤也可以省略）</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'PHP'</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//等价于：$arr[0] = 'PHP'</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Java'</span><span class="token punctuation">;</span>             <span class="token comment" spellcheck="true">//等价于：$arr[1] = 'Java'</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'C语言'</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//等价于：$arr[5] = 'C语言';</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token string">'sub'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'iOS'</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//等价于：$arr['sub'] = 'iOS';</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'HTML'</span><span class="token punctuation">;</span>              <span class="token comment" spellcheck="true">//等价于：$arr[6] = 'HTML'</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'JavaScript'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//修改数组，替换已经存在的元素</span><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'PHP'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'Java'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'C语言'</span><span class="token punctuation">,</span> <span class="token string">'sub'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'iOS'</span><span class="token punctuation">,</span> <span class="token string">'6'</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'JavaScript'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="5-shu-zu-shan-chu">5.数组删除</span><a href="#5-shu-zu-shan-chu" class="header-anchor">.</a></h3><p>unset()函数用于删除一个变量，也可以用于删除数组中的某个元素</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$color</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//删除数组单个元素</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//删除整个数组</span><span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span><span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$color</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3><span id="6-shu-zu-bian-li">6、数组遍历</span><a href="#6-shu-zu-bian-li" class="header-anchor">.</a></h3><p>foreach（）语句</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$color</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'red'</span><span class="token punctuation">,</span><span class="token string">'blue'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历 key value</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$color</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$key</span><span class="token punctuation">.</span><span class="token string">'-'</span><span class="token punctuation">.</span><span class="token variable">$value</span><span class="token punctuation">.</span><span class="token string">'  '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//遍历 value</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$color</span> <span class="token keyword">as</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$value</span><span class="token punctuation">.</span><span class="token string">'  '</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2><span id="shi-si-php-nei-zhi-han-shu">十四、PHP内置函数</span><a href="#shi-si-php-nei-zhi-han-shu" class="header-anchor">.</a></h2><h4><span id="zi-fu-chuan-han-shu">字符串函数</span><a href="#zi-fu-chuan-han-shu" class="header-anchor">.</a></h4><table><thead><tr><th><strong>函数名</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td>strlen()</td><td>获取字符串的长度</td></tr><tr><td>strrpos()</td><td>获取指定字符串在目标字符串中最后一次出现的位置</td></tr><tr><td>str_replace()</td><td>用于字符串中的某些字符进行替换操作</td></tr><tr><td>substr()</td><td>用于获取字符串中的子串</td></tr><tr><td>explode()</td><td>使用一个字符串分割另一个字符串</td></tr><tr><td>implode()</td><td>用指定的连接符将数组拼接成一个字符串</td></tr><tr><td>trim()</td><td>去除字符串首尾处的空白字符（或指定成其他字符）</td></tr><tr><td>str_repeat()</td><td>重复一个字符串</td></tr></tbody></table><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//① 字符串分割成数组</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果：array(3){ [0]=> string(2) "ba" [1]=> string(1) "a" [2]=> string(1) "a" }</span><span class="token comment" spellcheck="true">//② 分割时限制次数</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果：array(2){ [0]=> string(2) "ba" [1]=> string(3) "ana" }</span><span class="token comment" spellcheck="true">//③ 返回除了最后2个元素外的所有元素</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'banana'</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//输出结果: array(1){ [0]=> string(2) "ba" }</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="shu-zu-han-shu">数组函数</span><a href="#shu-zu-han-shu" class="header-anchor">.</a></h4><table><thead><tr><th><strong>函数名</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td>count()</td><td>用于计算数组中元素的个数</td></tr><tr><td>range()</td><td>用于建立一个包含指定范围单元的数组</td></tr><tr><td>sort()</td><td>对数组排序</td></tr><tr><td>rsort()</td><td>对数组逆向排序</td></tr><tr><td>ksort()</td><td>对数组按照键名排序</td></tr><tr><td>krsort()</td><td>对数组按照键名逆向排序</td></tr><tr><td>array_search()</td><td>在数组中搜索给定的值</td></tr><tr><td>array_unique()</td><td>移除数组中重复的值</td></tr><tr><td>array_column()</td><td>返回数组中指定的一列</td></tr><tr><td>array_keys()</td><td>返回数组中的键名</td></tr><tr><td>array_merge()</td><td>用于合并一个或多个数组</td></tr><tr><td>array_chunk()</td><td>可以将一个数组分割成多个</td></tr><tr><td>asort()</td><td>对数组进行排序并保持索引关系</td></tr><tr><td>arsort()</td><td>对数组进行逆向排序并保持索引关系</td></tr><tr><td>shuffle()</td><td>打乱数组顺序</td></tr><tr><td>array_reverse()</td><td>返回一个单元顺序相反的数组</td></tr><tr><td>array_rand ()</td><td>从数组中随机取出一个或多个单元</td></tr><tr><td>key()</td><td>从关联数组中取得键名</td></tr><tr><td>in_array()</td><td>检查数组中是否存在某个值</td></tr><tr><td>array_values ()</td><td>返回数组中所有的值</td></tr></tbody></table><h4><span id="shu-xue-han-shu">数学函数</span><a href="#shu-xue-han-shu" class="header-anchor">.</a></h4><table><thead><tr><th><strong>函数名</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td>abs()</td><td>绝对值</td></tr><tr><td>ceil()</td><td>向上取最接近的整数</td></tr><tr><td>floor()</td><td>向下取最接近的整数</td></tr><tr><td>fmod()</td><td>返回除法的浮点数余数</td></tr><tr><td>is_nan()</td><td>判断是否为合法数值</td></tr><tr><td>max()</td><td>返回最大值</td></tr><tr><td>min()</td><td>返回最小值</td></tr><tr><td>pi()</td><td>返回圆周率的值</td></tr><tr><td>pow()</td><td>返回x的y次方</td></tr><tr><td>sqrt()</td><td>平方根</td></tr><tr><td>round()</td><td>对浮点数进行四舍五入</td></tr><tr><td>rand()</td><td>返回随机整数</td></tr></tbody></table><h4><span id="ri-qi-han-shu">日期函数</span><a href="#ri-qi-han-shu" class="header-anchor">.</a></h4><p>Unix时间戳是一种时间表示方式，定义了从格林威治时间1970年01月01日00时00分00秒起至现在的总秒数。其中，1970年01月01日零点也叫作Unix纪元。</p><table><thead><tr><th><strong>函数名</strong></th><th><strong>功能描述</strong></th></tr></thead><tbody><tr><td>time()</td><td>返回当前的 Unix 时间戳</td></tr><tr><td>date()</td><td>格式化一个本地时间／日期</td></tr><tr><td>mktime()</td><td>取得一个日期的 Unix 时间戳</td></tr><tr><td>strtotime()</td><td>将字符串转化成Unix时间戳</td></tr><tr><td>microtime()</td><td>返回当前 Unix 时间戳和微秒数</td></tr></tbody></table><p>date()函数第1个参数表示格式化日期时间的样式<br>date()函数第2个参数表示待格式化的时间戳，省略时表示格式化当前时间戳。</p><table><thead><tr><th>Y</th><th>4位数字表示的完整年份，如1998、2015</th></tr></thead><tbody><tr><td>m</td><td>数字表示的月份，有前导零，返回值01~12</td></tr><tr><td>d</td><td>月份中的第几天，有前导零，返回值01~31</td></tr><tr><td>H</td><td>小时，24小时格式，有前导零，返回值00~23</td></tr><tr><td>i</td><td>有前导零的分钟数，返回值00~59</td></tr><tr><td>s</td><td>有前导零的秒数，返回值00~59</td></tr></tbody></table><p><a href="http://www.php.net/manual/zh/index.php" target="_blank" rel="noopener">php手册</a></p><p><a href="http://www.php.net/manual/zh/index.php" target="_blank" rel="noopener" style="position:fixed;top:50%;left:90%;text-decoration:none;font-size:25px;color:violet;background-color:yellow">PHP手册</a></p><h2><span id="shi-wu-bao-han-yu-ju">十五、包含语句</span><a href="#shi-wu-bao-han-yu-ju" class="header-anchor">.</a></h2><p>可以从另一个文件中将代码包含进来。使用包含语句不仅可以提高代码的重用性，还可以提高代码的维护和更新的效率。</p><p><strong>PHP提供的包含语句</strong></p><ul><li>Include</li><li>Require</li><li>Include_once</li><li>require_once</li></ul><h4><span id="include-yu-ju-qi-ta-yu-ju-yu-fa-lei-si">Include语句（其他语句语法类似）</span><a href="#include-yu-ju-qi-ta-yu-ju-yu-fa-lei-si" class="header-anchor">.</a></h4><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//第一种写法</span><span class="token keyword">include</span> <span class="token string">'文件路径'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第二种写法</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">'文件路径'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>require语句与include语句的异同点：</strong></p><ul><li>相同点：<ul><li>require语句与include语句的功能类似，都可以用于包含文件。</li></ul></li><li>不同点：<ul><li>在包含文件时，如果没有找到文件，include语句会<strong>发生警告信息，程序继续运行</strong>。</li><li>在包含文件时，如果没有找到文件， require语句会<strong>发生致命错误，程序停止运行</strong>。</li></ul></li></ul><p><strong>带_once与不带_once语句的区别：</strong></p><ul><li>include_once、require_once语句，与include、require的作用几乎相同</li><li>带_once的语句会<strong>先检查要包含的文件是否已经被包含过，避免了同一文件被重复的包含</strong>。</li></ul><h1><span id="web-jiao-hu">Web交互</span><a href="#web-jiao-hu" class="header-anchor">.</a></h1><h2><span id="1-get-chuan-can">1.get传参</span><a href="#1-get-chuan-can" class="header-anchor">.</a></h2><p>​        在使用PHP函数时，一个函数可以接收多个参数。同理，PHP脚本文件也可以接收参数，其传递参数的方式是通过URL地址实现的。</p><pre><code>http://www.bxg.com/test.php?name=Tom&amp;age=12</code></pre><blockquote><p>文件名test.php后面从“?”开始的部分就是传递的GET参数<br>name和age是参数的名称<br>Tom和12是相应的参数值<br>多个参数之间使用“&amp;”进行分隔。</p></blockquote><h2><span id="2-web-biao-dan">2.Web表单</span><a href="#2-web-biao-dan" class="header-anchor">.</a></h2><p>​        在实现浏览器向服务器发送数据时，除了用URL传递参数，还可以使用Web表单来实现。</p><p>​        在表单中的提交方式中，“method=post”表示表单以POST方式提交，当省略“method”属性时默认以GET方式提交。<br>​        相比GET方式，POST方式提交的数据是不可见的，在交互时相对安全，因此通常情况下使用POST方式提交表单数据。</p><p>表单：略（HTML5的内容）</p><h2><span id="3-huo-qu-wai-bu-shu-ju">3.获取外部数据</span><a href="#3-huo-qu-wai-bu-shu-ju" class="header-anchor">.</a></h2><p>​        当PHP收到来自浏览器的外部数据后，会自动保存到超全局变量数组中。超全局变量是PHP中预定义好的变量，可以在PHP脚本的任何位置使用。<br>​        常见的超全局变量有“$_GET、$_POST”等，通过GET方式提交的数据会保存到$_GET数组中，通过POST方式提交的数据会保存到$_POST数组中。<br>$_GET和$_POST的使用完全相同，接下来以$_POST为例进行详细讲解。</p><h4><span id="cha-kan-lai-zi-biao-dan-ti-jiao-de-shu-ju">查看来自表单提交的数据</span><a href="#cha-kan-lai-zi-biao-dan-ti-jiao-de-shu-ju" class="header-anchor">.</a></h4><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$_POST</span>实际上就是一个数组，其用法和普通数组没有区别。<span class="token comment" spellcheck="true">//输出所有的元素</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出指定元素</span><span class="token keyword">echo</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="pan-duan-biao-dan-shu-ju-shi-fou-cun-zai">判断表单数据是否存在</span><a href="#pan-duan-biao-dan-shu-ju-shi-fou-cun-zai" class="header-anchor">.</a></h4><p>​        用户通过POST方式进行表单提交时，若没有添加任何数据，则$_POST中就没有相应的数组元素。因此在取出数组元素之前，应该先判断数组中是否有这个元素</p><pre class="line-numbers language-php"><code class="language-php"><span class="token comment" spellcheck="true">//获取$_POST中的name元素，没有时默认为空字符串</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>isset()用于判断变量或数组元素是否存在<br>存在时返回true<br>不存在时返回false</p></blockquote><h4><span id="pan-duan-shu-ju-shi-fou-wei-kong">判断数据是否为空</span><a href="#pan-duan-shu-ju-shi-fou-wei-kong" class="header-anchor">.</a></h4><p>empty()</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//没有收到name，或name的值为空</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>用empty()函数判断数组元素是否为空，为空时返回true，元素不存在时也返回true。</p></blockquote><h4><span id="guo-lu-wai-bu-shu-ju">过滤外部数据</span><a href="#guo-lu-wai-bu-shu-ju" class="header-anchor">.</a></h4><p>​        在开发 PHP 程序时，为了便于调试，会将用户输入的内容直接显示到网页中。但是当网站上线时，如果不对用户的输入进行任何过滤，会带来安全风险。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span>用户名： <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>来访时间： <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span></span><span class="token number">2015</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">18</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>上述代码将一个来自 <span class="token constant">POST</span> 方式提交的 username 字段直接输出到网页中。如果用户输入“<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></span>”，那么网页结构会遭到破坏。如果用户输入<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span></span>标记和 JavaScript 代码，那么这些代码也会被浏览器执行，从而威胁到网站的安全。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>nl2br()函数</p><p>nl2br()函数可以将字符串中的“\n”转换成HTML换行符。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">nl2br</span><span class="token punctuation">(</span><span class="token string">"12\n34"</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出结果：12</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span><span class="token number">34</span>    <span class="token function">nl2br</span><span class="token punctuation">(</span><span class="token punctuation">)</span>函数的第二个参数用于设置使用<span class="token constant">XHTML</span>兼容换行符，默认值为<span class="token boolean">true</span>。   当第二个参数设置为<span class="token boolean">false</span>时，会将字符串中的“\<span class="token package">n</span>”转换成<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span></span>，否则转换为<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span></span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><ul><li><p>trim()函数</p><p>trim()函数可以去除字符串左右两端的空白字符，包括空格、换行和制表符等。</p></li><li><p>intval()函数</p><p>intval()函数可以将字符串转换为整型。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token string">'123abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：123</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token string">' 123abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出结果：123</span><span class="token keyword">echo</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token string">'abc123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//输出结果：0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>strip_tags()函数</p><p>strip_tags()函数可以去除字符串中的“&lt; &gt;”标签。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">strip_tags</span><span class="token punctuation">(</span><span class="token string">'&lt;b>测试&lt;/b>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//输出结果：“测试”</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>htmlspecialchars函数</p><p>htmlspecialchars()函数可以将字符串中的 HTML 特殊字符转换为 HTML 实体字符，从而防止被浏览器解析。</p><pre class="line-numbers language-php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token string">'&lt;测试>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment" spellcheck="true">//输出结果：“&amp;lt;测试&amp;gt;”</span><span class="token keyword">echo</span> <span class="token function">htmlspecialchars</span><span class="token punctuation">(</span><span class="token string">'&lt;b>测试&lt;/b>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//输出结果：“&amp;lt;b&amp;gt;测试&amp;lt;/b&amp;gt;”</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h4><span id="get-chuan-can-chu-li">GET传参处理</span><a href="#get-chuan-can-chu-li" class="header-anchor">.</a></h4><p>在通过URL地址传递参数时，特殊字符在URL中直接书写可能会出现问题。</p><p>例如，“&amp;”符号已经被作为参数分隔符，如果参数值中也出现该符号，就会被误识别为分隔符。    </p><p>因此，当通过PHP输出一段带有GET参数的URL地址时，最好使用<strong>urlencode()</strong>函数对GET参数进行编码</p><pre class="line-numbers language-php"><code class="language-php"><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string">'A&amp;B C'</span><span class="token punctuation">;</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//URL编码</span><span class="token keyword">echo</span> "http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.bxg.com/test.php?name=$name";</span>http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//www.bxg.com/test.php?name=A%26B+C</span>在通过<span class="token variable">$_GET</span>接收参数时，获得的数据已经是<span class="token constant">URL</span>解码后的结果，无需手动进行<span class="token constant">URL</span>解码。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器的配置</title>
      <link href="/2020/05/19/15935.html"/>
      <url>/2020/05/19/15935.html</url>
      
        <content type="html"><![CDATA[<h1><span id="pei-zhi-hu-lian-wang">配置互联网</span><a href="#pei-zhi-hu-lian-wang" class="header-anchor">.</a></h1><ul><li>在互联网中，搭建一个上线网站：需要域名和IP地址。</li><li>在开发阶段，搭建一个网站：只需要网站域名，使网站能够在本机与局域网内被访问就足够了。</li></ul><h2><span id="1-pei-zhi-wang-zhan-yu-ming">1.配置 网站域名</span><a href="#1-pei-zhi-wang-zhan-yu-ming" class="header-anchor">.</a></h2><ul><li><h3><span id="da-kai-c-windows-system32-drivers-etc-xia-de-hosts-wen-jian-pei-zhi-ip-di-zhi-yu-yu-ming-de-ying-she-guan-xi">打开‘C:/windows/system32/drivers/etc’ 下的hosts文件 配置IP地址 与 域名的映射关系</span><a href="#da-kai-c-windows-system32-drivers-etc-xia-de-hosts-wen-jian-pei-zhi-ip-di-zhi-yu-yu-ming-de-ying-she-guan-xi" class="header-anchor">.</a></h3></li></ul><p><img src="/2020/05/19/15935/image-20200519210848527.png" alt="hosts"></p><ul><li><h3><span id="pei-zhi-xu-ni-zhu-ji">配置虚拟主机</span><a href="#pei-zhi-xu-ni-zhu-ji" class="header-anchor">.</a></h3><ul><li><p>虚拟主机是Apache提供的一个功能，通过虚拟主机可以在一台服务器上部署多个网站。</p></li><li><p>通常一台服务器的IP地址是固定的，而不同的域名可以解析到同一个IP地址。<br>因此当用户使用不同的域名访问同一台服务器时，<strong>虚拟主机功能可以使用户访问到不同的网站</strong>。</p><h4><span id="1-geng-gai-hosts-wen-jian">1.更改hosts文件</span><a href="#1-geng-gai-hosts-wen-jian" class="header-anchor">.</a></h4><p><img src="/2020/05/19/15935/image-20200519211638922.png" alt></p><h4><span id="2-qi-dong-fu-pei-zhi-wen-jian">2.启动辅配置文件</span><a href="#2-qi-dong-fu-pei-zhi-wen-jian" class="header-anchor">.</a></h4><p>​        辅配置文件是Apache配置文件httpd.conf的扩展文件，用于将一部分配置抽取出来便于修改</p><p>​        1.打开httpd.conf文件，找到如下所示的一行配置，取消注释即可</p><blockquote><p>#Include conf/extra/httpd-vhosts.conf    # 取消注释</p></blockquote><p><img src="/2020/05/19/15935/image-20200519212146910.png" alt></p><p>​        2.打开“conf/extra/httpd-vhosts.conf”虚拟主机配置文件，将文件中原有的配置全部注释起来，然后重新编写如下的配置</p><pre><code>&lt;VirtualHost *:80&gt;      DocumentRoot &quot;G:/phpEnv/www&quot;      ServerName www.test.com&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt;      DocumentRoot &quot;G:/phpEnv/www/bxg&quot;      ServerName bxg.test.com&lt;/VirtualHost&gt;&lt;VirtualHost *:80&gt;      DocumentRoot &quot;G:/phpEnv/www/admin&quot;    ServerName www.admin.com&lt;/VirtualHost&gt;</code></pre></li></ul><p><img src="/2020/05/19/15935/image-20200519212856180.png" alt></p><p>​            3.创建文件夹</p><p>  ​                创建文件夹  G:/phpEnv/www/bxg ，并在文件夹中放一个简        单的网页，然后重启Apache使配置文件生效</p><p>  ​            <img src="/2020/05/19/15935/image-20200519214204073.png" alt></p></li><li><h3><span id="fang-wen-quan-xian-kong-zhi">访问权限控制</span><a href="#fang-wen-quan-xian-kong-zhi" class="header-anchor">.</a></h3><ul><li>Apache可以控制服务器中的哪些路径允许被外部访问。<br>在httpd.conf中，默认站点目录“htdocs”已经配置为允许外部访问，</li></ul></li><li><p>如果要将其他目录也允许访问时，需要手动通过<directory>指令进行配置。</directory></p><ul><li>Require local   ：只允许本地访问</li><li>Require all granted    ： 允许所有的访问</li><li>Require all denied   ：   拒绝所有的访问</li></ul></li><li><h3><span id="fen-bu-shi-pei-zhi-wen-jian">分布式配置文件</span><a href="#fen-bu-shi-pei-zhi-wen-jian" class="header-anchor">.</a></h3><p>​       分布式配置文件是为目录单独进行配置的文件，可以实现在<strong>不重启服务器</strong>的前提下更<strong>改某个目录的配置</strong>。</p><h4><span id="1-kai-qi-fen-bu-shi-pei-zhi-wen-jian">1.开启分布式配置文件</span><a href="#1-kai-qi-fen-bu-shi-pei-zhi-wen-jian" class="header-anchor">.</a></h4><p>​    开启时，打开配置文件“httpd-vhosts.conf”，添加如下配置。</p><p>​    </p><pre><code>&lt;Directory &quot;G:/phpEnv/www/admin&quot;&gt;      Require local      AllowOverride All&lt;/Directory&gt;</code></pre><ul><li>开启分布式配置文件 ： AllowOverride All</li><li>关闭分布式配置文件 :    AllowOverride None</li></ul><h4><span id="2-chuang-jian-fen-bu-shi-pei-zhi-wen-jian">2.创建分布式配置文件</span><a href="#2-chuang-jian-fen-bu-shi-pei-zhi-wen-jian" class="header-anchor">.</a></h4><ul><li>在站点目录中创建名为“.htaccess”文件，该文件中的配置将会<strong>覆盖原有</strong>的目录配置。分布式配置文件中可以直接编写<directory>中的大部分的配置。</directory></li></ul></li><li><h3><span id="mu-lu-liu-lan-gong-neng">目录浏览功能</span><a href="#mu-lu-liu-lan-gong-neng" class="header-anchor">.</a></h3><ul><li><p>当开启Apache目录浏览功能时，如果访问的目录中没有默认索引页（如index.html），就会显示目录中的文件列表。</p></li><li><p>实现方式有两种：一种是在配置文件中的<directory>开启；另一种是在分布式配置文件中开启。<br>下面以分布式配置文件为例，进行讲解。</directory></p><h4><span id="zai-mu-lu-g-phpenv-www-admin-zhong-chuang-jian-wen-jian-htaccess-tian-jia-ru-xia-pei-zhi">在目录“G:/phpEnv/www/admin/”中创建文件“.htaccess”，添加如下配置</span><a href="#zai-mu-lu-g-phpenv-www-admin-zhong-chuang-jian-wen-jian-htaccess-tian-jia-ru-xia-pei-zhi" class="header-anchor">.</a></h4><pre><code># 当www/admmin目录下没有该文件时,实现目录预览Options Indexes#上线后关闭</code></pre><p><img src="/2020/05/19/15935/image-20200519231302360.png" alt></p></li></ul></li><li><h3><span id="zi-ding-yi-cuo-wu-ye-mian">自定义错误页面</span><a href="#zi-ding-yi-cuo-wu-ye-mian" class="header-anchor">.</a></h3><p>​        在Web开发中，HTTP状态码用于表示Web服务器的响应状态，由3位数字组成。常见的HTTP状态码有</p><p>403（Forbidden，拒绝访问）<br>404（Not Found，页面未找到）<br>500（Internal Server Error，服务器内部错误</p><ul><li><p>在分布式配置文件中，添加以下配置：</p><p><code>/ : Apache安装的root目录</code></p></li></ul></li></ul><pre><code>ErrorDocument 403 /403.htmlErrorDocument 404 /404.htmlErrorDocument 500 /500.html</code></pre><ul><li><h3><span id="jie-jue-bian-ma-wen-ti">解决编码问题</span><a href="#jie-jue-bian-ma-wen-ti" class="header-anchor">.</a></h3><ul><li><p>HTML方式</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>PHP方式</p><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment">#第一种</span><span class="token shell-comment comment">#在使用PHP输出中文之前，通过HTTP响应消息告知浏览器当前网页的编码</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-php"><code class="language-php"><span class="token shell-comment comment">#第二种</span><span class="token shell-comment comment">#在PHP的配置文件php.ini中，通过“default_charset”可以设置默认编码</span>default_charset <span class="token operator">=</span> <span class="token string">"UTF-8"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><h3><span id="kai-qi-php-kuo-zhan">开启PHP扩展</span><a href="#kai-qi-php-kuo-zhan" class="header-anchor">.</a></h3><ul><li><p>在PHP的安装目录中，“ext”文件夹保存的是PHP的扩展。</p></li><li><p>在安装后的默认情况下，PHP扩展是全部关闭的，用户可以根据情况手动打开或关闭扩展。</p></li><li><p>在php.ini中，“extension”用于载入扩展。</p><p><strong>列举PHP中的常用扩展</strong></p><blockquote><p>extension=php_curl.dll<br>extension=php_gd2.dll<br>extension=php_mbstring.dll<br>extension=php_mysql.dll<br>extension=php_mysqli.dll<br>extension=php_pdo_mysql.dll</p></blockquote></li></ul></li></ul><h5><span id="zhu-yi-php-de-curl-kuo-zhan-zai-php-ini-zhong-kai-qi-hou-huan-bu-neng-shi-yong-xu-yao-zai-apache-pei-zhi-wen-jian-httpd-conf-zhong-jin-xing-pei-zhi">注意：PHP的CURL扩展在php.ini中开启后还不能使用，需要在Apache配置文件“httpd.conf”中进行配置。</span><a href="#zhu-yi-php-de-curl-kuo-zhan-zai-php-ini-zhong-kai-qi-hou-huan-bu-neng-shi-yong-xu-yao-zai-apache-pei-zhi-wen-jian-httpd-conf-zhong-jin-xing-pei-zhi" class="header-anchor">.</a></h5><pre><code>LoadFile &quot;G:/phpEnv/www/php7/libssh2.dll&quot;</code></pre>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
          <category> 安装和配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> apache </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>front-matter</title>
      <link href="/2020/05/18/8768.html"/>
      <url>/2020/05/18/8768.html</url>
      
        <content type="html"><![CDATA[<table><thead><tr><th align="center">配置选项</th><th align="center">默认值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">title（必写）</td><td align="center">Markdown的文件标题</td><td align="center">文章标题</td></tr><tr><td align="center">date（必写）</td><td align="center">文件创建时的日期时间</td><td align="center">发布时间</td></tr><tr><td align="center"></td><td align="center">文件更新的日期时间</td><td align="center">更新时间</td></tr><tr><td align="center">layout</td><td align="center"></td><td align="center">布局</td></tr><tr><td align="center">permalink</td><td align="center"></td><td align="center">覆盖文章网址</td></tr><tr><td align="center">comments</td><td align="center">true</td><td align="center">开启文章评论功能</td></tr><tr><td align="center">author</td><td align="center">hexo的_config.xml中的author</td><td align="center">文章作者</td></tr><tr><td align="center">img</td><td align="center">featureImages中的某个值</td><td align="center"></td></tr><tr><td align="center">top</td><td align="center">true</td><td align="center">推荐文章（文章是否置顶），如果 <code>top</code> 值为 <code>true</code>，则会作为首页推荐文章</td></tr><tr><td align="center">cover</td><td align="center"><code>false</code></td><td align="center">表示该文章是否需要加入到首页轮播封面中</td></tr><tr><td align="center">coverImg</td><td align="center">无</td><td align="center">表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td></tr><tr><td align="center">password</td><td align="center">无</td><td align="center">文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 <code>password</code> 的值，该值必须是用 <code>SHA256</code> 加密后的密码，防止被他人识破。前提是在主题的 <code>config.yml</code> 中激活了 <code>verifyPassword</code> 选项</td></tr><tr><td align="center">toc</td><td align="center"><code>true</code></td><td align="center">是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 <code>config.yml</code> 中激活了 <code>toc</code> 选项</td></tr><tr><td align="center">mathjax</td><td align="center"><code>false</code></td><td align="center">是否开启数学公式支持 ，本文章是否开启 <code>mathjax</code>，且需要在主题的 <code>_config.yml</code> 文件中也需要开启才行</td></tr><tr><td align="center">summary</td><td align="center">无</td><td align="center">文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td></tr><tr><td align="center">categories</td><td align="center">无</td><td align="center">文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td></tr><tr><td align="center">tags</td><td align="center">无</td><td align="center">文章标签，一篇文章可以多个标签</td></tr></tbody></table><p>注意:</p><blockquote><p>如果 img 属性不填写的话，文章特色图会根据文章标题的 hashcode 的值取余，然后选取主题中对应的特色图片，从而达到让所有文章都的特色图各有特色。<br>date 的值尽量保证每篇文章是唯一的，因为本主题中 Gitalk 和 Gitment 识别 id 是通过 date 的值来作为唯一标识的。<br>如果要对文章设置阅读验证密码的功能，不仅要在 Front-matter 中设置采用了 SHA256 加密的 password 的值，还需要在主题的 _config.yml 中激活了配置。有些在线的 SHA256 加密的地址，可供使用：开源中国在线工具、chahuo、站长工具。</p></blockquote><p>参考<a href="https://blog.csdn.net/jspnetcn/article/details/104111651" target="_blank" rel="noopener">https://blog.csdn.net/jspnetcn/article/details/104111651</a></p><p>hexo官方文档</p>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> front-matter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo官方文档</title>
      <link href="/2020/05/18/50613.html"/>
      <url>/2020/05/18/50613.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">hexo官方文档</a></p>]]></content>
      
      
      <categories>
          
          <category> 文档 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 文档 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php在win下的环境搭建</title>
      <link href="/2020/05/18/16407.html"/>
      <url>/2020/05/18/16407.html</url>
      
        <content type="html"><![CDATA[<h2><span id="windows-xia-php-huan-jing-da-jian-apache2-4-php7-3-18">windows下php环境搭建 Apache2.4 + php7.3.18</span><a href="#windows-xia-php-huan-jing-da-jian-apache2-4-php7-3-18" class="header-anchor">.</a></h2><h3><span id="yi-apache4-2-an-zhuang-he-pei-zhi">一、Apache4.2 安装和配置</span><a href="#yi-apache4-2-an-zhuang-he-pei-zhi" class="header-anchor">.</a></h3><p><strong>下载地址:</strong>  <a href="http://www.apachelounge.com/download/" target="_blank" rel="noopener">http://www.apachelounge.com/download/</a><br>    <a href="https://www.apachehaus.com/cgi-bin/download.plx/" target="_blank" rel="noopener">https://www.apachehaus.com/cgi-bin/download.plx/</a>  </p><h4><span id="yi-shang-liang-ge-lian-jie-du-ke-yi-xia-zai">以上两个链接都可以下载</span><a href="#yi-shang-liang-ge-lian-jie-du-ke-yi-xia-zai" class="header-anchor">.</a></h4><ul><li><p>在界面中vc15 vc16等之间的差异,vc15是指用vs2014编译的代码,vc16是指vs2015编译的代码 </p><img src="/2020/05/18/16407/apache_1.png" style="zoom:50%;"><p>​    <img src="/2020/05/18/16407/apache_2.png" style="zoom:50%;"></p><h4><span id="apache-an-zhuang-mu-lu-jie-gou">apache安装目录结构</span><a href="#apache-an-zhuang-mu-lu-jie-gou" class="header-anchor">.</a></h4></li></ul><table><thead><tr><th><strong>目录名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>bin</td><td>Apache可执行文件目录，如httpd.exe、ApacheMonitor.exe等</td></tr><tr><td>cig-bin</td><td>CGI网页程序目录</td></tr><tr><td>conf</td><td>Apache配置文件目录</td></tr><tr><td>htdocs</td><td>默认站点的网页文档目录</td></tr><tr><td>logs</td><td>Apache日志文件目录，主要包括访问日志access.log和错误日志error.log</td></tr><tr><td>manual</td><td>Apache帮助手册目录</td></tr><tr><td>modules</td><td>Apache动态加载模块目录</td></tr></tbody></table><h5><span id="an-zhuang-pei-zhi">安装 配置：</span><a href="#an-zhuang-pei-zhi" class="header-anchor">.</a></h5><p>将已经下载好的压缩包解压到你想要的安装的目录下，如<strong>G:/phpEnv</strong>目录下，这里以<strong>G:/phpEnv/Apache24</strong>为例</p><p>1.<strong>使用文本编辑器</strong>    编辑G:/phpEnv/Apache24/conf/<strong>httpd.conf</strong>文件</p><h6><span id="zhu-yi-windows-huan-jing-xia-pei-zhi-wen-jian-suo-you-de-gai-wei">注意：windows环境下,配置文件所有的 ‘ \ ’ 改为 ‘ / ’</span><a href="#zhu-yi-windows-huan-jing-xia-pei-zhi-wen-jian-suo-you-de-gai-wei" class="header-anchor">.</a></h6><ul><li><p>配置安装目录</p><p>更改内容 为ServerRoot “G:/phpEnv/Apache24” </p><h6><span id="mu-lu-gen-ju-zi-ji-an-zhuang-mu-lu-xiu-gai">目录根据自己安装目录修改</span><a href="#mu-lu-gen-ju-zi-ji-an-zhuang-mu-lu-xiu-gai" class="header-anchor">.</a></h6><p><img src="/2020/05/18/16407/apache_3.png" alt></p></li><li><p>配置服务器域名 </p><p>更改内容 为ServerName localhost:80</p></li></ul><h6><span id="zhu-yi-bi-xu-ba-qian-mian-de-qu-diao">注意必须把前面的 ‘ # ’去掉</span><a href="#zhu-yi-bi-xu-ba-qian-mian-de-qu-diao" class="header-anchor">.</a></h6><p>  <img src="/2020/05/18/16407/apache_4.png" alt></p><h6><span id="dang-duan-kou-bei-zhan-yong-shi-jiang-duan-kou-hao-xiu-gai-wei-qi-ta-zhi">当端口被占用时 将端口号修改为其他值</span><a href="#dang-duan-kou-bei-zhan-yong-shi-jiang-duan-kou-hao-xiu-gai-wei-qi-ta-zhi" class="header-anchor">.</a></h6><p><img src="/2020/05/18/16407/image-20200518122028162.png" alt></p><ul><li><p>配置站点的网页文档目录</p><p>  更改内容 为<br>  <img src="/2020/05/18/16407/image-20200518122455739.png" alt></p></li></ul><p>2.<strong>使用cmd(管理员) cd到Apache安装目录的bin文件夹下</strong>  </p><ul><li><p>安装apache服务，并加入到系统服务中</p><h6><span id="zhu-yi-cmd-guan-li-yuan-zai-apache-an-zhuang-mu-lu-de-bin-mu-lu-xia-cao-zuo">注意：cmd管理员 在apache安装目录的bin目录下 操作</span><a href="#zhu-yi-cmd-guan-li-yuan-zai-apache-an-zhuang-mu-lu-de-bin-mu-lu-xia-cao-zuo" class="header-anchor">.</a></h6><blockquote><p>httpd -k install</p></blockquote><p>  <img src="/2020/05/18/16407/image-20200518124207693.png" alt></p><p>  Errors reported here must be corrected before the service can be started<br>  <code>若该句话后面有错误信息，则表示服务安装失败，需要先改正错误。若没有，则成功</code>  </p></li><li><p>启动apache服务: <strong>两种方式</strong></p><ol><li><p>cmd命令行 依然需要 管理员权限</p><blockquote><p>httpd -k start</p></blockquote></li><li><p>可以使用bin文件夹下的 ApacheMonitor.exe启动   双击该程序<br><img src="/2020/05/18/16407/image-20200518125553982.png" alt></p><p><img src="/2020/05/18/16407/image-20200518161849303.png" alt></p><p>启动后浏览器地址栏输入 localhost </p><p><img src="/2020/05/18/16407/image-20200518124318456.png" alt></p></li></ol></li></ul><h3><span id="bu-chong-apache-fu-wu-xie-zai">补充Apache服务卸载:</span><a href="#bu-chong-apache-fu-wu-xie-zai" class="header-anchor">.</a></h3><blockquote><p>httpd.exe -k uninstall </p></blockquote><p><img src="/2020/05/18/16407/image-20200518124419438.png" alt="image-20200518124419438"></p><h3><span id="bu-chong-apache-chang-yong-pei-zhi">补充Apache常用配置</span><a href="#bu-chong-apache-chang-yong-pei-zhi" class="header-anchor">.</a></h3><h6><span id="xu-yao-zhu-yi-de-shi-yi-dan-xiu-gai-cuo-wu-hui-zao-cheng-apache-wu-fa-an-zhuang-huo-wu-fa-qi-dong-jian-yi-zai-xiu-gai-qian-xian-bei-fen-httpd-conf-pei-zhi-wen-jian">需要注意的是，一旦修改错误，会造成Apache无法安装或无法启动，建议在修改前先备份“httpd.conf”配置文件。</span><a href="#xu-yao-zhu-yi-de-shi-yi-dan-xiu-gai-cuo-wu-hui-zao-cheng-apache-wu-fa-an-zhuang-huo-wu-fa-qi-dong-jian-yi-zai-xiu-gai-qian-xian-bei-fen-httpd-conf-pei-zhi-wen-jian" class="header-anchor">.</a></h6><table><thead><tr><th><strong>配置项</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>ServerRoot</td><td>Apache服务器的根目录，即安装目录</td></tr><tr><td>Listen</td><td>服务器监听的端口号，如80、8080</td></tr><tr><td>LoadModule</td><td>需要加载的模块</td></tr><tr><td>ServerAdmin</td><td>服务器管理员的邮箱地址</td></tr><tr><td>ServerName</td><td>服务器的域名</td></tr><tr><td>DocumentRoot</td><td>网站根目录</td></tr><tr><td>ErrorLog</td><td>用于记录错误日志</td></tr></tbody></table><h3><span id="bu-chong-wo-yu-dao-de-cuo-wu">补充我遇到的错误</span><a href="#bu-chong-wo-yu-dao-de-cuo-wu" class="header-anchor">.</a></h3><blockquote><p><strong>错误1</strong><br>(OS 1783)占位程序接收到错误数据。  : AH00370: Failed to create the ‘localhost’ service<br><img src="/2020/05/18/16407/apache_6.png" alt><br><strong>出错原因:</strong> 服务安装被360软件拦截<br><strong>解决方法:</strong> 关掉360一类的安全软件</p></blockquote><blockquote><p><strong>错误2</strong><br>AH00558: httpd.exe: Could not reliably determine the server’s fully qualified domain name, using fe80::8566:6b7a:4dc2:6593. Set the ‘ServerName’ directive globally to suppress this message<br><img src="/2020/05/18/16407/apache_6.png" alt><br><strong>出错原因:</strong> Apache配置文件中 缺少ServerName的信息(httpd.conf中ServerName之前 ‘ # ’删掉)<br><strong>解决方法:</strong> 删除 ServerName前的‘ # ’</p></blockquote><hr><h3><span id="er-php-an-zhuang-he-pei-zhi">二、PHP安装和配置</span><a href="#er-php-an-zhuang-he-pei-zhi" class="header-anchor">.</a></h3><p><strong>下载地址：</strong><br><a href="https://windows.php.net/download#php-7.3" target="_blank" rel="noopener">https://windows.php.net/download#php-7.3</a></p><h6><span id="zhu-yi-xia-zai-xian-cheng-an-quan-ban">注意下载线程安全版</span><a href="#zhu-yi-xia-zai-xian-cheng-an-quan-ban" class="header-anchor">.</a></h6><p><img src="/2020/05/18/16407/image-20200518130511074.png" alt></p><h6><span id="php-mu-lu-jie-gou-jie-xi">php目录结构解析</span><a href="#php-mu-lu-jie-gou-jie-xi" class="header-anchor">.</a></h6><p>​    ext是PHP扩展文件所在的目录<br>​    php.exe是PHP的命令行应用程序<br>​    php7apache2_4.dll是用于Apache的DLL模块<br>​    php.ini-development是PHP预设的配置模板，适用于开发环境<br>​    php.ini-production也是配置模板，适合网站上线时使用</p><h4><span id="an-zhuang-he-pei-zhi">安装和配置：</span><a href="#an-zhuang-he-pei-zhi" class="header-anchor">.</a></h4><ul><li><p>解压压缩包到  <strong>G:\phpEnv\php</strong>下</p></li><li><p>创建php.ini：将php目录下<strong>php.ini-development</strong>拷贝更名为 <strong>php.ini</strong>(php配置文件)</p></li><li><p>配置扩展目录：打开php.ini</p><p>  ​    更改内容 ；extension_dir=”ext”  ==&gt;  extension_dir=”php扩展目录” </p><p>  <img src="/2020/05/18/16407/image-20200518133933051.png" alt="image-20200518133933051"></p></li><li><p>配置PHP时区： 打开php.ini      PRC:中国时区 UTC：协调世界时</p><p>  更改内容 ;date.timezone =      ==&gt;       data.timezone = PRC <img src="/2020/05/18/16407/image-20200518134717384.png" alt="image-20200518134717384"></p></li><li><p>在<strong>apache的httpd.conf</strong>文件中做以下 ==添加内容==</p></li></ul><pre><code>    PHPIniDir &quot;G:/phpEnv/php/&quot;  #根据实际路径修改    LoadModule php7_module &quot;G:/phpEnv/php/php7apache2_4.dll&quot; #根据实际路径修改    &lt;FilesMatch &quot;\.php$&quot;&gt;    setHandler application/x-httpd-php    &lt;/FilesMatch&gt;   ![](image-20200518130816954.png)</code></pre><ul><li><p>修改索引页 ： 打开httpd.conf  </p><pre><code>#添加 index.php&lt;IfModule dir_module&gt;    DirectoryIndex index.html index.php&lt;/IfModule&gt;</code></pre></li><li><p>测试 php是否安装成功</p><p>在网页目录(下面这个目录)下 新建文件 phpinfo.php</p><p><img src="/2020/05/18/16407/image-20200518122455739.png" alt></p><pre><code># phpinfo.php 文件内容&lt;?php    phpinfo();?&gt;</code></pre><p>完成后，在浏览器中访问<a href="http://localhost/phpinfo.php" target="_blank" rel="noopener">http://localhost/phpinfo.php</a> 出现以下成功 </p><h6><span id="zhu-yi-xian-chong-qi-fu-wu-httpd-k-restart">注意：先重启服务 httpd -k restart</span><a href="#zhu-yi-xian-chong-qi-fu-wu-httpd-k-restart" class="header-anchor">.</a></h6><p><img src="/2020/05/18/16407/image-20200518140403480.png" alt="image-20200518140403480"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 安装和配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> apache </tag>
            
            <tag> php环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo上传图片出现问题-解决</title>
      <link href="/2020/05/15/17541.html"/>
      <url>/2020/05/15/17541.html</url>
      
        <content type="html"><![CDATA[<h2><span id="hexo-shang-chuan-tu-pian-wen-ti">hexo上传图片问题</span><a href="#hexo-shang-chuan-tu-pian-wen-ti" class="header-anchor">.</a></h2><ul><li><h4><span id="you-yu-tu-pian-shang-chuan-lu-jing-yu-bo-ke-wen-dang-zhong-lu-jing-bu-tong-yi">由于图片上传路径与博客文档中路径不统一</span><a href="#you-yu-tu-pian-shang-chuan-lu-jing-yu-bo-ke-wen-dang-zhong-lu-jing-bu-tong-yi" class="header-anchor">.</a></h4></li></ul><p>安装插件   </p><pre><code>    npm i hexo-asset-image --save  </code></pre><p>配置_config.yml 文件  修改 post_asset_folder</p><pre><code>    post_asset_folder: true</code></pre><p>配置完后，在使用 hexo new post “” 时 会生成一个 与博客名一样的文件夹 ，这个文件夹用于装 资源的（博客里面的图片。。。）</p><p>这样就强制把上传的本地资源目录 转移到 /…../source/_posts/博客文件名/  下<br><code>YYYY : 年份 如 2020</code></p><blockquote><p>上传过程中 改的路径有两个</p><p>一个 是博客文档（.md）中 ![](随便一个目录/test.png)<br> ==&gt;       HTML中 &lt;img    src= “/YYYY/日期/博客名/test.png”&gt;<br>这个可以用 F12 去博客页面查看 文件路径是否更改</p><p>另一个 是 把 在 博客文件夹下 的 资源文件<br>它的目录 ：/…../source/_posts/博客文件名/ 资源文件 如</p><p>/…../source/_posts/博客文件名/ test.png  ==&gt;  github上 /YYYY/日期/博客名/test.png </p><p>路径是根据这个设定的</p><p><img src="/2020/05/15/17541/image-20200519132755390.png" alt></p></blockquote><blockquote><p>如果 两路径相同 引入成功</p></blockquote><p>前者的格式可能是 /年/日期/博客名/文件夹/文件<br>        或  /年/日期/博客名/文件</p><p>后者的格式只有 /年/日期/博客名/文件</p><h5><span id="ke-yi-kan-chu">可以看出</span><a href="#ke-yi-kan-chu" class="header-anchor">.</a></h5><p>​    1.资源文件必须放置在 博客名文件夹下 且 不能有子文件夹</p><p>​    2.博客文件 中 引用文件路径可以随便写，只要文件名是对的就行 当然乱写 会导致你在编辑器里 看不到图片     <strong>推荐</strong>： 就写相对路径 即 （ ./博客名/资源文件名 或 博客名/资源文件名 ）</p><blockquote><p>当你的资源文件 不在 博客名文件夹下  肯定是出错的</p></blockquote><ul><li><h4><span id="you-ke-neng-shi-lu-jing-shi-pi-pei-de-yuan-ben-shang-chuan-de-tu-pian-yi-sun-pi">有可能是路径是匹配的，原本上传的图片已损坏</span><a href="#you-ke-neng-shi-lu-jing-shi-pi-pei-de-yuan-ben-shang-chuan-de-tu-pian-yi-sun-pi" class="header-anchor">.</a></h4>  损坏 自己想办法</li></ul><p>弄张图片看看<br><img src="/2020/05/15/17541/2.png" alt></p><p>​</p>]]></content>
      
      
      <categories>
          
          <category> error </category>
          
      </categories>
      
      
        <tags>
            
            <tag> error </tag>
            
            <tag> 问题 </tag>
            
            <tag> 已解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown语法汇总</title>
      <link href="/2020/05/15/15918.html"/>
      <url>/2020/05/15/15918.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h2><span id="shi-me-shi-markdown">什么是 Markdown</span><a href="#shi-me-shi-markdown" class="header-anchor">.</a></h2><blockquote><p><strong>Markdown</strong> 是一种文本格式。你可以用它来控制文档的显示。使用Markdown，你可以创建各种样式的文字，添加图片，并且可以创建表格 等等。</p></blockquote><p>​    <strong>由于各编辑器的Markdown语法存在差异 所以 这里 主要是 关于 ==vscode== 和 ==typora==两款编辑器的 基本使用</strong></p><p><strong>下面是两编辑器开启扩展功能的方法</strong></p><ul><li><p>vscode 安装 Markdown Preview插件</p><img src="/2020/05/15/15918/vscode_MPE.png" style="zoom:50%;"></li><li><p>typora设置中勾选扩展选项</p><img src="/2020/05/15/15918/Typora_MPE.png" style="zoom: 50%;"></li></ul><h3><span id="yu-fa-shuo-ming">语法说明</span><a href="#yu-fa-shuo-ming" class="header-anchor">.</a></h3><h4><span id="1-biao-ti">1.标题</span><a href="#1-biao-ti" class="header-anchor">.</a></h4><pre><code># h1 ## h2 ### h3#### h4##### h5###### h6------------------------------------------------------如果你想要给你的标题添加`id`或者`class`，就在标题最后添加{#id .class1 .class2}。如：# 标题 {#id .class}/*这是一个MPE扩展的特性*/</code></pre><ul><li><p>演示：</p><h1><span id="h1">h1</span><a href="#h1" class="header-anchor">.</a></h1><h2><span id="h2">h2</span><a href="#h2" class="header-anchor">.</a></h2><h3><span id="h3">h3</span><a href="#h3" class="header-anchor">.</a></h3><h4><span id="h4">h4</span><a href="#h4" class="header-anchor">.</a></h4><h5><span id="h5">h5</span><a href="#h5" class="header-anchor">.</a></h5><h6><span id="h6">h6</span><a href="#h6" class="header-anchor">.</a></h6></li></ul><h4><span id="2-qiang-diao">2.强调</span><a href="#2-qiang-diao" class="header-anchor">.</a></h4><pre><code>  *斜体*  _斜体_  **粗体**  __粗体__  _组**组合**合_  *组__组合__合*  **组_组合_合**  __组*组合*合__  ~~删除~~  ==标记==</code></pre><ul><li><p>演示：</p><p><em>斜体</em><br><em>斜体</em></p><p><strong>粗体</strong><br><strong>粗体</strong></p><p><em>组<strong>组合</strong>合</em><br><em>组<strong>组合</strong>合</em><br><strong>组_组合_合</strong><br><strong>组<em>组合</em>合</strong> </p><p><del>删除</del><br>==标记==</p></li></ul><h4><span id="3-lie-biao">3.列表</span><a href="#3-lie-biao" class="header-anchor">.</a></h4><h5><span id="wu-xu-lie-biao">无序列表</span><a href="#wu-xu-lie-biao" class="header-anchor">.</a></h5><pre><code>- 列表1- 列表2    - 列表2.1        - 列表2.1.1            - 列表2.1.1.1</code></pre><ul><li><p>演示：</p></li><li><p>列表1</p></li><li><p>列表2</p><ul><li>列表2.1<ul><li>列表2.1.1<ul><li>列表2.1.1.1 </li></ul></li></ul></li></ul></li></ul><h5><span id="you-xu-lie-biao">有序列表</span><a href="#you-xu-lie-biao" class="header-anchor">.</a></h5><pre><code>  1. 列表1  1. 列表2      1. 列表2.1          1. 列表2.1.1              1. 列表2.1.1.1      1. 列表2.2</code></pre><ul><li>演示：</li></ul><ol><li>列表1</li><li>列表2<ol><li>列表2.1<ol><li>列表2.1.1<ol><li>列表2.1.1.1</li></ol></li></ol></li><li>列表2.2</li></ol></li></ol><h4><span id="4-tian-jia-tu-pian">4.添加图片</span><a href="#4-tian-jia-tu-pian" class="header-anchor">.</a></h4><pre><code>![alt内容](images/github.png)![alt内容](图片url)![alt内容](images/github.png &quot;title光标悬停是显示&quot;)#改大小 以下只是方案 不是所有编辑器的都支持![alt内容](images/github.png){:width:30% hight:30%}![alt内容](images/github.png =30x30)&lt;img src=&quot;github.png&quot; style=&quot;zoom:50%&quot;&gt; #在md文件中HTML代码直接转为HTML实体</code></pre><p><img src="/2020/05/15/15918/github.png" alt="Markdown语法" title="title:Markdown语法"></p><img src="/2020/05/15/15918/github.png" style="zoom:20%;" alt="采用HTML标签"><h4><span id="5-lian-jie">5.链接</span><a href="#5-lian-jie" class="header-anchor">.</a></h4><pre><code>[显示文字](网页url)[github](https://github.com)</code></pre><p><a href="https://github.com" target="_blank" rel="noopener">github</a></p><h4><span id="6-yin-yong">6.引用</span><a href="#6-yin-yong" class="header-anchor">.</a></h4><pre><code>&gt; 引用的内容</code></pre><blockquote><p>引用的内容</p></blockquote><h4><span id="7-fen-ge-fu">7.分割符</span><a href="#7-fen-ge-fu" class="header-anchor">.</a></h4><pre><code>--- 连字符***星号___下划线</code></pre><hr><p>连字符</p><hr><p>星号</p><hr><p>下划线</p><h4><span id="8-xing-nei-dai-ma">8.行内代码</span><a href="#8-xing-nei-dai-ma" class="header-anchor">.</a></h4><pre><code>这个就是 `行内代码` 吗？</code></pre><p>这个就是 <code>行内代码</code> 吗？</p><h4><span id="9-dai-ma-kuai">9.代码块</span><a href="#9-dai-ma-kuai" class="header-anchor">.</a></h4><pre><code>​```我是代码块内容​```#语法高亮 在上吗的符号后 加上高亮显示的语言​```javascript    var id = document.getElementById(&quot;id&quot;);​```</code></pre><pre><code>我是代码块内容</code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4><span id="10-dai-ma-kuai-class-mpe-kuo-zhan-de-te-xing">10.代码块class （MPE扩展的特性）</span><a href="#10-dai-ma-kuai-class-mpe-kuo-zhan-de-te-xing" class="header-anchor">.</a></h4><pre><code>#给代码块设置 class​```javascript {.class1 .class}    var id = document.getElementById(&quot;id&quot;);​```</code></pre><pre><code>#你想要显示代码行数，只需填加 line-numbers class 即可​```javascript {.line-numbers}    var id = document.getElementById(&quot;id&quot;);​```#高亮代码行数 添加 highlight  //typora不支持​```javascript {highlight=10}    var id = document.getElementById(&quot;id&quot;);    var id = document.getElementById(&quot;id&quot;);    var id = document.getElementById(&quot;id&quot;);    var id = document.getElementById(&quot;id&quot;);    var id = document.getElementById(&quot;id&quot;);    var id = document.getElementById(&quot;id&quot;);    var id = document.getElementById(&quot;id&quot;);    var id = document.getElementById(&quot;id&quot;);​```</code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> id <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4><span id="11-ren-wu-lie-biao">11.任务列表</span><a href="#11-ren-wu-lie-biao" class="header-anchor">.</a></h4><pre><code>- [x] 任务失败- [ ]任务成功</code></pre><ul><li><input checked disabled type="checkbox"> 任务失败</li><li><input disabled type="checkbox"> 任务成功</li></ul><h4><span id="12-biao-ge">12.表格</span><a href="#12-biao-ge" class="header-anchor">.</a></h4><pre><code>head1 | head2-----:|:-----:cell1 | cell2cell3 | cell4#可以HTML的table标签替换拓展:-----: 居中:-----    居左 默认 -----:    居右</code></pre><table><thead><tr><th align="right">head1</th><th align="center">head2</th></tr></thead><tbody><tr><td align="right">cell1</td><td align="center">cell2</td></tr><tr><td align="right">cell3</td><td align="center">cell4</td></tr></tbody></table><h4><span id="13-emoji">13.Emoji</span><a href="#13-emoji" class="header-anchor">.</a></h4><pre><code>:smile::horse::fa-car:</code></pre><p>:smile:<br>:horse:</p><p>:fa-car:</p><blockquote><p><a href="https://www.webfx.com/tools/emoji-cheat-sheet/" target="_blank" rel="noopener">Emoji</a></p></blockquote><h4><span id="14-shang-biao-xia-biao-jiao-zhu-suo-lue-zhu-shi">14.上标 下标 脚注 缩略 注释</span><a href="#14-shang-biao-xia-biao-jiao-zhu-suo-lue-zhu-shi" class="header-anchor">.</a></h4><pre><code>#上标30^2^#下标H~2~O#脚注一个具有注脚的文本。[^2][^2]: 注脚的解释#缩略_[HTML]:Hyper Text Markup Language_[W3C]:World Wide Web Consortium#注释*[HTML]:超文本标记语言</code></pre><p>30^2^</p><p>H<del>2</del>O</p><p>一个具有注脚的文本。<a href="注脚的解释">^2</a></p><p>_[HTML]:Hyper Text Markup Language<br>_[W3C]:World Wide Web Consortium</p><p>*[HTML]:超文本标记语言</p><h4><span id="15-shu-xue-gong-shi-katex">15.数学公式 KaTeX</span><a href="#15-shu-xue-gong-shi-katex" class="header-anchor">.</a></h4><p>==vscode==的Markdown Preview Enhanced：支持 KaTex 和 MathJax</p><img src="/2020/05/15/15918/math1.png" alt="preview" style="zoom:50%;"><blockquote><p>katex使用参考 <a href="https://khan.github.io/KaTeX/function-support.html" target="_blank" rel="noopener">https://khan.github.io/KaTeX/function-support.html</a></p></blockquote><h4><span id="16-shu-xue-gong-shi-mathjax">16.数学公式 MathJax</span><a href="#16-shu-xue-gong-shi-mathjax" class="header-anchor">.</a></h4><p>==Typora==使用的是</p><blockquote><p>使用参考 <a href="https://support.typora.io/Math/" target="_blank" rel="noopener">https://support.typora.io/Math/</a></p></blockquote><h4><span id="17-tu-xiang">17.图像</span><a href="#17-tu-xiang" class="header-anchor">.</a></h4><blockquote><p><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/diagrams" target="_blank" rel="noopener">略</a></p></blockquote><h4><span id="18-mu-lu-lie-biao-toc">18.目录列表(TOC)</span><a href="#18-mu-lu-lie-biao-toc" class="header-anchor">.</a></h4><blockquote><p><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/toc" target="_blank" rel="noopener">略</a></p></blockquote><p>个人还是喜欢 typora的快捷方式</p><h4><span id="19-dao-ru-wen-jian-typora-bu-zhi-chi">19.导入文件(typora不支持)</span><a href="#19-dao-ru-wen-jian-typora-bu-zhi-chi" class="header-anchor">.</a></h4><pre><code>@import &quot;文件路径&quot;@import &quot;images/github.png&quot;</code></pre><p>@import “1.csv”</p><p>@import “1.c”</p><p>@import “1”</p><h5><span id="zhi-chi-de-wen-jian">支持的文件</span><a href="#zhi-chi-de-wen-jian" class="header-anchor">.</a></h5><p>.jpeg(.jpg), .gif, .png, .apng, .svg, .bmp 文件将会直接被当作 markdown 图片被引用。<br>.csv 文件将会被转换成 markdown 表格。<br>.mermaid 将会被 mermaid 渲染。<br>.dot 文件将会被 viz.js (graphviz) 渲染。<br>.plantuml(.puml) 文件将会被 PlantUML 渲染。<br>.html 将会直接被引入。<br>.js 将会被引用为 <script src="你的 js 文件"></script>。<br>.less 和 .css 将会被引用为 style。目前 less 只支持本地文件。.css 文件将会被引用为 <link rel="stylesheet" href="你的 css 文件">。<br>.pdf 文件将会被 pdf2svg 转换为 svg 然后被引用。<br>markdown 将会被分析处理然后被引用。<br>其他所有的文件都将被视为代码块</p><h5><span id="she-zhi-tu-pian">设置图片</span><a href="#she-zhi-tu-pian" class="header-anchor">.</a></h5><pre><code>    @import &quot;test.png&quot; {width=&quot;300px&quot; height=&quot;200px&quot; title=&quot;图片的标题&quot; alt=&quot;我的 alt&quot;}</code></pre><h5><span id="qi-ta">其他</span><a href="#qi-ta" class="header-anchor">.</a></h5> <img src="/2020/05/15/15918/import.png" alt="import" style="zoom: 50%;"><h4><span id="20-huan-deng-pian">20.幻灯片</span><a href="#20-huan-deng-pian" class="header-anchor">.</a></h4><blockquote><p><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/presentation" target="_blank" rel="noopener">https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/presentation</a></p></blockquote><h4><span id="21-pandoc">21.PanDoc</span><a href="#21-pandoc" class="header-anchor">.</a></h4><blockquote><p><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/pandoc" target="_blank" rel="noopener">https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/pandoc</a></p></blockquote><h4><span id="22-zi-ding-yi-lie-biao-typora-bu-zhi-chi">22.自定义列表（typora不支持）</span><a href="#22-zi-ding-yi-lie-biao-typora-bu-zhi-chi" class="header-anchor">.</a></h4><pre><code>tags:: flower: grassAuthors : lmk: liuminkai</code></pre><p>tags:</p><p>: flower</p><p>: grass</p><p>Authors </p><p>: lmk</p><p>: liuminkai</p><h4><span id="23-gan-te-tu-typora-xian-shi-de-hao-kan">23.甘特图(typora显示的好看)</span><a href="#23-gan-te-tu-typora-xian-shi-de-hao-kan" class="header-anchor">.</a></h4><p>gantt<br>        dateFormat  YYYY-MM-DD<br>        title Adding GANTT diagram functionality to mermaid<br>        section 现有任务<br>        已完成               :done,    des1, 2014-01-06,2014-01-08<br>        进行中               :active,  des2, 2014-01-09, 3d<br>        计划一               :         des3, after des2, 5d<br>        计划二               :         des4, after des3, 5d</p><pre class="mermaid">gantt        dateFormat  YYYY-MM-DD        title Adding GANTT diagram functionality to mermaid        section 现有任务        已完成               :done,    des1, 2014-01-06,2014-01-08        进行中               :active,  des2, 2014-01-09, 3d        计划一               :         des3, after des2, 5d        计划二               :         des4, after des3, 5d</pre><blockquote><p><a href="https://mermaidjs.github.io/#/" target="_blank" rel="noopener">甘特图语法</a></p></blockquote><h4><span id="24-uml-tu">24.UML图</span><a href="#24-uml-tu" class="header-anchor">.</a></h4><p>sequenceDiagram<br>张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?<br>李四–&gt;&gt;王五: 你最近怎么样，王五？<br>李四–x 张三: 我很好，谢谢!<br>李四-x 王五: 我很好，谢谢!<br>Note right of 王五: 李四想了很长时间, 文字太长了<br>不适合放在一行.</p><p>李四–&gt;&gt;张三: 打量着王五…<br>张三-&gt;&gt;王五: 很好… 王五, 你怎么样?</p><pre class="mermaid">sequenceDiagram张三 ->> 李四: 你好！李四, 最近怎么样?李四-->>王五: 你最近怎么样，王五？李四--x 张三: 我很好，谢谢!李四-x 王五: 我很好，谢谢!Note right of 王五: 李四想了很长时间, 文字太长了<br>不适合放在一行.李四-->>张三: 打量着王五...张三->>王五: 很好... 王五, 你怎么样?</pre><blockquote><p><a href="https://mermaidjs.github.io/#/" target="_blank" rel="noopener">Mermaid语法</a></p></blockquote><h4><span id="25-liu-cheng-tu">25.流程图</span><a href="#25-liu-cheng-tu" class="header-anchor">.</a></h4><p>graph LR<br>A[长方形] – 链接 –&gt; B((圆))<br>A –&gt; C(圆角长方形)<br>B –&gt; D{菱形}<br>C –&gt; D</p><pre class="mermaid">graph LRA[长方形] -- 链接 --> B((圆))A --> C(圆角长方形)B --> D{菱形}C --> D</pre><blockquote><p><a href="https://mermaidjs.github.io/#/" target="_blank" rel="noopener">Mermaid语法</a></p></blockquote><h4><span id="flowchart-liu-cheng-tu-bu-zhi-dao-zhi-bu-zhi-chi">Flowchart流程图(不知道支不支持)</span><a href="#flowchart-liu-cheng-tu-bu-zhi-dao-zhi-bu-zhi-chi" class="header-anchor">.</a></h4><p>flowchat<br>st=&gt;start: 开始<br>e=&gt;end: 结束<br>op=&gt;operation: 我的操作<br>cond=&gt;condition: 确认？</p><p>st-&gt;op-&gt;cond<br>cond(yes)-&gt;e<br>cond(no)-&gt;op</p><pre class="mermaid">flowchatst=>start: 开始e=>end: 结束op=>operation: 我的操作cond=>condition: 确认？st->op->condcond(yes)->econd(no)->op</pre><blockquote><p><a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">Flowchart流程图语法</a></p></blockquote><hr><p>参考:</p><blockquote><p>Markdown Preview: <a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/" target="_blank" rel="noopener">https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/</a></p><p>CSDN:<a href="https://editor.csdn.net/md/#fn2" target="_blank" rel="noopener">https://editor.csdn.net/md/#fn2</a></p><p>Typora:<a href="https://support.typora.io/" target="_blank" rel="noopener">https://support.typora.io/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的常用快捷键Win10</title>
      <link href="/2020/05/15/12485.html"/>
      <url>/2020/05/15/12485.html</url>
      
        <content type="html"><![CDATA[<h2><span id="wo-de-chang-yong-kuai-jie-jian-win10-chu-yi-xie-jian-wai-ru-ctrl-c-ctrl-v">我的常用快捷键Win10 除一些键外（如Ctrl+C、Ctrl+v）</span><a href="#wo-de-chang-yong-kuai-jie-jian-win10-chu-yi-xie-jian-wai-ru-ctrl-c-ctrl-v" class="header-anchor">.</a></h2><table>    <tr>        <th>按键</th>        <th>操作</th>    </tr>    <tr><td>Win+Ctrl+D</td><td>添加虚拟桌面</td></tr>    <tr><td>Win+Ctrl+←/→</td><td>虚拟桌面的切换</td></tr>    <tr><td>Win+Ctrl+F4</td><td>关闭当前虚拟桌面</td></tr>    <tr><td>Win+Tab</td><td>打开任务视图</td></tr>    <tr><td>Win+L</td><td>锁定电脑</td></tr>    <tr><td>Win+D</td><td>显示和隐藏桌面</td></tr>    <tr><td>Win+E</td><td>打开文件资源管理器</td></tr>    <tr><td>Win+I</td><td>打开设置</td></tr>    <tr><td>Win+L</td><td>锁定电脑</td></tr>    <tr><td>Win+M</td><td>最小化所有窗口</td></tr>    <tr><td>Win+Shift+M</td><td>还原最小化所有窗口</td></tr>    <tr><td>Win+R</td><td>打开运行对话框</td></tr>    <tr><td>Win+S</td><td>打开搜索</td></tr>    <tr><td>Win+V</td><td>查看剪切板</td></tr>    <tr><td>Win+.</td><td>打开表情符号面板</td></tr>    <tr><td>Win+;</td><td>打开表情符号面板</td></tr>    <tr><td>Win+,</td><td>临时速览桌面</td></tr>    <tr><td>Win+↑</td><td>加大窗口/窗口向上变形</td></tr>    <tr><td>Win+↓</td><td>减小窗口/窗口向下变形</td></tr>    <tr><td>Win+←</td><td>窗口向左变形</td></tr>    <tr><td>Win+→</td><td>窗口向右变形</td></tr>    <tr><td>---</td><td>---</td></tr>    <tr><td>F5</td><td>刷新活动界面</td></tr>    <tr><td>Alt+Page up</td><td>向上移动一个屏幕</td></tr>    <tr><td>Alt+Page down</td><td>向下移动一个屏幕</td></tr>    <tr><td>Alt+←</td><td>返回</td></tr>    <tr><td>Alt+→</td><td>前进</td></tr>    <tr><td>Alt+Tab</td><td>在应用之间切换</td></tr>    <tr><td>Alt+F4</td><td>关闭活动项</td></tr>    <tr><td>Alt+Enter</td><td>查看所选项目的属性</td></tr>    <tr><td>Ctrl+Shift+Esc</td><td>打开任务管理器</td></tr>    <tr><td>Ctrl+Alt+Del</td><td>reboot</td></tr></table><p><a href="https://blog.csdn.net/weixin_41225491/article/details/80060576?utm_source=app" target="_blank" rel="noopener">参考</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first</title>
      <link href="/2020/05/13/39056.html"/>
      <url>/2020/05/13/39056.html</url>
      
        <content type="html"><![CDATA[<h1><span id="zhe-shi-wo-de-di-yi-ci-xie-bo-ke-ye-shi-di-yi-ci-shi-yong-hexo-githubpages-da-jian-bo-ke-wo-jiang-hui-shi-yong-gai-bo-ke-ji-lu-wo-de-xue-xi-guo-cheng-he-ji-zhu-fen-xiang-xi-wang-jiang-lai-de-mei-yi-tian-hui-yue-lai-yue-mei-hao-mei-tian-du-you-shou-huo">这是我的第一次写博客，也是第一次使用hexo+githubPages搭建博客，我将会使用该博客记录我的学习过程和技术分享，希望将来的每一天会越来越美好，每天都有收获。</span><a href="#zhe-shi-wo-de-di-yi-ci-xie-bo-ke-ye-shi-di-yi-ci-shi-yong-hexo-githubpages-da-jian-bo-ke-wo-jiang-hui-shi-yong-gai-bo-ke-ji-lu-wo-de-xue-xi-guo-cheng-he-ji-zhu-fen-xiang-xi-wang-jiang-lai-de-mei-yi-tian-hui-yue-lai-yue-mei-hao-mei-tian-du-you-shou-huo" class="header-anchor">.</a></h1>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
